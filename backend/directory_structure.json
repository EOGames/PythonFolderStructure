{
    "type": "folder",
    "name": "read_dir",
    "children": [
        {
            "type": "folder",
            "name": "winkit-master",
            "children": [
                {
                    "type": "folder",
                    "name": "winkit-master",
                    "children": [
                        {
                            "type": "folder",
                            "name": "src",
                            "children": [
                                {
                                    "type": "folder",
                                    "name": "pages",
                                    "children": [
                                        {
                                            "type": "folder",
                                            "name": "Auth",
                                            "children": [
                                                {
                                                    "type": "folder",
                                                    "name": "ForgotPassword",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, {\n  memo, useEffect, useState,\n} from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {Button, Alert} from 'react-bootstrap';\nimport * as Antd from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { LayoutMax } from '../../../components/Layout';\nimport Header from '../../../components/Header';\nimport FormItem from '../../../components/FormItem';\nimport Input from '../../../components/AuthLayout/Input';\nimport Footer from '../../../components/AuthLayout/Footer';\nimport Link from '../../../components/AuthLayout/Link';\nimport { useAuth } from '../../../context/authContext';\nimport { TECHNICIAN,LANDING_PAGE_URL } from '../../../constants';\n// import StepButton from '../../../components/StepButton';\nimport DividerWrapper from '../../../components/AuthLayout/DividerWrapper';\nimport messages from './messages';\n// import { openNotificationWithIcon } from '../../../utils';\nfunction ForgotPassword() {\n  // const [step, setStep] = useState(0);\n  const step = 0;\n  const [isOpen, setIsOpen] = useState(false);\n  const [regType, setType] = useState('customer');\n  const [alertMessageShow, setAlertMesasgeShow] = useState(false);\n  const [alertMessage, setAlertMesasge] = useState('');\n  const [alertVariant, setAlertVariant] = useState('success');\n  const [showLoader, setShowLoader] = useState(false);\n\n  const history = useHistory();\n  const { user ,resetPasswordHandler } = useAuth();\n\n  useEffect(() => {\n    if (user && user.isPayment) {\n      history.push('/');\n    }\n    if (user && !user.isPayment) {\n      history.push('/registration');\n    }\n    if (user && user.newTech && user.type === TECHNICIAN) {\n      history.push('/welcome-technician');\n    }\n  }, [history, user]);\n\n  const onSendResetRequest = async(value) => {\n    // console.log(\"so this is the value\")\n    // openNotificationWithIcon('info', 'Info', \"Email Sent with Reset Password link\");\n    setShowLoader(true);\n    setAlertMesasgeShow(false);\n    let res = await resetPasswordHandler(value)\n    \n    if(res && res.success){\n      setAlertVariant('success')\n      setAlertMesasge('Email Sent with Reset Password link');\n      setAlertMesasgeShow(true);\n    }else{\n      setAlertVariant('danger')\n      setAlertMesasge(res.message);\n      setAlertMesasgeShow(true);\n    }\n    setShowLoader(false);\n    // history.push(\"/\")\n  };\n\n  const goToRegister = () => {\n    if (regType === 'customer') {\n      history.push('/customer/register');\n    } else {\n      history.push('/technician/register');\n    }\n  };\n  \n  return (\n    <Container>\n      <LayoutMax bg={\"transparent\"} className=\"background-transparent box-shadow-none\">\n       \n        <LayoutMax.Content className=\"items-center forgot-password register-page background-transparent\">\n         <Header link={LANDING_PAGE_URL} />\n\n          <DividerWrapper>\n            <Antd.Divider className=\"div-login\">Forgot Password</Antd.Divider>\n          </DividerWrapper>\n          {alertMessageShow &&\n            <Alert variant={alertVariant} className=\"w-100\">\n                {alertMessage}\n            </Alert>\n          }\n\n          <Antd.Form className=\"items-center\" onFinish={onSendResetRequest}>\n            <FormItem\n              name=\"email\"\n              rules={[\n                {\n                  type: 'email',\n                  message: <FormattedMessage {...messages.emailVail} />,\n                },\n                {\n                  required: true,\n                  message: <FormattedMessage {...messages.email} />,\n                },\n              ]}\n            >\n              <Input name=\"email\" size=\"small\" placeholder=\"Email\" onChange={()=>{setAlertMesasgeShow(false)}} />\n            </FormItem>\n\n\n            <Button type=\"primary\" htmlType=\"submit\" className=\"btn app-btn app-btn-small\" disabled={(showLoader ? true : false)}>\n              <span></span>\n              {showLoader \n                ?\n                  <Antd.Spin/>\n                :\n                  \"Submit\"\n              }\n            </Button>\n\n          </Antd.Form>\n          {step === 1 && <FormattedMessage {...messages.confirmRequest} />}\n          <div>\n            <Footer>\n              <span className=\"d-block\">\n                Need an Account?\n                &nbsp;              \n                <RegisterText onClick={() => setIsOpen(true)} title=\"Click to register new user.\" className=\"float-right\">\n                  Register here\n                </RegisterText>\n              </span>\n              <Antd.Modal\n                title=\"Pick Registration Type\"\n                visible={isOpen}\n                onOk={() => {}}\n                onCancel={() => setIsOpen(false)}\n                closable={false}\n                footer={[\n                  <Button key=\"back\" onClick={() => setIsOpen(false)} className=\"btn btn-default app-btn app-btn-light-blue modal-footer-btn\">\n                    <span></span>\n                    Close\n                  </Button>,\n                  <Button\n                    loading={false}\n                    onClick={goToRegister}\n\n                    className=\"btn app-btn btn-small modal-footer-btn\"\n                  >\n                    <span></span>\n                    Start\n                  </Button>,\n                ]}\n              >\n                <div\n                  style={{ width: '100%', display: 'flex', justifyContent: 'center' }}\n                >\n                  <Antd.Button\n                    type={regType === 'customer' ? 'primary' : 'default'}\n                    size=\"large\"\n                    onClick={() => setType('customer')}\n                    className=\"switch-btn-registration switch-btn-left\"\n                  >\n                    Customer\n                  </Antd.Button>\n                  <Antd.Button\n                    type={regType === 'developer' ? 'primary' : 'default'}\n                    size=\"large\"\n                    onClick={() => setType('developer')}\n                    className=\"switch-btn-registration switch-btn-right\"\n                  >\n                    Technician\n                  </Antd.Button>\n                </div>\n              </Antd.Modal>\n\n            <Link to=\"/login\">\n              <FormattedMessage {...messages.btnLogin} />\n            </Link>\n            </Footer>\n            \n          </div>\n        </LayoutMax.Content>\n        <div />\n      </LayoutMax>\n     </Container>\n  );\n}\n\nconst Container = styled.div`\n  width:20%;\n  margin: 0 auto;\n  @media screen and (max-width: 763px) {\n    width:80%\n  }\n`;\nconst RegisterText = styled.div`\n  cursor: pointer;\n  color: #1890ff;\n`;\n\n\nForgotPassword.propTypes = {};\n\nexport default memo(ForgotPassword);\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\ForgotPassword\\index.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "messages.js",
                                                            "fileData": "/*\n * ResetPasswordPage Messages\n *\n * This contains all the text for the ResetPasswordPage container.\n */\n\nimport { defineMessages } from 'react-intl';\n\nexport const scope = 'app.containers.LoginPage';\n\nexport const form = 'app.form.error';\n\nexport default defineMessages({\n  email: {\n    id: `${form}.email`,\n    defaultMessage: 'Please input your E-mail.',\n  },\n  emailVail: {\n    id: `${form}.emailVail`,\n    defaultMessage: 'Check the format of the email you entered!',\n  },\n  btnLogin: {\n    id: `${scope}.login`,\n    defaultMessage: 'Log In',\n  },\n  needAnAccount: {\n    id: `${scope}.needAnAccount`,\n    defaultMessage: 'Need an Account?',\n  },\n  register: {\n    id: `${scope}.register`,\n    defaultMessage: 'Register',\n  },\n  confirmRequest: {\n    id: `${scope}.confirmRequest`,\n    defaultMessage: 'Continue sending request to this email?',\n  },\n  forgotPassword : {\n    id:`${scope}.login`,\n    defaultMessage: 'Forgot Password',\n  }\n});\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\ForgotPassword\\messages.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Login",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useState } from 'react';\nimport {Button, Alert} from \"react-bootstrap\";\nimport * as Antd from 'antd';\n// import GoogleLogin from 'react-google-login';\n// import FacebookLogin from 'react-facebook-login';\nimport styled from 'styled-components';\n// import { FaFacebook } from 'react-icons/fa';\nimport { useHistory,useLocation } from 'react-router';\nimport { LayoutMax } from '../../../components/Layout';\nimport { LANDING_PAGE_URL } from '../../../constants';\nimport DividerWrapper from '../../../components/AuthLayout/DividerWrapper';\nimport FormItem from '../../../components/FormItem';\nimport InputPassword from '../../../components/AuthLayout/InputPassword';\nimport Input from '../../../components/AuthLayout/Input';\n// import Header from '../../../components/Header';\nimport Footer from '../../../components/AuthLayout/Footer';\nimport Link from '../../../components/AuthLayout/Link';\nimport { useAuth } from '../../../context/authContext';\n// import logo from '../../../assets/images/logo.png';\n// import GoogleLogin from 'react-google-login';\n// import {useTools} from '../../../context/toolContext';\nimport { openNotificationWithIcon } from '../../../utils';\nimport { SESSION_EXPIRE_MESSAGE } from '../../../constants';\nlet shown = false\nfunction LoginPage() {\n  const location = useLocation()\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [regType, setType] = useState('defaultSelect');\n  const [alertMessageShow, setAlertMesasgeShow] = useState(false);\n  const [alertMessage, setAlertMesasge] = useState('');\n  const [invalidUser, setInvalidUser] = useState(false);\n  // const {userDetails,setUserDetails} = useTools();\n  const [invalidPassword, setInvalidPassword] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  // const [forSocial,setForSocial] = useState(false)\n  // const [socialData,setSocialData] =  useState(false)\n  let posTedJobId = false\n  let isMobilePost = false\n  let detailsJobId  = false\n  let jobStatus  = false\n  let slackJobid = false\n  let message = false\n  let customerId = false\n  let params = new URLSearchParams(location.search)\n  if(params.get(\"job-id\")){\n    posTedJobId = params.get(\"job-id\")\n    isMobilePost = params.get(\"isMobilePost\")\n  }\n\n  if(params.get(\"slackJobid\")){\n    slackJobid = params.get(\"slackJobid\")\n  }\n\n  if(params.get(\"message\")){\n    message = params.get(\"message\")\n  }\n\n  if(params.get(\"customerId\")){\n    customerId = params.get(\"customerId\")\n  }\n\n  if(params.get(\"jobId\")){\n    detailsJobId = params.get(\"jobId\")\n  }\n  if(params.get(\"status\")){\n    jobStatus = params.get(\"status\")\n  }\n  const { login} = useAuth();\n  const history = useHistory();\n\n  if(params.get(\"session_expire\")){\n    if(!shown){\n      console.log('session_expire yessssss')\n      openNotificationWithIcon('error', 'Error', SESSION_EXPIRE_MESSAGE); \n      shown = true\n    }\n\n  }\n\n\n  \n  const onSubmit = async (values) => {\n    setShowLoader(true)\n    setAlertMesasgeShow(false)\n    setInvalidUser(false);\n    setInvalidPassword(false); \n    values['jobId'] = detailsJobId\n    values['status']= jobStatus\n    values['slackJobid']=slackJobid\n    values['message']=message\n    values['customerId']=customerId\n    let res = await login(values,posTedJobId, isMobilePost);\n    if(res && !res.success){\n      if(res.inputError){\n        if(res.userError){\n          setInvalidUser(true);\n        }\n        if(res.passwordError){\n          setInvalidPassword(true); \n        }\n        setAlertMesasge(res.error)\n        setShowLoader(false);\n      }else{\n        setAlertMesasgeShow(true)\n        setAlertMesasge(res.error)\n        setShowLoader(false);\n      }\n    }\n    if(res === undefined){\n      setAlertMesasgeShow(true)\n      setAlertMesasge(\"Something went wrong. Please Reload your page.\")\n      setShowLoader(false);\n    }\n  };\n  /*const handleSocialLogin = ()=>{\n    setIsOpen(false)\n  }*/\n  const goToRegister = () => {\n    if (regType === 'customer' || regType === \"defaultSelect\") {\n      history.push('/customer/register');\n    } else {\n      history.push('/technician/register');\n    }\n  };\n\n  return (\n    <Container>\n\n      <a href={LANDING_PAGE_URL}>\n        <Image src=\"https://winkit-software-images.s3.amazonaws.com/geeker_logo.png\" alt=\"Geeker\" />\n\n      </a>\n      <LayoutMax bg={\"transparent\"} style={{backgroundColor:\"transparent\"}} className=\"box-shadow-none\">\n        \n        <LayoutMax.Content className=\"items-center login-page-outer register-page\" style={{backgroundColor:\"transparent\"}}>\n          <Antd.Form className=\"items-center\" onFinish={onSubmit}>\n            <DividerWrapper>\n              <Antd.Divider className=\"div-login\">Login</Antd.Divider>\n            </DividerWrapper>\n            {alertMessageShow &&\n              <Alert variant=\"danger\" className=\"w-100\">\n                  {alertMessage}\n              </Alert>\n            }\n            <FormItem\n              name=\"email\"\n              rules={[\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!',\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail.',\n                },\n              ]}\n            >\n              <Input \n                name=\"email\" \n                size=\"large\" \n                placeholder=\"Email\" \n                className={\"email-login-class\" + (invalidUser ? ' red-border-bottom' : '')}\n                onChange={()=>{\n                  setAlertMesasgeShow(false)\n                  setInvalidUser(false);\n                  setInvalidPassword(false); \n              }}/>\n            </FormItem>\n            {invalidUser && \n              <div className=\"input-error-msg\">{alertMessage}</div>\n            }\n            <FormItem\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your Password!',\n                },\n              ]}\n            >\n              <InputPassword\n                name=\"password\"\n                size=\"large\"\n                placeholder=\"Password\" \n                className={(invalidPassword ? ' red-border-bottom-input' : '')}\n                onChange={()=>{\n                  setAlertMesasgeShow(false)\n                  setInvalidUser(false);\n                  setInvalidPassword(false); \n                }}\n              />\n            </FormItem>\n            {invalidPassword &&\n              <div className=\"input-error-msg\">{alertMessage}</div>\n            }\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              className=\"btn app-btn btn-login\"\n              disabled={(showLoader ? true : false)}\n            >\n              <span></span>\n              \n              {showLoader \n                ?\n                  <Antd.Spin/>\n                :\n                  \"Log In\"\n              }\n            </Button>\n           {/* <GoogleLogin\n                  clientId={GOOGLE_CLIENT_ID}\n                  buttonText=\"Login with google\"\n                  render={renderProps => (\n                    <button className=\"btn app-btn\" >Login with google</button>\n                  )}\n                  onSuccess={responseGoogle}\n                  onFailure={responseGoogle}\n                  cookiePolicy={'single_host_origin'}\n                >\n                <span></span>\n            </GoogleLogin>*/}\n\n          </Antd.Form>\n          <div>\n            <Footer>\n              <span className=\"d-block\">\n                Need an Account?\n                &nbsp;              \n                <RegisterText onClick={() => setIsOpen(true)} title=\"Click to register new user.\" className=\"float-right\">\n                  Register here\n                </RegisterText>\n              </span>\n            </Footer>\n            <Link to=\"/forgot-password\" title=\"Click to set new password for your account.\">\n              Forgot password\n            </Link>\n          </div>\n        </LayoutMax.Content>\n      </LayoutMax>\n      <Antd.Modal\n        title=\"Pick Registration Type\"\n        visible={isOpen}\n        onOk={() => {}}\n        onCancel={() => setIsOpen(false)}\n        closable={false}\n        footer={[\n          <Button key=\"back\" onClick={() => setIsOpen(false)} className=\"btn btn-default app-btn app-btn-light-blue modal-footer-btn\">\n            <span></span>\n            Close\n          </Button>,\n          <Button\n            loading={'false'}\n            onClick={goToRegister}\n            key=\"start\"\n            className=\"btn app-btn btn-small modal-footer-btn\"\n          >\n            <span></span>\n            Start\n          </Button>,\n        ]}\n      >\n        <div\n          style={{ width: '100%', display: 'flex', justifyContent: 'center' }}\n        >\n          <Antd.Button\n            type={(regType === 'defaultSelect' || regType === 'customer')   ? 'primary' : 'default'}\n            size=\"large\"\n            onClick={() => setType('customer')}\n            className=\"switch-btn-registration switch-btn-left\"\n          >\n            Customer\n          </Antd.Button>\n          <Antd.Button\n            type={regType === 'developer' ? 'primary' : 'default'}\n            size=\"large\"\n            onClick={() => setType('developer')}\n            className=\"switch-btn-registration switch-btn-right\"\n          >\n            Technician\n          </Antd.Button>\n        </div>\n      </Antd.Modal>\n    </Container>\n  );\n}\n\nconst RegisterText = styled.div`\n  cursor: pointer;\n  color: #1890ff;\n  @media screen and (max-width: 295px) {\n    text-align: center;\n    width:100%\n  }\n`;\n\nconst Container = styled.div`\n  width:20%;\n  margin: 0 auto;\n  @media screen and (max-width: 991px) {\n    width:35%\n  }\n  @media screen and (max-width: 763px) {\n    width:80%\n  }\n   & .ant-input-suffix {\n  margin-left:0px !important;\n  border-bottom: 2px #d0d0d0 solid;\n }\n`;\nconst Image = styled.img`\n  display: block;\n  margin: auto;\n  margin-top:10%\n`;\n\n\nLoginPage.propTypes = {};\n\nexport default LoginPage;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\Login\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "ResetPassword",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { memo, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport * as Antd from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport H1 from '../../../components/common/H1';\n import { useLocation  } from 'react-router';\nimport messages from './messages';\nimport styled from 'styled-components';\n// import queryString from 'query-string';\nimport { LayoutMax } from '../../../components/Layout';\nimport Header from '../../../components/NewHeader';\nimport FormItem from '../../../components/FormItem';\nimport InputPassword from '../../../components/AuthLayout/InputPassword';\nimport Footer from '../../../components/AuthLayout/Footer';\nimport Link from '../../../components/AuthLayout/Link';\nimport { useAuth } from '../../../context/authContext';\nimport { openNotificationWithIcon } from '../../../utils';\nfunction ChagePasswordPage() {\n  const {ChangePasswordHandler} = useAuth()\n  // const [token, setToken] = useState('');\n  const loading = false;\n  // const {t} = useParams();\n  const isValidToken = true;\n  const location = useLocation()\n  const history = useHistory();\n  let tk = ''\n  \n\n  const onSendResetRequest = value => {\n    console.log(\">>>!>>>!!>>>>\")\n    onResetCall();\n\n     if(location.search){\n    let params = new URLSearchParams(location.search)\n    \n   tk = params.get('t')\n   ChangePasswordHandler({ ...value, token:tk })\n   openNotificationWithIcon('success', 'Success', \"Your Password has been successfully changed\");\n   history.push(\"/\")\n\n   }\n\n    \n  };\n\n  /*const verifyToken = useCallback(\n    value => {\n    },\n    [],\n  );*/\n\n  const onResetCall = useCallback(\n    value => {\n    },\n    [],\n  );\n\n  return (\n    <Container>\n      <LayoutMax bg=\"transparent\">\n        <Header link=\"/\" />\n        <LayoutMax.Content className=\"items-center\">\n          {loading && (\n            <H1>\n              <FormattedMessage {...messages.loading} />\n            </H1>\n          )}\n          {!loading && !isValidToken && (\n            <H1>\n              <FormattedMessage {...messages.notValidToken} />\n            </H1>\n          )}\n          {!loading && isValidToken && (\n          <React.Fragment key=\"isValidToken\">\n              <Antd.Form className=\"items-center\" onFinish={onSendResetRequest}>\n                <FormItem\n                  name=\"password\"\n                  label=\"Password:\"\n                  className=\"d-flex flex-column\"\n                  rules={[\n                    () => ({\n                      validator(_, value) {\n                        const re = /^(?=.*[a-z])(?=.*[0-9])(?=.*[\\^$*.[\\]{}()?\\-\u201c!@#%&/,><\u2019:;|_~`])\\S{6,99}$/;\n                        if (!re.test(String(value))) {\n                          return Promise.reject(\n                            new Error(\n                              'Passwords must include at least six numbers, letters, and special characters (like ! and &)',\n                            ),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    }),\n                  ]}\n                >\n                  <InputPassword\n                    name=\"password\"\n                    size=\"large\"\n                    placeholder=\"Password\"\n                    border=\"0px none\"\n                    borderbottom = \"1px solid gray\"\n                    border_radius = \"0px\"\n                  />\n                </FormItem>\n                <FormItem\n                  name=\"confrim_password\"\n                  label=\"Confirm Password:\"\n                  className=\"d-flex flex-column\"\n                  rules={[\n                    ({ getFieldValue }) => ({\n                      validator(_, value) {\n                        if (!value || getFieldValue('password') === value) {\n                          return Promise.resolve();\n                        }\n                        return Promise.reject(\n                          new Error(\n                            'The two passwords that you entered do not match!',\n                          ),\n                        );\n                      },\n                    }),\n                  ]}\n                >\n                  <InputPassword\n                    name=\"confirmPassword\"\n                    size=\"large\"\n                    placeholder=\"Confirm Password\"\n                    border=\"0px none\"\n                    borderbottom = \"1px solid gray\"\n                    border_radius = \"0px\"\n                  />\n                </FormItem>\n                <button\n                  type=\"Primary\"\n                  size = \"large\"\n                  className=\"app-btn\"\n                  htmlType=\"submit\"\n                   loading={loading}\n                >\n                  Reset\n                </button>\n              </Antd.Form>\n              </React.Fragment>\n          )}\n          <div>\n            <Footer>\n              <span>\n                <FormattedMessage {...messages.needAnAccount} />\n                &nbsp;\n              </span>\n              <Link to=\"/register\">\n                <FormattedMessage {...messages.register} />\n              </Link>\n            </Footer>\n            <Link to=\"/login\">\n              <FormattedMessage {...messages.btnLogin} />\n            </Link>\n          </div>\n        </LayoutMax.Content>\n        <div />\n      </LayoutMax>\n    </Container>\n  );\n}\n\n\nconst Container = styled.div`\n  width:40%;\n  margin: 0 auto;\n`;\n\n\nChagePasswordPage.propTypes = {};\n\nexport default memo(ChagePasswordPage);\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\ResetPassword\\index.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "messages.js",
                                                            "fileData": "import { defineMessages } from 'react-intl';\n\nexport const scope = 'app.containers.LoginPage';\n\nexport const form = 'app.form.error';\n\nexport default defineMessages({\n  btnReset: {\n    id: `${scope}.btnReset`,\n    defaultMessage: 'Reset Password',\n  },\n  btnLogin: {\n    id: `${scope}.login`,\n    defaultMessage: 'Log In',\n  },\n  needAnAccount: {\n    id: `${scope}.needAnAccount`,\n    defaultMessage: 'Need an Account?',\n  },\n  register: {\n    id: `${scope}.register`,\n    defaultMessage: 'Register',\n  },\n  loading: {\n    id: `${scope}.loading`,\n    defaultMessage: 'loading',\n  },\n  notValidToken: {\n    id: `${scope}.notValidToken`,\n    defaultMessage: 'Token is already expired',\n  },\n});\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\ResetPassword\\messages.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "VerifyEmail",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React ,{useEffect} from 'react';\n// import styled from 'styled-components';\n// import { LayoutMax } from '../../../components/Layout';\n// import Success from '../../../assets/images/circle-tick.jpg';\n import { useLocation  } from 'react-router';\n // import { useHistory } from 'react-router-dom';\n import { openNotificationWithIcon } from '../../../utils';\n import {useAuth} from '../../../context/authContext'\nconst EmailVerification = ()=>{\n\tlet tk = ''\n\tconst {user,updateUserInfo } = useAuth()\n\tconst location = useLocation()\n\t// const history = useHistory();\n\n\tconst handleVerificationEmail = async()=>{\n\n\t\tif(location.search){\n    \tlet params = new URLSearchParams(location.search)\n\t   \ttk = params.get('t')\n\n\t   \t\tif(user.emailVerifyToken === tk){\n\t   \t\tawait updateUserInfo({\"userId\":user.id,\"verified\":true})\n\t   \t\topenNotificationWithIcon('success', 'Success', \"Email Verified\");\n\t   \t}\n\t   \telse{\n\t   \t\topenNotificationWithIcon('error', 'Error', \"Link Expired\");\n\t   \t}\n\t   \t\n\t   \t\n\t   \t// history.push(\"/\")\n\t   \tsetTimeout(()=>{\n\t   \t\twindow.location.href = \"/\"\n\t   \t},1000)\n\n   }\n\n\n\t}\n\n\tuseEffect(()=>{\n\t\t\thandleVerificationEmail()\n\t},[user])\n\n\treturn(<></>)\n}\n\n/*const Container = styled.div`\n  width:40%;\n  margin: 0 auto;\n  margin-top:30px;\n  box-shadow: 5px 4px 13px 1px rgba(0,0,0,0.75);\n-webkit-box-shadow: 5px 4px 13px 1px rgba(0,0,0,0.75);\n-moz-box-shadow: 5px 4px 13px 1px rgba(0,0,0,0.75);\n`;*/\n\n\nexport default EmailVerification;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Auth\\VerifyEmail\\index.js"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "folder",
                                            "name": "Customer",
                                            "children": [
                                                {
                                                    "type": "folder",
                                                    "name": "AcceptJob",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport Spinner from '../../../components/Spinner';\nimport { useJob } from '../../../context/jobContext';\nimport InviteTech from './steps/InviteTech';\nimport {useAuth} from  '../../../context/authContext';\n// import ProposalList from './steps/ProposalList';\nconst AcceptJob = () => {\n  const { jobId } = useParams();\n  const { job, fetchJob } = useJob();\n  const {user,updateUserInfo,refetch} = useAuth();\n  // const [step,setStep] = useState(0);\n  const step = 0;\n\n  useEffect(() => {\n    fetchJob(jobId);\n  }, [jobId]);\n\n  if (!job) return <Spinner />;\n\n  return (\n    <div className=\"w-85\">\n      {/* {step==0 && <ProposalList step={step} setStep={setStep} user={user} job={job} />} */}\n      {step===0 && <InviteTech user={user} refetch={refetch} updateUserInfo = {updateUserInfo} job={job} />}\n    </div>\n  );\n};\n\nexport default AcceptJob;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "DialInOutModal.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport { Modal as AntModal, Typography, Form, Input } from 'antd';\nimport {Button} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Box from '../../../../components/common/Box';\nimport PhoneInput from 'react-phone-input-2';\nimport { JITSI_URL } from '../../../../constants';\nimport {DashboardTab,DashboardTabPane} from '../../../../components/Dashboard/Tabs';\nimport * as TypeServiceApi from '../../../../api/typeService.api';\nimport { openNotificationWithIcon } from 'utils';\nimport { useUser } from '../../../../context/useContext';\nimport mixpanel from 'mixpanel-browser';\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\n\nconst DialInOutModal = ({ isOpen, onClose, enableComputerAudio, disableComputerAudio,setInvitation,setInvitedNumber,JobId,setIsDialInOutModalOpen}) => {\n  // const [isPhoneSelected, setIsPhoneSelected] = useState(false);\n  const isPhoneSelected = false;\n  // const [selectedBtn, setSelectedBtn] = useState('computerAudio');\n  const [editPhone,setEditPhone] = useState(false)\n  const [form] = Form.useForm();\n  const {user} = useUser();\n\n  const modalBtnClicked=(btnType)=>{\n  \t// console.log('editPhone>>>>>>>>>>',editPhone)\n\t\n\tif(editPhone){\n\t\t\n\t\tif (isPossiblePhoneNumber(editPhone) === false && isValidPhoneNumber(editPhone) === false) {\n\t\t\t\t// return \n\t\t\t\topenNotificationWithIcon('error', 'Error', 'Not a valid Phone Number');\n\t\t\t\treturn false;\n\t\t}\n\t\tsetInvitedNumber(editPhone)\n\t\tsetInvitation(true)\n\t\tlet tempEditPhone = editPhone.substring(0, editPhone.length-10)\n\t\tsetEditPhone(tempEditPhone)\n\t\tsetIsDialInOutModalOpen(false)\n\t\topenNotificationWithIcon('success', 'Success', 'User has been invited on phone.');\n\t\tif(user.userType  === 'technician'){\n           // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician - Phone invited',{'JobId':JobId});\n          // mixpanel code//\n\n      }else{\n          // mixpanel code//\n          mixpanel.identify(user.email);\n          mixpanel.track('Customer -  Phone invited',{'JobId':JobId});\n          // mixpanel code//\n      }      \n\t}else{\n\t\topenNotificationWithIcon('error', 'Error', 'Please input a number.');\n\t}\n\n  }\n\n\n\n  const onFinish = async (values) => {\n\n\t// console.log('Success:', values,JobId);\n    if(values && values['email']){\n      const jobIdSplit = JobId.split(\"_\");\n      let link = JITSI_URL.FULL_URL+jobIdSplit[1]\n      await TypeServiceApi.sendJitsiInvitation({'email':values['email'],'link':link});\n      setIsDialInOutModalOpen(false)\n      openNotificationWithIcon('success', 'Success', 'Meeting link has been sent!.');\n      if(user.userType  === 'technician'){\n               // mixpanel code//\n                mixpanel.identify(user.email);\n                mixpanel.track('Technician - Email invited',{'JobId':JobId});\n              // mixpanel code//\n\n          }else{\n              // mixpanel code//\n              mixpanel.identify(user.email);\n              mixpanel.track('Customer -  Email invited',{'JobId':JobId});\n              // mixpanel code//\n       }    \n      }else{\n\t\topenNotificationWithIcon('error', 'Error', 'Please input a email.');\n\t}\n\n\n  };\n\n  const onFinishFailed = (errorInfo) => {\n\tconsole.log('Failed:', errorInfo);\n  };\n\n\n  return (\n\t<div>\n\t  <Modal visible={isOpen} onCancel={onClose} footer={false} bodyStyle={{height:290}} maskClosable={false} width={400} title=\"Invite more people\" className=\"invite_user_modal\">\n\t  <DashboardTab>\n\t\t<DashboardTabPane tab=\"Phone\" key=\"1\">\n\t\t  <Box>\n\t\t\t<Label className=\"steplable\">Invite your contacts</Label>\n\t\t\t<CallDiv>\n\t\t\t<div className=\"d-flex justify-content-between w-100\">\n\t\t\t  <PhoneInput\n\t\t\t\t\t\tcountry=\"us\"\n\t\t\t\t\t\tcountryCodeEditable={false}\n\t\t\t\t\t\tonlyCountries={['gr', 'fr', 'us', 'in', 'ca', 'pk']}\n\t\t\t\t\t\tvalue={editPhone}\n\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t  setEditPhone('+' + e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"h-30\"\n\t\t\t\t\t  />\n\t\t\t  </div>             \n\t\t\t  </CallDiv>              \n\t\t  </Box>\n\t\t   <div style={{ marginTop: \"24px\"}} className=\"\"> \n\t\t\t  <Button className={(isPhoneSelected ? 'd-none' : '')+\" app-btn invite-pin-btn app-btn-small\"} onClick={()=>modalBtnClicked('go')}>\n\t\t\t\tInvite<span></span>\n\t\t\t  </Button>\n\t\t\t</div>\n\t\t</DashboardTabPane >\n\t\t<DashboardTabPane tab=\"Email\" key=\"2\">\n\t\t   <Form\n\t\t\t\tname=\"basic\"\n\t\t\t\tform={form}         \n\t\t\t\t  labelCol={{\n\t\t\t\t\tspan: 8,\n\t\t\t\t  }}               \n\t\t\t\t  initialValues={{\n\t\t\t\t\tremember: true,\n\t\t\t\t  }}\n\t\t\t\t  autoComplete=\"off\"\n\t\t\t\t  onFinish={onFinish}\n\t\t\t\t  onFinishFailed={onFinishFailed}\n\t\t\t>\n\t\t\t  <Box>\n\t\t\t\t  <Label className=\"steplable\">Invite user by mail</Label>\n\t\t\t\t  <CallDiv>\n   \n\t\t\t\t\t  <Form.Item\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t  >\n\t\t\t\t\t\t<Input className=\"h-30\"/>\n\t\t\t\t\t  </Form.Item>\n\n\t\t\t\t\t \n\t\t\t\t  </CallDiv>\n\t\t\t  </Box>\n\t\t\t  <div className=\"\"> \n\t\t\t\t<Button htmlType=\"submit\" className={(isPhoneSelected ? 'd-none' : '')+\" app-btn invite-pin-btn app-btn-small\"}  onClick={() => form.submit()}>\n\t\t\t\t  <span></span>Invite\n\t\t\t\t</Button>\n\t\t\t  </div>\n\t\t\t</Form>\n\t\t</DashboardTabPane >\n\t  </DashboardTab>\n\t  </Modal>\n\t</div>\n  );\n};\n\nconst Modal = styled(AntModal)`\n  \n  .steplable{\n\tfont-size: 18px;\n  }\n  .ant-modal-content {\n\tborder-radius: 10px;\n   \n  }\n  .ant-typography{\n\tmargin-bottom:8px;\n  }\n  .pin-modal-btn{    \n\tbackground: #464646 !important;\n\tcolor: #fff !important;\n\tborder-color: #464646 !important;\n\tpadding:5px 30px;\n\tborder-radius:8px;\n\tcursor:pointer;\n  }\n  \n\n  .pin-message{\n\tfont-weight:600;\n\tpadding:10px 2px;\n\theight:120px;\n\ttext-align:center;\n  }\n  .d-none{\n\tdisplay:none;\n  }\n  .dial-in-options{\n\tmargin-top:30px;\n  }\n  .footer-btns{\n\n\n\tdisplay: block;\n\ttext-align: right;\n\ttop: 15px;\n  }\n  .footer-btns .pin-modal-btn{\n\tmargin-left:15px;\n  }\n  .footer-btns .back-btn{\n\tbackground: none !important;\n\tcolor: #464646 !important;\n\tborder: solid 2px;\n  }\n  .\n  .pin-modal-btn.selected-btn{\n\tbackground: #464646 !important;\n\tcolor: #fff !important;\n\tborder-color: #464646 !important;\n\topacity:1;\n  }\n`;\n\nconst Label = styled(Typography)`\n  font-size: 14px;\n`;\n\nconst CallDiv =styled.div`\n  display:flex;\n  justify-content :space-between\n`;\n\nDialInOutModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default DialInOutModal;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\DialInOutModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ExplainIssue.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Row, Col } from 'antd';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n// import StepButton from '../../../../components/StepButton';\nimport {Button} from 'react-bootstrap';\nimport PinModal from './PinModal';\nimport { useSocket } from '../../../../context/socketContext';\nimport Box from '../../../../components/common/Box';\n\nfunction ExplainIssue() {\n  const { jobId } = useParams();\n  const history = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n  const { socket } = useSocket();\n\n  const onCancelConnect = () => {\n    socket.emit('cancel-connect', { id: jobId });\n    history.push('/dashboard');\n  };\n\n  const renderTime = ({ remainingTime }) => (\n    <div className=\"timer\">\n      <div className=\"value\">{remainingTime}</div>\n    </div>\n  );\n\n  const onStartShare = () => {\n    setIsOpen(true);\n  };\n\n  const onSubmit = pinCode => {\n    socket.emit('start-share', { id: jobId, pinCode });\n    console.log('change here 111111111111111111111')\n    window.location.href = process.env.REACT_APP_MEETING_PAGE+`/customer/job/${jobId}`\n  };\n\n  return (\n    <Box display=\"flex\" direction=\"column\" width=\"100%\">\n      <Box display=\"flex\" direction=\"column\" justifyContent=\"center\" height=\"100%\" width=\"80%\" marginAuto>\n        <Box\n          background=\"#fff\"\n          radius={5}\n          display=\"flex\"\n          direction=\"column\"\n          alignItems=\"flex-start\"\n          marginTop={50}\n          marginBottom={50}\n          padding={60}\n          flex={1}\n          boxShadow=\"0px 15px 50px 0px #d5d5d566\"\n        >\n          <Box width=\"100%\">\n            <Box display=\"flex\" justifyContent=\"center\" marginBottom={30}>\n              <Title>Please explain your issue</Title>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\" marginBottom={15} wrap>\n              <Description>\n                If your issue requires a screenshare session please click\n                below to get started. The job meter will be paused until your\n                tech can confirm they can resolve your issue.\n              </Description>\n            </Box>\n            <Box paddingTop={40} paddingHorizontal={70} marginHorizontal={-60} borderTop=\"1px solid rgba(0, 0, 0, 0.3)\">\n              <Box display=\"flex\" justifyContent=\"space-between\" marginBottom={15} wrap style={{ marginBottom: 0 }}>\n                <Box display=\"flex\" alignItems=\"center\" marginBottom={25}>\n                  <CountdownCircleTimer\n                    isPlaying\n                    duration={5}\n                    colors={[['#464646']]}\n                    onComplete={() => {}}\n                    size={70}\n                    strokeWidth={5}\n                  >\n                    {renderTime}\n                  </CountdownCircleTimer>\n                  <Text>Session meter</Text>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\" marginBottom={20}>\n                  <Button onClick={onCancelConnect} className=\"btn app-btn app-btn-light-blue\">\n                    Cancel\n                  </Button>\n                  <Button onClick={onStartShare} className=\"btn app-btn\">\n                    Start Screenshare\n                  </Button>\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n      <PinModal\n        onClose={() => setIsOpen(false)}\n        isOpen={isOpen}\n        onSubmit={onSubmit}\n      />\n    </Box>\n  );\n}\n\nconst Title = styled.p`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.4;\n`;\nconst Description = styled.p`\n  margin: 0 10px 10px;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 300;\n  font-size: 20px;\n  line-height: 1.4;\n`;\n\nconst Text = styled.span`\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 16px;\n  padding: 0 10px;\n`;\n\nconst DeclineButton = styled.button`\n  height: 60px;\n  background: transparent;\n  font-weight: bold;\n  border-radius: 10px;\n  padding: 0px 40px;\n  line-height: 60px;\n  font-size: 18px;\n  cursor: pointer;\n  color: #464646;\n  border: 1px solid 464646;\n  min-width: 200px;\n  text-align: center;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport default ExplainIssue;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\ExplainIssue.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ExtensionModal.js",
                                                                    "fileData": "\n// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n// import React from 'react';\n// import { Modal as AntModal, Typography } from 'antd';\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\n// import StepButton from '../../../../components/StepButton';\n// import Box from '../../../../components/common/Box';\n\n// const ExtensionModal = ({ isOpen, onClose }) => {\n  \n//   const handleSubmit = () => {\n//     window.open('https://remotedesktop.google.com/support', 'Generate Code', \"height=600,width=800\");\n//     onClose();\n//   };\n\n//   return (\n//     <Modal visible={isOpen} onCancel={onClose} footer={false}>\n//       <Box padding={20}>\n//         <Description>Please install Remote PC controller Extension</Description>\n//         <Box display=\"flex\" justifyContent=\"center\" marginTop={60}>\n//           <InstallButton onClick={handleSubmit}>Install or Use</InstallButton>\n//         </Box>\n//       </Box>\n//     </Modal>\n//   );\n// };\n\n// const Modal = styled(AntModal)`\n//   .ant-modal-content {\n//     border-radius: 10px;\n//   }\n// `;\n// const Description = styled(Typography)`\n//   font-size: 20px;\n//   margin: 15px 0;\n//   font-weight: 600;\n//   text-align: center;\n// `;\n// const InstallButton = styled(StepButton)`\n//   padding: 20px 40px;\n//   font-size: 16px;\n//   width: initial;\n//   margin: 0;\n// `;\n\n// ExtensionModal.propTypes = {\n//   isOpen: PropTypes.bool.isRequired,\n//   onClose: PropTypes.func.isRequired,\n// };\n\n// export default ExtensionModal;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\ExtensionModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "InviteTech.js",
                                                                    "fileData": "import React, { useEffect, useState,useRef } from 'react';\nimport { Row, Col, Typography,Modal,Spin,Rate } from 'antd';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { useHistory, useParams } from 'react-router';\n// import { getFullName } from '../../../../utils';\n// import StepButton from '../../../../components/StepButton';\nimport {Button} from 'react-bootstrap';\nimport { useSocket } from '../../../../context/socketContext';\nimport Box from '../../../../components/common/Box';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as UserApi from '../../../../api/users.api';\n// import * as SoftwareApi from '../../../../api/software.api';\n// import RadioButton from '../../../../components/common/RadioButton';\nimport PhoneInput from 'react-phone-input-2';\nimport {Switch} from 'antd';\nimport { faArrowRight,faArrowLeft,faBell } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Input from 'components/AuthLayout/Input';\nimport {\n\tisPossiblePhoneNumber,\n\tisValidPhoneNumber,\n} from 'react-phone-number-input';\n// import FormItem from 'components/FormItem';\nimport {useJob} from '../../../../context/jobContext';\nimport { get_or_set_cookie, GAevent, PushUserDataToGtm } from '../../../../utils';\nimport {useNotifications} from '../../../../context/notificationContext';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport $ from 'jquery';\nimport mixpanel from 'mixpanel-browser';\nimport Loader from '../../../../components/Loader';\nimport { getTechnicianRating } from '../../../../api/technician.api';\nimport * as WebSocket from '../../../../api/webSocket.api';\nimport * as JobApi from '../../../../api/job.api';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\n// import { getTalkChatUser,getTalkGroupChatUser } from '../../../../api/chat.api';\n// import { useChatEngineTools } from '../../../../context/chatContext';\nimport { JobTags } from '../../../../constants/index.js';\n// import ChatPanelAccpetJob from 'components/ChatPanelAccpetJob';\n// import { createOrGetUserChat } from '../../../../utils';\nimport  notifySound from '../../../../assets/sounds/notification.mp3'\nimport Badge from '@mui/material/Badge';\nimport ChatPanelTwilio from 'components/ChatPanelTwilio';\nimport * as TwilioApi from 'api/twilioChat.api';\nimport Rating from '@mui/material/Rating';\nimport BasicButton from \"components/common/Button/BasicButton\";\nconst { Text } = Typography;\nconst InviteTech = ({ user,refetch, job, updateUserInfo }) => {\n\tconsole.log('job>>>>>>>>>>>',job)\n\tconst [error, setError] = useState({});\n\t// const [isModalVisible, setIsModalVisible] = useState(false);\n\tconst {fetchJob,updateJob} = useJob()\n\t// const [extension, setExtension] = useState(0);\n\tconst { jobId } = useParams();\n\t// const [userExtension,setUserExtension] = useState('')\n\tconst {updateReadStatus} = useNotifications()\n\tconst [method, setMethod] = useState(\"ComputerAudio\");\n\tconst { socket } = useSocket();\n\tconst history = useHistory();\n\tconst [phoneNum, setPhoneNum] = useState(0);\n\tconst [EditPhoneNum, setEditPhone] = useState(0);\n\tconst [showLine,setShowLine] = useState(false);\n\tconst [showeditor, setShowEditor] = useState(false);\n\t// const [ShowMsg,setShowMsg] = useState();\n\tconst [customerId, setCustomerId] = useState();\n\tconst pattern = new RegExp(/^\\+\\d[0-9\\b]+$/);\n\tconst DATE_OPTIONS = {hour: '2-digit', minute:'2-digit',timeZone: user.timezone };\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [startCallDisable, setStartCallDisable] = useState(false);\n\tconst [techRating, setTechRating] = useState('5.00');\n\tconst [showLoader,setShowLoader] = useState(false)\n\tconst [jobMethodType,setJobMethodType] = useState('ComputerAudio')\n\tconst [callAlreadyStarted,setCallAlreadyStarted] = useState(false)\n\tconst [duration, setDuration] = useState('')\n\tconst [showLoaderForChat, setShowLoaderForChat] = useState(null)\n\tconst [showChat, setShowChat] = useState(false)\n\t// const { createChatUsers,createGroupChatUsers, createTalkUserSession, joinTalkChatConversation, createOrGetTalkChatConversation,joinTalkChatConversationGroup,createOrGetTalkChatConversationGroup,handleTalkChatUser } = useChatEngineTools();\n\tconst now_time = moment();\n\tconst inboxRef = useRef();\n\tconst [refetchChat,setRefetchChat] = useState(false)\n\tconst [buttonKeyForChat,setButtonKeyForChat] = useState(false)\n\tconst [buttonKeyForChatPanel,setButtonKeyForChatPanel] = useState(false)\n\tconst [showNotificationBell,setShowNotificationBell] = useState(false)\n\tconst [chatPanelHasOpen,setChatPanelHasOpen] = useState(true)\n\tconst [userIsOwner,setUserIsOwner] = useState(true)\n\tconst [ownerHaveSubscription,setOwnerHaveSubscription] = useState(false)\n\tconst [checkForOwner,setCheckForOwner] = useState(false)\n\tconst [ownerInfo,setOwnerInfo] = useState()\n\tconst [socketHits, setSocketHits] = useState(0);\n\tlet audio = new Audio(notifySound)\n\tconst [isBrowserTypeSafari , setIsBrowserTypeSafari] = useState(false);\n  \t// const showModal = () => {\n\t//     // setIsModalVisible(true);\n\t// \t//mixpanel code //\n\t// \tmixpanel.identify(user.email);\n\t// \tmixpanel.track('Customer - Click on start call',{'JobId':job.id});\n\t// \t//mixpanel code //\n  \t// };\n\n\t  const StyledBadge = styled(Badge)(({ theme }) => ({\n\t\t'& .MuiBadge-badge': {\n\t\t  right: -3,\n\t\t  top: 13,\n\t\t  backgroundColor:'red',\n\t\t  padding: '0 4px',\n\t\t},\n\t  }));\n\n\tuseEffect(()=>{\n\t\tif(user){\n    \t\tmixpanel.track('Customer - On Start Call Page ', { 'Email': user.email });\n\t\t}\n  \t},[user])\n\n\t  const handleSendMessage = (message) => {\n\t\tsocket.emit(\"talk-js-notification\",jobId)\n\t  };\n\n\t//   useEffect(() => {\n\t\t// setTimeout(() => {\n\t\t\t// fetchSingleJob()\n\t\t\t// }, 1000)\n\t//   }, [user,refetchChat])\n\n  \t// const handleOk = () => {\n\t//     // setIsModalVisible(false);\n\t//     onSubmit();\n  \t// };\n\n  \t// const handleCancel = () => {\n\t//     setIsModalVisible(false);\n  \t// };\n\n  \t// const handleExtension = e => {\n\t// \tsetExtension(e.target.value);\n\t// };\n\tconst BackToDashBoard = ()=>{\n\n\t\tModal.confirm({\n\t      title: 'Are you sure you want to decline this technician?',\n\t      okText: 'Yes',\n\t      cancelText: 'No',\n\t      className:'app-confirm-modal',\n\t      onOk() {\n\t        BackToDashBoardSubmit();\n\t      },\n\t    });\n\t}\n\n\tconst handleSocketEvent = () => {\n\t\t// Increase the socket hits count\n\t\tsetSocketHits((prevHits) => prevHits + 1);\n\t\t// Perform other actions\n\t\taudio.play();\n\t\tsetButtonKeyForChat(true);\n\t\tsetShowNotificationBell(true);\n\t  };\n\n\n\n\t/**\n\t * This function takes the user to dashboard.\n\t * @params = no params\n\t * @response : It redirects to dashboard page.\n\t * @author : Manibha\n  \t*/\n\tconst switchToDashBoard = (e)=>{\n\t\te.currentTarget.disabled = true;\n\t\twindow.location.href = '/'\n\t}\n\n\tuseEffect(()=>{\n        if(job && job.status === 'Inprogress'){\n            setCallAlreadyStarted(true)\n        }\n    },[job])\n\n\tuseEffect(() => {\n\t\tlet userAgent = navigator.userAgent;\n\t\tlet browserInfo = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n\t\tlet browserName = browserInfo[1];\n\t\tconsole.log(\"browserName>>>>>>>\",browserName)\n\t\tif(browserName === 'Safari'){\n\t\t\tsetIsBrowserTypeSafari(true)\n\t\t} else {\n\t\t\tsetIsBrowserTypeSafari(false)\n\t\t}\n\t}, []);\n\n\tuseEffect(()=>{\n\t\t(async()=>{\n\t\t\tif(user.ownerId && user.ownerId !== null){\n\t\t\t\tsetUserIsOwner(false)\n\t\t\t\tconst ownerInfoObject = await UserApi.getUserById(user.ownerId)\n\t\t\t\tif(ownerInfoObject){\n\t\t\t\t\tsetOwnerInfo(ownerInfoObject)\n\t\t\t\t\tif(ownerInfoObject.customer && ownerInfoObject.customer.subscription){\n\t\t\t\t\t\tsetOwnerHaveSubscription(true)\n\t\t\t\t\t\tsetCheckForOwner(true)\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsetCheckForOwner(true)\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tsetCheckForOwner(true)\t\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsetCheckForOwner(true)\n\t\t\t}\n\t\t})()\n\t\tsetMethod('ComputerAudio')\n\t\tsetShowLine(false);\n\t\tsetShowEditor(false);\n\t\tsocket.emit(\"join\",jobId)\n\t},[])\n\n\tuseEffect(()=>{\n\t\tsocket.on(\"call:started-customer\",()=>{\n\t\t\tsetCallAlreadyStarted(true)\n\t\t})\n\t\tconsole.log('inside the use effect ::::')\n\t\tsocket.on(\"open-chat-panel-talkjs-for-customer\",(data)=>{\n\t\t\tif(data === jobId){\n\t\t\t  handleSocketEvent();\n\t\t\t}\n\t\t})\n\t},[socket])\n\n\tsocket.on(\"phone-from-tech\",()=>{\n\t\twindow.localStorage.setItem(\"callFromSystem\",true)\n\t})\n\n\tuseEffect(()=>{\n\t\tlet callFromSystem = localStorage.getItem('callFromSystem')\n\t\tif(callFromSystem && user.userType === \"customer\"){\n\t\t\topenNotificationWithIcon('info', 'Info', `System calling you on your phone number ${user.customer.phoneNumber}.`)\n\t\t\twindow.localStorage.removeItem(\"callFromSystem\")\n\t\t}\n\t},[])\n\n  \t// const fetchSingleJob = async()=>{\n\t// \ttry{\n\t// \t\tlet response = await JobApi.retrieveJob(jobId)\n\t// \t\tsetDuration(moment.duration(moment(response.primarySchedule).diff(now_time)))\n\t// \t\tif(response.is_long_job || response.schedule_accepted || response.status === 'Inprogress' || response.status === 'Completed' || response.status === 'Accepted'){\n\t// \t\t\tsetShowLoaderForChat(true)\n\n\t// \t\t\tlet customerDataObject = {...response.customer.user}\n\t// \t\t\tlet technicianDataObject = { ...response.technician.user }\n\n\t// \t\t\tlet customerChatUser = await handleTalkChatUser(customerDataObject)\n\t// \t\t\tlet technicianChatUser = await handleTalkChatUser(technicianDataObject)\n\n\t// \t\t\tif (user.userType == 'technician') {\n\t// \t\t\t\tcreateTalkUserSession(technicianChatUser)\n\t// \t\t\t}\n\t// \t\t\telse {\n\t// \t\t\t\tcreateTalkUserSession(customerChatUser)\n\t// \t\t\t}\n\t// \t\t\tlet conversationData = await createOrGetUserChat([JSON.stringify(customerDataObject.id), JSON.stringify(technicianDataObject.id)], response.id, response.software.name, response)\n\t// \t\t\tlet conversation = await createOrGetTalkChatConversation(conversationData)\n\t// \t\t\tlet userInbox = await joinTalkChatConversation({ \"customer\": customerChatUser, \"technician\": technicianChatUser, \"conversationId\": response.chatRoomId ? response.chatRoomId : conversationData.jobId })\n\t// \t\t\tsetTimeout(() => {\n\t// \t\t\t\ttry {\n\t// \t\t\t\t  if (userInbox) {\n\t// \t\t\t\t\tsetShowLoaderForChat(false);\n\t// \t\t\t\t\tsetTimeout(() => {\n\t// \t\t\t\t\t  if (inboxRef.current != undefined) {\n\t// \t\t\t\t\t\tuserInbox.mount(inboxRef.current);\n\t// \t\t\t\t\t\tuserInbox.onSendMessage(handleSendMessage);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t  if (user.userType === 'technician') {\n\t// \t\t\t\t\t\tsetShowChat(true);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t}, 1000);\n\t// \t\t\t\t  }\n\t// \t\t\t\t} catch (err) {\n\t// \t\t\t\t  console.log('error in fetchSingleJob (inner setTimeout) >>', err);\n\n\t// \t\t\t\t}\n\t// \t\t\t  }, 1000);\n\t// \t\t}\n\t// \t}\n\t// \tcatch (err) {\n\t// \t\tconsole.log(\"error in fetchSingleJob >>\")\n\t// \t}\n\t// }\n\n\tconst handelCallBackPanel = (e) => {\n\t\te.length === 2 ? setRefetchChat(true) : setRefetchChat(false)\n\t\tsetSocketHits(0)\n\t\t// setChatPanelHasOpen(!chatPanelHasOpen)\n\t}\n\n\tconst BackToDashBoardSubmit = async()=>{\n\t\tconst res = await JobApi.retrieveJob(jobId);\n\t\tif(res.status == \"Inprogress\"){\n\t\t\thistory.push(\"/\");\n\t\t}else if( res.status == \"Completed\"){\n\t\t\thistory.push(\"/\");\n\t\t}else{\n\t\tvar dec_arr = job.tech_declined_ids\n\t\tdec_arr.push(job.technician.id)\n\t\t// console.log(\">>>>>>>job.tech_declined_ids>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\",job.tech_declined_ids)\n\t\t// console.log(\">>>>>>>>>>>>>>>>>>>>>>>job.technician.id>>>>>>>>>>>>>>>>>>>>>>>\",job.technician.id)\n\t\tlet tempdecOb = [...job.declinedByCustomer]\n\t\ttempdecOb.push(job.technician.id)\n\t\tupdateJob(jobId,{\"status\":\"Waiting\",\"technician\":\"\",\"declinedByCustomer\":tempdecOb})\n\t\tupdateReadStatus({\"job\":jobId,\"user\":job.technician.user.id,status:false})\n\t\tawait TwilioApi.updateTwilioConversation(res.twilio_chat_service?.sid)\n\n\t\ttry {\n\t\t  \tconst webdata  = await WebSocket.create({\n\t\t\t        user: user.id,\n\t\t\t        job : job.id,\n\t\t\t        socketType:'technician-declined',\n\t\t\t        userType:user.userType,\n\t\t\t        hitFromCustomerSide:true,\n\t\t\t});\n\n\t\t  job['web_socket_id'] = webdata['websocket_details']['id']\n\t\t  await WebSocket.technicianDeclined({jobId:jobId,tech:job.technician,job:job})\n\t\t}\n\t\tcatch(err) {\n\t\t  console.log('onSubmit error in InviteTech page>>>',err)\n\t\t  await WebSocket.technicianDeclined({jobId:jobId,tech:job.technician,job:job})\n\t\t}\n\n\n\n   \t\t// mixpanel code//\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Customer - Decline technician',{'JobId':job.id});\n\t\t// mixpanel code//\n\t\tawait JobCycleApi.create(JobTags.CUSTOMER_DECLINED_CALL, job.id, false);\n\t\thistory.push(\"/\")\n\t}\n\n\t}\n\n\tconst HandleInputDisplay = () => {\n\t\tsetShowEditor(true);\n\t\t// setShowMsg(false)\n\t};\n\n\tconst handelShowChat = () =>{\n\t\tsetButtonKeyForChatPanel(true)\n\t\tsetShowNotificationBell(false)\n\t\tsetChatPanelHasOpen(false)\n\t\tsetSocketHits(0)\n\t\t// fetchSingleJob()\n\t}\n\n\n\n\t/**\n   \t* Handling on submit of start call button by customer\n   \t* @params = no params\n   \t* @response : it redirects the customer to meeting page according to the phone/computer audio selection.\n   \t* @author : Manibha\n\t**/\n  \tconst onSubmit = async () => {\n\t\tconst res = await JobApi.retrieveJob(jobId);\n\t\tif(res.status == 'Inprogress' || res.status == 'long-job'){\n\t\t\tlet lifeCycleTag = ''\n    \t\tif(job.is_transferred && job.is_transferred == true){\n      \t\t\tlifeCycleTag = JobTags.CUSTOMER_START_CALL_AFTER_TRANSFER;\n    \t\t}else{\n      \t\t\tlifeCycleTag = JobTags.CUSTOMER_START_CALL;\n    \t\t}\n    \t\tawait JobCycleApi.create(lifeCycleTag, job.id);\n\t\t\topenNotificationWithIcon('error', 'Error', 'Job is already in progress.')\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.location.href = `/dashboard`\n\t\t\t\t// window.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/customer/${jobId}`\n\t\t\t}, 2000);\n\t\t\tconsole.log(\"inprogress\")\n\t\t}else if(res.status == 'Accepted'){\n\t\t\tif(!res.GA_start_call_event_called){\n\t\t\t\tconsole.log(\"Hereeee\")\n\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\tGAevent('Call Started','customer-start-call', res.id,res?.customer?.id)\n\t\t\t\tif(process.env.REACT_APP_URL){\n\t\t\t\t\tconst appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n\t\t\t\t\tPushUserDataToGtm('call_started', user, appUrl);\n\t\t\t\t}\n\t\t\t\tawait updateJob(res.id,{'GA_start_call_event_called':true})\n\t\t\t}\n\t\t\tswitchToMeetingPage()\n\t\t}else if(res.status == 'Completed'){\n\t\t\topenNotificationWithIcon('error', 'Error', 'Job is already completed.')\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.location.href = `/dashboard`\n\t\t\t}, 2000);\n\t\t}\n  \t};\n\n\n\t/**\n   \t* If the job is accepted then it makes changes in database and send both C and T to meeting page on submit of start call button.\n   \t* @params = no params\n   \t* @response : It redirects the customer to meeting page.\n   \t* @author : Manibha\n\t**/\n\tconst switchToMeetingPage =  async()=>{\n\t\tsetStartCallDisable(true)\n\t\t// mixpanel code//\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Customer - Start call with technician',{'JobId':job.id});\n\t\t// mixpanel code//\n\t\t// console.log(\"extension ::::: \",extension)\n\t\tconsole.log(\"EditPhoneNum :::::: \",EditPhoneNum)\n\t\tawait updateJob(jobId,{'callStartType':jobMethodType })\n\t\tif (jobMethodType === \"Phone\"){\n\t\t\tif(EditPhoneNum !== 0){\n\t\t\t\tif (isPossiblePhoneNumber(EditPhoneNum) === false || isValidPhoneNumber(EditPhoneNum) === false){\n\t\t\t\t\tsetShowLoader(false)\n\t\t\t\t\tsetStartCallDisable(false)\n\t\t\t\t\treturn (openNotificationWithIcon('error', 'Error', 'Phone Number Not Valid'))\n\t\t\t\t}\n\n\t\t\t\tif (!EditPhoneNum) {\n\t\t\t\t\tsetShowLoader(false)\n\t\t\t\t\tsetStartCallDisable(false)\n\t\t\t\t\tsetError({ ...error, EditPhoneNum: 'Please add your phone number.' });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!pattern.test(EditPhoneNum)) {\n\t\t\t\t\tsetShowLoader(false)\n\t\t\t\t\tsetStartCallDisable(false)\n\t\t\t\t\tsetError({ ...error, EditPhoneNum: 'Please provide valid phone number.' });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!pattern.test(EditPhoneNum)) {\n\t\t\t\tsetError({\n\t\t\t\t\t...error,\n\t\t\t\t\tEditPhoneNum: 'Please provide valid phone number.',\n\t\t\t\t});\n\t\t\t\tconsole.log(\"need error \",EditPhoneNum)\n\t\t\t\tsetShowLoader(false)\n\t\t\t\tsetStartCallDisable(false)\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait CustomerApi.updateCustomer(customerId, {\n\t\t\t\tphoneNumber: EditPhoneNum,\n\t\t\t\t// extension:extension,\n\t\t\t\t}).then(() => {\n\t\t\t\t\tsetPhoneNum(EditPhoneNum);\n\t\t\t\t\t// setUserExtension(extension)\n\t\t\t\t\t// setShowEditor(false);\n\t\t\t\t\t// setShowMsg(true)\n\t\t\t\t\tfetchJob(jobId)\n\t\t\t\t\t// setShowLoader(false)\n\t\t\t\t})\n\t\t\t\t.catch(()=>{\n\t\t\t\t\tconsole.log(\"Error in handle Phone save\")\n\t\t\t\t})\n\t\t}\n\n\n\t\tfetchJob(jobId)\n\t\ttry {\n\t\t\tconst webdata  = await WebSocket.create({\n\t\t\t\t\tuser: user.id,\n\t\t\t\t\tjob : job.id,\n\t\t\t\t\tsocketType:'accept-job',\n\t\t\t\t\tuserType:user.userType,\n\t\t\t\t\thitFromCustomerSide:true,\n\t\t\t});\n\n\n\t\t\tjob['web_socket_id'] = webdata['websocket_details']['id']\n\n\t\t\tawait WebSocket.customer_start_call(job)\n\t\t}\n\t\tcatch(err) {\n\t\t\tconsole.log('onSubmit error in InviteTech page>>>',err)\n\n\t\t\tawait WebSocket.customer_start_call(job)\n\t\t}\n\n\t\tget_or_set_cookie(user)\n\t\tlet lifeCycleTag = ''\n\t\tif(job && job.is_transferred && job.is_transferred == true){\n\t\t\tlifeCycleTag = JobTags.CUSTOMER_START_CALL_AFTER_SEARCH;\n\t\t}else{\n\t\t\tlifeCycleTag = JobTags.CUSTOMER_START_CALL;\n\t\t}\n\t\tawait JobCycleApi.create(lifeCycleTag, jobId);\n\t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/customer/${jobId}`\n\n\t}\n\n\n  \t/**\n   * Starts a call on technician side\n   * @params =\n   * @response : it redirects the customer to meeting page, if meeting is already started by the customer.\n   * @author : Sahil\n  */\n\n  \tconst sendCustomerToMeeting = ()=>{\n\t\tsetStartCallDisable(true)\n  \t\tget_or_set_cookie(user)\n\t\t// mixpanel code//\n\t \tmixpanel.identify(user.email);\n\t \tmixpanel.track('Customer - Join Meeting',{'JobId':job.id});\n\t \t// mixpanel code//\n  \t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/customer/${jobId}`\n  \t}\n\n  \tconst SwitchHandler = (checked) =>{\n  \t\tconsole.log('checked>>>>>>>>>>',checked)\n\t\tif(checked){\n\t\t\tsetMethod(\"ComputerAudio\")\n\t\t\tsetShowLine(false)\n\t\t\tsetShowEditor(false)\n\t\t\t$('.switchClassComp').addClass('computer')\n\t\t\t$('.switchClassPhone').removeClass('phone')\n\t\t\tsetJobMethodType(\"ComputerAudio\")\n\t\t\tsocket.emit(\"set-method\",{'method':\"ComputerAudio\"})\n\t\t\t//mixpanel code //\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Choose computer audio',{'JobId':job.id});\n\t\t\t//mixpanel code //\n\t\t}\n\t\telse{\n\t\t\tsetMethod(\"Phone\")\n\t\t\tsetShowLine(true)\n\t\t\t$('.switchClassPhone').addClass('phone')\n\t\t\t$('.switchClassComp').removeClass('computer')\n\t\t\tsetJobMethodType(\"Phone\")\n\t\t\tsocket.emit(\"set-method\",{'method':\"Phone\"})\n\t\t\t//mixpanel code //\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Choose choose with phone ',{'JobId':job.id});\n\t\t\t//mixpanel code //\n\t\t}\n  \t}\n\tconst HandleSave = async()=>{\n\t\tconsole.log('HandleSave>>>>>>>>>>>>>')\n\t\tsetShowLoader(true)\n\t\tif(EditPhoneNum !== 0){\n\t\t  if (isPossiblePhoneNumber(EditPhoneNum) === false || isValidPhoneNumber(EditPhoneNum) === false){\n\t\t  \t\tsetShowLoader(false)\n\t\t\t\treturn (openNotificationWithIcon('error', 'Error', 'Phone Number Not Valid'))\n\t\t  }\n\n\t\t  if (!EditPhoneNum) {\n\t\t  \tsetShowLoader(false)\n\t\t\tsetError({ ...error, EditPhoneNum: 'Please add your phone number.' });\n\t\t\treturn;\n\t\t  }\n\n\t\t  if (!pattern.test(EditPhoneNum)) {\n\t\t  \tsetShowLoader(false)\n\t\t\tsetError({ ...error, EditPhoneNum: 'Please provide valid phone number.' });\n\t\t\treturn;\n\t\t  }\n\t\t}\n\n\t\tif (!pattern.test(EditPhoneNum)) {\n\t\t\tsetError({\n\t\t\t\t...error,\n\t\t\t\tEditPhoneNum: 'Please provide valid phone number.',\n\t\t\t});\n\t\t\tconsole.log(\"need error \",EditPhoneNum)\n\t\t\tsetShowLoader(false)\n\t\t\treturn;\n\t\t}\n\n\t\tawait CustomerApi.updateCustomer(customerId, {\n\t\t\tphoneNumber: EditPhoneNum,\n\t\t\t// extension:extension,\n\t\t}).then(() => {\n\t\t\topenNotificationWithIcon('success', 'Success', 'Phone Number has been updated.')\n\t\t\tsetPhoneNum(EditPhoneNum);\n\t\t\t// setUserExtension(extension)\n\t\t\tsetShowEditor(false);\n\t\t\t// setShowMsg(true)\n\t\t\tfetchJob(jobId)\n\t\t\tsetShowLoader(false)\n\t\t})\n\t\t.catch(()=>{\n\t\t\tconsole.log(\"Error in handle Phone save\")\n\t\t})\n\t}\n\n\tuseEffect(()=>{\n\t\tif(job && job.id === jobId){\n\t\t\tif(job.technician && job.technician.rating){\n\t\t\t\t// let p = {'technician':job.technician.user.id}\n\t\t\t\t/*getTechnicianRating(p).then((resTech)=>{\n\t                console.log(\"resTech ::\",parseFloat(resTech.data).toFixed(1))\n\t                if(resTech && resTech.data){\n\t                \tif (resTech.data > 0 ){\n\t                \t\tsetTechRating(parseFloat(resTech.data).toFixed(1))\n\t                \t}else{\n\t                \t\tsetTechRating(parseFloat(5.0).toFixed(1))\n\t                \t};\n\t                \tsetIsLoading(false)\n\t                };\n\t            })*/\n\t\t\t\tif(job?.technician && job?.technician?.rating !== undefined){\n\t\t\t\t\tsetTechRating(parseFloat(job?.technician?.rating).toFixed(2))\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsetTechRating(parseFloat(5.0).toFixed(1))\n\t\t\t}\n\n\t\t\tsetCustomerId(job.customer.id);\n\t\t\tsetEditPhone(job.customer.phoneNumber)\n\t\t\tsetPhoneNum(job.customer.phoneNumber); // \"Some User token\"\n\t\t\tconsole.log(\"customer extension \",job.customer.extension)\n\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t// setUserExtension(job.customer.extension?job.customer.extension:'')\n\t\t\t// setExtension(job.customer.extension?job.customer.extension:'')\n\t\t\tsetIsLoading(false)\n\n\t\t}\n\n\t\tif(job.status === 'Completed'){\n\t\t\topenNotificationWithIcon('info', 'Info', 'This job has already been completed. Please go to dashboard.')\n\t\t}\n\t},[job])\n\n\n\tif (isLoading) return <Col md=\"12\" className=\"px-4 py-5\">\n\t\t<Row>\n\t\t\t<Loader height=\"100%\" className={\"mt-5 \"+(isLoading ? \"loader-outer\" : \"d-none\")} />\n\t\t</Row>\n\n\t</Col>\n\t;\n\t// updateCustomer\n\treturn (\n\t\t<Container span={15}>\n\t\t\t<StepContainer>\n\t\t\t\t<NewJobContainer>\n\t\t\t\t\t<Box width=\"100%\">\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\t\tmarginVertical={40}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t{/* {(()=>{\n\t\t\t\t\t\t\tif(job && job.status !== \"Completed\"){\n\t\t\t\t\t\t\t\treturn<>\n\t\t\t\t\t\t\t\t<SubTitle>Great news! {job.technician?.user.firstName} is ready to help. </SubTitle>\n\t\t\t\t\t\t\t\t<SubTitle>Press the { callAlreadyStarted && job.status !== \"Completed\" ? \"Join\" : \"Start Call\" } button down below to join your technician now.</SubTitle>\n\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn<SubTitle>Looking like meeting is over. Please click on Back to dashboard button to view your jobs</SubTitle>\n\n\t\t\t\t\t\t})()} */}\n\n\t\t\t\t\t\t<SubTitle>{job && job.status !== \"Completed\"\n\t\t\t\t\t\t\t? `Great news! ${job.technician?.user.firstName} is ready to help.`\n\t\t\t\t\t\t\t: `Looking like meeting is over. Please click on Back to dashboard button to view your jobs`}\n\t\t\t\t\t\t</SubTitle>\n\t\t\t\t\t\t<SubTitle>\n\t\t\t\t\t\t\t{job && job.status !== \"Completed\" && `Press the ${callAlreadyStarted && job.status !== \"Completed\" ? \"Join\" : \"Start Call\" } button down below to join your technician now.`}\n\t\t\t\t\t\t</SubTitle>\n\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<Box marginVertical={20}>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col xs={24} className=\"table-responsive\">\n\t\t\t\t\t\t\t\t\t<table className=\"table job-info-table\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name\" >Tech</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name\" >Tech Rating</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name\" >Rate per 6 min</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name\" >ISSUE</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name\" >DATE</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th><TextHeader className=\"label-name \" >Time</TextHeader></th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><Title className=\"label-value small-title\">{job.technician?.user.firstName} {job.technician?.user.lastName}</Title></td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><Title className=\"label-value small-title\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <Rate  disabled={true} allowHalf={true} defaultValue={ parseFloat(techRating)} /> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='d-flex align-items-center'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Rating\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"simple-controlled\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={techRating}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprecision={0.5}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"small-title-rating\">{techRating}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t{/* <td><Title className=\"label-value small-title\">${job.software?.rate || ''}</Title></td> */}\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ checkForOwner ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserIsOwner || !ownerHaveSubscription? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$\"+job.software?.rate || '' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"NA\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"NA\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Title></td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><Title md={3} className=\"halftext label-value small-title overflow-text-correction-style\" title={job && job.issueDescription}>{job && job.issueDescription && job.issueDescription.length > 120 ? job.issueDescription.substring(0, 120) + \"...\"\n      : job.issueDescription}</Title></td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><Title className=\"label-value small-title\">{moment().format('MM/DD/YYYY')}</Title></td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><Title className=\"label-value small-title\">{new Date().toLocaleTimeString('en-US', DATE_OPTIONS)}</Title></td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t{/*<Col xs={24} md={12} lg={3}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name\" >Tech</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">{job.technician?.user.firstName} {job.technician?.user.lastName}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={24} md={12} lg={3}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name\" >Tech Rating</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">{techRating}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t<Col xs={24} md={12} lg={4}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name\" >Rate per 6 min</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">${job.software?.rate || ''}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={24} md={12} lg={8}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name\" >ISSUE</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"halftext label-value small-title\" title={job && job.issueDescription}>{job && job.issueDescription}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={24} md={12} lg={3}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name\" >DATE</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">{moment().format('DD/MM/YYYY')}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs={24} md={12} lg={3}>\n\t\t\t\t\t\t\t\t\t<Box marginVertical={15}>\n\t\t\t\t\t\t\t\t\t\t<TextHeader className=\"label-name \" >Time</TextHeader>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t<Title className=\"label-value small-title\">{new Date().toLocaleTimeString('en-US', DATE_OPTIONS)}</Title>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Col>*/}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<ItemDescription>\n\t\t\t\t\t\t\t\t<span className={`switchClassPhone ${method === \"Phone\" ? \"phone\" : \"\"}`}>Phone</span>\n\t\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\t\tclassName=\"PhoneSwitch\"\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: \"10px\", marginRight: \"10px\" }}\n\t\t\t\t\t\t\t\t\tonChange={SwitchHandler}\n\t\t\t\t\t\t\t\t\tchecked={method !== \"Phone\"} // Set the default option to \"Computer Audio\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<span className={`switchClassComp ${method === \"Phone\" ? \"\" : \"computer\"}`}>Computer Audio</span>\n\t\t\t\t\t\t\t</ItemDescription>\n\t\t\t\t\t\t\t{showLine ? <div><ItemDescription>\n\t\t\t\t\t\t\t\tYou will receive a call on number {phoneNum}.{' '}\n\t\t\t\t\t\t\t</ItemDescription>{' '}\n\t\t\t\t\t\t\t\t<SmallButton onClick={HandleInputDisplay}>\n\t\t\t\t\t\t\t\t\tEdit Number\n\t\t\t\t\t\t\t\t</SmallButton></div> : <div></div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{showeditor ? <EditDiv className=\"acceptJobTelInput\">\n\t\t\t\t\t\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t<PhoneInput\n\t\t\t\t\t\t\t\t\t\t\t\tcountry=\"us\"\n\t\t\t\t\t\t\t\t\t\t\t\tcountryCodeEditable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tonlyCountries={['gr', 'fr', 'us', 'in', 'ca', 'gb']}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={phoneNum}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetEditPhone('+' + e);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t {/*<RegInput\n\t\t\t\t\t\t\t\t\t\t\tname=\"extension\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Extension(optional)\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"extension-input mt-1 ml-2 \"\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={userExtension}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleExtension}\n\t\t\t\t\t\t\t\t\t\t/>*/}\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</EditDiv> : <div></div>}\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"right\" marginTop={30} className=\" invite-tech-btn\">\n\n\t\t\t\t\t\t\t\t{!callAlreadyStarted && job.status !== \"Completed\" &&\n\t\t\t\t\t\t\t\t\t<React.Fragment key=\"backtodashboard\">\n\t\t\t\t\t\t\t\t\t\t<button className=\"app-btn app-btn-light-blue mr-md-3\" onClick={BackToDashBoard} disabled={isLoading}><span></span> Decline Call</button>\n\t\t\t\t\t\t\t\t\t\t<button className=\"app-btn job-accept-btn\" onClick={onSubmit} disabled={startCallDisable}>\n\t\t\t\t\t\t\t\t\t\t\t<span></span> {startCallDisable ? <Spin /> : \"Start Call\"}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{ callAlreadyStarted && job.status !== \"Completed\" &&\n\t\t\t\t\t\t\t\t\t<button className=\"app-btn\" onClick={sendCustomerToMeeting} disabled={startCallDisable}>\n\t\t\t\t\t\t\t\t\t\t<span></span> {startCallDisable ? <Spin /> : \"Join\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{\tjob.status === \"Completed\" &&\n\t\t\t\t\t\t\t\t\t<button className=\"app-btn\" onClick={switchToDashBoard}>\n\t\t\t\t\t\t\t\t\t\t<span></span> Back to Dashboard\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<Box display=\"flex\" style={{marginRight:'-11px'}} justifyContent=\"right\" marginTop={20} marginLeft={10} className=\"float-right invite-tech-btn\">\n\t\t\t\t\t\t{chatPanelHasOpen ? (\n\t\t\t\t\t\t\t<StyledBadge badgeContent={socketHits} color=\"secondary\">\n\t\t\t\t\t\t\t\t<span style={{ display:  \"flex\", justifyContent: \"center\", fontWeight: \"bold\", color: \"#97abb6\", cursor: \"pointer\", pointerEvents: chatPanelHasOpen ? \" \" : \"none\", border:'none', textDecoration:'underline' }} className='bell-icon-class' onClick={handelShowChat}>Having trouble to start call?</span>\n\t\t\t\t\t\t\t</StyledBadge>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\tfooter={null}\n\t\t\t\t\t\t\tclosable={false}\n\t\t\t\t\t\t\tvisible={isBrowserTypeSafari}\n\t\t\t\t\t\t\tmaskStyle={{ backgroundColor: \"#DCE6EDCF\" }}\n\t\t\t\t\t\t\tmaskClosable={false}\n\t\t\t\t\t\t\twidth={616}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t\t\t<span style={{fontSize:'18px'}}>To fully experience our share screen and remote access features, Geeker recommends switching to <span style={{fontWeight:\"bold\"}}>Google Chrome</span> browser.</span>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"d-flex justify-content-end\">\n\t\t\t\t\t\t\t\t<BasicButton onClick={() => setIsBrowserTypeSafari(false)} btnTitle={\"Close\"} height={\"40px\"} width={\"100px\"} background={\"#1bd4d5\"} color={\"#fff\"} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Modal>\n\n\n\t\t\t\t\t\t{/* <Modal title=\"Choose call type\" visible={isModalVisible} onOk={handleOk} cancelButtonProps={{ style: { display: 'none' } }} onCancel={handleCancel} className=\"selectCallTypeModal\" okText=\"Start\">\n\t\t\t\t\t\t\t<ItemDescription>\n\t\t\t\t\t\t\t\t<span className={`switchClassPhone ${method === \"Phone\" ? \"phone\" : \"\"}`}>Phone</span>\n\t\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\t\tclassName=\"PhoneSwitch\"\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: \"10px\", marginRight: \"10px\" }}\n\t\t\t\t\t\t\t\t\tonChange={SwitchHandler}\n\t\t\t\t\t\t\t\t\tchecked={method !== \"Phone\"} // Set the default option to \"Computer Audio\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<span className={`switchClassComp ${method === \"Phone\" ? \"\" : \"computer\"}`}>Computer Audio</span>\n\t\t\t\t\t\t\t</ItemDescription>\n\n\n\t\t\t\t\t\t\t{showLine ? <div><ItemDescription>\n\t\t\t\t\t\t\t\tYou will receive a call on number {phoneNum}.{' '}\n\t\t\t\t\t\t\t</ItemDescription>{' '}\n\t\t\t\t\t\t\t\t<SmallButton onClick={HandleInputDisplay}>\n\t\t\t\t\t\t\t\t\tEdit Number\n\t\t\t\t\t\t\t\t</SmallButton></div> : <div></div>\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t{ showeditor?<EditDiv className=\"acceptJobTelInput\">\n\t\t\t\t\t\t\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t<PhoneInput\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountry=\"us\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountryCodeEditable={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonlyCountries={['gr', 'fr', 'us', 'in', 'ca','gb']}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={phoneNum}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetEditPhone('+' + e);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</EditDiv> : <div></div>}\n\t\t\t\t\t\t</Modal> */}\n\n\n\n\t\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Box>\n\t\t\t\t</NewJobContainer>\n\t\t\t</StepContainer>\n\t\t\t{buttonKeyForChatPanel &&\n\t\t\t\t// <ChatPanelAccpetJob socketHits={socketHits} handelCallBackPanel={handelCallBackPanel} refetchChat ={refetchChat} setRefetchChat={setRefetchChat} inboxRef={inboxRef} showLoaderForChat={showLoaderForChat}/>\n\t\t\t\t<div className='d-flex justify-content-center new-mb-chat'>\n\t\t\t\t\t<ChatPanelTwilio job={job} width={'700px'} height={'500px'} />\n\t\t\t\t</div>\n\t\t\t}\n\t\t</Container>\n\t);\n};\n\n/*const NumberButton = styled(Button)`\n\tbackground:  #1bd4d5 !important;\n\tfont-size: 15px !important;\n\talign-items: center !important;\n\tdisplay: flex !important;\n\tfont-weight: bold !important;\n\tborder-radius: 10px !important;\n\theight: 40px !important;\n\twidth: 100px !important;\n\tjustify-content: center;\n\tmargin-left: 10px !important;\n\tmargin-top: 10px;\n\tborder-color: ${(props) => props.theme.primary} !important;\n\tcolor: ${(props) =>\n\t\tprops.type === 'back' ? props.theme.primary : '#fff'} !important;\n\t&:hover {\n\t\tbackground: ${(props) =>\n\t\t\tprops.type === 'back' ? '#fff' : '#908d8d'} !important;\n\t\tcolor: ${(props) =>\n\t\t\tprops.type === 'back' ? '#464646' : '#fff'} !important;\n\t\tborder-color: ${(props) => props.theme.primary} !important;\n\t}\n\t&:active {\n\t\tbackground: ${(props) =>\n\t\t\tprops.type === 'back' ? '#fff' : '#908d8d'} !important;\n\t\tcolor: ${(props) =>\n\t\t\tprops.type === 'back' ? '#464646' : '#fff'} !important;\n\t\tborder-color: ${(props) => props.theme.primary} >!important;\n\t}\n\t&:focus {\n\t\tbackground: ${(props) =>\n\t\t\tprops.type === 'back' ? '#fff' : '#908d8d'} !important;\n\t\tcolor: ${(props) =>\n\t\t\tprops.type === 'back' ? '#464646' : '#fff'} !important;\n\t\tborder-color: ${(props) => props.theme.primary} !important;\n\t}\n`;*/\nconst EditDiv = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\t& .react-tel-input {\n\t\tmargin-top: 5px;\n\t}\n\t& .react-tel-input .form-control {\n\t\theight: 50px;\n\t\tborder-radius: 5px;\n\t\tborder: 1px solid #cacaca !important;\n\t\tmargin-left: 10px;\n\t}\n\t& .react-tel-input .flag-dropdown {\n\t    position: absolute;\n\t    top: 0;\n\t    bottom: 0;\n\t    padding: 0;\n\t    background-color: #f5f5f5;\n\t    border: 1px solid #cacaca;\n\t    border-radius: 3px 0 0 3px;\n\t    left: 11px;\n\t}\n\n`;\nconst SmallButton = styled(Text)`\n\ttext-decoration: underline;\n\tcolor: rgb(18, 67, 215) !important;\n\tfont-weight: bold;\n\tcursor: pointer;\n`;\nconst ItemDescription = styled(Text)`\n\topacity: 0.8;\n\tfont-weight: 700;\n\tfont-style: italic;\n\n\n\t& .phone{\n\t\tfont-size: 19px;\n\tfont-family: ui-rounded;\n\tcolor: #2e5aa9;\n\t}\n\t& .successText{\n\t\tcolor:green !important;\n\t}\n\t& .computer{\n\t\tfont-size: 19px;\n\tfont-family: ui-rounded;\n\tcolor: #2e5aa9;\n\t}\n\t& .PhoneSwitch{\n\t\tbackground-color:#577AC2;\n\t}\n`;\n\n/*const RegForm = styled(FormItem)`\n\t&.ant-form-item-has-error {\n\t\tmargin-bottom: 6px;\n\t}\n\n`;*/\nconst RegInput = styled(Input)`\n\tborder-radius: 10px;\n\tpadding: 15px 20px;\n\tfont-family: 'Open-Sans', sans-serif;\n\t& input {\n\t\twidth:100px !important;\n\t}\n`;\n\n\nconst Title = styled.h1`\n\tmargin-bottom: 0.5em;\n\tcolor: rgba(0, 0, 0, 0.85);\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tline-height: 1.4;\n\tpadding: 0 10px;\n`;\nconst SubTitle = styled.span`\n\tmargin-bottom: 0.5em;\n\tcolor: rgba(0, 0, 0, 0.85);\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tline-height: 1.4;\n`;\n\n/*const TextHeader2 = styled(Text)`\n\tfont-size: 18px;\n\tfont-weight: 400;\n\tmargin-bottom: 30px;\n\tpadding: 0 10px;\n`;*/\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n`;\n\nconst NewJobContainer = styled.div`\n\tbackground: #fff;\n\tmargin-bottom: 50px;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-top: 20px;\n\talign-items: flex-start;\n\tpadding: 60px;\n\tbox-shadow: 0px 15px 50px 0px #d5d5d566;\n\tflex: 1;\n\t@media screen and (max-width: 763px) {\n\t\tpadding: 40px 20px;\n\t}\n`;\n\nconst TextHeader = styled(Text)`\n\tfont-size: 20px;\n\tfont-weight: 600;\n\tcolor: #c9c9c9;\n\tdisplay:inline-block;\n    white-space: break-spaces !important;\n\tmin-height:50px;\n\tpadding: 0 10px;\n\ttext-transform: uppercase;\n`;\n\nconst StepContainer = styled.div`\n\twidth: 80%;\n\theight: 100%;\n\tmargin: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\t@media screen and (max-width: 991px) {\n\t\twidth: 100%;\n\t}\n`;\n\nexport default InviteTech;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\InviteTech.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "PinModal.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport { Modal as AntModal, Typography } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport Input from '../../../../components/AuthLayout/Input';\nimport Box from '../../../../components/common/Box';\n\nconst PinModal = ({ isOpen, onClose, onSubmit,openSecondModal ,openFirstModal,setopenSecondModal,setopenFirstModal}) => {\n  // console.log('openFirstModal>>>>>>>',openFirstModal)\n  const [pinCode, setPinCode] = useState('');\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  const handleSubmit = () => {\n    onSubmit(pinCode);\n  };\n\n  const openGeneratePinWindow = () => {\n    window.open('https://remotedesktop.google.com/support', 'Generate Code', \"height=700,width=950\");\n    setPinCode('')\n    setopenSecondModal(true)\n    setopenFirstModal(false)\n  };\n\n  const handlePinCodeChange = (e) => {\n    setIsDisabled(false)\n    setPinCode(e.target.value)\n    if(e.target.value == ''){\n      setIsDisabled(true)\n    }\n  }\n\n  return (\n    <div>\n    { openSecondModal &&  (<Modal visible={isOpen} onCancel={onClose} footer={false} bodyStyle={{height:340}}>\n      <Box padding={20}>\n        <Label className=\"steplable\">Step 2:</Label>\n        <Label>Enter Code :</Label>\n        <CusInput value={pinCode} onChange={handlePinCodeChange} placeholder=\"Enter remote desktop code\" />\n        <div className=\"pin-message\">\n            Paste the code in the input box that you have generated & copied from the chrome desktop screen and wait.\n            This code will then be sent to the technician so he/she can get access to your machine.This might take some time.\n        </div>\n        <Box marginTop={20}>\n          <SendButton onClick={handleSubmit} disabled={isDisabled} className={(isDisabled ? \"disabled-btn\" : \"\") + \" pin-modal-btn\"}>Share</SendButton>\n          <SendButton onClick={openGeneratePinWindow} className=\"pin-modal-btn-large\" title=\"Click to generate code again if you lost the screen.\">Generate Code Again?</SendButton>\n        </Box>\n        \n      </Box>\n    </Modal>\n    )}\n\n    { openFirstModal &&  (<Modal visible={isOpen} onCancel={onClose} footer={false} bodyStyle={{height:340}}>\n      <Box padding={20}>\n        <Label className=\"steplable\">Step 1:</Label>\n        <div className=\"pin-message\">\n            <p>1. Click on the button below to generate code.A new screen will be shown, if chrome remote desktop is not installed in your computer you will have to download and install it using the download button on the chrome desktop screen.</p>\n            <p>2. If chrome remote desktop is already installed then \"Generate code\" named button will be shown in the chrome desktop screen.\n                Click on the button to generate code and copy the code.</p>\n        </div>\n        <Box marginTop={20}>\n          <SendButton onClick={openGeneratePinWindow} className=\"pin-modal-btn\">Generate Code</SendButton>\n        </Box>\n        \n      </Box>\n    </Modal>\n    )}\n    </div>\n  );\n};\n\nconst Modal = styled(AntModal)`\n  .ant-modal-body{\n    min-height: 260px;\n  }\n  .steplable{\n    font-size: 19px;\n  }\n  .ant-modal-content {\n    border-radius: 10px;\n   \n  }\n  .ant-typography{\n    margin-bottom:8px;\n  }\n  .ant-input{\n    border-radius: 4px !important;\n    margin-bottom: 10px;\n  }\n  .pin-message{\n    font-style: italic;\n  }\n  .pin-modal-btn{\n    height:45px !important;\n    width:140px !important;\n    float:right;\n  }\n  .pin-modal-btn-large{\n    height:45px !important;\n    width:186px !important;\n    float:right;\n  }\n  .disabled-btn{\n    background: #908d8d !important;\n    color: #fff !important;\n    border-color: #464646 !important;\n  }\n`;\n\nconst CusInput = styled(Input)`\n  height: 40px !important;\n`;\n\nconst Label = styled(Typography)`\n  font-size: 14px;\n`;\n\nconst SendButton = styled(StepButton)`\n  padding: 20px 40px;\n  font-size: 16px;\n  width: initial;\n  margin: 0;\n`;\n\nPinModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default PinModal;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\PinModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ProposalList.js",
                                                                    "fileData": "\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Row, Col, Typography,Button } from 'antd';\nimport styled from 'styled-components';\n// import moment from 'moment';\nimport { useHistory, useParams } from 'react-router';\nimport { getFullName } from '../../../../utils';\nimport StepButton from '../../../../components/StepButton';\nimport { useSocket } from '../../../../context/socketContext';\nimport ActionButton from '../../../../components/ActionButton';\nimport { List, message, Avatar, Spin } from 'antd';\nimport { PageHeader } from 'antd';\nconst ProposalList = ({ user,job,step,setStep})=>{\nconst [data,setData] = useState()\n\nuseEffect(()=>{\n    const data = [\n        {\n          title: 'Sahil',\n          description:\"Python expert\"\n        },\n        {\n          title: 'Manibha',\n          description:\"Microsoft Expert\"\n        },\n        {\n          title: 'Karan',\n          description:\"Sheet expert\"\n\n        },\n        {\n          title: 'Karun',\n          description:\"Django expert\"\n        },\n      ];\n    setData(data)\n\n},[])\n\n\n    \n\n    return (<>\n    <Container span={15}>\n    <PageHeader\n        className=\"site-page-header\"\n\n        title={job.issueDescription}\n    />\n        <NewJobContainer>\n        <List\n             itemLayout=\"horizontal\"\n             dataSource={data}\n             renderItem={item => (\n                <List.Item>\n                  <List.Item.Meta\n                    \n                    title={<a href=\"https://ant.design\">{item.title}</a>}\n                    description={item.description}\n                  />\n                  <ActionButton onClick={()=>{setStep(1)}}>Accept</ActionButton> \n                </List.Item>\n              )}\n        >\n\n      </List>\n    </NewJobContainer>\n    </Container>\n       \n    </>)\n}\nconst buttonContainer = styled.div`\ndisplay: flex;\n\n`\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst NewJobContainer = styled.div`\n  background: #fff;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  padding: 60px;\n  box-shadow: 0px 15px 50px 0px #d5d5d566;\n  flex: 1;\n`;\nexport default ProposalList",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\AcceptJob\\steps\\ProposalList.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Billing",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "CardDetails.js",
                                                            "fileData": "import React,{useState, useEffect} from 'react';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport { useUser } from '../../../context/useContext';\nimport { useJob } from '../../../context/jobContext';\nimport LeftSidebar from '../../../components/Sidebar/LeftSidebar';\nimport RightSidebar from '../../../components/Sidebar/RightSidebar';\nimport CustomerTopBar from '../../../components/TopBar/CustomerTopBar';\nimport Loader from '../../../components/Loader';\n\n\nconst CardDetails = (url) => {\n\tconst { user } = useUser();\n\tconst { techJobs,settechJobs } = useJob();\n\tconst [showLoader] = useState(false);\n\n\tuseEffect(() => {\n\t    const script = document.createElement('script');\n\n\t    script.src = 'https://js.stripe.com/v3/';\n\t    script.async = true;\n\n\t    document.body.appendChild(script);\n\n\t    return () => {\n\t      document.body.removeChild(script);\n\t    }\n  \t}, [url]);\n\n\treturn (\n\t\t<Container fluid>\n            <Row>\n\t\t\t\t<Col md=\"2\" className=\"sidebar-left-outer\">\n                    <LeftSidebar user={user} activeMenu=\"home\" />\n                </Col>\n\n                <Col md=\"7\">\n                \t<Row>\n                        <Loader height=\"100%\" className={(showLoader ? 'loader-outer' : 'd-none')} />\n                        <Col xs=\"12\">\n                            <CustomerTopBar/>\n                        </Col>\n                        <div className=\"pt-5 pb-3 col-12\">\n                        \t<h1 className=\"large-heading\">Add Payment Method</h1>\n                        </div>\n                        <Col md=\"12\" className=\"py-4 mt-1\">\n                            <Col xs=\"12\" className=\"p-0\">\n                                \n\t\t\t\t\t\t\t      \t<input id=\"cardholder-name\" type=\"text\"/>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div id=\"card-element\"></div>\n\t\t\t\t\t\t\t\t\t<div id=\"card-result\"></div>\n\t\t\t\t\t\t\t\t\t<button id=\"card-button\">Save Card</button>\n\t\t\t\t\t\t\t    \n                            </Col>\n                        </Col>\n                    </Row>\n                </Col>\n\n                <Col md=\"3\" className=\"sidebar-right-outer pt-4 px-5\">\n                    <RightSidebar user={user} techJobs ={techJobs} settechJobs={settechJobs}/>\n                </Col>\n\t\t\t</Row>\n\t\t</Container>\n\t)\n}\nexport default CardDetails;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Billing\\CardDetails.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "CheckoutForm.js",
                                                            "fileData": "import React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n    // 1\ufe0f\u20e3 Setup state to track client secret, errors and checkout status\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState(\"\");\n\n    // 2\ufe0f\u20e3 Store reference to Stripe\n    const stripe = useStripe();\n    const elements = useElements();\n    useEffect(() => {\n        // 3\ufe0f\u20e3 Create PaymentIntent and fetch client secret as soon as the page loads\n        window.fetch(\"/create-payment-intent\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ items: [{ id: \"xl-tshirt\" }] }),\n            }).then((res) => { \n                return res.json();\n            }).then((data) => {\n                setClientSecret(data.clientSecret);\n            });\n        }, []);\n        const handleChange = async (event) => {\n        // 4\ufe0f\u20e3 Listen for changes in the CardElement and display any errors as the customer types their card details\n        setDisabled(event.empty);\n        setError(event.error ? event.error.message : \"\");\n    };\n    const handleSubmit = async (ev) => {\n        ev.preventDefault();\n        setProcessing(true);\n        // 5\ufe0f\u20e3 Confirm Card Payment.\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n            },\n        });\n        if (payload.error) {\n            setError(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            setError(null);\n            setProcessing(false);\n            setSucceeded(true);\n        }\n    };\n    // 6\ufe0f\u20e3 Construct UI.\n    return (\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\n            <CardElement \n                id=\"card-element\"\n                options={{}} \n                onChange={handleChange}\n            />\n            <button disabled={processing || disabled || succeeded} id=\"submit\">\n                <span id=\"button-text\">\n                    {processing ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay\"}\n                </span>\n            </button>\n            \n            {error && (\n                    <div className=\"card-error\" role=\"alert\">{error}</div>\n                )\n            }\n            \n            <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>Payment succeeded!</p>\n        </form>\n    );\n}",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Billing\\CheckoutForm.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "BusinessPlan",
                                                    "children": [
                                                        {
                                                            "type": "folder",
                                                            "name": "Components",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "AvgInfo.js",
                                                                    "fileData": "import React from \"react\"\nimport start from \"../../../../assets/images/star.png\"\nimport uniGlassEmoji from \"../../../../assets/images/uniGlassEmoji.png\"\nimport clock from \"../../../../assets/images/clock.png\"\n\nconst AvgInfo = () => {\n    return<>\n        <div className=\"rating-div mb-20\">\n            <img src={start} className=\"mr-20\" />\n            <div>\n                <span className=\"rating-text\">Avg Star Rating</span>\n                <img src={start} className=\"small-star mr-13\" />\n                <img src={start} className=\"small-star mr-13\" />\n                <img src={start} className=\"small-star mr-13\" />\n                <img src={start} className=\"small-star mr-13\" />\n                <img src={start} className=\"small-star\" />\n            </div>\n        </div>\n        <div className=\"rating-div mb-20\">\n            <img src={uniGlassEmoji} className=\"mr-20\" />\n            <div>\n                <span className=\"issue-resolved-text\" >Avg Issues Resolved</span>\n                <span className=\"issue-resolved-percentage\" >97.5%</span>\n            </div>\n        </div>\n        <div className=\"rating-div mb-20\">\n            <img src={clock} className=\"mr-20\" />\n            <div>\n                <span className=\"issue-resolved-text\" >Avg Response Time</span>\n                <span className=\"issue-resolved-percentage\" >10 minutes</span>\n            </div>\n        </div>\n    </>\n}\n\nexport default AvgInfo",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\AvgInfo.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ChosenPlanSummary.js",
                                                                    "fileData": "import CheckInCircle from \"components/CheckInCircle\"\nimport React, { useEffect, useState } from \"react\"\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport wave from \"../../../../assets/images/wave.png\"\nimport {getAllPlans} from \"../../../../api/subscription.api\";\nimport { useLocation } from 'react-router';\nimport Loader from '../../../../components/Loader';\nimport * as PublicApi from \"../../../../api/public.api\"\n\nconst ChosenPlanSummary = ({setchosenProdId, setShowSubscriptionPlanModal}) => {\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const planId = queryParams.get('planId') ? queryParams.get('planId') : false;\n    const [planData, setPlanData] = useState()\n    const [planInfo, setPlanInfo] = useState()\n    const [totalCustomerWithThisSubscrition, setTotalCustomerWithThisSubscrition] = useState(0)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(()=>{\n        console.log(\"Updated state var planData\", planData)\n        console.log(\"Updated state var planInfo\", planInfo)\n    },[planData, planInfo])\n\n    useEffect(()=>{\n        (async ()=>{\n            console.log(\"My console for allPlans 1\", planId)\n            if(planId){\n                const totalCusotmer = await PublicApi.getTotalCustomerCount({\"subscription.plan_id\":planId})\n                console.log(\"totalCusotmer with current subscription plan \", totalCusotmer)\n                setTotalCustomerWithThisSubscrition(totalCusotmer.totalCount)\n                let allPlans = await getAllPlans({\"liveUser\":true})\n                const currentPlan = allPlans.data.filter(item => item.id === planId)\n                const keyFeatures = currentPlan[0].metadata.key_features.replace(\"[\", \"\").replace(\"]\",\"\").replaceAll(`\"`,\"\").split(\",\")\n                setchosenProdId(planId)\n                setPlanInfo(keyFeatures)\n                setPlanData(currentPlan[0])\n                setIsLoading(false)\n            }\n        })()\n    },[])\n\n    const handleChange = () => {\n        setShowSubscriptionPlanModal(true)\n    }\n\n    if (isLoading) return <Loader height=\"50%\" />;\n\n    return<div className=\"chosen-plan-summary-div\">\n        {/* <div className=\"chosen-plan-summary-cross\">\n            <FontAwesomeIcon icon={faPlus}/>\n        </div> */}\n        <div className=\"mb-25\">\n            <span className=\"chosen-plan-summary-head\">Your Chosen Plan</span>\n        </div>\n        <div>\n            <span className=\"small-team-text\">{planData?.name}</span>\n        </div>\n        {/* <div className=\"mb-25\">\n            <span className=\"purchase-number\">{totalCustomerWithThisSubscrition > 30 ? totalCustomerWithThisSubscrition : \"30\"} Purchased this plan!</span>\n            <img src={wave} className=\"wave-img\" />\n        </div> */}\n        <div className=\"mb-25\">\n            <span className=\"actual-price\">${planData?.metadata?.reg_price}</span>&nbsp;&nbsp;\n            <span className=\"discounted-price\">${planData?.price?.unit_amount/100}</span>\n        </div>\n        <div className=\"mb-25\">\n            {planInfo && planInfo.map((ele)=>{\n                return(<div className=\"d-flex align-items-center mb-1\">\n                            <CheckInCircle bgColor={\"turcose\"} style={{height:\"13px\", width:\"13px\"}} checkStyle={{color:\"black\"}} />\n                            &nbsp;&nbsp;\n                            <span className=\"text-with-check\">{ele}</span>\n                        </div>)\n            })}\n        </div>\n        <span className=\"change-text\" onClick={handleChange}>\n                Change\n        </span>\n    </div>\n}\n\nexport default ChosenPlanSummary",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\ChosenPlanSummary.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Header.js",
                                                                    "fileData": "import React from \"react\"\nimport logo from '../../../../assets/images/newLogoSmaller.png';\n\nconst Header = () => {\n    return <div className=\"business-plan-header-div\">\n        <img src={logo} className=\"business-plan-header-img\" />\n    </div>\n}\n\nexport default Header",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\Header.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "HeadingText.js",
                                                                    "fileData": "import React from \"react\"\n\nconst HeadingText = ({firstBlackText, secondGreenText, secondBlackText}) => {\n    return <>\n\n        <span className=\"headingText-span-font dark-color\">{firstBlackText}</span> \n        <span className=\"headingText-span-font turquiose-color\">{secondGreenText}</span> \n        <span className=\"headingText-span-font dark-color\">{secondBlackText}</span> \n\n    </>\n}\n\nexport default HeadingText",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\HeadingText.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "InputField.js",
                                                                    "fileData": "import React from \"react\"\n\nconst InputField = ({onChange, style, name, propClass, divPropClass, placeholder, defaultValue, disable, value}) => {\n    return<div className={divPropClass}><input type=\"text\" className={`business-plan-input max-width-768-w-100per ${propClass}`} onChange={(e)=>onChange(e)} style={style} name={name} placeholder={placeholder} defaultValue={defaultValue} disabled={disable} value={value} /></div>\n}\n\nexport default InputField",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\InputField.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ProgressBar.js",
                                                                    "fileData": "import React from \"react\"\nimport CheckInCircle from \"components/CheckInCircle\"\n\nconst ProgressBar = ({currentStep,jobIdFromUrl}) => {\n    return <div className=\"progress-bar-div w-full d-flex justify-content-center align-items-start max-width-768-mb-40px\">\n                <div className=\"progress-point d-flex flex-column justify-content-center align-items-center\">\n                    <CheckInCircle bgColor={\"turcose\"} style={{height:\"30px\", width:\"30px\"}} checkStyle={{color:\"black\", fontSize: \"12px\"}} />\n                    <span className=\"progress-bar-text\">Email</span>\n                </div>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;\n                <div className=\"progress-point d-flex flex-column justify-content-center align-items-center\">\n                    <CheckInCircle bgColor={\n                                            currentStep > 2 ? \"turcose\" : \"grey\" \n                                            } style={{height:\"30px\", width:\"30px\"}} checkStyle={{color:\"black\", fontSize: \"12px\"}} />\n                                            <div className=\"d-flex flex-column align-items-center\">\n                                                <span className=\"progress-bar-text\">Account</span>\n                                                <span className=\"progress-bar-text line-height-1 mb-3\">Details</span>\n                                            </div>\n                </div>\n                &nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <div className=\"progress-point d-flex flex-column justify-content-center align-items-center\">\n                    <CheckInCircle bgColor={\n                                            currentStep > 3 ? \"turcose\" : \"grey\" \n                                            } style={{height:\"30px\", width:\"30px\"}} checkStyle={{color:\"black\", fontSize: \"12px\"}} />\n                    <span className=\"progress-bar-text\">Purchase</span>\n                </div>\n            </div>\n}\n\nexport default ProgressBar",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\ProgressBar.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SubHeadeingText.js",
                                                                    "fileData": "import React from \"react\"\n\nconst SubHeadingText = ({text}) => {\n    return <span className=\"subHeading-span-font\">{text}</span>\n}\n\nexport default SubHeadingText",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\SubHeadeingText.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SubscriptionPlanCard.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport BasicButton from \"components/common/Button/BasicButton\";\n\nconst SubscriptionPlanCard = ({singlePlanInfo, chosenProdId, setShowSubscriptionPlanModal, userLoggedIn}) => {\n\n    const [keyFeatures, setKeyFeatures] =useState()\n\n    useEffect(()=>{\n        console.log(\"singlePlanInfo ------------------- \", singlePlanInfo)\n        setKeyFeatures(singlePlanInfo.metadata.key_features.replace(\"[\", \"\").replace(\"]\",\"\").replaceAll(`\"`,\"\").split(\",\"))\n    },[])\n\n    const handleSelect = (e) => {\n        if(userLoggedIn){\n            window.location.search = `?planId=${e.target.name}&page=CompleteYourPurchase`\n        }else{\n            window.location.search = `?planId=${e.target.name}`\n        }\n    }\n\n    return(<>\n        <div className=\"subscription-plan-card\">\n            <div className=\"d-flex justify-content-start align-items-center flex-column\">\n                <span className=\"subscription-plan-card-name\">{singlePlanInfo?.name}</span>\n                <div className=\"d-flex justify-content-center align-items-center\">\n                    <span className=\"subscription-plan-card-discount-price\" >${singlePlanInfo?.metadata?.reg_price}</span>\n                    <span className=\"subscription-plan-card-actual-price\" >${singlePlanInfo?.price?.unit_amount/100}</span>\n                </div>\n                {keyFeatures && keyFeatures.map((ele)=>{\n                    return(<div>\n                        <FontAwesomeIcon icon={faCheck} className=\"subscription-plan-card-check-icon\" />\n                        <span className=\"subscription-plan-card-info\">{ele}</span>\n                    </div>)\n                })}\n            </div>\n            <div className=\"mt-30\">\n                <BasicButton btnTitle={chosenProdId === singlePlanInfo.id ? \"Selected\" :\"Select\"} height={\"35px\"} width={\"100px\"} background={\"#01D4D5\"} color={\"white\"} onClick={(e)=>handleSelect(e)} disable={chosenProdId === singlePlanInfo.id} name={singlePlanInfo.id} />\n            </div>\n        </div>\n    </>)\n}\n\nexport default SubscriptionPlanCard",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\SubscriptionPlanCard.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SubscriptionPlanModal.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\"\nimport { Modal } from 'antd';\nimport SubscriptionPlanCard from \"./SubscriptionPlanCard\";\nimport { getAllPlans, buySubscription } from \"../../../../api/subscription.api\";\nimport { Button } from 'react-bootstrap';\nimport { isLiveUser } from '../../../../utils';\n\nconst SubscriptionPlanModal = ({chosenProdId, showSubscriptionPlanModal, setShowSubscriptionPlanModal, userLoggedIn, user}) => {\n\n    const [allPlans, setAllPlans] = useState()\n    let liveUser;\n\n    useEffect(()=>{\n        (async () => {\n            liveUser = await isLiveUser(user)\n            let getAllPlansResponse = await getAllPlans({ \"liveUser\": liveUser })\n            console.log(\"getAllPlansResponse \", getAllPlansResponse.data)\n            let sortedArr = getAllPlansResponse.data.sort((p1, p2) => (p1.metadata.display_order > p2.metadata.display_order) ? 1 : (p1.metadata.display_order < p2.metadata.display_order) ? -1 : 0);\n            console.log(\"Sorted Arr of subscription plans\", sortedArr)\n            setAllPlans(sortedArr)\n        })()\n    },[])\n\n    useEffect(()=>{\n        console.log(\"My console for allPlans state var\", allPlans)\n    },[allPlans])\n\n    return(<>\n        <Modal\n            className=\"subscription-plan-modal TncIdentifier\"\n            footer={\n                [\n                  <Button\n                    className=\"btn app-btn app-btn-light-blue modal-footer-btn\"\n                    onClick={() => {\n                        setShowSubscriptionPlanModal(false);\n                    }}\n                  >\n                    <span></span>Close\n                  </Button>\n                ]}\n            closable={false}\n            visible={showSubscriptionPlanModal} \n            maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n            // maskClosable={true}\n            width={1200}\n        >\n            <div className=\"d-flex justify-content-between max-width-768-w-flex-direction-col\">\n                {allPlans && allPlans.map((ele) => {\n                    return <SubscriptionPlanCard singlePlanInfo={ele} chosenProdId={chosenProdId} setShowSubscriptionPlanModal={setShowSubscriptionPlanModal} userLoggedIn={userLoggedIn} />\n                })}\n            </div>\n        </Modal>\n    </>)\n}\n\nexport default SubscriptionPlanModal",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\SubscriptionPlanModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Testimony.js",
                                                                    "fileData": "import React from \"react\"\nimport testimonyByBrian from \"../../../../assets/images/TestimonialBrian.png\"\nimport testimonyByJennifer from \"../../../../assets/images/TestimonialJennifer.png\"\nimport testimonyByStacy from \"../../../../assets/images/TestimonialStacy.png\"\n\nconst Testimony = ({testimonyBy}) => {\n    return<div className=\"w-full\">\n        <img src={\n            testimonyBy === \"brian\" ? \n                                    testimonyByBrian \n                                    : \n                                    testimonyBy === \"jennifer\" ? \n                                                                testimonyByJennifer \n                                                                : testimonyBy === \"stacy\" ? \n                                                                                                testimonyByStacy \n                                                                                            :  \"\"\n            \n            } className=\"w-full\" />\n    </div>\n}\n\nexport default Testimony",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\Testimony.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "TwentyFivePercentOffModal.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\"\nimport { Modal } from 'antd';\nimport { ReactSVG } from \"react-svg\";\nimport winkSvg from \"../../../../assets/images/wink.svg\"\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { useSocket } from '../../../../context/socketContext';\nimport { openNotificationWithIcon } from \"utils\";\n\nconst TwentyFivePercentOffModal = ({showtwentyPercentModal, setShowtwentyPercentModal}) => {\n\n    const { socket } = useSocket();\n    const [customerEmail, setCustomerEmail] = useState(\"\")\n    const emailRegExp = /^[a-zA-Z0-9]+[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+?\\.[a-zA-Z]{2,3}$/\n\n    useEffect(()=>{\n        console.log(\"My console for customerEmail\", customerEmail)\n    },[customerEmail])\n\n    /**\n     * Following function handles the onClick on next button\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n    const handleOnClick = () => {\n        if(customerEmail === \"\"){\n            openNotificationWithIcon(\"info\", \"Info\", \"Please enter an email.\")\n            return\n        }\n        const emailValidationRes = emailValidation()\n        console.log(\"My console for emailValidationRes\", emailValidationRes)\n        if(emailValidationRes){\n            socket.emit('send-user-left-email-to-admin', {customerEmail:customerEmail});\n            setShowtwentyPercentModal(false)\n        }else{\n            openNotificationWithIcon(\"error\", \"Error\", \"Please check your email format\")\n        }\n    }\n\n    /**\n     * Following function will check if user entered valid email or not\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n     const emailValidation = () => {\n        if(emailRegExp.test(String(customerEmail))){\n            return true\n        }else{\n            return false\n        }\n    }\n\n    return <div className=\"twenty-five-percent-off-modal-outer-div\">\n        <Modal \n            visible={showtwentyPercentModal} \n            closable={false} \n            destroyOnClose={false} \n            className=\"twenty-five-percent-off-modal\"\n            footer={[]}\n            width={550}\n        >\n           <div className=\"twenty-five-percent-off-modal-div d-flex flex-column justify content-center align-items-center\">\n                <span className=\"twenty-five-percent-off-heading\" >We get it!</span>\n                <span className=\"twenty-five-percent-off-heading mb-30\" >You're not ready yet. So...</span>\n                <div className=\"twenty-five-percent-off-email-div mb-30\">\n                    <span className=\"twenty-five-percent-off-inner-text color-black\">Here's 25% off,</span>\n                    <div className=\"d-flex justify content-center align-items-center mb-15\">\n                        <span className=\"twenty-five-percent-off-inner-text color-turcose\">for later.</span>\n                        <ReactSVG src={winkSvg} className=\"twenty-five-percent-off-wink-svg\" />\n                    </div>\n                    <div className=\"twenty-five-percent-off-input-btn-group mb-1\">\n                        <input type=\"text\" className=\"twenty-five-percent-off-email-input\" placeholder=\"Email\" value={customerEmail} onChange={(e)=>setCustomerEmail(e.target.value)}/>\n                        <div className=\"twenty-five-percent-off-btn-div\">\n                            <BasicButton height={\"60px\"} width={\"60px\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={handleOnClick} />    \n                        </div>\n                    </div>\n                    <div className=\"w-100p\">\n                        <span className=\"twenty-five-percent-off-last-text\">*we'll use this to send your coupon</span>\n                    </div>\n                </div>\n                <span className=\"twenty-five-percent-off-no-text\" onClick={()=>setShowtwentyPercentModal(false)}>No thank you</span>\n            </div> \n        </Modal>\n    </div>\n}\n\nexport default TwentyFivePercentOffModal",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\Components\\TwentyFivePercentOffModal.js"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import Header from \"./Components/Header\";\nimport React, {useEffect, useState} from \"react\"\nimport SignIn from \"./steps/SignIn\";\nimport ChooseYourPassWord from \"./steps/ChooseYourPassword\";\nimport CompleteYourPurchase from \"./steps/CompleteYourPurchase\";\nimport GotOurGeeks from \"./steps/GotOurGeeks\";\nimport LogIn from \"./steps/LogIn\";\nimport ResetPasswordLink from \"./steps/ResetPasswordLink\";\nimport TwentyFivePercentOffModal from \"./Components/TwentyFivePercentOffModal\";\nimport { useUser } from '../../../context/useContext';\nimport { useLocation } from 'react-router';\nimport {Elements} from \"@stripe/react-stripe-js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport {STRIPE_TEST_KEY, STRIPE_KEY} from '../../../constants';\nimport SubscriptionPlanModal from \"./Components/SubscriptionPlanModal\";\nimport { isLiveUser } from '../../../utils';\n\nconst BusinessPlan = () => {\n\n    let liveUser;\n    const { user, setUser, setToken } = useUser();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const CompleteYourPurchasePage = queryParams.get('page') && queryParams.get('page') === 'CompleteYourPurchase' ? true : false;\n    const inviteCode = queryParams.get('inviteCode') || 'nothing';\n\n    const [businessPlanStepNumber, setbusinessPlanStepNumber] = useState(0);\n    const jobFlowStepsObj = {\n      \"SignIn\": 0,\n      \"ChooseYourPassWord\": 1,\n      \"CompleteYourPurchase\": 2,\n      \"GotOurGeeks\": 3,\n      \"LogIn\": 4,\n      \"ResetPasswordLink\": 5,\n    }\n    const [userInfo, setUserInfo] = useState()\n    const [givenEmail, setGivenEmail] = useState()\n    const [chosenProdId, setchosenProdId] = useState()\n    const [showSubscriptionPlanModal, setShowSubscriptionPlanModal] = useState(false)\n    // const [showSubscriptionPlanModalTime, setShowSubscriptionPlanModalTime] = useState(150000)\n    const [showtwentyPercentModal, setShowtwentyPercentModal] = useState(false)\n    const [userLoggedIn, setUserLoggedIn] = useState(false)\n    const [stripePromise, setStripePromise] = useState(loadStripe(STRIPE_KEY))\n\n    // useEffect(()=>{\n    //     setTimeout(() => {\n    //         setShowtwentyPercentModal(true)\n    //     }, showSubscriptionPlanModalTime);\n    // }, [showSubscriptionPlanModalTime])\n\n    useEffect(()=>{\n        if(CompleteYourPurchasePage){\n            setbusinessPlanStepNumber(jobFlowStepsObj['CompleteYourPurchase'])\n        }\n        if(inviteCode && inviteCode != 'nothing'){\n            setbusinessPlanStepNumber(jobFlowStepsObj['ChooseYourPassWord'])\n        }\n    },[])\n\n    useEffect(()=>{\n        (async()=>{\n            if(user){\n                liveUser = await isLiveUser(user)\n                let stripePromiseToSet = await loadStripe(liveUser ? STRIPE_KEY : STRIPE_TEST_KEY)\n                if(stripePromiseToSet){\n                    setStripePromise(stripePromiseToSet)\n                }\n                setbusinessPlanStepNumber(jobFlowStepsObj[\"CompleteYourPurchase\"])\n            }\n        })()\n    },[])\n\n    return <div className=\"gradientBackground business-plan-parent-div\">\n        <Header/>\n        <div className=\"business-plan-common-div\">\n            {\n                businessPlanStepNumber === 0 && <SignIn \n                                                    setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                    jobFlowStepsObj={jobFlowStepsObj}\n                                                    setUserInfo={setUserInfo}\n                                                    setGivenEmail={setGivenEmail}\n                                                    user={user}\n                                                    setchosenProdId={setchosenProdId}\n                                                    setShowSubscriptionPlanModal={setShowSubscriptionPlanModal}\n                                                    setShowtwentyPercentModal={setShowtwentyPercentModal}\n                                                />\n            }\n            {\n                businessPlanStepNumber === 1 && <ChooseYourPassWord \n                                                    givenEmail={givenEmail}\n                                                    setGivenEmail={setGivenEmail}\n                                                    setUser={setUser}\n                                                    setToken={setToken}\n                                                    setchosenProdId={setchosenProdId}\n                                                    setShowSubscriptionPlanModal={setShowSubscriptionPlanModal}  \n                                                    setShowtwentyPercentModal={setShowtwentyPercentModal}\n                                                />\n            }\n            {\n                businessPlanStepNumber === 2 && stripePromise !== '' && <Elements stripe={stripePromise} > \n                                                    <CompleteYourPurchase\n                                                        user={user}\n                                                        setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                        jobFlowStepsObj={jobFlowStepsObj}\n                                                        setchosenProdId={setchosenProdId}\n                                                        setShowSubscriptionPlanModal={setShowSubscriptionPlanModal}\n                                                        setUserLoggedIn={setUserLoggedIn}\n                                                        setShowtwentyPercentModal={setShowtwentyPercentModal}\n                                                    />\n                                                </Elements>\n            }\n            {\n                businessPlanStepNumber === 3 && <GotOurGeeks user={user} />\n            }\n            {\n                businessPlanStepNumber === 4 && <LogIn\n                                                    userInfo={userInfo}\n                                                    setUser={setUser}\n                                                    setToken={setToken}\n                                                    setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                    jobFlowStepsObj={jobFlowStepsObj}\n                                                    setchosenProdId={setchosenProdId}\n                                                    setShowSubscriptionPlanModal={setShowSubscriptionPlanModal}\n                                                    setShowtwentyPercentModal={setShowtwentyPercentModal}\n                                                />\n            }\n            {\n                businessPlanStepNumber === 5 && <ResetPasswordLink\n                                                    userInfo={userInfo}\n                                                    setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                    jobFlowStepsObj={jobFlowStepsObj}\n                                                 />\n            }\n        </div>\n        <TwentyFivePercentOffModal showtwentyPercentModal={showtwentyPercentModal} setShowtwentyPercentModal={setShowtwentyPercentModal} />\n        <SubscriptionPlanModal chosenProdId={chosenProdId} showSubscriptionPlanModal={showSubscriptionPlanModal} setShowSubscriptionPlanModal={setShowSubscriptionPlanModal} userLoggedIn={userLoggedIn} user={user} />\n    </div>\n}\n\nexport default BusinessPlan",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "ChooseYourPassword.js",
                                                                    "fileData": "import React, {useEffect, useState} from \"react\"\nimport { Row, Col } from \"react-bootstrap\";\nimport ChosenPlanSummary from \"../Components/ChosenPlanSummary\";\nimport Testimony from \"../Components/Testimony\";\nimport ProgressBar from \"../Components/ProgressBar\";\nimport HeadingText from \"../Components/HeadingText\";\nimport { faPlus,faInfo} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SubHeadingText from \"../Components/SubHeadeingText\";\nimport InputField from \"../Components/InputField\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport PhoneInput from 'react-phone-input-2';\nimport PasswordInput from \"components/AuthComponents/PasswordInput\";\nimport ValidatorModel from \"components/AuthComponents/ValidatorModel\";\nimport PasswordValidator from \"components/AuthComponents/PasswordValidator\";\nimport { openNotificationWithIcon } from \"utils\";\nimport * as AuthApi from '../../../../api/auth.api'\nimport { useLocation } from 'react-router';\nimport {privacyPolicy} from '../../../../policy-pages/privacy-policy';\nimport {cookiePolicy} from '../../../../policy-pages/cookie-policy';\nimport {TermsCondition} from '../../../../policy-pages/conditions';\nimport { Modal, Checkbox } from 'antd';\nimport JobInfoRightSideBar from \"components/JobInfoRightSideBar\";\nimport * as JobApi from '../../../../api/job.api';\nimport { useFetchInvite } from '../../../../api/invite.api';\n\nconst ChooseYourPassWord = ({setGivenEmail,givenEmail, setUser,setToken, setchosenProdId, setShowSubscriptionPlanModal, setShowtwentyPercentModal,setShowLoader}) => {\n    function useQuery() {\n    \tconst { search } = useLocation();\n    \treturn React.useMemo(() => new URLSearchParams(search), [search]);\n  \t}\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const planId = queryParams.get('planId') ? queryParams.get('planId') : false;\n    const jobId = queryParams.get('jobId') ? queryParams.get('jobId') : false;\n    const couponCode = queryParams.get('couponCode') ? queryParams.get('couponCode') : false;\n    const inviteCode = queryParams.get('inviteCode') || 'nothing';\n\tconst { data: inviteData } = useFetchInvite(inviteCode);\n    const [dialCode,setDialCode] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [pwModelVisible, setPwModelVisible] = useState()\n    const [userInfo, setUserInfo] = useState({\n                                                firstName:\"\",  \n                                                lastName:\"\", \n                                                email:givenEmail, \n                                                password:\"\"\n                                            })\n    const [alertMessagePassword, setAlertMessagePassword] = useState()\n    const [disableBtn, setDisableBtn] = useState(false)\n    const [showSubscriptionPlanModalTime, setShowSubscriptionPlanModalTime] = useState(150000)\n    const [discountModalShown, setDiscountModalShown] = useState(false)\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [isPrivacyPolicyModalAvailable,setIsPrivacyPolicyModalAvaliable] = useState(false)\n    const [isCookiesPolicyModalAvailable,setIsCookiesPolicyModalAvailable] = useState(false)\n    const [isBusinessTypeAccount,setIsBusinessTypeAccount] = useState(false)\n    const [businessName,setBusinessName] = useState(\"\")\n    const [inputEmail, setinputEmail] = useState(\"\")\n    const [isValidEmail, setIsValidEmail] = useState(false);\n    const emailRegExp = /^[a-zA-Z0-9]+[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+?\\.[a-zA-Z]{2,3}$/\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const [hideRefer,setHideRefer] = useState(false);\n    const [isHovering, setIsHovering] = useState(false);\n    useEffect(() => {\n        if (inviteData) {\n            // if (inviteData?.status === 'completed') {\n            //     window.location.href = '/login';\n            // }\n            \n            setGivenEmail(inviteData?.email)\n            if(inviteData?.inviteCode){\n                setHideRefer(true)\n                setinputEmail(inviteData?.ownerEmail )\n            }\n            console.log(\"inviteDatainviteData\", inviteData,inviteCode)\n        }\n    }, [inviteData]);\n    useEffect(()=>{\n        if(!discountModalShown && planId){\n            setTimeout(() => {\n                setShowtwentyPercentModal(true)\n                setDiscountModalShown(true)\n            }, showSubscriptionPlanModalTime);\n        }\n    }, [showSubscriptionPlanModalTime])\n\n    useEffect(()=>{\n        if(!isBusinessTypeAccount)setBusinessName(\"\");\n    },[isBusinessTypeAccount])\n    \n    const reValidationObject = {\n        firstName:/^\\s*[a-zA-Z\\s]*\\s*$/,\n        lastName:/^\\s*[a-zA-Z\\s]*\\s*$/,\n        email:/^[a-zA-Z0-9]+[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+?\\.[a-zA-Z]{2,3}$/,\n        password:/[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/,\n    }\n    const validationMessages = {\n            firstName:'No numbers or special characters are allowed',\n            lastName:'No numbers or special characters are allowed',\n            email:'Check the format of the email you entered',\n    }\n    const nameForValidationMessage ={\n            firstName: 'in First Name',\n            lastName: \"in Last Name\",\n            email:'',\n    }\n    let sixChar = false;\n    let letter = false;\n    let specialChar = false;\n    let number = false;\n\n    /**\n\t * Following function is to handle change for user personal info.\n\t * @author : Vinit\n\t */\n    const handleChange = (e) => {\n        setShowSubscriptionPlanModalTime(150000)\n        const { name, value } = e.target;\n        console.log(\"My console for handleChange \", { name, value, userInfo })\n        setUserInfo(prevState => ({\n            ...prevState,\n            [name]: value.trim()\n        }));\n    }\n\n    /**\n\t * Following function is to handle change of phone number field in the form.\n\t * @author : Vinit\n\t */\n     const handlePhoneNumber = (value, data) => {\n        setShowSubscriptionPlanModalTime(150000)\n\t\tsetPhoneNumber(`+${value}`);\n        setDialCode(data.dialCode)\n\t};\n\n    const regularExpressionTesting = (fieldName) => {\n        console.log(\"My console for fieldName\", fieldName, reValidationObject[fieldName].test(fieldName))\n        if(!reValidationObject[fieldName].test((String(userInfo[fieldName])))){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", `${validationMessages[fieldName]} ${nameForValidationMessage[fieldName]}`)\n            return false\n        }else{\n            return true\n        }\n    }\n\n    const handleOk = () => {\n\t\tsetIsModalVisible(false);\n\t};\n\n\tconst handleOkPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(false);\n\t};\n\n\tconst handleCancel = () => {\n\t\tsetIsModalVisible(false);\n\t};\n\n    const showModal = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst showPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(true);\n\t};\n\n\tconst showCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(true);\n\t}\n\n\tconst handleCancelPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(false);\n\t}\n\tconst handleCancelCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(false)\n\t}\n\n\tconst handleOkCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(false)\n\t}\n\n    const handleSignUp = async (e) => {\n        e.preventDefault()\n        setShowSubscriptionPlanModalTime(150000)\n        setDisableBtn(true)\n        const firstNameValidation = regularExpressionTesting(\"firstName\")\n        const lastNameValidation = regularExpressionTesting(\"lastName\")\n\n        if(userInfo.firstName === \"\"){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Please enter your first name.\")\n            return\n        }\n        if(userInfo.lastName === \"\"){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Please enter your last name.\")\n            return\n        }\n\n        if(((phoneNumber.length - dialCode.length) -1 ) !== 10){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Phone number must be of 10 digits (excluding country code).\")\n            return\n        }\n\n        if(!firstNameValidation || !lastNameValidation) return\n\n        // Password validation :-\n        if(userInfo.password.indexOf(\" \") >= 0){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Password should not contain any empty space.\")\n            return\n        }\n\n        if(userInfo.firstName.indexOf(\" \") >= 0){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"First name should not contain any empty space.\")\n            return\n        }\n        \n        if(userInfo.lastName.indexOf(\" \") >= 0){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Last name should not contain any empty space.\")\n            return\n        }\n        //  if(inputEmail === \"\"){\n        //     openNotificationWithIcon(\"info\", \"info\", `Please enter your email!`)\n        //     setDisableBtn(false)\n        //     return\n        // }\n        if(inputEmail !== \"\"){\n        const isValidEmail = emailValidation();\n        if (!isValidEmail) {\n            setDisableBtn(false);\n            return;\n        }\n    }\n        if(isBusinessTypeAccount && businessName === \"\"){\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Please enter your business name.\")\n            return\n        }\n\n        if (userInfo.password.length > 5) sixChar = true;\n        if (/[a-zA-Z]/.test(userInfo.password)) letter = true;\n        if (reValidationObject[\"password\"].test(userInfo.password)) specialChar = true;\n        if (/[0-9]/.test(userInfo.password)) number = true;\n\n        if(sixChar && letter && specialChar && number){\n            // registering user's data to DB\n            let res  = await AuthApi.register({\n                    timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,\n                    firstName:userInfo.firstName.replace(/\\s/g, ''), \n                    lastName:userInfo.lastName.replace(/\\s/g, ''), \n                    email:userInfo.email ? userInfo.email : givenEmail, \n                    password:userInfo.password, \n                    confirm_password:userInfo.password, \n                    phoneNumber:phoneNumber, \n                    language:\"English\", \n                    userType:'customer',\n                    status:'completed',\n                    inviteCode: inviteCode,\n                    isBusinessTypeAccount: isBusinessTypeAccount,\n                    businessName:businessName,\n                    referred_code:inputEmail\n            })\n            if(res.user){\n                openNotificationWithIcon(\"success\", \"Success\", \"User registered successfully!\")\n                setToken(res.token.accessToken)\n                // setUser(res.user)\n                if(planId){\n                    if(couponCode){\n                        window.location.href=`/buy-business-plan?planId=${planId}&page=CompleteYourPurchase&couponCode=${couponCode}`\n                    }else{\n                        window.location.href=`/buy-business-plan?planId=${planId}&page=CompleteYourPurchase`\n                    }\n                }else if(jobId){\n                    await JobApi.updateJob(jobId, { customer: res.user.customer.id, guestJob: false, tech_search_start_at: new Date() }).then((testingRes) => {\n                        if (technicianId) {\n                            window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobId}&technicianId=${technicianId}`\n                        } else {\n                            window.location.href=`/customer/profile-setup?page=add-card&jobId=${jobId}`\n                        }\n\n                    })\n                }\n                else if(inviteCode && inviteCode != 'nothing'){\n                    window.location.href = \"/\"\n                }else{\n                    window.location.href=`/customer/registered` \n                }\n            } else if(res.success === false && res.message){\n                setDisableBtn(false)\n                openNotificationWithIcon(\"error\", \"Error\", res.message)\n            }\n        }else{\n            setDisableBtn(false)\n            openNotificationWithIcon(\"info\", \"Info\", \"For your security, we need your password to be a minimum of 6 characters, a number, and a special character.\")\n        }\n    }\n    const emailValidation = () => {\n        if(!emailRegExp.test(String(inputEmail))){\n            openNotificationWithIcon(\"info\", \"info\", `Please check email format!`)\n            return false\n        }else{\n            setinputEmail(inputEmail)\n            return true\n        }\n    }\n\n\n    const handleCheckboxChange = (e) => {\n        setIsBusinessTypeAccount(e.target.checked)\n    };\n\n    const handleBusinessNameOnChange = (e) => {\n        setBusinessName(e.target.value);\n    }\n\n    const emailInputOnChange = (e) => {\n        const newEmail = e.target.value;\n        setinputEmail(newEmail);\n    }\n    const handleMouseOver = () => {\n        setIsHovering(true);\n    };\n    \n    const handleMouseOut = () => {\n      setIsHovering(false);\n    };\n    return <div className=\"custom-container min-height-inherit\">\n\n            <Modal title=\"Terms & Conditions\"  className=\"app-confirm-modal TncIdentifier\" closable={false}  footer={[\n                    <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancel}>\n                        Close\n                    </button>\n                ]} visible={isModalVisible} onOk={handleOk} >\n                {TermsCondition()}\n                \n            </Modal>\n\n            <Modal title=\"Privacy Policy\"  className=\"app-confirm-modal TncIdentifier\" closable={false}  footer={[\n                    <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelPrivacyModal}>\n                        Close\n                    </button>\n                ]} visible={isPrivacyPolicyModalAvailable} onOk={handleOkPrivacyModal} >\n                {privacyPolicy()}\n            </Modal>\n\n            <Modal title=\"Cookies Policy\"  className=\"app-confirm-modal TncIdentifier\" closable={false}  footer={[\n                    <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelCookiesModal}>\n                        Close\n                    </button>\n                ]} visible={isCookiesPolicyModalAvailable} onOk={handleOkCookiesModal} >\n                {cookiePolicy()}\n            </Modal>\n\n            <Row className=\"min-height-inherit d-flex justify-content-center align-items-center parent-row\">\n                <Col md={9} xs={12} className=\"d-flex flex-column min-height-inherit\">\n                    {planId && <ProgressBar currentStep={2} />}\n                    <div className=\"d-flex flex-column justify-content-center align-items-center min-height-inherit\">\n                        <div className=\"mb-50 text-center\">\n                            <HeadingText firstBlackText={\"Create Your \"} secondGreenText={\" Geeker Account \"} />\n                        </div>\n                        <div className=\"mb-50\">\n                            <SubHeadingText text={\" Access on-demand tech support, whenever you need it. \"} />\n                        </div>\n                        <div className=\"choose-password-email-div d-flex justify-content-center align-items-center mb-20\">\n                            <span className=\"choose-password-email\">{givenEmail}</span>\n                            {/* <div className=\"choose-password-email-cross-div d-flex justify-content-center align-items-center\">\n                                <FontAwesomeIcon icon={faPlus} className=\"choose-password-email-cross\" />\n                            </div> */}\n                        </div>\n                        <form onSubmit={handleSignUp}>\n                            <div className=\"mb-20 d-flex flex-wrap justify-content-between w-428px max-width-768-w-100per \">\n                                <div className=\"min-width-200px max-width-768-w-100per max-width-768-mb-20px\">\n                                    <SubHeadingText text={\"First Name\"} />\n                                    <InputField propClass={\"w-200px max-width-768-w-100per\"} onChange={handleChange} name={\"firstName\"} />\n                                </div>\n                                <div className=\"min-width-200px max-width-768-w-100per\">\n                                    <SubHeadingText text={\"Last Name\"} />\n                                    <InputField propClass={\"w-200px max-width-768-w-100per\"} onChange={handleChange} name={\"lastName\"} />\n                                </div>\n                            </div>\n                            <div className=\"mb-20 w-428 max-width-768-w-100per position-relative\">\n                                <SubHeadingText text={\"Create Pasword\"} />\n                                <PasswordInput\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                    // className=\"business-plan-input\"\n                                    onFocus={() => setPwModelVisible(true)}\n                                    onBlur={() => setPwModelVisible(false)}\n                                    value={userInfo.password}\n                                    onChange={handleChange}\n                                />\n                                <ValidatorModel  visible={pwModelVisible}>\n                                    <PasswordValidator inputText={userInfo.password} setAlertMessagePassword={setAlertMessagePassword} />\n                                </ValidatorModel>\n                            </div>\n                            <div className=\"mb-20\">\n                                <div className=\"d-flex flex-row align-items-center justify-content-start mb-1\">\n                                    <SubHeadingText text={\"Phone Number\"} />\n                                    <span className=\"phone-info-round-div ml-1 position-relative\" onMouseOver={handleMouseOver} onMouseOut={handleMouseOut} role=\"button\" onTouchStart={handleMouseOver} onFocus={() => setIsHovering(true)} onBlur={() => setIsHovering(false)}>\n                                        <FontAwesomeIcon icon={faInfo} className=\"i-info-icon\" />\n                                    {isHovering ? (\n                                        <div\n                                            className=\"phoneNumberInfo-div\"\n                                        >\n                                            <div\n                                                className=\"phoneNumberInfo-triangle\"></div>\n                                            <div\n                                                className=\"phoneNumberInfo-inner-div\">\n                                                <p>We need your phone in case you have problems connecting. You'll never get spam</p>\n                                            </div>\n                                        </div>\n                                    ) : null}\n                                    </span>\n                                </div>\n                                <PhoneInput countryCodeEditable={false} name={'phoneNumber'} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca', 'gb']} className={\"p-0 choose-your-password-phone-input\"} dropdownClass=\"phoneInputDropdownClass\" inputClass=\"business-plan-phone-input\" value={phoneNumber} onChange={handlePhoneNumber} />\n                            </div>\n                            {/* <div className=\"mb-10\">\n                                <Checkbox onChange={handleCheckboxChange} className=\"personalUseCheckbox\">\n                                    <span>\n                                        I\u2019m using this account for personal use \n                                    </span>\n                                </Checkbox>\n                            </div> */}\n                            {/* <div className=\"mb-10 w-full d-flex justify-content-center \"> */}\n                            {inviteCode && inviteCode != 'nothing' ? <></> : <div className=\"mb-20\">\n                                <div className=\"max-width-768-w-100per\">\n                                    <Checkbox onChange={handleCheckboxChange} className=\"personalUseCheckbox mb-2\">\n                                        <span>\n                                            I\u2019m using this account for business use \n                                        </span>\n                                    </Checkbox>\n                                    <InputField placeholder={\"Business Name\"} onChange={handleBusinessNameOnChange} propClass={isBusinessTypeAccount ? \"\" : \"disableElement\"} value={businessName} />\n                                </div>\n                            </div>}\n                            {!hideRefer && (\n                            <div className=\"mb-20 w-full d-flex justify-content-center \">\n                                <div className=\"max-width-768-w-100per\">\n                                    <SubHeadingText text={\"Referred By\"} />\n                                    <InputField placeholder=\"Referral's Email (optional)\" onChange={emailInputOnChange} value={inputEmail}/>\n                                </div>\n                            </div>\n                            )}\n                            <div className=\"business-plan-sign-in-button mb-15\">\n                                <BasicButton btnTitle={\"Create your Account\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={handleSignUp} disable={disableBtn} showSpinner={disableBtn} btnType={\"submit\"} />    \n                            </div>\n                        </form>\n                        <div className=\"TnCDiv max-width-768-mb-20px\">\n                            <span className=\"tAndc-text grey-color-text\">By Signing up I agree to </span>\n                            <span className=\"tAndc-text turcose-color-text\">\n                                <a onClick={ showModal}>\n                                    Terms & Conditions\n                                </a>, {\" \"}\n                                <a onClick={ showPrivacyModal}>\n                                    Privacy Policy\n                                </a>\n                            </span>\n                            <span className=\"tAndc-text grey-color-text\"> & </span>\n                            <span className=\"tAndc-text turcose-color-text max-width-768-mb-20px linne-height\">\n                                <a onClick={ showCookiesModal}>Cookies Policy</a>\n                            </span>\n                        </div>\n                    </div>\n                </Col>\n                <Col md={3} xs={12} className=\"sign-in-side-column\" >\n                    {planId && <ChosenPlanSummary setchosenProdId={setchosenProdId} setShowSubscriptionPlanModal={setShowSubscriptionPlanModal} />}\n                    {jobId && <JobInfoRightSideBar/>}\n                    <Testimony testimonyBy={\"jennifer\"} />\n                </Col>\n            </Row>\n        </div>\n}\n\nexport default ChooseYourPassWord",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\ChooseYourPassword.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "CompleteYourPurchase.js",
                                                                    "fileData": "import CheckInCircle from \"components/CheckInCircle\";\nimport React, { useEffect, useState } from \"react\"\nimport { Row, Col } from \"react-bootstrap\";\nimport {ColorRing} from 'react-loader-spinner'\nimport HeadingText from \"../Components/HeadingText\";\nimport ProgressBar from \"../Components/ProgressBar\";\nimport SubHeadingText from \"../Components/SubHeadeingText\";\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport Testimony from \"../Components/Testimony\";\nimport AvgInfo from \"../Components/AvgInfo\";\nimport {useHistory, useLocation } from 'react-router';\nimport { getAllPlans, buySubscription } from \"../../../../api/subscription.api\";\nimport Loader from '../../../../components/Loader';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as UserApi from '../../../../api/users.api';\nimport CardLogo from \"components/common/CardLogo\";\nimport { Radio } from 'antd';\nimport stripeSecureLogo from \"../../../../assets/images/stripe-secure-logo.png\"\nimport * as JobApi from '../../../../api/job.api';\nimport { openNotificationWithIcon, isLiveUser,GAevent,decideEstimatesToShowUsingLD } from '../../../../utils';\nimport moment from 'moment';\nimport { CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { STRIPE_KEY, STRIPE_TEST_KEY,JOB_STATUS,SECRET_KEY } from '../../../../constants';\nimport { faCreditCard } from '@fortawesome/free-solid-svg-icons';\nimport mixpanel from 'mixpanel-browser';\nimport * as PromoApi from '../../../../api/promo.api';\nimport * as PublicApi from \"../../../../api/public.api\"\nimport { useJob } from '../../../../context/jobContext';\nimport { useSocket } from '../../../../context/socketContext';\nimport { Modal } from 'antd';\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { useAuth } from \"context/authContext\";\nimport { useNotifications } from '../../../../context/notificationContext';\nimport EditJobModal from \"../../ProfileSetup/Components/EditJobModal\";\nimport * as SoftwareApi from '../../../../api/software.api';\nimport * as PromocodeApi from '../../../../api/promoCode.api';\nimport * as StripeApi from '../../../../api/stripeAccount.api';\nimport * as AppliedCoupons from '../../../../api/appliedCoupons.api';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport SignUpHeading from \"../../../../components/common/SignUpHeading\";\nconst MESSAGES = [ \"Promo Code is Already Expired !!\" , \"Promo Code is already used !!\",\n                   \"Promo Code Successfully Applied !!\" , \"Please Enter a Promo Code !!\" , \"Something Went Wrong !!\"];\n\nconst CompleteYourPurchase = ({ user, setbusinessPlanStepNumber, jobFlowStepsObj, setShowSubscriptionPlanModal, setUserLoggedIn, setShowtwentyPercentModal,job,isScheduleJob,isFirsJob}) => {\n    const history = useHistory();\n    const location = useLocation();\n    const { refetch,getGuestUser } = useAuth();\n    const queryParams = new URLSearchParams(location.search);\n    const planId = queryParams.get('planId') ? queryParams.get('planId') : false;\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const elements = useElements();\n    const stripe = useStripe();\n    let liveUser;\n    const [planData, setPlanData] = useState()\n    const [planInfo, setPlanInfo] = useState()\n    const [promocode, setPromocode] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const [showCCForm, setShowCCForm] = useState(true)\n    const [disableBtn, setDisableBtn] = useState(false)\n    // const [promoCodes, setPromoCodes] = useState([])\n    const [promoData, setPromoData] =useState([]);\n    const [promoId, setPromoId] = useState(\"\")\n    // const [isValidate, setIsValidate] = useState(false)\n    // const [discountedPrice, setDiscountedPrice] = useState(0)\n    const [showOverlayLoading, setShowOverlayLoading] = useState(false);\n    const [showMessageDialog, setShowMessageDialog] = useState(false);\n    const [dialogShow, setDialogShow] = useState(false);\n    const [couponId,setCouponId] = useState(queryParams.get(\"couponCode\") ? queryParams.get(\"couponCode\") : \"\")\n    const [showPromoCodeInputField, setShowPromoCodeInputField] = useState(false)\n    const [formData, setFormData] = useState({ zip: \"\" })\n    const [showSubscriptionPlanModalTime, setShowSubscriptionPlanModalTime] = useState(150000)\n    const [discountModalShown, setDiscountModalShown] = useState(false)\n    const [totalCustomerWithThisSubscrition, setTotalCustomerWithThisSubscrition] = useState(0)\n    const { updateJob, createJob, setJob, fetchJob,fetchJobAsGuest } = useJob();\n    const [jobData, setJobData] = useState(true);\n    const { socket } = useSocket();\n    const { createNotification, fetchNotifications } = useNotifications();\n    const [softwareList, setSoftwareList] = useState([]);\n    const [showEditJobModal, setShowEditJobModal] = useState(false);\n    const [promoCodeApplied , setIsPromocodeApplied] = useState({});\n    const [calculatedPrices, setCalculatedPrices] = useState({});\n    const [isEstimatesVisible , setIsEstimatesVisible] = useState(false);\n    const [customersDefaultCC, setCustomersDefaultCC] = useState()\n    const [customersDefaultCCBrand, setCustomersDefaultCCBrand] = useState()\n    const [changeCreditCard, setChangeCreditCard] = useState(false)\n    const [customersAllCC, setCustomersAllCC] = useState()\n    const [selectedCreditCard, setSelectedCreditCard] = useState()\n    const [isJobSummaryUpdate,setIsJobSummaryUpdate] = useState(false);\n    const [couponDiscountedPrice,setCouponDiscountedPrice] = useState();\n    const [couponAlreadyUsed,setCouponAlreadyUsed] = useState(false);\n\n    useEffect(()=>{\n        console.log(\"looking for couponId\", couponId)\n    },[couponId])\n\n    useEffect(()=>{\n        if(!discountModalShown){\n            if (planId) {\n                setTimeout(() => {\n                    setShowtwentyPercentModal(true)\n                    setDiscountModalShown(true)\n                }, showSubscriptionPlanModalTime);\n            }\n        }\n    }, [showSubscriptionPlanModalTime])\n\n    useEffect(() => {\n        (async () => {\n            if(user.roles[0] !== \"owner\"){\n                window.location.href= \"/\"\n            }\n            if (jobIdFromUrl) {\n                console.log(\"My console from job summary\", jobIdFromUrl)\n                fetchJob(jobIdFromUrl)\n                const res = await SoftwareApi.getSoftwareList();\n                if(res) {\n                    console.log(\"software api response from job summary component\", res)\n                    setSoftwareList(res.data)\n                }\n            }\n        })();\n    }, [])\n\n    useEffect(() => {\n      if (document.getElementsByClassName('loaderOverlay').item(0)) {\n          document.getElementsByClassName('loaderOverlay').item(0).parentElement.style.background = 'rgba(255,255,255,0.7)';\n          // document.getElementsByClassName('loaderOverlay').item(0).parentElement.style.opacity = 0.5;\n          document.getElementsByClassName('loaderOverlay').item(0).getElementsByClassName('ant-modal-content').item(0).style.background = 'transparent';\n          document.getElementsByClassName('loaderOverlay').item(0).getElementsByClassName('ant-modal-content').item(0).style.boxShadow = 'none';\n          document.getElementsByClassName('loaderOverlay').item(0).getElementsByClassName('ant-modal-body').item(0).style.textAlign = 'center';\n          document.getElementsByClassName('loaderOverlay').item(0).getElementsByClassName('ant-modal-footer').item(0).style.borderTop = 0;\n      }\n\n      if (showOverlayLoading) {\n          setTimeout(() => {\n              setShowOverlayLoading(false);\n              setShowMessageDialog(true);\n          }, 5000);\n      }\n\n  }, [showOverlayLoading]);\n\n  useEffect(() => {\n      if (document.getElementsByClassName('messageDialog').item(0)) {\n          document.getElementsByClassName('messageDialog').item(0).parentElement.style.background = 'rgba(255,255,255,0.7)';\n          if (document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-header').item(0)) {\n              document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-header').item(0)\n                  .remove();\n          }\n\n          document.getElementsByClassName('ant-modal-close-x').item(0).addEventListener('click', () => {\n              setShowMessageDialog(false);\n          });\n          // document.getElementsByClassName('loaderOverlay').item(0).parentElement.style.opacity = 0.5;\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-content').item(0).style.background = 'white';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-content').item(0).style.boxShadow = 'none';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-content').item(0).style.borderRadius = '10px';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-content').item(0).style.padding = '20px';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-body').item(0).style.textAlign = 'center';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-body').item(0).style.display = 'flex';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-body').item(0).style.flexDirection = 'column';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-body').item(0).style.alignItems = 'center';\n          document.getElementsByClassName('messageDialog').item(0).getElementsByClassName('ant-modal-footer').item(0).style.borderTop = 0;\n      }\n  }, [showMessageDialog]);\n\n    useEffect(() => {\n        if (job) {\n            if (user) {\n                if (job.status !== \"Draft\") window.location.href = \"/\"\n            }\n            if(user && user.email === \"guest@geeker.co\"){\n                if(job?.guestJob) localStorage.removeItem(SECRET_KEY);\n            }\n        }\n    }, [job])\n\n\n    useEffect(()=>{\n        console.log(\"My console for customersDefaultCC\", customersDefaultCC)\n    },[customersDefaultCC])\n\n    useEffect(() => {\n        (async () => {\n            liveUser = await isLiveUser(user)\n            console.log(\"Initial data in useEffect\", { planId, user })\n            //Checking if customer already have card added to account.\n            if (user) {\n                setUserLoggedIn(true)\n                let customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n                    user: user,\n                    liveUser: liveUser\n                });\n                if(!user.customer.askedForBusiness){\n                    await CustomerApi.updateCustomer(user.customer.id,{askedForBusiness : false})\n                }\n                console.log(\"My console for customer_info\", customer_info)\n                if (customer_info.has_card_or_subscription){\n\n                    setShowCCForm(false)\n\n                    let cardsInfo = await CustomerApi.getStripeCustomerCardsInfo({ stripe_id: user.customer.stripe_id, liveUser: liveUser });    \n                    console.log(\"My console for all user's card\", cardsInfo.data)\n\n                    //Removing duplicate cards from array\n                    const filteredDuplicateCreditCards = cardsInfo.data.filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.fingerprint === value.fingerprint\n                        ))\n                    )\n                    console.log(\"My console for filteredArr\", filteredDuplicateCreditCards)\n\n                    setCustomersAllCC(filteredDuplicateCreditCards)\n                    \n                    const defaultCard = cardsInfo.data.filter((card)=> card.default_card === \"yes\")\n                    console.log(\"My console for user's default card\", defaultCard)\n\n                    setCustomersDefaultCC(defaultCard[0])\n                    let selectedCard = {data:defaultCard}\n                    setSelectedCreditCard(selectedCard)\n                    setCustomersDefaultCCBrand(defaultCard[0].brand)\n                } \n                //Fetching promocode data\n                let promolist = await PromoApi.retrieveCustomerPromoCodes({\"customer_id\":user.customer.id,\"redeemed\":true})\n                setPromoData(promolist)\n                console.log(\"promolist:::::\",promolist)\n                // if(promolist.length>0){\n                //     let data=await promolist.map(item=>item.promo_code)\n                //     setPromoCodes(data)\n                // }\n            }\n            if(jobIdFromUrl){\n                const jobRes = await JobApi.retrieveJob(jobIdFromUrl)\n                setJobData(jobRes)\n                setIsLoading(false)\n            }\n\n            //Getting subscriotion plan info.\n            if (planId) {\n                const totalCusotmer = await PublicApi.getTotalCustomerCount({\"subscription.plan_id\":planId})\n                console.log(\"totalCusotmer with current subscription plan \", totalCusotmer)\n                setTotalCustomerWithThisSubscrition(totalCusotmer.totalCount)\n                let allPlans = await getAllPlans({ \"liveUser\": user.customer.customerType === \"live\" })\n                const currentPlan = allPlans.data.filter(item => item.id === planId)\n                const keyFeatures = currentPlan[0].metadata.key_features.replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(`\"`, \"\").split(\",\")\n                setPlanInfo(keyFeatures)\n                setPlanData(currentPlan[0])\n                setIsLoading(false)\n                if(couponId !== \"\"){\n                    console.log(\"Coupon code\", couponId)\n                    const couponCodeInfo = await StripeApi.getCouponInfo(couponId)\n                    console.log(\"couponCodeInfo\", couponCodeInfo)\n                    const discountPercentage = couponCodeInfo.data.percent_off\n                    console.log(\"couponCodeInfo 2\", {currentPlan, discountPercentage})\n                    if(discountPercentage === 100){\n                        console.log(\"100 % discount\")\n                        setCouponDiscountedPrice(0)\n                    }else{\n                        const finalDiscountedPrice = ((planData?.price?.unit_amount / 100) * ((100-discountPercentage)/100))\n                        console.log(\"finalDiscountedPrice\", finalDiscountedPrice)\n                        setCouponDiscountedPrice(finalDiscountedPrice)\n                    }\n                    const previouslyAppliedCoupons = await AppliedCoupons.getusedCouponsByCustomerId(user.customer.id)\n                    console.log(\"previouslyAppliedCoupons\", previouslyAppliedCoupons)\n                    for(let x in previouslyAppliedCoupons){\n                        if(previouslyAppliedCoupons[x].coupon_id === couponId){\n                            setCouponAlreadyUsed(true)\n                            return\n                        }\n                    }\n                }\n            }else if(window.location.href.includes(\"registered\")){\n                setIsLoading(false)\n            }\n            console.log(\"My console for live user\", liveUser)\n        })()\n    }, [])\n\n    useEffect(()=>{\n        (async () => {\n            if(!user){\n                //Login temporarily as guest user to make backend requests\n\t\t\t\tconst guestUserRes = await getGuestUser();\n\t\t\t\tconsole.log(\"My console to check guest user\", guestUserRes)\n                //Fetch job data as guest user.\n\t\t\t\tconst fetchUserRes = await fetchJobAsGuest(jobIdFromUrl, guestUserRes.token.accessToken)\n\t\t\t\tconsole.log(\"My console to fetch job as guest user\", fetchUserRes)\n                setJob(fetchUserRes)\n                setCalculatedPrices(calculatePrice(fetchUserRes.software))\n                setJobData(fetchUserRes)\n                if(fetchUserRes?.guestJob){\n                    console.log(\"tetch token removed from component jobSummary index\")\n                    localStorage.removeItem(SECRET_KEY);\n                }\n                console.log(\"My con from job summary component if\", showCCForm)\n                setDisableBtn(false)\n                const featureResponse = await decideEstimatesToShowUsingLD(guestUserRes?.user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n\t\t\t}else{\n                const jobRes = await JobApi.retrieveJob(jobIdFromUrl)\n                setJobData(jobRes)\n                setCalculatedPrices(calculatePrice(jobRes.software))\n                console.log(\"My con from job summary component else\", jobRes)\n                setDisableBtn(false)\n            }\n            const res = await SoftwareApi.getSoftwareList();\n            if(res) {\n                console.log(\"software api response from job summary component\", res)\n                setSoftwareList(res.data)\n            }\n            if(user){\n                const featureResponse = await decideEstimatesToShowUsingLD(user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n            }\n\t\t})();\n    },[isJobSummaryUpdate])\n\n\n\n    const calculatePrice = (softwareData,hire_expert=false,forfreeMinutes=false)=>{\n\t\tlet initPriceToShow = 0;\n\t\tlet finalPriceToShow = 0;\n\t\ttry{\n\t\t\tlet price_per_six_min = softwareData.rate\n\t\t\tlet time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n\t\t\tlet time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\t\t\tlet main_price = ''\n\t\t\tif (hire_expert) {\n\t\t\t\tmain_price = softwareData.twoTierEstimatePrice\n\t\t\t} else {\n\t\t\t\tmain_price = softwareData.estimatedPrice\n\t\t\t}\n\t\t\tconsole.log(\"> main price >>>>>>>>> \",main_price)\n\t\t\tlet price1 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[0]) : 0)\n\t\t\tlet price2 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[1]) : 0)\n\n\t\t\tprice1 = (price1 ? price1 : price_per_six_min)\n\t\t\tprice2 = (price2 ? price2 : price_per_six_min)\n\t\t\tinitPriceToShow = forfreeMinutes ?(Math.ceil(time1 / 6)-1) * parseInt(price1) :Math.ceil(time1 / 6) * parseInt(price1)\n\t\t\tfinalPriceToShow = forfreeMinutes ? (Math.ceil(time2 / 6) - 1) * parseInt(price2) : Math.ceil(time2 / 6) * parseInt(price2)\n\n\t\t\tinitPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 0)\n\t\t\tfinalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 0)\n\t\t\t\n\t\t\tconsole.log(\"initPriceToShow >>>>>>>>>> \",initPriceToShow)\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"issue in calculating price :::: \",err)\n\t\t}\n\t\treturn {initPriceToShow:initPriceToShow,finalPriceToShow:finalPriceToShow}\n\t}\n\n\n    const handlePromocode = async () => {\n          \n        const couponInfo = await StripeApi.getCouponInfo(promoId)\n        console.log(\"My console for couponInfo\", couponInfo)\n        if(couponInfo.success){\n            setCouponId(promoId)\n            openNotificationWithIcon(\"success\", \"Success\", \"Promocode applied successfulyy\")\n        }else{\n            openNotificationWithIcon(\"error\", \"Invalid Promocode\", couponInfo.errorMsg)\n        }\n        // if (jobIdFromUrl) {\n        //     if (promocode) {\n        //         setIsPromocodeApplied({})\n        //         const promoCodeInput = promocode.toLowerCase().trim()\n        //         // retrieving promocode data to DB\n        //         const response = await PromocodeApi.retrievePromoData(promoCodeInput);\n        //         if (response) {\n        //             if (response && response.message) {\n        //                 return openNotificationWithIcon(\"error\", \"Error\", response.message);\n        //             } if (response && response.expiry_date && (new Date(response.expiry_date).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0))) {\n        //                 return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[0]);\n        //             } if (response && response.used_by) {\n        //                 if (user && user.id) {\n        //                     const findUser = response.used_by.find((item) => item.user_id === user.id);\n        //                     if (findUser && !(JSON.stringify(findUser) === \"{}\")) {\n        //                         return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[1]);\n        //                     }\n        //                     else {\n        //                         setIsPromocodeApplied(response);\n        //                         const message = response.discount_type === \"fixed\" ? `Promocode of $${response.discount_value} is applied !!` : `Promocode of ${response.discount_value}% is applied !!`\n        //                         return openNotificationWithIcon(\"success\", \"Success\", message);\n        //                     }\n        //                 }\n        //             }\n        //         } else {\n        //             return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[4]);\n        //         }\n        //     } else {\n        //         return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[3]);\n        //     }\n        // } else {\n        //     setShowSubscriptionPlanModalTime(150000)\n        //     console.log(\"promo code applied for subscription plan \", promocode)\n        //     let coupon;\n        //     let offerCouponCode = promocode.toLowerCase().trim()\n        //     let promoCodeData = promoData.find(o => o.promo_code === offerCouponCode);\n        //     if (promoCodeData) {\n        //         console.log(\"My console to chk for promocode in if\", promoCodeData)\n        //         setPromoId(promoCodeData.promo_id)\n        //         openNotificationWithIcon(\"success\", \"Success\", \"Promo Applied Successfully\")\n        //         // setIsValidate(true)\n        //     } else {\n        //         coupon = await PromoApi.validateCoupon({ \"couponCode\": offerCouponCode, \"customerId\": user.customer.id, \"productId\": planId, \"liveUser\": liveUser })\n        //         console.log(\"My console to chk for promocode in else\", coupon)\n        //         if (coupon.isValid) {\n        //             setCouponId(offerCouponCode)\n        //             openNotificationWithIcon(\"success\", \"Success\", coupon.message)\n        //             // setIsValidate(true)\n        //             // setDiscountedPrice(coupon.discountedPrice)\n        //         } else {\n        //             openNotificationWithIcon(\"error\", \"Invalid\", coupon.message)\n        //             offerCouponCode = ''\n        //         }\n        //     }\n        // }\n    } \n\n    const buySubscriptionPlan = async (cardsInfo, price_id, plan_id, plan_name, total_minutes, discount, subscriptionHistory = [], promoId = '', couponId = '') => {\n        openNotificationWithIcon(\"info\", \"Info\", 'Buying subscription ....')\n        console.log(\"My console for cardsInfo \", cardsInfo)\n        let cardObj\n\n        // Look for default card if cardInfo contains more than one card\n        if(cardsInfo.length > 1){\n            cardObj = cardsInfo.data.find(o => o.default_card === \"yes\");\n        }else{\n            cardObj = cardsInfo.data[0]\n        }\n        console.log(\"My console for cardsInfo 2\", cardObj)\n        let purchaseDate = moment().format('MM/DD/YYYY hh:mm a');\n        let subscribeDataToSend = {\n            'customer_id': cardObj['customer'],\n            'price_id': price_id,\n            'product_id': plan_id,\n            'email': user.email,\n            'name': user.firstName + ' ' + user.lastName,\n            \"liveUser\": user.customer.customerType === \"live\",\n            'plan_purchased_date': moment(purchaseDate).format('MM-DD-YYYY'),\n\n        }\n        if((promoId !== \"\"  || couponId !== \"\")){\n            subscribeDataToSend.promoId = promoId\n            subscribeDataToSend.couponId = couponId\n        }\n        console.log(\"subscribeDataToSend>>>>>>>>>>\", subscribeDataToSend)\n        let sRes = await buySubscription(subscribeDataToSend);\n\n        console.log('sRes Data', sRes)\n        if (sRes && sRes.success) {\n            let cust_id = user.customer.id;\n            let planDetails = {}\n            total_minutes = parseInt(total_minutes);\n            planDetails['plan_id'] = plan_id;\n            planDetails['plan_name'] = plan_name;\n            planDetails['plan_purchased_date'] = new Date();\n            planDetails['total_minutes'] = total_minutes;\n            planDetails['total_seconds'] = total_minutes * 60;\n            planDetails['time_used'] = 0;\n            planDetails['invoice_id'] = sRes.data.latest_invoice;\n            planDetails['subscription_id'] = sRes.data.id;\n            planDetails['discount'] = discount;\n            planDetails['status'] = sRes.data.status;\n            planDetails['paidPrice'] = sRes.paidPrice\n            planDetails['priceOff'] = sRes.priceOff\n\n            if(user?.customer?.subscription){\n                console.log(\"My console to chk for subs 1\", {sub:user?.customer?.subscription})\n                if(user?.customer?.subscription?.time_from_previous_subscription){\n                    console.log(\"My console to chk for subs time_from_previous_subscription\", {sub:user?.customer?.subscription})\n                    planDetails['time_from_previous_subscription'] = user?.customer?.subscription?.time_from_previous_subscription  + (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used)\n                }else{\n                    console.log(\"My console to chk for subs time_from_previous_subscription not exists\", {sub:user?.customer?.subscription})\n                    planDetails['time_from_previous_subscription'] = user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used\n                }\n                \n                console.log(\"My console to chk for subs 2\", {sub:user?.customer?.subscription})\n                if(user?.customer?.subscription?.time_from_previous_subscription){\n                    console.log(\"My console to chk for subs grand_total_seconds\", {sub:user?.customer?.subscription})\n                    planDetails['grand_total_seconds'] = user?.customer?.subscription?.time_from_previous_subscription  + (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used) + total_minutes*60\n                }else{\n                    console.log(\"My console to chk for subs grand_total_seconds 2\", {sub:user?.customer?.subscription})\n                    planDetails['grand_total_seconds'] = (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used) + total_minutes*60\n                }\n            }else{\n                planDetails['grand_total_seconds'] = total_minutes*60\n            }\n\n            if (subscriptionHistory && subscriptionHistory.length > 0) {\n                await CustomerApi.updateCustomer(user.customer.id, { \"subscription\": planDetails })\n            } else {\n                await CustomerApi.updateCustomer(user.customer.id, { \"subscription\": planDetails })\n            }\n            openNotificationWithIcon(\"success\", \"Success\", sRes.messageToDisplay)\n            setbusinessPlanStepNumber(jobFlowStepsObj['GotOurGeeks'])\n        } else if (sRes && sRes.success == false) {\n            if(sRes.errorMessage){\n                openNotificationWithIcon(\"error\", \"Error\", sRes.errorMessage)\n            }else{\n                openNotificationWithIcon(\"error\", \"Error\", sRes.messageToDisplay)\n            }\n            setShowCCForm(true)\n            setDisableBtn(false)\n        }\n    }\n\n    const handlePurchase = async () => {\n        if(couponAlreadyUsed){\n            openNotificationWithIcon(\"error\", \"Error\", \"You already used up this coupon\")\n            return\n        }\n        setShowSubscriptionPlanModalTime(150000)\n        setDisableBtn(true)\n\n        //if customer already have a card\n        if (!showCCForm) {\n            console.log(\"Customer have card\")\n            // let cardsInfo = await CustomerApi.getStripeCustomerCardsInfo({ stripe_id: user.customer.stripe_id, liveUser: liveUser });\n            // console.log(\"Customer have card cardsInfo\", cardsInfo)\n            let subscriptionHistory = user.customer.subscription_history;\n            buySubscriptionPlan(selectedCreditCard, planData.price.id, planData.id, planData.name, planData.metadata.total_minutes, planData.metadata.discount, subscriptionHistory, promoId, couponId)\n        } else {\n            console.log(\"No card\")\n            if (jobIdFromUrl && promocode && promoCodeApplied) {\n                const requiredData = {\n                    \"promoCodeId\": promoCodeApplied.id,\n                    \"promoCode\": promoCodeApplied.promo_code,\n                    \"discountType\": promoCodeApplied.discount_type,\n                    \"couponcodeDiscount\": promoCodeApplied.discount_value\n                }\n                console.log(\"Promocode Discount Details- Guest User Side\", requiredData)\n                await window.sessionStorage.setItem(\"promo-code-details\", JSON.stringify(requiredData))\n            }\n            const cardElement = elements.getElement(CardNumberElement);\n            var dataToStripe = {}\n            dataToStripe['metadata'] = formData\n            if (!stripe || !elements) {\n                setDisableBtn(false)\n                return;\n            }\n            stripe.createToken(cardElement, dataToStripe).then(\n                async (payload) => {\n                    console.log('payload>>>>>>>>>>>>>>>>>>>>', payload)\n                    if (payload['error']) {\n                        setDisableBtn(false)\n                        openNotificationWithIcon(\"error\", \"Error\", payload['error']['message'])\n                        return;\n                    } else {\n                        if (formData.zip === \"\") {\n                            setDisableBtn(false)\n                            openNotificationWithIcon(\"error\", \"Error\", \"Zip cannot be left empty\")\n                            return\n                        } else {\n                            await UserApi.updateUser({ userId: user.id, zip: formData.zip })\n                        }\n                        // retrieve customer's strip id to Db\n                        let retrieve_cust = await CustomerApi.retrieveCustomer(user?.customer?.id);\n                        console.log('addCardForm handleSubmit retrieve_cust::', retrieve_cust)\n                        if (!retrieve_cust.stripe_id || retrieve_cust.stripe_id === '' || retrieve_cust.stripe_id == null) {\n                            checkCardAndAddCardToCustomer(cardElement, dataToStripe, payload, true, false)\n                        } else {\n                            checkCardAndAddCardToCustomer(cardElement, dataToStripe, payload, false, retrieve_cust.stripe_id)\n                        }\n                    }\n\n                }\n            );\n        }\n    }\n    /**\n* mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n* @author : Ridhima Dhir\n*/\n    const confirmModaloFMobileTabletJobPosting = async (message = '') => {\n        if (user && user.email) {\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Job created from mobile or tablet')\n        }\n        Modal.confirm({\n            title: \"To better assist you please join from your computer.\",\n            content: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n            okText: 'Ok',\n            cancelButtonProps: { style: { display: 'none' } },\n            className: 'app-confirm-modal',\n            onOk() {\n                history.push(\"/\")\n            },\n        });\n    }\n    /**\n* send email with job link for desktop\n* @params : job\n* @author : Ridhima Dhir\n*/\n    const emailOFMobileTabletJobPosting = async (jobData) => {\n        socket.emit('mobile_tablet_job_post_email', jobData);\n    }\n        \n    async function checkCardAndAddCardToCustomer(cardElement, data, payload, newCustomer, stripe_customer_id) {\n\n        let updatedCustomer\n        if (newCustomer) {\n            console.log('addCardForm handleSubmit createCustomerStripe ::')\n            // creating customer's stripe id\n            const result_customer = await CustomerApi.createCustomerStripe({\n                email: user.email,\n                liveUser: user.customer.customerType === \"live\"\n            })\n\n            var customer_id = result_customer.id\n            // updating customers strip id in DB\n            updatedCustomer = await CustomerApi.updateCustomer(user.customer.id, { \"stripe_id\": customer_id })\n            stripe_customer_id = customer_id\n            if (job && job.id) {\n                // updating job.id\n                JobApi.updateJob(job.id, { tech_search_start_at: new Date() });\n            }\n        }\n        //adding card to customer's strip.id\n        let result_card = await CustomerApi.addCardToCustomerStripe({\n            liveUser: user?.customer?.customerType === \"live\",\n            stripe_id: stripe_customer_id,\n            token_id: payload.token.id,\n            planId: planId ? planId : \"NA\",\n            jobId: job && job.id ? job.id : \"NA\"\n            })\n        \n        if (result_card['error'] != undefined) {\n            setDisableBtn(false)\n            openNotificationWithIcon(\"error\", \"Error\", result_card['error']['message'])\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Card not added due to some error in card.');\n            // mixpanel code//\n        } else {\n            // Making the new card as default card  \n            if (result_card[\"id\"]) {\n                await CustomerApi.updateDefaultCard({\n                    liveUser: user?.customer?.customerType === \"live\",\n                    card_id: result_card[\"id\"],\n                    customer_id: stripe_customer_id,\n                });\n            }\n\n            openNotificationWithIcon(\"success\", \"Success\", \"Card details has been saved.\")\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Card details added.');\n            // mixpanel code//\n            if (jobIdFromUrl) {\n                // if ((isMobile || isTablet) && localStorage.getItem(\"isScheduleJob\") !== 'true') {\n                //     console.log(\"isMobile or isTablet\")\n                //     await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                //     await emailOFMobileTabletJobPosting(job)\n                // } else {\n\n                    // Holding $100 Dollars here from customer which will be refunded or deducted depnding on customer action\n                    const custObj = {\n                        \"stripe_id\": stripe_customer_id,\n                        'liveUser': user?.customer?.customerType === \"live\",\n                        'jobId': job?.id\n                    }\n                    console.log(\"custObj:::\", custObj)\n                    const holdChargeResponse = await CustomerApi.holdChargeFromCustomer(custObj);\n                    // mixpanel code//\n                    mixpanel.identify(user.email);\n                    mixpanel.track('Customer - Hold $100 from customer', holdChargeResponse);\n                    // mixpanel code//\n\n                    // This condition check if $100 hold is not successful then redirect to dashboard\n                    if (holdChargeResponse.status !== \"Successful\") {\n                        openNotificationWithIcon(\"error\", \"Error\", holdChargeResponse.message)\n                        setDisableBtn(false);\n                        return;\n                    } else {\n                        refetch()\n                        let promoCodeDetails = await window.sessionStorage.getItem(\"promo-code-details\");\n                        promoCodeDetails = JSON.parse(promoCodeDetails)\n                        console.log(\"Checking Parsed Data is Available--\", promoCodeDetails)\n                        await updatePromoCodeDetails(promoCodeDetails, jobIdFromUrl);\n                        if (localStorage.getItem(\"isScheduleJob\")) {\n                            localStorage.removeItem(\"isScheduleJob\")\n                            // updating scheduled job into DB\n                            const updatedJob = await JobApi.updateJob(jobIdFromUrl, {\n                                status: JOB_STATUS.SCHEDULED,\n                                customer: user.customer.id,\n                            })\n                            console.log(\"My console to see updatedJob\", updatedJob)\n                            await emitSocketCreateFetchNotification(updatedJob)\n                            setTimeout(() => {\n                                window.location.href = '/dashboard?&scheduleJobId=' + jobIdFromUrl;\n                                setDisableBtn(false)\n                            }, 2000);\n                        } else {\n                            // if (isMobile || isTablet) {\n                            //     console.log(\"isMobile or isTablet\")\n                            //     await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                            //     await emailOFMobileTabletJobPosting(job)\n                            // } else {\n                                console.log(\"Going to Page helpIsOnTheWay\")\n                                await JobApi.updateJob(jobIdFromUrl, {\n                                    status: \"Pending\",\n                                    tech_search_start_at: new Date(),\n                                    customer: user.customer.id,\n                                })\n\n                                window.location.href = `/customer/profile-setup?page=tech-search&jobId=${jobIdFromUrl}`\n                                setDisableBtn(false)\n                            // }\n                        }\n                    }\n                    if (user && job && job.GA_conversion_event_called === undefined) {\n                        GAevent('Conversion', isScheduleJob ? 'scheduled_job' : 'new_job', 'Conversion', user.customer.id ? user.customer.id : user.customer)\n                        JobApi.updateJob(job.id, { GA_conversion_event_called: 'yes' });\n                    }\n                // }\n            } else {\n                if (planId) {\n                    let cardsInfo\n                    if (updatedCustomer) {\n                        cardsInfo = await CustomerApi.getStripeCustomerCardsInfo({ stripe_id: updatedCustomer.stripe_id, liveUser: user?.customer?.customerType === \"live\", });\n                    } else {\n                        cardsInfo = await CustomerApi.getStripeCustomerCardsInfo({ stripe_id: user.customer.stripe_id, liveUser: user?.customer?.customerType === \"live\", });\n                    }\n                    console.log(\"Customer have card cardsInfo\", cardsInfo)\n                    let subscriptionHistory = user.customer.subscription_history;\n                    buySubscriptionPlan(cardsInfo, planData.price.id, planData.id, planData.name, planData.metadata.total_minutes, planData.metadata.discount, subscriptionHistory, promoId, couponId)\n                }\n                else {\n                    window.location.href = \"/\"\n                }\n            }\n        }\n    }\n    // Update Details of User and JobID in Promocode Database\n    const updatePromoCodeDetails =async(promoCodeDetails, jobId)=>{\n        try {\n            console.log(\"Checking Parsed Data is Available--\", promoCodeDetails)\n            if(promoCodeDetails && promoCodeDetails.promoCodeId){\n                const updateData ={\n                      user_id : user && user.id,\n                      job_id :  jobId,\n                      used_date : new Date()\n                  }\n              console.log('updateData',updateData)  \n              // updating promocode details to db\n              const updateResponse = await PromocodeApi.updatePromoData(promoCodeDetails.promoCodeId , updateData);\n              if(updateResponse){\n                      const updateUser= {\n                          \"coupon_id\": promoCodeDetails.promoCodeId,\n                          \"coupon_code\" :  promoCodeDetails.promoCode,\n                          \"discount_type\":  promoCodeDetails.discountType,\n                          \"coupon_code_discount\" :  promoCodeDetails.couponcodeDiscount\n                      }\n                      await updateJob(jobId,updateUser)\n                      sessionStorage.removeItem('promo-code-details')\n                      return;\n    \n              }\n          }else {\n            return ;\n          }\n            \n        } catch (error) {\n            console.log(\"updating job details with promocode if applied  : error \", error)\n        }\n    }\n\n   /**\n     * emit send-schedule-alerts socket and create / fetch notification customer notifications\n     * @params : jobStats(Type:Object): Have job details\n     * @returns : null\n     * @author : Ridhima Dhir\n     */\n   const emitSocketCreateFetchNotification = async (jobStats) => {\n    try {\n        console.log(\"send-schedule-alerts :::::::::::\", jobStats)\n        //Notification for customer\n        const notificationData = {\n            user: user.id,\n            job: jobStats.id,\n            read: false,\n            actionable: false,\n            title: 'We are finding a technician for you. We will inform you when we find the technician',\n            type: 'Scheduled Job',\n        };\n        console.log(\"notificationData ::::::::\", notificationData)\n        await createNotification(notificationData);\n        await fetchNotifications({ user: user.id });\n\n        console.log(\"My console to see now\")\n\n        // call send-schedule-alerts socket from backend.\n        // It will find available techs and send alerts by sms/email/notification\n        socket.emit('search-for-tech', {\n            jobId: jobStats.id,\n            customerTimezone: user.timezone,\n            jobData: jobStats,\n            primaryTime: jobStats.primarySchedule,\n            phoneNumber: user.customer.phoneNumber,\n            customerName: user.firstName,\n            customerEmail: user.email,\n            technicianId: technicianId ? technicianId : false,\n        });\n    } catch (err) {\n        mixpanel.identify(user.email);\n        mixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n        console.log('There is catch error while create/fetch notification  :::: ' + err.message)\n    }\n}\n    const handleChange = () => {\n        setShowSubscriptionPlanModal(true)\n        setShowSubscriptionPlanModalTime(150000)\n    }\n    \n    const handleJobEdit = () => {\n        setShowEditJobModal(true);\n        setIsJobSummaryUpdate(false);\n    }\n\n\n    const handleRadioButtonChange = (e) => {\n        console.log(\"My console for handleRadioButtonChange\", e.target.value)\n        let selectedCard = {data:[e.target.value]}\n        setSelectedCreditCard(selectedCard)\n        setCustomersDefaultCC(e.target.value)\n    }\n\n    const handleCreditCardChange = () => {\n        setChangeCreditCard(true)\n    }\n\n    if (isLoading) return <Loader height=\"500px\" />;\n\n    return <div className=\"custom-container  min-height-inherit\">\n      <Modal\n          footer={[]}\n          centered\n          bodyStyle={{ borderRadius: \"10px\", borderBottom: \"0px\" }}\n          title=\"We're Sorry\"\n          className=\"paypal-confirm-modal messageDialog\"\n          closable\n          visible={showMessageDialog}\n        >\n          <h1 style={{ fontWeight: \"bold\", fontSize: 32 }}>\ud83d\ude1e We're Sorry.</h1>\n          <p style={{ fontSize: 22, fontWeight: \"bold\", width: \"250px\" }}>\n            Pay with Paypal isn't working at the moment.\n          </p>\n          <BasicButton\n            onClick={() => {\n              setShowMessageDialog(false);\n            }}\n            btnTitle={\"Pay with Credit Card\"}\n            height={\"67px\"}\n            width={\"190px\"}\n            background={\"#01D4D5\"}\n            color={\"#fff\"}\n          />\n        </Modal>\n        <Modal\n          centered\n          className=\"app-confirm-modal loaderOverlay\"\n          closable={false}\n          footer={[]}\n          visible={showOverlayLoading}\n        >\n          <ColorRing\n            colors={[\"#01D4D5\", \"#01D4D5\", \"#01D4D5\", \"#01D4D5\", \"#01D4D5\"]}\n          />\n        </Modal>\n        <Row className=\"min-height-inherit d-flex justify-content-center align-items-center parent-row\">\n            <Col md={9} xs={12} className=\"d-flex flex-column min-height-inherit max-width-768-mb-20px\">\n               {planId && <ProgressBar currentStep={3}/>} \n                <div className=\"d-flex flex-column justify-content-center align-items-center min-height-inherit\">\n                    <div className=\"mb-1 text-center\">\n                        {planId ? \n                                <HeadingText firstBlackText={\"Complete \"} secondGreenText={\" your purchase\"} />\n                                : \n                                <HeadingText firstBlackText={\"Add your \"} secondGreenText={\" card\"} />\n                        }\n                    </div>\n                    <div className=\"mb-50\">\n                        <SubHeadingText text={\"*This is to verify your card. You won\u2019t be charged until you get help! \"} />\n                    </div>\n                    {planId && <div className=\"selected-plan-summary mb-20\">\n                        <Row>\n                            <Col md={6} sm={12} xs={12} className={`selected-plan-summary-col  ${disableBtn ? \"my-pe-none\" : \"\"}`} >\n                                <div className=\"mb-2\">\n                                    <div>\n                                        <span className=\"small-team-text\">{planData?.name}</span>\n                                    </div>\n                                    <div className=\"mb-25\">\n                                        <span className=\"purchase-number\">{totalCustomerWithThisSubscrition > 30 ? totalCustomerWithThisSubscrition : \"30\"} Purchased this plan!</span><span className=\"clap-emoji\">\ud83d\udc4f\ud83c\udffb</span>\n                                    </div>\n                                    {!queryParams.get(\"couponCode\") && <div className=\"mb-0.5\">\n                                        <span className=\"actual-price\">${planData?.metadata?.reg_price}</span>&nbsp;&nbsp;\n                                        <span className=\"discounted-price\">${planData?.price?.unit_amount / 100}</span>\n                                    </div>}\n                                    {queryParams.get(\"couponCode\") && <div className=\"mb-0.5\">\n                                        <span className=\"actual-price\">${planData?.price?.unit_amount / 100}</span>&nbsp;&nbsp;\n                                        <span className=\"discounted-price\">${couponDiscountedPrice}</span>\n                                    </div>}\n                                    <span className=\"change-text\" onClick={handleChange}>\n                                        Edit\n                                    </span>\n                                </div>\n                            </Col>\n                            <Col md={6} sm={12} xs={12} className=\"selected-plan-summary-col pr-0-imp\" >\n                                <div className=\"\">\n                                    {planInfo && planInfo.map((ele) => {\n                                        return <div className=\"d-flex align-items-center\">\n                                            <CheckInCircle bgColor={\"turcose\"} style={{ height: \"13px\", width: \"13px\" }} checkStyle={{ color: \"black\" }} />\n                                            &nbsp;&nbsp;\n                                            <span className=\"text-with-check\">{ele}</span>\n                                        </div>\n                                    })}\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>}\n                    {jobIdFromUrl && <div className=\"selected-plan-summary mb-20 max-w-500px w-100p mb-2\">\n                        <Row>\n                            <Col className=\"d-flex align-items-center justify-content-between p-2\">\n                                <SignUpHeading heading={\"Job Summary\"} fontSize={\"20px\"} color={\"#01D4D5\"} boldText={true} />\n                                <div className=\"edit-icon-div\" title=\"Update job summary\" onClick={handleJobEdit}>\n                                    <FontAwesomeIcon className=\"editJobSummary\" icon={faPencilAlt} />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={6} sm={12} xs={12} className={`selected-plan-summary-col  ${disableBtn ? \"my-pe-none\" : \"\"}`} >\n                                <div className=\"\">\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Software:</span>\n                                    </div>\n                                    <div>\n                                        <span className=\"jobSummaryInfo\">{jobData?.software?.name}</span>\n                                    </div>\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Area:</span>\n                                    </div>\n                                    <div>\n                                        <span className=\"jobSummaryInfo\">{jobData?.subOption}</span>\n                                    </div>\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Details:</span>\n                                    </div>\n                                    <div>\n                                        <span className=\"jobSummaryInfo\">{jobData?.issueDescription}</span>\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col md={6} sm={12} xs={12} className=\"selected-plan-summary-col pr-0-imp\" >\n                                <div className=\"\">\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Estimated Wait Time:</span>\n                                    </div>\n                                    <div>\n                                        <span className=\"jobSummaryInfo\">{`${jobData?.software?.estimatedWait} min`}</span>\n                                    </div>\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Most jobs like yours take between:</span>\n                                    </div>\n                                    <div>\n                                        <span className=\"jobSummaryInfo\">{`${jobData?.software?.estimatedTime} min`}</span>\n                                    </div>\n                                    <div className=\"mb-8\">\n                                        <span className=\"jobSummaryLabel\">Most jobs like yours cost between:</span>\n                                    </div>\n                                    <div>\n                                        {user.roles[0] === \"owner\" ? <>\n                                            {user && !isFirsJob &&\n                                                <span className=\"job-summary-value\">\n                                                    ${calculatedPrices.initPriceToShow}-${calculatedPrices.finalPriceToShow}\n                                                </span>\n                                            }\n                                            {(!user || isFirsJob) &&\n                                                <span className=\"strike-through\">\n                                                    ${calculatedPrices.initPriceToShow}-${calculatedPrices.finalPriceToShow}\n                                                </span>\n                                            }{\" \"}\n                                            {(!user || isFirsJob) &&\n                                                <span className=\"job-summary-value\">\n                                                    ${(Number(calculatedPrices.initPriceToShow ? calculatedPrices.initPriceToShow - job?.software?.rate : \"\"))}-${(Number(calculatedPrices.finalPriceToShow ? calculatedPrices.finalPriceToShow - job?.software?.rate : \"\"))}\n                                                </span>\n                                            }</>\n                                            : \"NA\"}\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div> }\n\n                    {!showCCForm && customersDefaultCC && !changeCreditCard && <div className=\"max-w-500px w-100p mb-2\">\n                        <SubHeadingText text={\"Payment Method\"} />\n                        <div className=\"business-plan-cc-div pt-pb-20-imp\">\n                            <div className=\"business-plan-cc-custom-container\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"d-flex justify-content-between\">\n                                            <div className=\"d-flex align-items-center\">\n                                                <CardLogo cardType={customersDefaultCCBrand} imgClass={\"card-logo mr-3\"} />\n                                                <span className=\"CC-last-four-digits\">********{customersDefaultCC.last4}</span>\n                                            </div>\n                                            <span className=\"CC-change-text\" role=\"button\" onClick={handleCreditCardChange}>Change</span>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </div>\n                    </div>}\n\n                    {changeCreditCard && customersAllCC && <div className=\"max-w-500px w-100p mb-2\">\n                        <SubHeadingText text={\"Saved Credit Cards\"} />\n\n                        <Radio.Group name={\"test\"} className=\"mb-35 ml-5 w-100p CC-radio-btns\" value={customersDefaultCC}>\n                            {customersAllCC.map((singleCard,index)=>{ \n                                return <div className=\"business-plan-cc-div pt-pb-20-imp mb-3\">\n                                    <div className=\"business-plan-cc-custom-container\">\n                                        <Radio value={singleCard} onChange={handleRadioButtonChange} className=\"d-flex min-width-100p\">\n                                            <Row>\n                                                <Col>\n                                                    <div className=\"d-flex align-items-center\">\n                                                        <CardLogo cardType={singleCard.brand} imgClass={\"card-logo mr-3 ml-1\"} />\n                                                        <span className=\"CC-last-four-digits\">********{singleCard.last4}</span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </Radio>\n                                    </div>\n                                </div>\n                                })\n                            }\n                        </Radio.Group>                                    \n                    </div>}\n                    {showCCForm && <div className=\"max-w-500px w-100p mb-2\">\n                        <SubHeadingText text={\"Credit Card Details\"} />\n                        {/* <CreditCardInputField /> */}\n                        <div className=\"business-plan-cc-div\">\n                            <div className=\"business-plan-cc-custom-container\">\n                                <Row>\n                                    <Col md={6} sm={12} className=\"d-flex justify-content-center align-items-center max-width-768-mb-20px\">\n                                        <div>\n                                            <FontAwesomeIcon icon={faCreditCard} className=\"business-plan-cc-icon\" />\n                                        </div>\n                                        <CardNumberElement className=\"\" options={{ placeholder: \"Card Number\" }} />\n                                    </Col>\n                                    <Col md={6} sm={12} className=\"d-flex justify-content-center max-width-280-flex-wrap max-width-280-justify-content-start align-items-center\">\n                                        <CardExpiryElement className=\"mt-28-imp max-width-280-mb-10\" options={{ placeholder: \"MM / YY\" }} disabled={true} />\n                                        <CardCvcElement className=\"mt-28-imp max-width-280-mb-5\" options={{ placeholder: \"CVC\" }} />\n                                        <input type=\"text\" placeholder=\"ZIP\" onChange={(e) => setFormData({ zip: e.target.value })} className=\"business-plan-CC-zip\" />\n                                    </Col>\n                                </Row>\n                            </div>\n                        </div>\n                    </div>}\n                    {/* <div className=\"max-w-500px w-100p d-flex no-wrap align-items-center\">\n                        <div className=\"info-round-div mr-10\">\n                            <FontAwesomeIcon icon={faInfo} className=\"business-plan-info-icon\" />\n                        </div>\n                        <span className=\"business-plan-info-message\">You may see a temporary pre-authorization \u201chold\u201d charge on you cc. This is used to verify the card and will be released within a day or two.</span>\n                    </div> */}\n                    {queryParams.get(\"couponCode\") \n                        ?\n                            <div className=\"max-w-500px w-100p mt-20 mb-20\">\n                                <span className=\"business-plan-promo-code\">Promo Code</span>&nbsp;\n                                <span className=\"business-plan-click-here\">{queryParams.get(\"couponCode\")}</span>&nbsp;\n                                <span className=\"business-plan-promo-code\">Applied</span>&nbsp;\n                            </div>\n                        :\n                            !showPromoCodeInputField && (planId || jobIdFromUrl) && <div className=\"max-w-500px w-100p mt-20 mb-20\">\n                                <span className=\"business-plan-promo-code\">Promo Code?</span>&nbsp;\n                                <span className=\"business-plan-click-here\">\n                                    <a onClick={()=>{setShowPromoCodeInputField(true)}}>\n                                        Click here\n                                    </a>\n                                </span>\n                            </div>\n                    }\n                    {showPromoCodeInputField && <div className={`max-w-500px w-100p business-plan-promocode-div mb-20 mt-10 ${disableBtn ? \"my-pe-none\" : \"\"}`}>\n                        <input type=\"text\" value={promoId} className=\"business-plan-promocode-input\" placeholder=\"promo code\" onChange={(e)=>setPromoId(e.target.value)} />\n                        <span className=\"business-plan-apply\" onClick={handlePromocode}>Apply</span>\n                    </div>}\n                    <div className=\"max-w-500px w-100p d-flex flex-space-between flex-wrap\">\n                      <BasicButton style={{ backgroundColor: 'transparent', backgroundImage: 'url(\"/Button.png\")', backgroundPosition: '0 -5px', backgroundSize: '245px'}} background=\"\" moreClasses={'mr-10 text-dark'} onClick={() => {setShowOverlayLoading(true)}} btnTitle={\"\"} height={\"68px\"} width={\"246px\"} color={\"#fff\"} />\n                        <BasicButton btnTitle={planId ? \"Purchase my plan\" : \"Add Card\"} height={\"63px\"}\n                  width={\"244px\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={planId ? \"arrow\" : \"\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={handlePurchase} disable={disableBtn} showSpinner={disableBtn} />\n                        <div className=\"mt-2 d-flex justify-content-between flex-wrap\">\n                            <span className=\"business-plan-contract-text\">No contract, cancel anytime</span>\n                            {/* <span className=\"business-plan-contract-text\">\n                                <a href=\"/\" className=\"add-cc-a\">Add credit card later</a>\n                            </span> */}\n                        </div>\n                    </div>\n                    <div className=\"max-w-500px w-100p\">\n                        <img className=\"w-100p\" src={stripeSecureLogo} />\n                    </div>\n                </div>\n            </Col>\n            <Col md={3} xs={12} className=\"sign-in-side-column\">\n                <AvgInfo />\n                <Testimony testimonyBy={\"stacy\"} />\n            </Col>\n        </Row>\n        {jobIdFromUrl && <EditJobModal softwareList={softwareList} jobData={jobData} showEditJobModal={showEditJobModal} setShowEditJobModal={setShowEditJobModal} user={user} setIsJobSummaryUpdate={setIsJobSummaryUpdate}/>}\n    </div>\n}\n\nexport default CompleteYourPurchase",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\CompleteYourPurchase.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "GotOurGeeks.js",
                                                                    "fileData": "import React, { useEffect } from \"react\"\nimport { Row, Col } from \"react-bootstrap\";\nimport HeadingText from \"../Components/HeadingText\";\nimport ProgressBar from \"../Components/ProgressBar\";\nimport SubHeadingText from \"../Components/SubHeadeingText\";\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport fireWorksAnimation from \"../../../../assets/animations/FireworkB.json\"\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport Testimony from \"../Components/Testimony\";\nimport AvgInfo from \"../Components/AvgInfo\";\n\nconst GotOurGeeks = ({user}) => {\n\n    useEffect(()=>{\n        console.log(\"My console for user at got our geeks\", user)\n    },[])\n\n    /**\n     * Following function will redirect user to dashboard\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n    const goToDashBoard = () => {\n        console.log(\"My console for goToDashBoard\")\n        window.location.href = \"/\"\n    }\n\n    return <div className=\"custom-container  min-height-inherit\">\n        <Row className=\" min-height-inherit d-flex justify-content-center  align-items-center parent-row\">\n            <Col md={9} xs={12} className=\"d-flex flex-column min-height-inherit\">\n                <ProgressBar currentStep={4} />\n                <div className=\"d-flex flex-column justify-content-center align-items-center min-height-inherit\">\n                    <div className=\"mb-1 text-center\">\n                        <HeadingText firstBlackText={\"You've got our Geeks!\"} />\n                    </div>\n                    <div className=\"mb-neg50 text-center\">\n                        {user?.isBusinessTypeAccount ?  <SubHeadingText text={\"You're going to love having on-demand support for your whole business.\"} />\n                                               :  <SubHeadingText text={\"You're going to love having on-demand support for your personal use.\"} />}\n                    </div>\n                    <Player\n                        autoplay\n                        keepLastFrame={true}\n                        src={fireWorksAnimation}\n                        loop={true}\n                        className=\"fireworksAnimation\"\n                    >\n                    </Player>\n                    <div className=\"max-w-500px w-100p d-flex flex-column justify-content-center align-items-center\">\n                        <BasicButton btnTitle={\"Go to Account\"} height={\"60px\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={goToDashBoard} /> \n                        <div className=\"mt-2\">\n                            {user?.isBusinessTypeAccount ? <span className=\"business-plan-contract-text\">* We can't wait to serve you & your team</span>\n                                                   : <span className=\"business-plan-contract-text\">* We can't wait to serve you</span>}\n                        </div>\n                    </div>\n                </div>\n            </Col>\n            \n            <Col md={3} xs={12} className=\"sign-in-side-column\">\n                <AvgInfo />\n                <Testimony testimonyBy={\"brian\"} />\n            </Col>\n        </Row>\n    </div>\n}\n\nexport default GotOurGeeks",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\GotOurGeeks.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "LogIn.js",
                                                                    "fileData": "import BasicButton from \"components/common/Button/BasicButton\";\nimport React, { useEffect, useState, useCallback } from \"react\"\nimport { Row, Col } from \"react-bootstrap\";\nimport HeadingText from \"../Components/HeadingText\";\nimport ProgressBar from \"../Components/ProgressBar\";\nimport SubHeadingText from \"../Components/SubHeadeingText\";\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Testimony from \"../Components/Testimony\";\nimport ChosenPlanSummary from \"../Components/ChosenPlanSummary\";\nimport PasswordInput from \"components/AuthComponents/PasswordInput\";\nimport ValidatorModel from \"components/AuthComponents/ValidatorModel\";\nimport PasswordValidator from \"components/AuthComponents/PasswordValidator\";\nimport * as AuthApi from '../../../../api/auth.api';\nimport {useHistory, useLocation } from 'react-router';\nimport { Modal } from 'antd';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport { INACTIVE_ACCOUNT_STATUS_MSG } from '../../../../constants';\nimport { isLiveUser,openNotificationWithIcon } from '../../../../utils';\nimport * as UserApi from '../../../../api/users.api';\nimport mixpanel from 'mixpanel-browser';\nimport * as JobApi from '../../../../api/job.api';\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { useSocket } from '../../../../context/socketContext';\nimport { useJob } from '../../../../context/jobContext';\nimport { useNotifications } from '../../../../context/notificationContext';\nimport JobInfoRightSideBar from \"components/JobInfoRightSideBar\";\n\nconst LogIn = ({userInfo, setUser, setToken, setbusinessPlanStepNumber, jobFlowStepsObj, setchosenProdId, setShowSubscriptionPlanModal, setShowtwentyPercentModal,user,job,setShowLoader}) => {\n    const { socket } = useSocket();\n    const [pwModelVisible, setPwModelVisible] = useState()\n    const [password, setPassword] = useState(\"\")\n    const [alertMessagePassword, setAlertMessagePassword] = useState()\n    const [disableBtn, setDisableBtn] = useState(false)\n    const [incorrectPassword, setIncorrectPassword] = useState(false)\n    const history = useHistory();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const planId = queryParams.get('planId') ? queryParams.get('planId') : false;\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const [showSubscriptionPlanModalTime, setShowSubscriptionPlanModalTime] = useState(150000)\n    const [discountModalShown, setDiscountModalShown] = useState(false)\n    let liveUser = isLiveUser(user)\n    const { updateJob,fetchJob } = useJob();\n    const { createNotification, fetchNotifications } = useNotifications();\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const couponCode = queryParams.get('couponCode') ? queryParams.get('couponCode') : false;\n    useEffect(()=>{\n        if(!discountModalShown){\n            if(planId){\n                setTimeout(() => {\n                    setShowtwentyPercentModal(true)\n                    setDiscountModalShown(true)\n                }, showSubscriptionPlanModalTime);\n            }\n        }\n    }, [showSubscriptionPlanModalTime])\n\n    const resetPasswordConfirmationModal = useCallback(() => {\n        setShowSubscriptionPlanModalTime(150000)\n        Modal.confirm({\n          title: 'Reset Password ?',\n          okText: 'Yes',\n          cancelText: 'No',\n          className:\"reset-password-confirmation-modal\",\n          onOk() {\n            setbusinessPlanStepNumber(jobFlowStepsObj['ResetPasswordLink'])\n          },\n        });\n      }, []);\n\n    /**\n* Following function is to handle back button click\n* @params : none\n* @return : none\n* @author : Mritunjay Chaurasia\n**/\n    const handleBackBtnClicked = () => {\n        setbusinessPlanStepNumber(jobFlowStepsObj[\"SignIn\"])\n    }\n\n      /**\n     * Following function handle user login\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n    const handleLogIn = async () => {\n        setShowSubscriptionPlanModalTime(150000)\n        setDisableBtn(true)\n        const loginResponse = await AuthApi.login({email:userInfo.email, password:password})\n        console.log(\"My console for loginResponse from business plan\", loginResponse)\n        if(loginResponse && loginResponse.success){\n            openNotificationWithIcon(\"success\", \"Success\", \"User logged in successfully!\")\n            setIncorrectPassword(false)\n            setToken(loginResponse.token.accessToken)\n            setUser(loginResponse.user)\n            if(loginResponse?.user?.userType === 'customer'){\n                if (jobIdFromUrl) {\n                    const customerTypeValid = (loginResponse.user.customer.customerType ? loginResponse.user.customer.customerType !== 'test' : true);\n                    checkCustomerHaveCard(loginResponse.user, customerTypeValid)\n                }else{\n                    if (planId) {\n                        if(couponCode){\n                            window.location.href=`/buy-business-plan?planId=${planId}&page=CompleteYourPurchase&couponCode=${couponCode}`\n                        }else{\n                            window.location.href = `/buy-business-plan?planId=${planId}&page=CompleteYourPurchase`\n                            // setbusinessPlanStepNumber(jobFlowStepsObj['CompleteYourPurchase'])\n                        }\n                    } else {\n                        //Checking if customer already have card added to account.\n                        if (loginResponse.user) {\n                            let liveUser = await isLiveUser(loginResponse.user)\n                            let customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n                                user: loginResponse.user,\n                                liveUser: liveUser\n                            });\n                            console.log(\"My console for customer_info\", customer_info)\n                            if (customer_info.has_card_or_subscription) {\n                                window.location.href = `/`\n                            } else {\n                                window.location.href = `/customer/registered`\n                            }\n                        }\n                    }\n                }\n            }\n\n\n        }else{\n            openNotificationWithIcon(\"error\", \"Error\", \"Incorrect Password\")\n            setDisableBtn(false)\n            setIncorrectPassword(true)\n        }\n    }\n\n\n     const checkCustomerHaveCard = async (user, customerTypeValid) => {\n        try {\n            if (user && !user?.activeStatus) {\n                openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_STATUS_MSG);\n                const timer = setTimeout(() => { history.push('/dashboard') }, 2000);\n                return () => clearTimeout(timer);\n            }\n            if (user && user.customer) {\n                mixpanel.identify(user.email);\n                const ownerId = user?.ownerId;\n                console.log('owner iiddddd :::::::', ownerId)\n                let ownerStripeId = '';\n                if (ownerId) {\n                    const ownerUserDetails = await UserApi.getUserById(ownerId)\n                    console.log('ownerUserDetails ::::', ownerUserDetails)\n                    if (ownerUserDetails?.customer?.stripe_id) {\n                        ownerStripeId = ownerUserDetails?.customer?.stripe_id\n                    } else {\n                        openNotificationWithIcon(\"info\", \"Info\", `Please contact your organization owner to add card to proceed with this job!`)\n                        history.push(\"/\")\n                        return\n                    }\n                }\n\n                let customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n                    user: user,\n                    liveUser: liveUser\n                });\n                if (customer_info.has_card_or_subscription === false && customerTypeValid) {\n                    // mixpanel code//\t\t\t\t\t\n                    mixpanel.track('Customer - Ask Credit Card');\n                    mixpanel.people.set({\n                        $first_name: user.firstName,\n                        $last_name: user.lastName,\n                    });\n                    // mixpanel code//\n                    await updateJob(jobIdFromUrl, {customer:user.customer.id, guestJob:false,cardPreAuthorization: false })\n                    window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobIdFromUrl}`\n                } else {\n                    // This condition will first check whether a user join from mobile or tablet. If so then don't hold any money.\n                    // if ((isMobile || isTablet) && localStorage.getItem(\"isScheduleJob\") !== 'true') {\n                    //     let paidJobs = await JobApi.getTotalJobs({ \"customer\": user?.customer?.id })\n                    //     if (paidJobs >= 1) {\n                    //         await JobApi.updateJob(jobIdFromUrl, { isReturningCustomer: true })\n                    //     }\n                    //     await JobApi.updateJob(jobIdFromUrl, {\n                    //         customer: user.customer.id,\n                    //         guestJob: false,\n                    //         cardPreAuthorization: false,\n                    //     }).then(async () => {\n                    //         await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                    //         await emailOFMobileTabletJobPosting(job)\n                    //     });\n                    // } else {\n                        let paidJobs = await JobApi.getTotalJobs({ \"customer\": user?.customer?.id })\n                        if (paidJobs >= 1) {\n                            await JobApi.updateJob(jobIdFromUrl, { isReturningCustomer: true })\n                        }\n                        const stripeId = user?.ownerId ? ownerStripeId : user?.customer?.stripe_id;\n                        let preauthorize = await CustomerApi.holdChargeFromCustomer({\n                            'stripe_id': stripeId,\n                            'liveUser': (user?.customer?.customerType && user?.customer?.customerType === 'live' ? true : false), \"jobId\": jobIdFromUrl\n                        })\n                        console.log(\"My console for preaut\", preauthorize)\n                        if (preauthorize.status === \"Successful\") {\n                            mixpanel.track('Customer - Preauthorize successfully', { jobId: jobIdFromUrl });\n                            if (localStorage.getItem(\"isScheduleJob\")) {\n                                localStorage.removeItem(\"isScheduleJob\")\n                                console.log(\"inside preauthorize schedule if\")\n                                const updatedJob = await JobApi.updateJob(jobIdFromUrl, {\n                                    status: \"Scheduled\",\n                                    customer: user.customer.id,\n                                    guestJob: false,\n                                    cardPreAuthorization: true,\n                                })\n                                // createUpdateJob(\"Scheduled\")\n                                await emitSocketCreateFetchNotification(updatedJob, user)\n\n                                setTimeout(() => {\n                                    window.location.href = '/dashboard?&scheduleJobId=' + jobIdFromUrl;\n                                }, 500);\n                                setDisableBtn(false)\n                            } else {\n                                // if (isMobile || isTablet) {\n                                //     await JobApi.updateJob(jobIdFromUrl, {\n                                //         customer: user.customer.id,\n                                //         guestJob: false,\n                                //         cardPreAuthorization: true,\n                                //     }).then(async () => {\n                                //         await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                                //         await emailOFMobileTabletJobPosting(job)\n                                //     })\n                                // } else {\n\n                                    console.log(\"inside preauthorize ASAP else\")\n                                    await JobApi.updateJob(jobIdFromUrl, {\n                                        status: \"Pending\",\n                                        customer: user.customer.id,\n                                        guestJob: false,\n                                        cardPreAuthorization: true,\n                                        tech_search_start_at: new Date(),\n                                    }).then((testingRes) => {\n                                        console.log(\"window.location.href from SignIn\", testingRes)\n                                        window.location.href = `/customer/profile-setup?page=tech-search&jobId=${jobIdFromUrl}`\n                                    })\n                                // }\n                            }\n                        } else {\n                            let mixpanelData = {}\n                            if (job && job.id) {\n                                mixpanelData = { jobId: job.id }\n                            }\n                            mixpanel.track('Customer - Preauthorize Failed', mixpanelData);\n                            if (job && job.id && job.guestJob && user && user.customer) {\n                                await updateJob(job.id, { customer: user.customer.id, guestJob: false })\n                            }\n                            let timeOutDuration = 2000;\n                            if (preauthorize?.response?.decline_code === \"invalid_account\" || preauthorize?.message.includes('Invalid account')) {\n                                timeOutDuration = 4000;\n                                openNotificationWithIcon('error', 'Error', 'Unable to authorize your existing credit card. Please add new credit card from Settings -> Card Details.')\n                            } else {\n                                openNotificationWithIcon('error', 'Error', preauthorize.message)\n                            }\n\n                            setTimeout(() => {\n                                window.location.href = '/dashboard'\n                            }, timeOutDuration);\n                        }\n                    // }\n                }\n            }\n        } catch (err) {\n            console.log(\"error in checkForCard\", err)\n        }\n    }\n\n\n        /**\n    * send email with job link for desktop\n    * @params : job\n    * @author : Ridhima Dhir\n    */\n        const emailOFMobileTabletJobPosting = async (jobData) => {\n            socket.emit('mobile_tablet_job_post_email', jobData);\n        }\n    \n            /**\n        * mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n        * @author : Ridhima Dhir\n        */\n            const confirmModaloFMobileTabletJobPosting = async (message = '') => {\n                if (user && user.email) {\n                    mixpanel.identify(user.email);\n                    mixpanel.track('Customer - Job created from mobile or tablet')\n                }\n                Modal.confirm({\n                    title: \"To better assist you please join from your computer.\",\n                    content: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n                    okText: 'Ok',\n                    cancelButtonProps: { style: { display: 'none' } },\n                    className: 'app-confirm-modal',\n                    onOk() {\n                        history.push(\"/\")\n                    },\n                });\n            }\n\n      /**\n     * emit send-schedule-alerts socket and create / fetch notification customer notifications\n     * @params : jobStats(Type:Object): Have job details\n     * @returns : null\n     * @author : Ridhima Dhir\n     */\n      const emitSocketCreateFetchNotification = async (jobStats, user) => {\n        try {\n            console.log(\"send-schedule-alerts :::::::::::\")\n            //Notification for customer\n            const notificationData = {\n                user: user.id,\n                job: jobStats.id,\n                read: false,\n                actionable: false,\n                title: 'We are finding a technician for you. We will inform you when we find the technician',\n                type: 'Scheduled Job',\n            };\n            console.log(\"notificationData ::::::::\", notificationData)\n            await createNotification(notificationData);\n            await fetchNotifications({ user: user.id });\n\n            // call send-schedule-alerts socket from backend.\n            // It will find available techs and send alerts by sms/email/notification\n            socket.emit('search-for-tech', {\n                jobId: jobStats.id,\n                customerTimezone: user.timezone,\n                jobData: jobStats,\n                primaryTime: jobStats.primarySchedule,\n                phoneNumber: user.customer.phoneNumber,\n                customerName: user.firstName,\n                customerEmail: user.email,\n                technicianId: technicianId ? technicianId : false,\n            });\n        } catch (err) {\n            console.log('There is catch error while create/fetch notification  :::: ' + err.message)\n            mixpanel.identify(user.email);\n            mixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n        }\n    }\n    return <div className=\"custom-container  min-height-inherit\">\n        <Row className=\"min-height-inherit d-flex justify-content-center align-items-center parent-row\">\n            <Col md={9} xs={12} className=\"d-flex flex-column min-height-inherit\">\n               {planId && <ProgressBar currentStep={1} />} \n                <div className=\"d-flex flex-column justify-content-center align-items-center min-height-inherit\">\n                    <div className=\"mb-50\">\n                        <HeadingText firstBlackText={\"Log In\"} />\n                    </div>\n                    <div className=\"choose-password-email-div d-flex justify-content-center align-items-center mb-20\">\n                        <span className=\"choose-password-email\">{userInfo?.email}</span>\n                    </div>\n                    <form onSubmit={handleLogIn}>\n                        <div className=\"mb-20 w-428 max-width-768-w-265px position-relative\">\n                            <SubHeadingText text={\"Password\"} />\n                            <PasswordInput\n                                name=\"Password\"\n                                placeholder=\"Password\"\n                                type=\"password\"\n                                // className=\"business-plan-input\"\n                                onFocus={() => setPwModelVisible(true)}\n                                onBlur={() => setPwModelVisible(false)}\n                                value={password}\n                                onChange={(e) => {setPassword(e.target.value)}}\n                            />\n                            {/* <ValidatorModel  visible={pwModelVisible}>\n                                <PasswordValidator inputText={password} setAlertMessagePassword={setAlertMessagePassword} />\n                            </ValidatorModel> */}\n                            <a onClick={resetPasswordConfirmationModal}>\n                                <SubHeadingText text={\"Forgot Password?\"} />\n                            </a>\n                        </div>\n                        <div className=\"business-plan-sign-in-button mb-15 d-flex flex-row justify-content-between\">\n                            <BasicButton btnType={'button'} disable={disableBtn} onClick={handleBackBtnClicked} height={\"70px\"} width={\"75px\"} background={\"#92A9B8\"} color={\"#fff\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"left\"} />\n                            \n                            <BasicButton btnType={'submit'} btnTitle={\"Log In\"} height={\"70px\"} width={\"175px\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={handleLogIn} disable={disableBtn} showSpinner={disableBtn} />    \n                        </div>\n                    </form>\n                    {incorrectPassword && <div className=\"d-flex align-items-center\">\n                        <div className=\"login-info-round-div mr-10\">\n                            <FontAwesomeIcon icon={faInfo} className=\"business-plan-info-icon\" />\n                        </div>\n                        <span className=\"tAndc-text grey-color-text\">Incorrect Password</span>\n                    </div>}\n                </div>\n            </Col>\n            <Col md={3} xs={12} className=\"sign-in-side-column\">\n                {planId && <ChosenPlanSummary setchosenProdId={setchosenProdId} setShowSubscriptionPlanModal={setShowSubscriptionPlanModal} />}\n                {jobIdFromUrl && <JobInfoRightSideBar user={user}/>}\n                <Testimony testimonyBy={\"jennifer\"} />\n            </Col>\n        </Row>\n    </div>\n}\n\nexport default LogIn",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\LogIn.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ResetPasswordLink.js",
                                                                    "fileData": "import React, { useEffect } from \"react\"\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport Pass from \"../../../../assets/animations/Pass.json\"\nimport HeadingText from \"../Components/HeadingText\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useAuth } from '../../../../context/authContext';\n\nconst ResetPasswordLink = ({userInfo, setbusinessPlanStepNumber, jobFlowStepsObj}) => {\n\n    const { resetPasswordHandler } = useAuth();\n\n    useEffect(()=>{\n        if(userInfo && userInfo.email){\n            console.log(\"My console for userInfo\", userInfo.email)\n            let res = resetPasswordHandler({email:userInfo.email})\n            console.log(\"My console for userInfo res\", res)\n        }\n    },[])\n\n    return <div className=\"reset-password-link-main-div d-flex flex-column justify-content-center align-items-center min-height-inherit\">\n        <Player\n            autoplay\n            keepLastFrame={true}\n            src={Pass}\n            // loop={true}\n            className=\"reset-password-link-sent\"\n            >\n        </Player>\n        <div className=\"mb-30 d-flex justify-content-center align-items-center reset-password-heading-div text-center\">\n            <HeadingText firstBlackText={\"We have sent a reset password link to your email.\"} />\n        </div>\n        <div className=\"d-flex justify-content-center flex-wrap align-items-center mb-30\" >\n            <div className=\"open-btn mr-10\">\n                <a href=\"https://www.google.com/gmail\" target=\"_blank\" className=\"height-width-inherit\">\n                    <BasicButton btnTitle={\"Open Gmail\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} />    \n                </a>    \n            </div>\n            <div className=\"open-btn\">\n                <a href=\"https://outlook.live.com/mail\" target=\"_blank\" className=\"height-width-inherit\">\n                    <BasicButton btnTitle={\"Open Outlook\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} />    \n                </a>\n            </div>\n        </div>\n            <div className=\"d-flex align-items-center\">\n                <div className=\"login-info-round-div mr-10\">\n                    <FontAwesomeIcon icon={faInfo} className=\"business-plan-info-icon\" />\n                </div>\n                <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                    <div className=\"lh-16\">\n                        <a onClick={()=>setbusinessPlanStepNumber(jobFlowStepsObj['LogIn'])}>\n                            <span className=\"reset-pass-bottom-text grey-color-text\">Don't need a password reset?</span>&nbsp;<span className=\"reset-pass-bottom-text turcose-color-text\">Login</span>\n                        </a>\n                    </div>\n                    <div className=\"lh-16\">\n                        <a onClick={()=>setbusinessPlanStepNumber(jobFlowStepsObj['SignIn'])}>\n                            <span className=\"reset-pass-bottom-text grey-color-text\">Don't have an account-</span>&nbsp;<span className=\"reset-pass-bottom-text turcose-color-text\">Sign up</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    </div>\n}\n\nexport default ResetPasswordLink",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\ResetPasswordLink.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SignIn.js",
                                                                    "fileData": "import BasicButton from \"components/common/Button/BasicButton\";\nimport React, { useState, useEffect } from \"react\"\nimport { Row, Col } from \"react-bootstrap\";\nimport HeadingText from \"../Components/HeadingText\";\nimport InputField from \"../Components/InputField\";\nimport SubHeadingText from \"../Components/SubHeadeingText\";\nimport McAfeeLogo from \"../../../../assets/images/McAfee.png\"\nimport stripeLogo from \"../../../../assets/images/stripe.png\"\nimport psbaLogo from \"../../../../assets/images/pbsa.png\"\nimport ChosenPlanSummary from \"../Components/ChosenPlanSummary\";\nimport Testimony from \"../Components/Testimony\";\nimport { openNotificationWithIcon } from \"utils\";\nimport * as UserApi from \"../../../../api/users.api\"\nimport { useAuth } from '../../../../context/authContext';\nimport { useLocation } from 'react-router';\nimport JobInfoRightSideBar from \"components/JobInfoRightSideBar\";\n\nconst SignIn = ({setbusinessPlanStepNumber, jobFlowStepsObj, setUserInfo, setGivenEmail, setchosenProdId,setShowSubscriptionPlanModal, setShowtwentyPercentModal,user}) => {\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const planId = queryParams.get('planId') ? queryParams.get('planId') : false;\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const emailRegExp = /^[a-zA-Z0-9]+[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+?\\.[a-zA-Z]{2,3}$/\n    const [inputEmail, setinputEmail] = useState(\"\")\n    const [disableBtn, setDisableBtn] = useState(false)\n    const { getGuestUser } = useAuth();\n    const [showSubscriptionPlanModalTime, setShowSubscriptionPlanModalTime] = useState(150000)\n    const [discountModalShown, setDiscountModalShown] = useState(false)\n\n    useEffect(()=>{\n        console.log(\"My console for URL\", window.location.href.includes(\"register\"))\n    },[])\n   \n\n    useEffect(()=>{\n        if(!discountModalShown && planId){\n            setTimeout(() => {\n                setShowtwentyPercentModal(true)\n                setDiscountModalShown(true)\n            }, showSubscriptionPlanModalTime);\n        }\n    }, [showSubscriptionPlanModalTime])\n\n    /**\n     * Following function will handle email input field change\n     * @params = event\n     * @response : null\n     * @author : Vinit\n     */\n    const emailInputOnChange = (e) => {\n\n        setinputEmail(e.target.value.trim())\n        setShowSubscriptionPlanModalTime(150000)\n    }\n\n    /**\n     * Following function will check if user entered valid email or not\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n    const emailValidation = () => {\n        if(!emailRegExp.test(String(inputEmail))){\n            return false\n        }else{\n            setGivenEmail(inputEmail)\n            return true\n        }\n    }\n\n    /**\n     * Following function will handle whether to ask user to sign-up or log-in\n     * @params = null\n     * @response : null\n     * @author : Vinit\n     */\n    const handleBtnClick = async (e) => {\n        e.preventDefault()\n        setShowSubscriptionPlanModalTime(150000)\n        setDisableBtn(true)\n        if(inputEmail === \"\"){\n            openNotificationWithIcon(\"info\", \"info\", `Please enter your email!`)\n            setDisableBtn(false)\n            return\n        }\n        \n        const isValidEmail = emailValidation()\n        if(isValidEmail){\n            const guestUserRes = await getGuestUser();\n            const user = await UserApi.getUserByParamAsGuest({email:inputEmail}, guestUserRes.token.accessToken)\n            console.log(\"My console for user to chk\", user)\n            if(user){\n                if(user.userType === \"customer\"){\n                    setUserInfo(user)\n                    setbusinessPlanStepNumber(jobFlowStepsObj['LogIn'])\n                }else{\n                    window.location.href=\"/\"\n                }\n            }else{\n                setbusinessPlanStepNumber(jobFlowStepsObj['ChooseYourPassWord'])\n            }\n        }else{\n            openNotificationWithIcon(\"info\", \"info\", `Please check email format!`)\n            setDisableBtn(false)\n        }\n    }\n\n    return <div className=\"custom-container d-flex justify-content-center min-height-inherit\">\n            <Row className=\"d-flex justify-content-center  align-items-center min-height-inherit w-full parent-row\">\n                <Col md={9} className=\"d-flex flex-column justify-content-center align-items-center min-height-inherit w-full\">\n                    <div>\n                        <HeadingText firstBlackText={\"Alright!\"} />\n                    </div>\n                    <div className=\"mb-10 text-center\">\n                        <HeadingText firstBlackText={\"Let's get \"} secondGreenText={\" your Geeks \"} secondBlackText={\"on board.\"} />\n                    </div>\n                    <div className=\"mb-50 text-center\">\n                        <SubHeadingText text={\"You're seconds away from having our Geeks, on your side. ;) \"} />\n                    </div>\n                    <form onSubmit={handleBtnClick}>\n                        <div className=\"mb-20 w-full d-flex justify-content-center \">\n                            <div className=\"max-width-768-w-100per\">\n                                <SubHeadingText text={\"Email\"} />\n                                <InputField onChange={emailInputOnChange} />\n                            </div>\n                        </div>\n                        <div className=\"business-plan-sign-in-button mb-50 w-full\">\n                            <BasicButton btnTitle={\"Continue\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} disable={disableBtn} showSpinner={disableBtn} btnType={\"submit\"} onClick={handleBtnClick} />\n                        </div>\n                        <div className=\"d-flex max-w-420px justify-content-around w-full\">\n                            <img src={stripeLogo} className=\"h-41px\" />\n                            <img src={psbaLogo} />\n                            <img src={McAfeeLogo} />\n                        </div>\n                    </form>\n                </Col>\n                <Col md={3} className=\"sign-in-side-column\" >\n                    {planId && <ChosenPlanSummary setchosenProdId={setchosenProdId} setShowSubscriptionPlanModal={setShowSubscriptionPlanModal} />}\n                    {jobIdFromUrl && <JobInfoRightSideBar user={user}/>}\n                    <Testimony testimonyBy={\"brian\"} />\n                </Col>\n            </Row>\n        </div>\n}\n\nexport default SignIn",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\BusinessPlan\\steps\\SignIn.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "ChatGeek",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect,useState } from \"react\";\nimport { Container, Row, Col, Image, } from 'react-bootstrap';\n\n\nconst ChatGeek = () => {\n\n    return (\n        <>\n        <h1>Chat geek</h1>\n        </>\n    )\n};\nexport default ChatGeek",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ChatGeek\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "JobCreate",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useLocation, useParams } from 'react-router';\nimport JobDetailView from './steps/JobDetailView';\nimport Schedule from './steps/Scehdule';\nimport JobAlive from './steps/JobAlive';\nimport { useJob } from '../../../context/jobContext';\nimport NotAccepted from './steps/NotAccepted';\nimport { Modal } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSocket } from '../../../context/socketContext';\nimport { useTools } from '../../../context/toolContext';\nimport * as JobService from \"../../../api/job.api\";\nimport * as CommonFunctions from '../../../utils'\nimport { Helmet } from 'react-helmet';\nimport queryString from 'query-string';\nimport { useUser } from '../../../context/useContext';\nimport HelpIsOnItsWay from '../Onboarding/Registration/HelpIsOnItsWay'\nimport { STRIPE_KEY } from '../../../constants';\nimport { useNotifications } from '../../../context/notificationContext'\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport * as TechnicianApi from '../../../api/technician.api';\n\nimport { platform } from '../../../constants/index.js';\nimport Payment from './steps/Payment';\nlet callFetchJobCalled = false;\nlet stripePromise = '';\nconst JobCreate = (props) => {\n    console.log('job create rendered>>>>>>>>>>>>', props)\n    const { socket } = useSocket();\n    const history = useHistory();\n    const { user } = useUser();\n    const { job, fetchJob, updateJob, createJob } = useJob();\n    const location = useLocation();\n    const fromPage = location.state ? location.state.fromPage : null\n    const [currentStep, setCurrentStep] = useState(0);\n    const { jobFlowStep, setJobFlowStep, jobFlowsDescriptions } = useTools()\n    const [notFound, setNotFound] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [priceLoaded, setPriceLoaded] = useState(false);\n    let state_jobId = useMemo(() => location.state ? location.state.jobId : '', [location.state]);\n    const [estimatedTime, setEstimatedTime] = useState('NA');\n    const [estimatedDuration, setDurationTime] = useState('NA');\n    const [estimatedPrice, setEstimatedPrice] = useState('NA');\n    const [estimatedWait, setEstimatedWait] = useState('NA');\n    const [mainEstimatedWait, setMainEstimatedWait] = useState('15')\n    const [intialPrice, setInitialPrice] = useState('NA');\n    const [finalPrice, setFinalPrice] = useState('NA');\n    const { fetchNotifications } = useNotifications()\n    const [registeredUser, setRegisteredUser] = useState(null)\n    const [runOnce, setRunOnce] = useState(false)\n    const [guestJobId, setGuestJobId] = useState('')\n    const btnclickedObj = {\n        'getHelpNow': 0,\n        'scheduleJobLater': 1\n    }\n\n    const [isTechNotFoundInSearch, setIsTechNotFoundInSearch] = useState(false);\n    const queryParams = new URLSearchParams(location.search);\n    const repostJob = queryParams.get('repost') ? queryParams.get('repost') : false;\n    const [afterGeekerHours, setAfterGeekerHours] = useState(false)\n    const [showGoBackBtn, setShowGoBackBtn] = useState(true)\n    const [showGoBackBtnRedirection, setshowGoBackBtnRedirection] = useState(false)\n\n    // const [jobIdParam, setJobIdParam] = useState('');\n    let params = new URLSearchParams(location.search)\n    let query_params = queryString.parse(location.search)\n    console.log(\"query_params >>>>>>>>> \", query_params)\n    let newPostJob = query_params[\"newpost\"]\n    let { jobId } = useParams();\n    let { schedule } = query_params;\n    let liveUser = true\n    console.log(\"params >>>>>>>>>>>>>>>>>>>>>\", params)\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>schedule\", schedule)\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>jobId\", jobId)\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>search_jobId >>>>\", search_jobId)\n    console.log(\">>>>>>>>>>>>>>>>>>>>> \", newPostJob)\n\n    useEffect(() => {\n        (async () => {\n            console.log(\"the user >>>>>>>>>> \", user)\n            if(user){\n                stripePromise = await CommonFunctions.getStripeObject(user)\n            }else if(guestJobId !== ''){\n                stripePromise = loadStripe(STRIPE_KEY)\n                console.log(\"Heree\",stripePromise)\n            }\n        })();       \n       \n    }, [user,guestJobId])\n\n    const find_id_from_url = () => {\n        let params = new URLSearchParams(location.search)\n        return params.get('jobId')\n    }\n\n    useEffect(() => {\n        console.log(\"updating job inside the index >>>>>>>> \", job)\n    }, [job])\n\n\n    let search_jobId = location.search ? find_id_from_url() : jobId\n    jobId = (search_jobId && search_jobId !== '' ? search_jobId : jobId)\n    if (params.get(\"postedJobId\")) {\n        jobId = query_params.get(\"postedJobId\")\n        setTimeout(function () {\n            call_fetch_job(jobId)\n        }, 100)\n    }\n    // if(params.get(\"schedule\")){\n    //     setCurrentStep(1)\n    // }\n    if (jobId) {\n        if (!callFetchJobCalled) {\n            callFetchJobCalled = true;\n            setTimeout(function () {\n                call_fetch_job(jobId)\n            }, 100)\n        }\n    }\n    // console.log(\"search_jobId::\",search_jobId)\n    const handleDecline = () => {\n        Modal.confirm({\n            title: 'Are you sure you want to decline this job?',\n            okText: \"Yes\",\n            cancelText: \"No\",\n            className: 'app-confirm-modal',\n            onOk: () => {\n                window.location.href = \"/\"\n            }\n        })\n    }\n\n    useEffect(() => {\n        console.log(\"jobFlowStep >>>>>>>>> job create page\", jobFlowStep)\n    }, [jobFlowStep])\n    useEffect(() => {\n        console.log(\"jobFlowStep >>>>>>>>> job create page\", jobFlowStep)\n        if ((!job || job['success'] == false) && queryParams.get(\"jobId\") && queryParams.get(\"newpost\") && queryParams.get(\"isMobilePost\")) {\n            setGuestJobId(queryParams.get(\"jobId\"))\n            \n            // setJobFlowStep(jobFlowsDescriptions['customerRegisterPage'])\n        }\n        console.log(\">>>>> jobs setGuestJobId >>>>>> \", job, \"jobFlowStep :: \",jobFlowStep)\n    }, [job])\n    useEffect(() => {\n        console.log(\">>>guestJobId >>>>>>>> \", guestJobId)\n        if (guestJobId) {\n            call_fetch_job(guestJobId)\n        }\n    }, [guestJobId])\n\n    useEffect(() => {\n        console.log(\">>>>>>>>>>>>>>>>>currentStep \", currentStep)\n    }, [currentStep])\n\n    useEffect(() => {\n        // console.log(\"query_params\",query_params)\n        if (query_params.repost || query_params.repost !== null) {\n            state_jobId = false\n            search_jobId = false\n            // setButtonName(\"Find Technician\")\n            fetchJob(query_params.jobId)\n            // setJobIdParam(search_jobId)\n        }\n        // console.log('search_jobId',search_jobId)\n    }, [])\n\n    useEffect(() => {\n        if (props.jobData) {\n            let softwareData = (props.jobData.subSoftware && props.jobData.subSoftware.id ? props.jobData.subSoftware : props.jobData.software)\n            // console.log(\"query_params :::::: \",query_params)\n\n            let time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n            let time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\n            setEstimatedTime((softwareData ? softwareData.estimatedTime : 'NA'))\n            setDurationTime((softwareData ? softwareData.estimatedTime : 'NA'))\n            setEstimatedPrice((softwareData ? softwareData.estimatedPrice : 'NA'))\n            setEstimatedWait((softwareData ? softwareData.estimatedWait + ' minutes' : 'NA'))\n            if (!runOnce) {\n                fetchEstimatedWaitAccordingToLiveUser()\n            }\n            let price_per_six_min = softwareData.rate\n            let price1 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[0]) : 0)\n            let price2 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[1]) : 0)\n            // console.log(\"price_per_six_min customer/jobcreate :: \",price_per_six_min)            \n            // if(price_per_six_min > 0){\n            price1 = (price1 ? price1 : price_per_six_min)\n            price2 = (price2 ? price2 : price_per_six_min)\n            let initPriceToShow = (time1 / 6) * parseInt(price1)\n            initPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 'NA')\n            let finalPriceToShow = (time2 / 6) * parseInt(price2)\n            finalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 'NA')\n            setInitialPrice(initPriceToShow)\n            setFinalPrice(finalPriceToShow)\n            // }\n            setPriceLoaded(true)\n        }\n    }, [props.jobData])\n\n    useEffect(() => {\n        // console.log(\"the second use Efeeft 2::: \")\n        if (job && job.id) {\n            console.log('updated job is :::', job)\n\n            let query_params = queryString.parse(location.search)\n            let softwareData = (job.subSoftware && job.subSoftware.id ? job.subSoftware : job.software) || (props.jobData.subSoftware && props.jobData.subSoftware.id ? props.jobData.subSoftware : props.jobData.software)\n            // console.log(\"query_params :::::: \",query_params)\n\n            let time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n            let time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\n            setEstimatedTime((softwareData ? softwareData.estimatedTime : 'NA'))\n            setDurationTime((softwareData ? softwareData.estimatedTime : 'NA'))\n            setEstimatedPrice((softwareData ? softwareData.estimatedPrice : 'NA'))\n            setEstimatedWait((softwareData ? softwareData.estimatedWait + ' minutes' : 'NA'))\n            if (!runOnce) {\n                fetchEstimatedWaitAccordingToLiveUser()\n            }\n            let price_per_six_min = softwareData.rate\n            let price1 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[0]) : 0)\n            let price2 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[1]) : 0)\n            // console.log(\"price_per_six_min customer/jobcreate :: \",price_per_six_min)            \n            // if(price_per_six_min > 0){\n            price1 = (price1 ? price1 : price_per_six_min)\n            price2 = (price2 ? price2 : price_per_six_min)\n            let initPriceToShow = (time1 / 6) * parseInt(price1)\n            initPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 'NA')\n            let finalPriceToShow = (time2 / 6) * parseInt(price2)\n            finalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 'NA')\n            setInitialPrice(initPriceToShow)\n            setFinalPrice(finalPriceToShow)\n            // }\n            setPriceLoaded(true)\n\n            if (fromPage === \"meeting\") {\n                console.log(\"inside this step\")\n                setCurrentStep(2)\n                return\n            }\n        }\n\n    }, [job])\n\n    useEffect(() => {\n        // console.log(\"state_jobId in useEffect ::\",search_jobId)\n        if (state_jobId || fromPage === \"meeting\") {\n            call_fetch_job(state_jobId)\n        }\n        if (search_jobId) {\n            call_fetch_job(search_jobId)\n        }\n    }, [state_jobId, search_jobId, fromPage]);\n\n    /*useEffect(() => {\n        console.log(\"currentStep useEffect ::\",currentStep)        \n    }, [currentStep]);*/\n\n\n    useEffect(() => {\n        socket.on('not-found-30min', function () {\n            setNotFound(true);\n            setLoading(false);\n            setCurrentStep(3);\n            setCurrentStep(1)\n        });\n    }, []);\n\n\n    const fetchEstimatedWaitAccordingToLiveUser = async () => {\n        let get_all_status = []\n        // getting data of all live techs from db\n        const data = await JobService.getAllLiveTechnicians()\n\n        if (data.length > 0 && job && job.software) {\n            for (let i = 0; i <= data.length - 1; i++) {\n                if (data[i]['experiences'].includes(job.software.id) && data[i].user && data[i].user.technician) {\n                    get_all_status.push(data[i].user.technician.status)\n                }\n            }\n            let unique_status = [...new Set(get_all_status)]\n\n            if (unique_status.includes('Available')) {\n                setEstimatedWait('10-15 minutes')\n                setMainEstimatedWait(\"5\")\n            }\n            else if (unique_status.includes('Busy')) {\n                setEstimatedWait('10-15 minutes')\n                setMainEstimatedWait(\"15\")\n            }\n            else {\n                findAllSoftRelatedTech()\n            }\n\n            setRunOnce(true)\n        }\n        else {\n            findAllSoftRelatedTech()\n            setRunOnce(true)\n        }\n    }\n\n    const findAllSoftRelatedTech = () => {\n        // retrieve all techs data\n        let retrieve_tech = TechnicianApi.getTechnicians({})\n        let got_match = false\n        if ((job && job.software) || (props.jobData && props.jobData.software)) {\n            retrieve_tech.then(function (result) {\n                // console.log('result>>>>>>>>>>>>',result)\n                let all_tech = result.data\n                for (let i = 0; i <= all_tech.length - 1; i++) {\n                    let experiences = all_tech[i]['expertise']\n                    for (let i = 0; i <= experiences.length - 1; i++) {\n                        if (job && job.software ? experiences[i]['software_id'] === job.software.id : experiences[i]['software_id'] === props.jobData.software.id) {\n                            got_match = true\n                            break\n                        }\n                    }\n                }\n\n                if (got_match) {\n                    let softwareData = \"\"\n                    if ((job && job.software)) {\n                        softwareData = (job.subSoftware && job.subSoftware.id ? job.subSoftware : job.software)\n                    }\n                    if ((props.jobData && props.jobData.software)) {\n                        softwareData = (props.jobData.subSoftware && props.jobData.subSoftware.id ? props.jobData.subSoftware : props.jobData.software)\n                    }\n\n                    console.log('got_match>>>>>', softwareData)\n                    setEstimatedWait((softwareData ? softwareData.estimatedWait + ' minutes' : 'NA'))\n                } else {\n                    setEstimatedWait('No tech found')\n                }\n            })\n        }\n    }\n    /*const pushBack =() =>{\n        let jobId = ''\n        if (state_jobId !== '') {\n            jobId = state_jobId\n        }\n        else{\n            jobId = search_jobId\n        }\n\n        JobService.updateJob(jobId,{\"status\":\"Declined\"})\n        // mixpanel code//\n        mixpanel.identify(job.customer.user.email);\n        mixpanel.track('Customer - Job declined',{'JobId':job.id});\n        // mixpanel code//\n\n        history.push('/')\n    }*/\n\n\n    const call_fetch_job = async (jobId) => {\n        // console.log('jobId (call_fetch_job)::',jobId)\n        //console.log(\"this method is called\")\n        await fetchJob(jobId)\n    }\n\n    return (\n        // <div className=\"\" style={{width:\"90%\", margin:\"0 auto\"}}>\n        <div className=\"\" style={{ width: jobFlowStep === 6 || jobFlowStep === 3 ? \"100%\" : \"90%\", margin: \"0 auto\", '@media(max-width)': { width: jobFlowStep === 6 || jobFlowStep === 3 ? \"100%\" : \"90%\" } }}>\n            <Helmet>\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n            </Helmet>\n            {\n                platform == 'production' && <Helmet\n                    script={[{\n                        innerHTML: \"gtag('event', 'conversion', {'send_to': 'AW-10817392225/m6wHCM37gM4DEOGckaYo'});\"\n                    }]}>\n                </Helmet>\n            }\n            <div className=\"box-container mx-auto\" style={{ boxShadow: jobFlowStep === 6 ? \"1px -34px 1px #ffff\" : \"\" }}>\n                {job && (\n                    <React.Fragment key={jobId}>\n                        {jobFlowStep === 2 &&\n                            <JobDetailView\n                                estimatedPrice={estimatedPrice}\n                                intialPrice={intialPrice}\n                                finalPrice={finalPrice}\n                                estimatedTime={estimatedTime}\n                                estimatedWait={estimatedWait}\n                                estimatedDuration={estimatedDuration}\n                                handleDecline={handleDecline}\n                                jobId={jobId}\n                                setJobFlowStep={setJobFlowStep}\n                                job={job && job?.id ? job : props.jobData}\n                                // job={job && Object.keys(job).length > 0 && job?.success != false? job : props.jobData} \n                                setStep={setCurrentStep}\n                                priceLoaded={priceLoaded}\n                                fetchJob={fetchJob}\n                                mainEstimatedWait={mainEstimatedWait}\n                                repost={repostJob}\n                                setGuestJobId={setGuestJobId}\n                                guestJobId={guestJobId}\n                                jobFlowsDescriptions={jobFlowsDescriptions}\n                                setLoading={setLoading}\n                                isScheduleJob={schedule}\n                                newPost={newPostJob}\n                                setInitialPrice={setInitialPrice}\n                                setFinalPrice={setFinalPrice}\n                                // setBtnclicked={setBtnclicked}\n                                btnclickedObj={btnclickedObj}\n                                setAfterGeekerHours={setAfterGeekerHours}\n                            />\n                        }\n                        {jobFlowStep === 6 && <Schedule showGoBackBtn={showGoBackBtn} setJobFlowStep={setJobFlowStep} jobFlowsDescriptions={jobFlowsDescriptions} createJob={createJob} isTechNotFoundInSearch={isTechNotFoundInSearch} updateJob={updateJob} job={job && job?.id ? job : props.jobData }  handleDecline={handleDecline} setStep={setCurrentStep} repostJob={repostJob} showGoBackBtnRedirection={showGoBackBtnRedirection} />}\n                        {jobFlowStep === 3 && <JobAlive notFound={notFound} isTechNotFoundInSearch={isTechNotFoundInSearch} setIsTechNotFoundInSearch={setIsTechNotFoundInSearch} setJobFlowStep={setJobFlowStep} jobFlowsDescriptions = {jobFlowsDescriptions}  updateJob={updateJob} job={job && job?.id ? job : props.jobData}  setComponentToRender={setCurrentStep} estimatedWait={estimatedWait} mainEstimatedWait={mainEstimatedWait} afterGeekerHours = {afterGeekerHours} setShowGoBackBtn={setShowGoBackBtn} setshowGoBackBtnRedirection={setshowGoBackBtnRedirection} />}\n                        {jobFlowStep === 7 && <NotAccepted handleDecline={handleDecline} job={props.jobData ? props.jobData : job}setJobFlowStep={setJobFlowStep} jobFlowsDescriptions = {jobFlowsDescriptions}  setStep={setCurrentStep} notFound={notFound} loading={loading} setLoading={setLoading} afterGeekerHours = {afterGeekerHours}/>}\n                        {jobFlowStep === 4 && <HelpIsOnItsWay guestJobId={guestJobId}  jobFlowsDescriptions = {jobFlowsDescriptions} setJobFlowStep={setJobFlowStep} registeredUser={registeredUser} setRegisteredUser={setRegisteredUser} />}\n                        {jobFlowStep === 5 && stripePromise !== ''   && <Elements stripe={stripePromise} >\n                             <Payment job={props.jobData ? props.jobData : job} guestJobId={guestJobId} btnclickedObj={btnclickedObj} jobFlowsDescriptions={jobFlowsDescriptions} user={registeredUser !== null ? registeredUser : user} setJobFlowStep={setJobFlowStep} />\n                        </Elements>}\n                    </React.Fragment>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n    margin-top:20px;\n`;\n\nexport default React.memo(JobCreate);\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "JobAlive.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport { Row } from 'react-bootstrap';\nimport { Alert,Modal} from 'antd';\nimport styled from 'styled-components';\nimport { Helmet } from 'react-helmet';\nimport { useSocket } from '../../../../context/socketContext';\nimport Box from '../../../../components/common/Box';\nimport { useTools } from '../../../../context/toolContext';\nimport { useLocation } from 'react-router';\nimport { NotificationNumber } from '../../../../constants';\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport 'react-circular-carousel/dist/index.css';\nimport {\n\t// StepActionContainer,\n\tBodyContainer,\n} from '../../ProfileSetup/steps/style';\nimport { Button } from 'react-bootstrap';\nimport mixpanel from 'mixpanel-browser';\nimport Loader from '../../../../components/Loader';\n//import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { klaviyoTrack } from '../../../../api/typeService.api';\nimport Logo from 'components/common/Logo';\nimport jsonAnimation from \"../../../../assets/animations/animation.json\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBell, faEnvelope, faArrowRight, faCalendarDay } from \"@fortawesome/free-solid-svg-icons\";\nimport { ImPhone } from \"react-icons/im\";\nimport { BsInfoCircle } from \"react-icons/bs\";\nimport Countdown, { zeroPad, } from 'react-countdown';\nimport * as JobCycleApi from '../../../../api/jobCycle.api'\nimport { JobTags } from '../../../../constants/index.js';\n// import { useHistory } from \"react-router-dom\";\n// let timer;\n// let val = 0;\n// let call_counter_again = false;\n// let suggestionsIndex = 0\n// var settings = {\n// \tdots: false,\n// \tinfinite: true,\n// \tspeed: 500,\n// \tautoplay: true,\n// };\n\nconst JobAlive = ({ job, setComponentToRender, updateJob, estimatedWait, mainEstimatedWait, setIsTechNotFoundInSearch, isTechNotFoundInSearch, afterGeekerHours, scheduleForLater, setJobFlowStep, jobFlowsDescriptions, notFound, setShowGoBackBtn, setshowGoBackBtnRedirection }) => {\n\n\t// const [percent, setPercent] = useState(0);\n\t// const [percentTwo, setPercentTwo] = useState(0);\n\tconst { openMobileDialogBox, useTimer, setUseTimer } = useTools()\n\tconst location = useLocation();\n\tconst queryParams = new URLSearchParams(location.search)\n\tconst technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n\tconst { socket } = useSocket();\n\t// const sliderRef = useRef()\n\t// const [suggestions, setSuggestion] = useState([\n\t// \t`Did you know You can use voice in Google docs? Simply go to Tools, enable voice typing`,\n\t// \t`To add an image from its web address go to Insert>Image>By URL`,\n\t// \t`You can fully adjust the page setup of any Google Doc. Just go to File>Page Setup and make your changes.`,\n\t// \t`Download the Translate add-on (Links to an external site.) to translate a single word in your document.`\n\t// ])\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [autoCount, setAutoCount] = useState(false);\n\tconst [showAllBtn, setShowAllBtn] = useState(false);\n\tconst [countAgain, setCountAgain] = useState(true)\n\t// const [buttonName, setButtonName] = useState('Keep Searching');\n\t// const [statusText, setStatusText] = useState(\"Hmm... We searched everywhere, but it looks like all our technicians are busy helping others right now. But don't worry! You can always schedule a call for later.\")\n\t// useEffect(() => {\n\t// \tif (technicianId) {\n\t// \t\tsetStatusText('Same technician is not available at this time.You can choose to keep searching with other technicians or schedule job with same technician at some other time.')\n\t// \t\t// setButtonName(\"Search for another technicians\")\n\t// \t}\n\t// }, [])\n\t// const Counter = () => {\n\t// \tif (val === 100) {\n\t// \t\tval = 0;\n\t// \t\tclearInterval(timer);\n\t// \t\t// setTurn(prev => prev+1)\n\t// \t\tif (!call_counter_again) {\n\t// \t\t\tcall_counter_again = true\n\t// \t\t\t// setPercent(0)\n\t// \t\t\ttimer = setInterval(Counter, 1000);\n\t// \t\t\t// setLoadingMessage(\"Connecting to the technician\")\n\t// \t\t}\n\t// \t} else {\n\t// \t\tif (val <= 100) {\n\t// \t\t\tif (call_counter_again) {\n\t// \t\t\t\tval += 0.1\n\t// \t\t\t}\n\t// \t\t\telse {\n\t// \t\t\t\tval += 1;\n\t// \t\t\t}\n\t// \t\t\tif (call_counter_again) {\n\t// \t\t\t\tsetPercentTwo(Math.round(val));\n\t// \t\t\t} else {\n\t// \t\t\t\tsetPercent(Math.round(val));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// };\n\n\tuseEffect(() => {\n\t\tif (job) {\n\t\t\tsetIsLoading(false);\n\t\t\tsetAutoCount(true);\n\t\t\tsocket.emit(\"join\", job.id)\n\t\t\tif (job.id) {\n\t\t\t\tmixpanel.identify(job?.customer?.user?.email);\n\t\t\t\tmixpanel.track('Customer - Connecting techinician progress bar for job '+job.id);\n\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t$first_name: job?.customer?.user?.firstName,\n\t\t\t\t\t$last_name: job?.customer?.user?.lastName,\n\t\t\t\t});\n\n\t\t\t\tsocket.emit('new-job-alert', {\n\t\t\t\t\tjobData: job,\n\t\t\t\t\tposted: true,\n\t\t\t\t\tstatus: \"Pending\",\n\t\t\t\t\tpostedTime: new Date(),\n\t\t\t\t\tEstimatedWait: mainEstimatedWait,\n\t\t\t\t\tsearchSameTech: technicianId ? true : false,\n\t\t\t\t\ttechnicianId: technicianId\n\t\t\t\t});\n\n\t\t\t\tsocket.on(\"meeting:join-button\", (props) => {\n\t\t\t\t\twindow.location.href = `/customer/accept-job/${props.res}`\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\t}, [job]);\n\n\tuseEffect(() => {\n\t\tif (openMobileDialogBox) {\n\t\t\tsetAutoCount(false);\n\t\t\t// clearTimeout(window.progressBar)\n\t\t\tModal.info({\n\t\t\t\ttitle: \"Technician accepted your job\",\n\t\t\t\tcontent: \"An email is sent to you with a link kindly join from Computer.\",\n\t\t\t\tclosable: false,\n\t\t\t\tokText: \"Dashboard\",\n\t\t\t\tclassName: \"app-confirm-modal\",\n\t\t\t\tonOk: function () {\n\t\t\t\t\twindow.location.href = \"/\"\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t}, [openMobileDialogBox])\n\n\t// useEffect(() => {\n\t// if (timer) {\n\t// \tclearInterval(timer);\n\t// \tval = 0\n\t// }\n\n\t// window.intervalTimer = setTimeout(() => {\n\t// \ttimer = setInterval(Counter, 100);\n\t// \tsetIsLoading(false)\n\t// }, 1000);\n\n\t// setIsLoading(false)\n\t// call_counter_again = false\n\n\t// if (technicianId != undefined && technicianId != false) {\n\t// \tsetUseTimer(300000)\n\t// }\n\n\t// }, []);\n\n\t// useEffect(() => {\n\t// \tif (job) {\n\t// \t\tsocket.emit(\"join\", job.id)\n\t// \t}\n\n\t// \tif (percent === 100 && job && job.id) {\n\t// \t\t// if (sliderRef && sliderRef.current) {\n\t// \t\t// \tsliderRef.current.slickPlay()\n\t// \t\t// }\n\t// \t\t// mixpanel code//\n\t// \t\tmixpanel.identify(job.customer.user.email);\n\t// \t\tmixpanel.track('Customer - Connecting techinician progress bar');\n\t// \t\tmixpanel.people.set({\n\t// \t\t\t$first_name: job.customer.user.firstName,\n\t// \t\t\t$last_name: job.customer.user.lastName,\n\t// \t\t});\n\t// \t\t// mixpanel code//\n\t// \t\t// console.log(\">>>>>>>>> jobData >>>>>>\",job)\n\t// \t\tsocket.emit('new-job-alert', {\n\t// \t\t\tjobData: job,\n\t// \t\t\tposted: true,\n\t// \t\t\tstatus: \"Pending\",\n\t// \t\t\tpostedTime: new Date(),\n\t// \t\t\tEstimatedWait: mainEstimatedWait,\n\t// \t\t\tsearchSameTech: technicianId ? true : false,\n\t// \t\t\ttechnicianId: technicianId\n\t// \t\t});\n\n\t// \t\tsocket.on(\"meeting:join-button\", (props) => {\n\t// \t\t\twindow.location.href = `/customer/accept-job/${props.res}`\n\t// \t\t})\n\t// \t\t// setPercent(0)\n\t// \t\t// let startTime = new Date().getMilliseconds();\n\t// \t\twindow.progressBar = setTimeout(() => {\n\t// \t\t\t// let timeNow = new Date().getMilliseconds()\n\t// \t\t\t// let time = timeNow - startTime\n\t// \t\t\t// console.log(\"time in getMilliseconds ::: \",time)\n\t// \t\t\t// val = 0\n\t// \t\t\t// if (setIsTechNotFoundInSearch) {\n\t// \t\t\t// \tconsole.log('coming form not found screen remove by ridhima')\n\t// \t\t\t\t// setIsTechNotFoundInSearch(true)\n\t// \t\t\t\t// setComponentToRender('notAccepted');\n\t// \t\t\t\t// console.log('val>>>>>>>>>>>>>>>>>>>clearInterval')\t\t\t\t\t\n\t// \t\t\t// }\n\n\t// \t\t\tsetIsTechNotFoundInSearch(true)\n\t// \t\t\t// setComponentToRender('notAccepted');\n\t// \t\t\tsetJobFlowStep(jobFlowsDescriptions['notAccepted'])\n\t// \t\t\tclearInterval(timer);\n\t// \t\t}, useTimer);\n\t// \t}\n\t// }, [job, percent, socket]);\n\n\n\n\t/*useEffect(()=>{\n\t\tconsole.log(\"there is a job >>>>>>>>> \",job)\n\t\tif(job){\n\t\t\t\n\t\t\t//Call Klaviyo api\n\t\t\tconst klaviyoData = {\n\t\t\t\temail: res?.user?.email,\n\t\t\t\tevent: 'Job Post Button Click',\n\t\t\t\tproperties: {\n\t\t\t\t\t$first_name: res?.user?.firstName,\n\t\t\t\t\t$last_name: res?.user?.lastName\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait klaviyoTrack(klaviyoData);   \n\t\t\t\n\t\t\tmixpanel.track('Customer - On Finding Technician Page', { 'Email': job?.customer?.user?.email });\t\n\t\t}\n\t},[job]);*/\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tif (job) {\n\t\t\t\t//Call Klaviyo api\n\t\t\t\tif(job?.customer?.customerType === 'live'){\n\t\t\t\t\tconst klaviyoData = {\n\t\t\t\t\t\temail: job?.customer?.user?.email,\n\t\t\t\t\t\tevent: 'Job Created',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t$first_name: job?.customer?.user?.firstName,\n\t\t\t\t\t\t\t$last_name: job?.customer?.user?.lastName,\n\t\t\t\t\t\t\t$job: job.id,\n\t\t\t\t\t\t\t//$total_jobs: totalJobsCount, //::TODO For Later\n\t\t\t\t\t\t\t$software_name: job?.software?.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\tawait klaviyoTrack(klaviyoData);\n\t\t\t\t};\n\t\t\t\tmixpanel.track('Customer - On Finding Technician Page', { 'Email': job?.customer?.user?.email,'jobId':job.id });\n\t\t\t}\n\t\t})();\n\t\tsetShowGoBackBtn(false)\n\t\tsetshowGoBackBtnRedirection(true)\n\t}, []);\n\n\n\tconst handleRedirect = () => {\n\t\tsetIsTechNotFoundInSearch(true);\n\t\tsetAutoCount(false);\n\t\tsetIsLoading(false);\n\t\tsetUseTimer(0);\n\t\tsetCountAgain(false);\n\t\tsetShowGoBackBtn(true)\n\t};\n\n\n\n\t/* const HandleCancel = async() =>{\n\t\tModal.confirm({\n\t\t\ttitle: 'Are you sure you want to cancel this job?',\n\t\t\tokText: 'Yes',\n\t\t\tcancelText: 'No',\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\t\n\t\t\t\tHandleCancelSubmit();\n\t\t\t},\n\t\t});     \n\t} */\n\t/* const HandleCancelSubmit = async() =>{\n\t\tif(timer){\n\t\t\t val = 0\n\t\t\tclearInterval(timer);\n\t\t}\n\n\t\t// mixpanel code//\n\t\tmixpanel.track('Customer - Cancel Job near job alive',{'JobId':job.id});\n\t\t // mixpanel code//\n\t\tawait updateJob(job.id,{status:\"Declined\",tag:\"CustomerDeclined\"})\n\t\tmessage.destroy()\n\t\t window.location.href=  \"/\"\n\t} */\n\n\tif (isLoading) return <Loader height=\"100%\" />;\n\n\t/**\n * Following function is used to searching technician.\n * @author : Mritunjay\n */\n\n\tconst renderer = ({ hours, minutes, seconds }) => {\n\t\treturn <span>{zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}</span>;\n\t};\n\n\tconst sendTime = (data) => {\n\t\tsetCountAgain(true);\n\t\tsetAutoCount(true);\n\t\tif (data === '30 minutes') {\n\t\t\tsetUseTimer(1800000);\n\t\t} else if (data === \"1 hour\") {\n\t\t\tsetUseTimer(3600000);\n\t\t} else {\n\t\t\tsetUseTimer(10800000);\n\t\t};\n\t};\n\n\n\n\tconst convertLiveJobToScheduleJob = () => {\n\t\tsetCountAgain(false);\n\t\tsetAutoCount(false);\n\t\tif (job.customer.user) {\n\t\t\tmixpanel.identify(job?.customer?.user?.email);\n\t\t\tmixpanel.track('Customer - Click on Schedule for later on job alive page ');\n\t\t};\n\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob']);\n\t};\n\n\tconst callSchedule = async () => {\n\t\tsetCountAgain(false);\n\t\tsetAutoCount(false);\n\t\tif (job && job.id) {\n\t\t\tawait JobCycleApi.create(JobTags.SCHEDULE_AFTER_SEARCH, job.id);\n\t\t};\n\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob']);\n\t};\n\n\treturn (\n\t\t<React.Fragment key=\"jobalive\">\n\t\t\t<BodyContainer span={24} className=\"p-0 font-nova\" style={{ backgroundColor: autoCount === false ? \"#DCE6ED\" : 'transparent' }}>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<link\n\t\t\t\t\t\trel=\"stylesheet\"\n\t\t\t\t\t\ttype=\"text/css\"\n\t\t\t\t\t\tcharset=\"UTF-8\"\n\t\t\t\t\t\thref=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n\t\t\t\t\t/>\n\t\t\t\t\t<link\n\t\t\t\t\t\trel=\"stylesheet\"\n\t\t\t\t\t\ttype=\"text/css\"\n\t\t\t\t\t\thref=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n\t\t\t\t\t/>\n\t\t\t\t</Helmet>\n\t\t\t\t<Logo user={job && job.customer && job.customer.user} />\n\t\t\t\t{/* <StepTitle className=\"job-heading-text\">Your job is live!</StepTitle> */}\n\t\t\t\t{countAgain === true ? <div>\n\t\t\t\t\t<ItemLabel className='mt-3'>You can leave this page, but please don't close it!</ItemLabel>\n\t\t\t\t\t<h3 className=\"job_heading_text\">We'Il search for an available Geek for\n\t\t\t\t\t\t<span className=\"hg-text ml-3\">\n\t\t\t\t\t\t\t<Countdown\n\t\t\t\t\t\t\t\tdate={Date.now() + useTimer}\n\t\t\t\t\t\t\t\trenderer={renderer}\n\t\t\t\t\t\t\t\tautoStart={autoCount}\n\t\t\t\t\t\t\t\tonComplete={handleRedirect}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h3>\n\n\t\t\t\t\t<Box className=\"px-0\">\n\t\t\t\t\t\t<div className=\"col-12 mb-5 px-4 schedule-btn\">\n\t\t\t\t\t\t\t<Player\n\t\t\t\t\t\t\t\tautoplay\n\t\t\t\t\t\t\t\tkeepLastFrame={true}\n\t\t\t\t\t\t\t\tsrc={jsonAnimation}\n\t\t\t\t\t\t\t\tclassName='animationPly'\n\t\t\t\t\t\t\t\tloop={true}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</Player>\n\t\t\t\t\t\t\t<div className='pt-5'>\n\t\t\t\t\t\t\t\t<Title>We will notify you when a techinician is available by\n\t\t\t\t\t\t\t\t\t<div className='pt-3'>\n\t\t\t\t\t\t\t\t\t\t<span><FontAwesomeIcon icon={faBell} />&nbsp;Notification</span>\n\t\t\t\t\t\t\t\t\t\t<span className='mx-4'><FontAwesomeIcon icon={faEnvelope} />&nbsp;Email</span>\n\t\t\t\t\t\t\t\t\t\t<span><ImPhone />&nbsp;Phone &nbsp;<span className=\"hg-text\" id='infoCircleIcon'><BsInfoCircle />\n\t\t\t\t\t\t\t\t\t\t\t<div className='atHover_showPhoneNumber'>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='triangle-div'></div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='rectangle-div content_inside_rectangle'>You will receive a phone call from {NotificationNumber}</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</span></span>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/* <Col lg='9'>\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<p className='schedule-text float-left text-left'> It may take longer to find a Geek at this time.\n\t\t\t\t\t\t\t\t\t\tPlease schedule and pick a time that suits you.  </p>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col lg='3'>\n\t\t\t\t\t\t\t\t<Button type=\"back\"  onClick={convertLiveJobToScheduleJob} title=\"Schedule your job for a later date.\" className=\"btn app-btn-light-blue joinBtn float-right job-schedule-btn\">\n\t\t\t\t\t\t\t\t\tSchedule for later\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col> */}\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* <Row className='d-flex'>\n\t\t\t\t\t\t<Col lg={6} className='description-section'> */}\n\t\t\t\t\t\t{/* <Description className=\"dark font-large\">\n\t\t\t\t\t\t\tPlease don't close or refresh this page\u2014our software is locating a Geek for you!</Description>\n\t\t\t\t\t\t<Description className=\"dark font-small mt-4\">\n\t\t\t\t\t\t\tYou can still leave this page, just don't close it! A notification and email invitation will appear...\n\t\t\t\t\t\t</Description>\n\t\t\t\t\t\t<Description className=\"dark font-small mt-4\">\n\t\t\t\t\t\t\tA notification and an email invitation will appear when your technician is found. If there's no response, we'll call your number instead.\n\t\t\t\t\t\t</Description>\n\t\t\t\t\t\t<Description className=\"dark font-small mt-4\">\n\t\t\t\t\t\t\tThe number you will receive a call from is <span className=\"card-label dark\"><strong>{NotificationNumber}</strong></span>\n\t\t\t\t\t\t</Description>\n\t\t\t\t\t\t<ItemLabel className=\"card-label dark text-left my-4\">Job Summary</ItemLabel>\n\t\t\t\t\t\t<Description className=\" dark sans-font text-left\"> <p className=\"dark  font-small\" title={job ? job.issueDescription : ''}>{job ? job.issueDescription : ''} </p></Description>\n\n\t\t\t\t\t\t<ItemLabel className=\"card-label  dark text-left my-4\">Estimated wait</ItemLabel>\n\t\t\t\t\t\t<EstimationItem className=\"dark\">\n\t\t\t\t\t\t\t{estimatedWait}\n\n\t\t\t\t\t\t</EstimationItem> */}\n\n\t\t\t\t\t\t{/* {afterGeekerHours &&\t\n\t\t\t\t\t\t(<Button type=\"back\"  onClick={scheduleForLater} title=\"Schedule your job for a later date.\" className=\"btn app-btn-light-blue float-right btn-schedule-later ml-3\">\n\t\t\t\t\t\tSchedule for later\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>)} */}\n\t\t\t\t\t\t{/* \n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col lg={6} className='loader-section lodr-sec'> */}\n\t\t\t\t\t\t{/* <div style={{ width: 400, height: 400, position: \"relative\" }} className=\"spinner-mobile\"> */}\n\t\t\t\t\t\t{/* <div className=\"spinner-outer loader-spinner\">\n\t\t\t\t\t\t\t<div className=\"spinner-job-finder\"></div>\n\t\t\t\t\t\t</div> */}\n\n\t\t\t\t\t\t{/*< Oval height = {400} width = {400} color ={`#1bd4d5`} className={\"loader-spinner\"}  />*/}\n\n\n\t\t\t\t\t\t{/* <div className='corousel-container '>\n\t\t\t\t\t\t\t<div className=\"mt-100 text-center\">\n\t\t\t\t\t\t\t\t<div className=\"loader-header arial\">\n\t\t\t\t\t\t\t\t\t{percent != 100 ? 'Finding Technician' : 'Connecting to technician'}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<Slider ref={sliderRef} className=\"loader-desc arial mt-4\">\n\t\t\t\t\t\t\t\t\t{suggestions.map((element, index) => {\n\t\t\t\t\t\t\t\t\t\treturn <div className=\"loader-desc\" key={element.substring(0, 4) + index}> {element}</div>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div> */}\n\n\t\t\t\t\t\t{/* <CircularProgressbarWithChildren value={percent!=100?percent:percentTwo} strokeWidth={3} styles={{\n\t\t\t\t\t\t  \tpath: {\n\t\t\t\t\t\t      // Path color\n\t\t\t\t\t\t      stroke: `#1bd4d5`,\n\t\t\t\t\t\t      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n\t\t\t\t\t\t      strokeLinecap: 'butt',\n\t\t\t\t\t\t      // Customize transition animation\n\t\t\t\t\t\t      transition: 'stroke-dashoffset 0.5s ease 0s',\n\n\t\t\t\t\t\t    },\n\t\t\t\t\t\t    trail: {\n\t\t\t\t\t\t      // Trail color\n\t\t\t\t\t\t      stroke: '#c9f2f2',\n\t\t\t\t\t\t      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n\t\t\t\t\t\t      strokeLinecap: 'butt',\n\t\t\t\t\t\t    },\n\t\t\t\t\t\t     text: {\n\t\t\t\t\t\t\t      // Text color\n\t\t\t\t\t\t\t      fill: '#1bd4d5',\n\t\t\t\t\t\t\t      // Text size\n\t\t\t\t\t\t\t      fontSize: '5px',\n\t\t\t\t\t\t\t      fontWeight:'800'\n\t\t\t\t\t\t\t    },\n\t\t\t\t\t\t\t    // Customize background - only used when the `background` prop is true\n\t\t\t\t\t\t\t    background: {\n\t\t\t\t\t\t\t      fill: '#3e98c7',\n\t\t\t\t\t\t\t   },\n\t\t\t\t\t\t\t\t\t\t\t\t\t  }}\n\t\t\t\t\t\t  >\n\t\t\t\t\t\t  \t<>\n\t\t\t\t\t\t    \t<img style={{ width: 40, marginTop: -5 }} src={job.software.blob_image} alt=\"doge\" />\n\t\t\t\t\t\t    \t<div className=\"loader-text-area\"> <div className=\"loader-header arial\"\n\t\t\t\t\t\t    \t> {percent !=100 ? 'Finding Technician' : 'Connecting to technician'} </div> <p className=\"loader-desc arial mt-4\">{suggestions}</p> </div>\n\t\t\t\t\t\t    </>\n\t\t\t\t\t\t  </CircularProgressbarWithChildren> */}\n\n\t\t\t\t\t\t{/* </div> */}\n\t\t\t\t\t\t{/* </Col>\n\t\t\t\t\t</Row>\n\n\t\t\t\t\t<Antd.Space /> */}\n\t\t\t\t\t\t{/* { afterGeekerHours &&\n\t\t\t\t<>\n\t\t\t\t\t<Antd.Divider />\n\t\t\t\t\t\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col md=\"auto\" lg=\"auto\" className=\"ml-2\">\n\t\t\t\t\t\t<Button type=\"back\"  onClick={scheduleForLater} title=\"Schedule your job for a later date.\" className=\"btn app-btn-light-blue float-left btn-schedule-later\">\n\t\t\t\t\t\tSchedule for later\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t</Row>\n\t\t\t\t</> */}\n\t\t\t\t\t\t{ /*percent !=100  && \n\t\t\t\t<>\n\t\t\t\t\t<Antd.Divider />\n\t\t\t\t\t\t\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col md=\"auto\" lg=\"auto\" className=\"ml-2\">\n\t\t\t\t\t\t\t<Button onClick={HandleCancel} className=\"btn app-btn-transparent float-right\">Decline</Button>\n\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t</Row>\n\t\t\t\t</>\n\t\t\t} */}\n\t\t\t\t\t\t{/*percentTwo > 0 &&{ afterGeekerHours &&\n\t\t\t\t<>\n\t\t\t\t\t<Antd.Divider />\n\t\t\t\t\t\n\t\t\t\t\t<Row>{ afterGeekerHours &&\n\t\t\t\t<>\n\t\t\t\t\t<Antd.Divider />\n\t\t\t\t\t\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col md=\"auto\" lg=\"auto\" className=\"ml-2\">\n\t\t\t\t\t\t<Button type=\"back\"  onClick={scheduleForLater} title=\"Schedule your job for a later date.\" className=\"btn app-btn-light-blue float-left btn-schedule-later\">\n\t\t\t\t\t\tSchedule for later\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t</Row>\n\t\t\t\t</>\n\t\t\t\t\t\t<Col md=\"auto\" lg=\"auto\" className=\"ml-2\">\n\t\t\t\t\t\t<Button type=\"back\"  onClick={scheduleForLater} title=\"Schedule your job for a later date.\" className=\"btn app-btn-light-blue float-left btn-schedule-later\">\n\t\t\t\t\t\tSchedule for later\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t</Row>\n\t\t\t\t</>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col md={10}>\n\t\t\t\t\t\t\t<ItemLabel className=\"card-label dark text-left\">Connecting to the technician</ItemLabel>\n\t\t\t\t\t\t\t<Progress percent={percentTwo} style={{ width: '100%', paddingRight:'30px' }} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col md={2}>\n\t\t\t\t\t\t\t<Button onClick={HandleCancel} className=\"btn app-btn float-right\">Cancel Job<span></span></Button>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t*/}\n\t\t\t\t\t</Box>\n\t\t\t\t</div> :\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Box className=\"px-0 find-technician-screen\" style={{ backgroundColor: \"#DCE6ED\" }}>\n\t\t\t\t\t\t\t{notFound && <Alert\n\t\t\t\t\t\t\t\tmessage=\"Not Found\"\n\t\t\t\t\t\t\t\tdescription=\"We searched high and low for you but it looks like all our technicians are busy.What would you like to do next?\"\n\t\t\t\t\t\t\t\ttype=\"info\"\n\t\t\t\t\t\t\t\tshowIcon\n\t\t\t\t\t\t\t/>}\n\n\t\t\t\t\t\t\t{!showAllBtn &&\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span className='no-tech-located'>No technician located?</span>\n\t\t\t\t\t\t\t\t\t<p className='no_tech_subTitle'>Here's what you can do next:</p>&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{showAllBtn && <div>\n\t\t\t\t\t\t\t\t<p className='no_tech_subTitle'>How long would you like us to continue searching?</p>&nbsp;\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{/* {!afterGeekerHours &&\n\t\t\t\t\t\t\t<Description>\n\t\t\t\t\t\t\t\t{statusText}\n\t\t\t\t\t\t\t</Description>\n\t\t\t\t\t\t} */}\n\t\t\t\t\t\t\t<Box style={{ width: showAllBtn ? \"80%\" : \"50%\" }} className=\"keepSearchingBtn\">\n\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" style={{ backgroundColor: showAllBtn ? \"#92A9B8\" : \"#01D4D5\" }} onClick={callSchedule} title=\"Schedule your job for a later date.\"><FontAwesomeIcon icon={faCalendarDay} className=\"cal-btn\" /><>Schedule a call</><span></span>\n\t\t\t\t\t\t\t\t</Button >\n\t\t\t\t\t\t\t\t{!showAllBtn &&\n\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" onClick={() => setShowAllBtn(true)}>\n\t\t\t\t\t\t\t\t\t\t<>Keep Searching</><FontAwesomeIcon icon={faArrowRight} className='arr-size arrow-btn' /><span></span>\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{showAllBtn && !isLoading &&\n\t\t\t\t\t\t\t\t\t<React.Fragment key=\"isLoading\">\n\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" onClick={() => sendTime(\"30 minutes\")}>\n\t\t\t\t\t\t\t\t\t\t\t<>30 Minutes</><FontAwesomeIcon icon={faArrowRight} className='arr-size arrow-btn' /><span></span>\n\t\t\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" onClick={() => sendTime(\"1 hour\")}>\n\t\t\t\t\t\t\t\t\t\t\t<>1 Hour</><FontAwesomeIcon icon={faArrowRight} className='arr-size arrow-btn' /><span></span>\n\t\t\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" onClick={() => sendTime(\"3 hours\")}>\n\t\t\t\t\t\t\t\t\t\t\t<>3 hours</><FontAwesomeIcon icon={faArrowRight} className='arr-size arrow-btn' /><span> </span>\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</BodyContainer>\n\t\t\t{autoCount === true && <div>\n\t\t\t\t<Row className='technicianSearch px-0 font-nova'>\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span className='no-tech-located'>No technician located?</span>\n\t\t\t\t\t\t\t<p className='no_tech_subTitle'>Here's what you can do next:</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Box className='search_tech_btn'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Button type=\"back\" className=\"btn app-btn inside_btn\" onClick={convertLiveJobToScheduleJob} title=\"Schedule your job for a later date.\"><FontAwesomeIcon icon={faCalendarDay} className=\"fontIcon cal-btn\" />Schedule a call<span></span>\n\t\t\t\t\t\t\t\t</Button >\n\t\t\t\t\t\t\t\t<span className=\"text_near_Btn\">( At any time )</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Button className=\"btn app-btn inside_btn\" style={{ opacity: \".4\" }} disabled={true}>\n\t\t\t\t\t\t\t\t\t<>Keep Searching</> <FontAwesomeIcon icon={faArrowRight} className='arr-size arrow-btn' /><span></span>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<span className=\"text_near_Btn\">(\n\t\t\t\t\t\t\t\t\tAfter <Countdown\n\t\t\t\t\t\t\t\t\t\tdate={Date.now() + useTimer}\n\t\t\t\t\t\t\t\t\t\trenderer={renderer}\n\t\t\t\t\t\t\t\t\t\tautoStart={autoCount}\n\t\t\t\t\t\t\t\t\t\tonComplete={handleRedirect}\n\t\t\t\t\t\t\t\t\t/> )\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t</Row>\n\t\t\t</div>}\n\n\t\t</React.Fragment>\n\t);\n};\n\n// const EstimationItem = styled.div`\n// \tfont-weight: 700;\n// \tfont-size: 30px;\n// \tfloat:left;\n// \tcolor:#293742 !important;\n// `;\n\nconst Description = styled.div`\n\tfont-size: 12px;\n\tcolor: black;\n\t// text-align: left;\n\t//  p{\n\t// \tcolor: black;\n\t// text-align: left;\n\t//  white-space: nowrap;\n\t// \toverflow: hidden;\n\t// \ttext-overflow: ellipsis;\n\t// \tfont-weight:bold;\n\t// \tcursor:pointer;\n\t// \tmargin-bottom:unset;\n\t// }\n`;\n\nconst ItemLabel = styled.h3`\nfont-weight: 400 !important;\nfont-size: 25px;\ntop: 50px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 19px;\ntext-align: center;\ncolor: #2F3F4C;\n`;\n\n\n\nconst Title = styled.h3`\nfont-weight: 400;\nfont-size: 18.93px;\ncolor: #2F3F4C;;\nline-height: 19px;\ntext-align: center;\n`;\n\n\n\nexport default React.memo(JobAlive);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\JobAlive.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "JobDetailView.js",
                                                                    "fileData": "import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Spin, Col, Row , Modal } from 'antd';\nimport styled from 'styled-components';\nimport {useTools} from \"./../../../../context/toolContext\";\nimport * as Antd from 'antd';\nimport { useHistory, useLocation } from 'react-router';\nimport { Button } from 'react-bootstrap';\nimport mixpanel from 'mixpanel-browser';\nimport { openNotificationWithIcon, GAevent, PushUserDataToGtm } from 'utils';\nimport {\n\t// StepActionContainer,\n\tStepTitle,\n\t// IssueSelect,\n\tBodyContainer,\n\t// SectionTitle,\n\t// WarningText,\n\t// TitleContainer,\n} from '../../ProfileSetup/steps/style';\n// import * as JobService from '../../../../api/job.api';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\n// import StepButton from '../../../../components/StepButton';\n// import H2 from '../../../../components/common/H2';\n// import TechImages from '../../../../components/TechImages';\nimport { INACTIVE_ACCOUNT_MESSAGE, STRIPE_KEY, STRIPE_TEST_KEY, JobTags } from '../../../../constants';\n// import { isLiveUser } from '../../../../utils';\nimport Box from '../../../../components/common/Box';\nimport { useUser } from '../../../../context/useContext';\nimport Loader from '../../../../components/Loader';\nimport { useJob } from '../../../../context/jobContext';\nimport { useAuth } from '../../../../context/authContext';\n// import JobAlive from './JobAlive';\nimport { convertToRaw } from 'draft-js';\nimport { useSocket } from '../../../../context/socketContext';\n// import NotAccepted from './NotAccepted';\n// import Schedule from './Scehdule';\nimport { klaviyoTrack } from '../../../../api/typeService.api';\n// import IssueDescription from '../../ProfileSetup/steps/IssueDescription';\nimport * as SoftwareApi from '../../../../api/software.api';\nimport AddCardForm from '../../Profile/steps/addCardForm';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaQuestionCircle,\n} from '@fortawesome/free-regular-svg-icons';\nimport * as CommonFunctions from '../../../../utils'\nimport { faEdit,faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport RoundSelectors from '../../../../components/Selectors';\nimport Logo from 'components/common/Logo';\n\nimport { isMobile, isTablet } from 'react-device-detect';\nconst { Text } = Antd.Typography;\nlet findTechnicainCalled = false;\nlet cardFunctionCalled = false;\nlet checkGeekerAvailabilityTimeVariable = false;\nlet stripePromise = '';\nlet liveUser = true;\nfunction JobDetailView({\n\thandleDecline,setJobFlowStep,jobFlowsDescriptions, setGuestJobId,setStep,setMainPageStep, softwareissue, repost, jobId, job, estimatedPrice, estimatedTime, estimatedWait, estimatedDuration, intialPrice, finalPrice, priceLoaded, fetchJob, mainEstimatedWait, isScheduleJob, componentToRenderIssue, setComponentToRenderIssue, setIssueDescription, set_price_value, newPost, setInitialPrice, setFinalPrice, btnclickedObj, setAfterGeekerHours\n}) {\n\tconst{setIfScheduleJob} = useTools()\n\tconst history = useHistory();\n\tconst { user, refetch } = useUser();\n\tconst location = useLocation();\n\t// console.log(\"the location here 1 -------\")\n\tconst queryParams = new URLSearchParams(location.search);\n\tconsole.log(\">>>>>>>queryParams >>>>>>>\",queryParams)\n\tconst repostJob = queryParams.get('repost') ? queryParams.get('repost') : false;\n\tconsole.log(\"newpost :::::::::: \",queryParams.get(\"newpost\"))\n\tlet newPostJob = newPost != undefined ? newPost : queryParams.get(\"newpost\")\n\tlet isMobilePost = queryParams.get(\"isMobilePost\")? queryParams.get(\"isMobilePost\") :false\n\tconst hireExpertTransferJob = queryParams.get('hireExpertTransferJob') ? queryParams.get('hireExpertTransferJob') : false;\n\t// const duration = useMemo(() => job && job.expertise ? job.expertise.levels[job.level] : { from: 0, to: 0 }, [job]);\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [cardsInfo, setCardsInfo] = useState(false);\n\tconst technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n\tconst postAgainJobReference = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n\t// let params = new URLSearchParams(location.search)\n\tconst [newCardAdded, setNewCardAdded] = useState(false);\n\tconst [showLoader, setShowLoader] = useState(true);\n\tconst [scheduleJob, setScheduleJob] = useState(false);\n\tconst {\n\t\tcreateJobAsGuest, createJob, updateJob, getTotalJobs, getTotalPaidJobs,setJob\n\t} = useJob();\n\tconst { getGuestUser } = useAuth();\n\t// const [componentToRender, setComponentToRender] = useState(((jobId && job && jobId === job.id) || (repostJob || (newPostJob != 'yes')) ? '' : 'jobDetailsView'))\n\tconst [updatedJobData, setUpdatedJobData] = useState(job);\n\tconst [notFound, setNotFound] = useState(false);\n\tconst { socket } = useSocket();\n\tconst [loading, setLoading] = useState(false);\n\tconst [totalJobs, setTotalJobs] = useState();\n\tconst [totalPaidJobs, setTotalPaidJobs] = useState();\n\t// const [isTechNotFoundInSearch, setIsTechNotFoundInSearch] = useState(false);\n\tconst [cardFunctionCalledFindTech, setcardFunctionCalledFindTech] = useState(false);\n\tconst [disableButton, setDisableButton] = useState(false);\n\tconst [hireValue, setHireValue] = useState(false);\n\t// const [currentStep, setCurrentStep] = useState((jobId ? 1 : 0));\n\tconst [software, setSoftware] = useState();\n\tconst [subSoftware, setSubSoftware] = useState();\n\tconst [expertise, setExpertise] = useState();\n\tconst [subOption, setSubOption] = useState();\n\t// const [selectedVal, setSelectedVal] = useState();\n\tconst [issueDescription, setIssueDescriptionback] = useState('');\n\t// const [audio, setAudio] = useState(true);\n\tconst [guestJobValue, setGuestJobValue] = useState()\n\tconst [showTwoTierMessage, setShowTwoTierMessage] = useState(false)\n\t// const [afterGeekerHours, setAfterGeekerHours] = useState(false)\n\t// let liveUser = isLiveUser(user)\n\tconst lessThan2Hours = 'less than 2 hours'\n\tconst moreThan2Hours = 'more than 2 hours'\n\tconst [showToolTip, setShowToolTip] = useState(false)\n\t// const stripePromise = liveUser ? loadStripe(STRIPE_KEY) : loadStripe(STRIPE_TEST_KEY)\n\tuseEffect(() => {\n        (async () => {\n            console.log(\"the user >>>>>>>>>> \", user)\n            if(user){\n                liveUser = await CommonFunctions.isLiveUser(user)\n                if(liveUser){\n                    console.log(\"STRIPE_KEY:::\",STRIPE_KEY)\n                    stripePromise = loadStripe(STRIPE_KEY)\n                }else{\n                    console.log(\"STRIPE_TEST_KEY:::\",STRIPE_TEST_KEY)\n                    stripePromise = loadStripe(STRIPE_TEST_KEY)\n                }\n            }\n        })();\n\n    }, [user])\n\n\tuseEffect(() => {\n\t\tif((!job || job['success'] == false) && queryParams.get(\"jobId\") && queryParams.get(\"newpost\") && queryParams.get(\"isMobilePost\")){\n\t\t\tconsole.log(\">>>>> jobs >>>>>> auth ::: \", job, queryParams);\n\t\t\twindow.location.href = \"/login?job-id=\"+queryParams.get(\"jobId\")+\"&isMobilePost=\"+queryParams.get(\"isMobilePost\")\n\t\t}\n\t\tconsole.log('JOBDETAILS VIEW jobId in details view ::', job, job.status, job.status != \"Draft\");\n\t\t//console.log('JOBDETAILS VIEW job.id  :::::: ', job.id);\n\t\tconsole.log('JOBDETAILS VIEW repostJob ::', repostJob);\n\t\t//console.log(\"job.customer.user.id \", job, job.customer.user.id, user.id )\n\t\tif(job && user && (job.customer && (job.customer.user && (job.customer.user.id != user.id)))){\n\t\t\twindow.location.href = \"/dashboard?invaildUser=yes\"\n\t\t\treturn false\n\t\t}\n\t\tlet jobStatusNot = [\"Pending\", \"Draft\"]\n\t\tconsole.log(\"jobStatusNot.indexOf(job.status) < 0 \", jobStatusNot.indexOf(job.status), jobStatusNot.indexOf(job.status) < 0)\n\t\tif(job &&  jobStatusNot.indexOf(job.status) < 0 && newPostJob == 'yes'){\n\t\t\tconsole.log(\" job.status: after :: \", job)\n\t\t\twindow.location.href = \"/dashboard?mobileJobId=\"+jobId\n\t\t\treturn false\n\t\t}\n\t\tsessionStorage.removeItem(\"hideHearAboutUsModal\")\n\t\tif (jobId !== '' && job && job.id && jobId === job.id && !repostJob  && newPostJob != 'yes') {\n\n\t\t\t// console.log(\"repost ::::::: \",repost)\n\t\t\t// console.log('job in detail view is ::',job)\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t}, 800);\n\t\t\tif (isScheduleJob === 'yes') {\n\t\t\t\tconsole.log('isScheduleJob>>>>>>>>>>>>>>>>>>>>>>>>>');\n\t\t\t\tsetScheduleJob(true)\n\t\t\t\tif (cardsInfo){\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n\t\t\t\t\t// setComponentToRender('schedualeLater');\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t\t\t// setComponentToRender('jobDetailsView');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hireExpertTransferJob) {\n\t\t\t\tconsole.log('hireExpertTransferJob>>>>>>>>>>>>>>>>>>>>>>>>>');\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t\t// setComponentToRender('jobDetailsView')\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetShowTwoTierMessage(true)\n\t\t\t\t\tlet softwareObject = job.subSoftware || job.software\n\t\t\t\t\tsetPriceValueInThisComponent(softwareObject, true);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t\t// setComponentToRender('jobDetailsView')\n\t\t\t}\n\n\t\t}else {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetShowLoader(false);\n\t\t\t}, 800);\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t// setComponentToRender('jobDetailsView');\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\t// setIsLoading(true);\n\t\t\tconst res = await SoftwareApi.getSoftwareList();\n\t\t\tif (res && res.data) {\n\t\t\t\tif (job && job.software) {\n\t\t\t\t\tlet obj = res.data.find(obj => obj.id == job.software.id);\n\t\t\t\t\tsetSoftware(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}, [job]);\n\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconsole.log(\">>> newCardAdded >>>\",newCardAdded)\n\t\t\tconsole.log(\">>>>> scheduleJob >>>> \",scheduleJob)\n\t\t\tconsole.log(\">>>>> cardsInfo >>>>>>> \",cardsInfo, newPostJob)\n\t\t\tif (newCardAdded && job && user) {\n\t\t\t\tlet lifeCycleTag = ''\n\t\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\t\tlifeCycleTag = JobTags.CARD_ADDED_AFTER_TRANSFER;\n\t\t\t\t} else {\n\t\t\t\t\tlifeCycleTag = JobTags.CARD_ADDED;\n\t\t\t\t}\n\n\t\t\t\tif (job && job.id) {\n\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, job.id);\n\t\t\t\t} else {\n\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(\"newCardAdded::::::::::: \",newCardAdded)\n\t\t\tconsole.log(\"cardsInfo ::::::::: \",cardsInfo)\n\t\t\tconsole.log(\"newPostJob ::::::::\",newPostJob)\n\t\t\tconsole.log(\"scheduleJob :::::::\", scheduleJob)\n\t\t\tconsole.log(\"main condition ::: \",newCardAdded || ((cardsInfo && newPostJob == 'yes') && !scheduleJob))\n\n\t\t\tif (newCardAdded || ((cardsInfo && newPostJob == 'yes') && !scheduleJob)) {\n\t\t\t\tconsole.log(\" job.status:: before :: \", job.status)\n\t\t\t\tif( job.status == \"Accepted\" && newPostJob == 'yes'){\n\t\t\t\t\tconsole.log(\" job.status: after :: \", job.status)\n\t\t\t\t\treturn window.location.href = \"/dashboard?mobileJobId=\"+job.id\n\t\t\t\t}\n\n\t\t\t\tif (newPostJob == 'yes') {\n\t\t\t\t\t// this variable is used because it indicates that customer has visit this page after coming from geeker homepage\n\t\t\t\t\t//and if geeker is asking card then its his second job ,while coming from home page job is already created so no need to create\n\t\t\t\t\t//it again.\n\t\t\t\t\tconst jobData = await updateJob(job.id, { status: \"Pending\" });\n\t\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\t\tGAevent('Conversion','new_job','Conversion',job.customer.id)\n\t\t\t\t\tif(process.env.REACT_APP_URL){\n\t\t\t\t\t\tconst appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n\t\t\t\t\t\tPushUserDataToGtm('job_posted', user, appUrl);\n\t\t\t\t\t}\n\t\t\t\t\tlet sendJobData = { ...job }\n\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t// \tif(sendJobData.status != \"Pending\"){\n\t\t\t\t\t// \t\tawait confirmModaloFMobileTabletJobPosting(\"newPostJob \")\n\t\t\t\t\t// \t\tawait emailOFMobileTabletJobPosting(sendJobData)\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }else{\n\t\t\t\t\t// \tcallFindTechnician(sendJobData);\n\t\t\t\t\t// }\n\t\t\t\t\tsendJobData.status = 'Pending'\n\t\t\t\t\tsetUpdatedJobData(sendJobData);\n\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 2 \")\n\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(sendJobData)\n\t\t\t\t\t// }else{\n\t\t\t\t\t\tcallFindTechnician(sendJobData);\n\t\t\t\t\t// }\n\n\t\t\t\t}\n\t\t\t\telse if ((newCardAdded && scheduleJob)) {\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n\t\t\t\t\t// setComponentToRender('schedualeLater');\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\tconsole.log(\"new cardAdded else part \")\n\t\t\t\t\tconst dataToSave = getJobVar();\n\t\t\t\t\tdataToSave.customer = job.customer.id ? job.customer.id : job.customer;\n\t\t\t\t\tdataToSave.guestJob = false;\n\t\t\t\t\tconsole.log(\"dataToSave  >>>>>>>>>>\", dataToSave);\n\t\t\t\t\tconst jobData = await createJob(dataToSave);\n\t\t\t\t\tsetJob(jobData)\n\t\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\t\tGAevent('Conversion','new_job','Conversion',dataToSave.customer)\n\t\t\t\t\tif(process.env.REACT_APP_URL){\n\t\t\t\t\t\tconst appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n\t\t\t\t\t\tPushUserDataToGtm('job_posted', user, appUrl);\n\t\t\t\t\t}\n\t\t\t\t\tsetUpdatedJobData(jobData);\n\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 3\")\n\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(jobData)\n\t\t\t\t\t// }else{\n\t\t\t\t\t\tcallFindTechnician(jobData);\n\t\t\t\t\t// }\n\t\t\t\t\tsetNewCardAdded(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (newCardAdded && scheduleJob  || (cardsInfo && scheduleJob)) {\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n\t\t\t\t// setComponentToRender('schedualeLater');\n\t\t\t}\n\t\t})();\n\t}, [newCardAdded, cardsInfo]);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconsole.log(\"isScheduleJob ::::::::::::::::\",isScheduleJob)\n\t\t\tif (job) {\n\t\t\t\tsocket.emit(\"join\", job.id)\n\t\t\t}\n\t\t\t// console.log('job>>>>>>>>>>>>',job)\n\t\t\t// console.log('job.id>>>>>>>>>>>>',job.id)\n\t\t\tif (user && job && job.id && !cardFunctionCalledFindTech) {\n\t\t\t\tfetchMyCardsInfo();\n\t\t\t\tsetcardFunctionCalledFindTech(true);\n\t\t\t\tconsole.log(\">>>>>>.here in the card section\")\n\t\t\t\tconst customerTypeValid = (user.customer.customerType ? user.customer.customerType !== 'test' : true);\n\t\t\t\tcheckForCard(user, customerTypeValid)\n\t\t\t}\n\n\n\t\t\tif (jobId !== '' && job && job.id && jobId === job.id && !repostJob && !findTechnicainCalled && newPostJob != 'yes') {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t}, 800);\n\t\t\t\tsetUpdatedJobData(job);\n\t\t\t\tfindTechnicainCalled = true;\n\t\t\t\tif (isScheduleJob === 'yes') {\n\t\t\t\t\tconsole.log('isScheduleJob>>>>>>>>>>>>>>>>>>>>>>>>>');\n\t\t\t\t\tsetScheduleJob(true)\n\t\t\t\t\t// setComponentToRender('schedualeLater');\n\t\t\t\t} else if (hireExpertTransferJob) {\n\t\t\t\t\tconsole.log('hireExpertTransferJob>>>>>>>>>>>>>>>>>>>>>>>>>');\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t\t\t// setComponentToRender('jobDetailsView')\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetShowTwoTierMessage(true)\n\t\t\t\t\t\tsetPriceValueInThisComponent(job.software, true);\n\t\t\t\t\t}, 1000);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"inside usefeffect 3 >>>>>>>>>\")\n\t\t\t\t\t// callFindTechnician(job);\n\t\t\t\t}\n\t\t\t}\n\n\t\t})();\n\t}, [user, job]);\n\n\tuseEffect(() => {\n\t\tcardFunctionCalled = false;\n\t\tjobAndPaidJobHandler()\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tmixpanel.track('Customer - On Job Ready To Go Live Page', { 'Email': user.email });\n\t\t}\n\t\tjobAndPaidJobHandler();\n\t}, [user]);\n\n\tconst jobAndPaidJobHandler = async () => {\n\t\tif (user && user.customer && !cardFunctionCalled) {\n\t\t\tconst totalJobsCount = await getTotalJobs({ customer: user.customer.id });\n\t\t\tconst totalPaidJobs = await getTotalPaidJobs({ customer: user.customer.id });\n\t\t\tconsole.log('totalJobsCount', totalJobsCount);\n\t\t\tconsole.log(\"totalPaidJobs >>>>>>>>\",totalPaidJobs)\n\t\t\tsetTotalJobs(totalJobsCount);\n\t\t\tsetTotalPaidJobs(totalPaidJobs);\n\t\t\tcardFunctionCalled = true;\n\t\t}\n\t}\n\n\t// console.log(\"duration value \"+ job.selectedValdur );\n\tconst postDecline = () => {\n\t\tif (user) {\n\t\t\tlet userId = user.id\n\t\t\thandleDecline(false, userId)\n\t\t}\n\t}\n\n\t//utkarsh Dixit\n\t//purpose : adjusting width of help chat\n\tuseEffect(() => {\n\t\tlet buttonIframe = document.querySelector('[title = \"Message from company\"]');\n\t\tif (buttonIframe) {\n\t\t\t// console.log(\"query selector \", buttonIframe);\n\t\t\tbuttonIframe.classList.add(\"chatwidth\");\n\t\t}\n\t}, [])\n\n\tconst checkForCard = async (user, customerTypeValid) => {\n\t\ttry {\n\t\t\tif (user && user.customer) {\n\t\t\t\tlet customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\t\tuser: user,\n\t\t\t\t\tliveUser: liveUser\n\t\t\t\t});\n\t\t\t\tconsole.log(\"customer_info >>>>>>>>>>>>\", customer_info)\n\t\t\t\tif (customer_info.has_card_or_subscription == false && customerTypeValid) {\n\t\t\t\t\t// mixpanel code//\n\t\t\t\t\tsetDisableButton(true)\n\t\t\t\t\tmixpanel.identify(user?.email);\n\t\t\t\t\tmixpanel.track('Customer - Ask Credit Card');\n\t\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t\t\t$last_name: user?.lastName,\n\t\t\t\t\t});\n\t\t\t\t\t// mixpanel code//\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['creditCardInformation'])\n\t\t\t\t\t// setIsModalOpen(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcatch (err) {\n\t\t\tconsole.log(\"error in checkForCard\")\n\t\t}\n\t}\n\n\n\n\tconst findTechnician = async () => {\n\t\tcheckGeekerAvailabilityTime(job);\n\t\tlocalStorage.setItem(\"btnClicked\", btnclickedObj['getHelpNow'])\n\t\t// setBtnclicked(btnclickedObj['getHelpNow'])\n\t\tsetDisableButton(true);\n\t\t// console.log('user ::',user)\n\t\t// if(!jobId || jobId === ''){\n\t\tsetScheduleJob(false)\n\t\tsetIfScheduleJob(false)\n\t\tconsole.log(\"findTecnician function running\")\n\t\tlet customer_info = { has_card_or_subscription: false }\n\t\tif (user) {\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Click on Get help Now');\n\t\t}\n\t\t//setTimeout(setDisableButton(false),10000);\n\t\tconst dataToSave = await getJobVar();\n\t\tif (!user) {\n\t\t\tdataToSave.customer = `guest_${new Date().getTime()}`;\n\t\t\tdataToSave.guestJob = true;\n\t\t\tdataToSave.status = 'Draft'\n\n\t\t\tconsole.log(\"dataToSave\", dataToSave)\n\t\t\tconst res = await getGuestUser();\n\t\t\tconsole.log(\"this is the response :::::::: \", res)\n\t\t\t// console.log(\"setStep >>>>>>>>>>>>>>\",setStep(1))\n\t\t\tif (res && res.token) {\n\t\t\t\tcreateJobAsGuest(dataToSave, res.token.accessToken).then(async (res) => {\n\t\t\t\t\tmixpanel.track('Customer guest Job Created', { 'JobID': res.id })\n\t\t\t\t\tsetGuestJobId(res.id)\n\t\t\t\t\tawait JobCycleApi.create(JobTags.DRAFT_JOB_CREATED, res.id);\n\t\t\t\t\tconsole.log(\">>>>>>>>>>>>>>>>>>> 1  >>>>>>>>>>>>\")\n        \t\t\tawait emailOFMobileTabletJobPosting(res)\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['customerRegisterPage'])\n\t\t\t\t\t// setJobFlowStep(4)\n\t\t\t\t\t// history.push(`/customer/register/${res.id}`);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tlet lifeCycleTag = ''\n\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\tlifeCycleTag = JobTags.GET_HELP_NOW_AFTER_TRANSFER;\n\t\t\t} else {\n\t\t\t\tlifeCycleTag = JobTags.GET_HELP_NOW;\n\t\t\t}\n\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\tdataToSave.customer = job.customer.id ? job.customer.id : job.customer;\n\t\t\tdataToSave.guestJob = false;\n\t\t\tconst totalJobsCount = await getTotalJobs({ customer: job.customer.id ? job.customer.id : job.customer });\n\t\t\tconsole.log('totalJobsCount>>>>>>>>>>>>>>', totalJobsCount);\n\t\t\t// if (totalJobsCount >= 1) {\n\t\t\tif(user.userType === 'technician'){\n\t\t\t\twindow.location.href = '/dashboard'\n\t\t\t}\n\t\t\tconst customerTypeValid = (user.customer.customerType ? user.customer.customerType !== 'test' : true);\n\t\t\tif (user && user.customer) {\n\t\t\t\tcustomer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\t\tuser: user,\n\t\t\t\t\tliveUser: liveUser\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (customer_info.has_card_or_subscription == false) {\n\t\t\t\t// mixpanel code//\n\t\t\t\tmixpanel.identify(user?.email);\n\t\t\t\tmixpanel.track('Customer - Ask Credit Card');\n\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t\t$last_name: user?.lastName,\n\t\t\t\t});\n\t\t\t\t// mixpanel code//\n\t\t\t\t// let data = checkAndCreateNewJob(dataToSave, totalJobsCount,false,false)\n\t\t\t\t// await fetchJob(data.id)\n\t\t\t\t//mixpanel code\n\t\t\t\t// mixpanel.identify(user.email);\n\t\t\t\t// mixpanel.track('Customer - Job created')\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['creditCardInformation'])\n\t\t\t\t// setIsModalOpen(true);\n\t\t\t} else {\n\t\t\t\tlet lifeCycleTag = ''\n\t\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\t\tlifeCycleTag = JobTags.HAVE_CARD_AFTER_TRANSFER;\n\t\t\t\t} else {\n\t\t\t\t\tlifeCycleTag = JobTags.HAVE_CARD;\n\t\t\t\t}\n\n\t\t\t\tif (job && job.id && !repostJob) {\n\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, job.id, user.id);\n\t\t\t\t} else{\n\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\t\t}\n\t\t\t\tif (technicianId) {\n\t\t\t\t\tdataToSave['post_again'] = true\n\t\t\t\t\tdataToSave['post_again_reference_job'] = postAgainJobReference\n\t\t\t\t\tdataToSave['post_again_reference_technician'] = technicianId\n\t\t\t\t}\n\n\t\t\t\tif (hireExpertTransferJob) {\n\t\t\t\t\tconsole.log(\"inside usefeffect 5 >>>>>>>>>\")\n\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 4\")\n\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t// }else{\n\t\t\t\t\t\tif (repostJob) {\n\t\t\t\t\t\t\tlet res =  checkAndCreateNewJob(dataToSave)\n\t\t\t\t\t\t\t// await fetchJob(job.id)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcallFindTechnician(job)\n\t\t\t\t\t\t}\n\t\t\t\t\t// }\n\t\t\t\t} else if (jobId !== '' && job && job.id && jobId === job.id && newPostJob != 'yes') {\n\t\t\t\t\tconsole.log(\"inside usefeffect 5 >>>>>>>>>\")\n\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t// }else{\n\t\t\t\t\t\tif (repostJob) {\n\t\t\t\t\t\t\tlet res =  checkAndCreateNewJob(dataToSave)\n\t\t\t\t\t\t\t// await fetchJob(job.id)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcallFindTechnician(job)\n\t\t\t\t\t\t}\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet data = checkAndCreateNewJob(dataToSave, totalJobsCount)\n\t\t\t\t\t// await fetchJob(data.id)\n\t\t\t\t\t//mixpanel code\n\t\t\t\t\tmixpanel.identify(user?.email);\n\t\t\t\t\tmixpanel.track('Customer - Job created')\n\t\t\t\t\t//mixpanel code\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\t// mixpanel code//\n\t\t\t// \t\tif (technicianId){\n\t\t\t// \t\t\tdataToSave['technician'] = job.technician.id\n\t\t\t// \t\t}\n\n\t\t\t// \t\tif(hireExpertTransferJob){\n\t\t\t// \t\t\tcallFindTechnician(job)\n\t\t\t// \t\t}else{\n\t\t\t// \t\t\tcheckAndCreateNewJob(dataToSave,totalJobsCount,true)\n\t\t\t// \t\t\t//mixpanel code\n\t\t\t// \t\t\tmixpanel.identify(user.email);\n\t\t\t// \t\t\tmixpanel.track('Customer - First Job created')\n\t\t\t// \t\t\t//mixpanel code\n\t\t\t// \t\t}\n\n\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t};\n\n\t/**\n\t * Function will create a new job if not already posted and make the job live.\n\t * @params =  dataToSave (Type:Object), totalJobsCount (Type:Number),firstjob(Type:Boolean)\n\t * @response : Will call callFindTechnician function so the job gets live\n\t * @author : Manibha\n\t */\n\tconst checkAndCreateNewJob = async (dataToSave, totalJobsCount, firstjob = false,sendTofindTechnician=true) => {\n\t\tif (newPostJob !== 'yes') {\n\t\t\tif(isMobile || isTablet){\n\t\t\t\tdataToSave.status = 'Draft'\n\t\t\t}\n\t\t\tconsole.log(\"=== checkAndCreateNewJob before create job \",dataToSave)\n\t\t\tconst jobData = await createJob(dataToSave);\n\t\t\tconsole.log(\"=== checkAndCreateNewJob after create job \",jobData)\n\t\t\tsetJob(jobData)\n\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\tGAevent('Conversion','new_job','Conversion',jobData.customer.id)\n\t\t\tif(process.env.REACT_APP_URL){\n\t\t\t\tconst appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n\t\t\t\tPushUserDataToGtm('job_posted', user, appUrl);\n\t\t\t}\n\t\t\t//Call Klaviyo api\n\t\t\tcallKlaviyoAPI(jobData, totalJobsCount, firstjob)\n\n\t\t\t// console.log(\"jobData\",jobData)\n\t\t\tsetUpdatedJobData(jobData);\n\t\t\tconsole.log(\"inside usefeffect 7 >>>>>>>>>\")\n\t\t\t// if(isMobile || isTablet){\n\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n\t\t\t// \tawait emailOFMobileTabletJobPosting(jobData)\n\t\t\t// }else{\n\t\t\t\tif(sendTofindTechnician){\n\t\t\t\t\tcallFindTechnician(jobData);\n\t\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.log(\"Inside else part of checkAndCreateNewJob ... *-*-*-*\")\n\t\t\tconsole.log(\"inside usefeffect 8 >>>>>>>>>\")\n\n\t\t\t// if(isMobile || isTablet){\n\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 6\")\n        \t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t// }else{\n\t\t\t\tconsole.log(\" job.status: before :: \", job.status)\n\t\t\t\tif( job.status == \"Accepted\" && newPostJob == 'yes'){\n\t\t\t\t\tconsole.log(\" job.status: after :: \", job.status)\n\t\t\t\t\treturn window.location.href = \"/dashboard?mobileJobId=\"+job.id\n\t\t\t\t}\n\t\t\t\tconsole.log(\"inside usefeffect 8 >>>>>>>>>\")\n\t\t\t\tif(sendTofindTechnician){\n\n\t\t\t\t\t//Call Klaviyo api\n\t\t\t\t\tcallKlaviyoAPI(job, totalJobsCount, firstjob)\n\n\t\t\t\t\tcallFindTechnician(job);\n\t\t\t\t}\n\t\t\t// }\n\t\t}\n\t}\n\n\t/**\n\t* mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n\t* @author : Ridhima Dhir\n\t*/\n\tconst confirmModaloFMobileTabletJobPosting = async (message = '') => {\n\t\tif(user && user?.email){\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Job created from mobile or tablet')\n\t\t}\n\t\tModal.confirm({\n\t\t\ttitle: \"To better assist you please join from your computer.\",\n\t\t\tcontent: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n\t\t\tokText: 'Ok',\n\t\t\tcancelButtonProps : { style: { display: 'none' } },\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\thistory.push(\"/\")\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t* send email with job link for desktop\n\t* @params : job\n\t* @author : Ridhima Dhir\n\t*/\n\tconst emailOFMobileTabletJobPosting = async (jobData) => {\n\t\tsocket.emit('mobile_tablet_job_post_email', jobData);\n\t}\n\n\tconst getJobVar = useCallback(() => {\n\t\tconsole.log(\"Data for job \", job);\n\t\tconst dataToSave = {};\n\t\tdataToSave.software = job.software.id;\n\t\tdataToSave.subSoftware = (job.subSoftware && job.subSoftware.id ? job.subSoftware.id : job.subSoftware);\n\t\tdataToSave.expertise = job.expertise;\n\t\tdataToSave.subOption = job.subOption;\n\t\tdataToSave.issueDescription = job.issueDescription;\n\t\tdataToSave.jobDuration = job.selectedValdur;\n\t\tdataToSave.level = 'advanced';\n\t\tdataToSave.estimatedTime = (job.software ? job.software.estimatedTime : '0-0');\n\t\tif (hireValue) {\n\t\t\tdataToSave.estimatedPrice = (job.software ? job.software.twoTierEstimatePrice : '0-0');\n\t\t} else {\n\t\t\tdataToSave.estimatedPrice = (job.software ? job.software.estimatedPrice : '0-0');\n\t\t}\n\t\tdataToSave.status = 'Pending';\n\t\tdataToSave.hire_expert = hireValue;\n\t\treturn dataToSave;\n\t});\n\n\tuseEffect(() => {\n\t\tsocket.on('not-found-30min', () => {\n\t\t\tsetNotFound(true);\n\t\t\tsetLoading(false);\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['notAccepted'])\n\t\t});\n\t}, []);\n\n\tconst scheduleForLater = async () => {\n\t\tsetIfScheduleJob(true)\n\t\tlocalStorage.setItem(\"btnClicked\", btnclickedObj['scheduleJobLater'])\n\t\t// setBtnclicked(btnclickedObj['scheduleJobLater'])\n\t\tconst dataToSave = {};\n\t\tsetScheduleJob(true)\n\t\tlet customer_info = { has_card_or_subscription: false }\n\t\tdataToSave.software = job.software.id;\n\t\tdataToSave.subSoftware = (job.subSoftware && job.subSoftware.id ? job.subSoftware.id : job.subSoftware);\n\t\tdataToSave.expertise = job.expertise;\n\t\tdataToSave.subOption = job.subOption;\n\t\tdataToSave.issueDescription = job.issueDescription;\n\t\tdataToSave.level = 'advanced';\n\t\tdataToSave.estimatedTime = (job.software ? job.software.estimatedTime : '0-0');\n\t\tdataToSave.estimatedPrice = (job.software ? job.software.estimatedPrice : '0-0');\n\t\tdataToSave.status = 'Draft';\n\t\tdataToSave.hire_expert = hireValue;\n\t\tif (user) {\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Click on Schedule for later button ');\n\t\t}\n\t\tif (!user) {\n\t\t\tdataToSave.customer = `guest_${new Date().getTime()}`;\n\t\t\tdataToSave.guestJob = true;\n\t\t\tdataToSave.scheduleJob = true;\n\t\t\tconst res = await getGuestUser();\n\t\t\tif (res && res.token) {\n\t\t\t\tcreateJobAsGuest(dataToSave, res.token.accessToken).then(async (res) => {\n\t\t\t\t\tsetGuestJobId(res.id)\n\t\t\t\t\tawait JobCycleApi.create(JobTags.DRAFT_JOB_CREATED, res.id);\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['customerRegisterPage'])\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(' Job data>>>schedule', job, user.customer.customerType)\n\t\t\tlet lifeCycleTag = ''\n\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\tlifeCycleTag = JobTags.SCHEDULE_AFTER_TRANSFER;\n\t\t\t} else {\n\t\t\t\tlifeCycleTag = JobTags.SCHEDULE;\n\t\t\t}\n\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\tif(user && user?.customer?.customerType === 'live'){\n\t\t\t\tconst klaviyoData = {\n\t\t\t\t\temail: user?.email,\n\t\t\t\t\tevent: 'Scheduled Job Created',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t\t\t$last_name: user?.lastName,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tawait klaviyoTrack(klaviyoData);\n\t\t\t};\n\t\t\tsetScheduleJob(true);\n\t\t\tif (user && user?.customer) {\n\t\t\t\tcustomer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\t\tuser: user,\n\t\t\t\t\tliveUser: liveUser\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log(\"cardsInfo >>>>>>>>> in schedule later \", customer_info)\n\t\t\tsetCardsInfo(customer_info.has_card_or_subscription)\n\t\t\tif (customer_info.has_card_or_subscription == false) {\n\t\t\t\t// setIsModalOpen(true);\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['creditCardInformation'])\n\t\t\t} else {\n\t\t\t\tconsole.log('schedule>>>>>>>>>>>>>>>>>>>>>>>>');\n\t\t\t\tif (job && job.id && !repostJob) {\n\t\t\t\t\tawait JobCycleApi.create(JobTags.HAVE_CARD, job.id, user.id);\n\t\t\t\t} else {\n\t\t\t\t\tawait JobCycleApi.create(JobTags.HAVE_CARD, false, user.id);\n\t\t\t\t}\n\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n\t\t\t\t// setComponentToRender('schedualeLater');\n\t\t\t}\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (job) {\n\t\t\tif (job.id === jobId) {\n\t\t\t\tfetchMyCardsInfo();\n\t\t\t} else if (jobId === '') {\n\t\t\t\tfetchMyCardsInfo();\n\t\t\t}\n\t\t}\n\t}, [job]);\n\tuseEffect(() => {\n\t\tconsole.log(\"cardsInfo after >>>>>>>>> set\", cardsInfo)\n\t}, [cardsInfo])\n\tasync function fetchMyCardsInfo() {\n\t\tawait refetch();\n\t\t// console.log('user in fetchMyCardsInfo',user)\n\t\tif (user && user?.customer) {\n\t\t\tconst customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\tuser: user,\n\t\t\t\tliveUser: liveUser\n\t\t\t});\n\t\t\tconsole.log(\"customer_info :::::: \", customer_info)\n\t\t\tsetCardsInfo(customer_info.has_card_or_subscription);\n\t\t}\n\t\tif (newPostJob != 'yes') {\n\t\t\tsetShowLoader(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checking Geeker Availability of time\n\t * @params = ''\n\t * @response : Will check if the job post time is between 9am to 9pm (EDT) and returns boolean value.\n\t * @author : Manibha\n\t */\n\n\tfunction checkGeekerAvailabilityTime(jobData) {\n\t\tconst nonWorkingDays = [6, 7];\n\t\tconst usTime = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));\n\t\tconst usDay = usTime.getDay();\n\t\tconst workingHours = usTime.getHours();\n\t\tconst customerTypeValid = (user && user?.customer?.customerType ? user?.customer?.customerType !== 'test' : true);\n\t\tconsole.log(\"workingHours :::: >>>>>>\",workingHours)\n\t\tif ((((workingHours > 21 || workingHours < 9) && customerTypeValid)) || (nonWorkingDays.includes(usDay) && customerTypeValid)) {\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Before or after hours job', { 'usTime': usTime, 'issue': jobData.id });\n\t\t\tmixpanel.people.set({\n\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t$last_name: user?.lastName,\n\t\t\t});\n\t\t\t// mixpanel code//\n\t\t\tif(!checkGeekerAvailabilityTimeVariable){\n\t\t\t\topenNotificationWithIcon('info', 'Info', \"Please note that as it's after Geeker business hours, we cannot guarantee a technician at this time. But we understand that tech emergencies happen at all hours, so we'll do our best to locate one of our experts for you!\");\n\t\t\t\tcheckGeekerAvailabilityTimeVariable = true;\n\t\t\t}\n\t\t\tsetAfterGeekerHours(true)\n\n\t\t}\n\t}\n\n\tasync function callFindTechnician(jobData) {\n\t\tconsole.log('callFindTechnician CALLED.........................', jobData);\n\t\tcheckGeekerAvailabilityTime(jobData);\n\t\tconsole.log('Call function for checking time tech availability')\n\t\tif (user.aciveStatus === false) {\n\t\t\treturn openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_MESSAGE);\n\t\t}\n\t\tif (jobData) {\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Find Technician');\n\t\t\tmixpanel.people.set({\n\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t$last_name: user?.lastName,\n\t\t\t});\n\t\t\t// mixpanel code//\n\t\t\tlet lifeCycleTag = ''\n\t\t\tif (jobData && jobData.is_transferred && jobData.is_transferred == true) {\n\t\t\t\tlifeCycleTag = JobTags.FINDTECH_AFTER_TRANSFER;\n\t\t\t} else {\n\t\t\t\tlifeCycleTag = JobTags.FINDTECH;\n\t\t\t}\n\t\t\tawait JobCycleApi.create(lifeCycleTag, jobData.id);\n\t\t\tawait JobCycleApi.update({ \"UserId\": user.id, \"JobId\": jobData.id })\n\t\t\tawait fetchJob(jobData.id)\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobAlivePage'])\n\t\t\t// setComponentToRender('jobAlive');\n\t\t}\n\t}\n\n\tconst issueDescriptionValue = useMemo(() => {\n\t\tlet value = '';\n\t\tif (issueDescription && typeof (issueDescription) != 'string') {\n\t\t\tconst { blocks } = convertToRaw(issueDescription.getCurrentContent());\n\t\t\tvalue = (blocks && blocks.length) && blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\n\t\t\tvalue = value === '\\n' ? '' : value;\n\t\t}\n\t\tif (typeof (issueDescription) == 'string') {\n\t\t\tvalue = issueDescription;\n\t\t}\n\t\treturn value\n\t}, [issueDescription]);\n\n\tfunction setback() {\n\t\tif (job) {\n\t\t\tsetSubSoftware((job.subSoftware ? job.subSoftware : undefined));\n\t\t\tsetExpertise(job.expertise);\n\t\t\tsetSubOption(job.subOption);\n\t\t\tsetIssueDescriptionback(job.issueDescription);\n\t\t\tsetGuestJobValue(job.guestJob)\n\t\t\t// setMainPageStep(1)\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['issueDescription'])\n\t\t\t// setComponentToRender('issueDescription')\n\t\t}\n\t}\n\n\tconst hireCheckboxChange = (e) => {\n\t\tconst value = e.target.checked;\n\t\tsetHireValue(value);\n\t\tsetShowLoader(true);\n\n\t\tif (value) {\n\t\t\tset_price_value(job.software, true);\n\t\t} else {\n\t\t\tset_price_value(job.software);\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tsetShowLoader(false);\n\t\t}, 800);\n\t};\n\n\n\tconst calculatePrice = (softwareData,hire_expert=false,forfreeMinutes=false)=>{\n\t\tlet initPriceToShow = 0;\n\t\tlet finalPriceToShow = 0;\n\t\ttry{\n\t\t\tlet price_per_six_min = softwareData.rate\n\t\t\tlet time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n\t\t\tlet time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\t\t\tlet main_price = ''\n\t\t\tif (hire_expert) {\n\t\t\t\tmain_price = softwareData.twoTierEstimatePrice\n\t\t\t} else {\n\t\t\t\tmain_price = softwareData.estimatedPrice\n\t\t\t}\n\t\t\tconsole.log(\"> main price >>>>>>>>> \",main_price)\n\t\t\tlet price1 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[0]) : 0)\n\t\t\tlet price2 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[1]) : 0)\n\n\t\t\tprice1 = (price1 ? price1 : price_per_six_min)\n\t\t\tprice2 = (price2 ? price2 : price_per_six_min)\n\t\t\tinitPriceToShow = forfreeMinutes ?(Math.ceil(time1 / 6)-1) * parseInt(price1) :Math.ceil(time1 / 6) * parseInt(price1)\n\t\t\tfinalPriceToShow = forfreeMinutes ? (Math.ceil(time2 / 6) - 1) * parseInt(price2) : Math.ceil(time2 / 6) * parseInt(price2)\n\n\t\t\tinitPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 0)\n\t\t\tfinalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 0)\n\n\t\t\tconsole.log(\"initPriceToShow >>>>>>>>>> \",initPriceToShow)\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"issue in calculating price :::: \",err)\n\t\t}\n\t\treturn {initPriceToShow:initPriceToShow,finalPriceToShow:finalPriceToShow}\n\t}\n\n\t/**\n\t * Function will set price value according to the hire expert variable.\n\t * @params =  softwareData (Type:Object), hire_expert (Type:Boolean)\n\t * @response : no response\n\t * @author : Manibha\n\t */\n\tconst setPriceValueInThisComponent = (softwareData, hire_expert = false) => {\n\t\tlet {initPriceToShow,finalPriceToShow} = calculatePrice(softwareData,hire_expert)\n\t\tsetInitialPrice(initPriceToShow)\n\t\tsetFinalPrice(finalPriceToShow)\n\t}\n\n\t/**\n\t * Function will send the data to Klaviyo when added new job\n\t * @params =  jobData (Type:Object), totalJobsCount (Type:Int), firstjob (Type:Bool)\n\t * @response : no response\n\t * @author : Karan\n\t */\n\tconst callKlaviyoAPI = async(jobData, totalJobsCount, firstjob) => {\n\t\ttry{\n\t\t\tconsole.log(\"User data ::\", user)\n\t\t\tconsole.log(\"jobData data ::\", jobData)\n\t\t\tif(user && jobData && user?.customer?.customerType === 'live'){\n\t\t\t\tconst klaviyoData = {\n\t\t\t\t\temail: user?.email,\n\t\t\t\t\tevent: 'Job Created',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t\t\t$last_name: user?.lastName,\n\t\t\t\t\t\t$job: jobData?.id,\n\t\t\t\t\t\t$total_jobs: totalJobsCount,\n\t\t\t\t\t\t$software_name: jobData?.software?.name,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (firstjob) {\n\t\t\t\t\tklaviyoData['properties']['$first_job'] = true\n\t\t\t\t}\n\t\t\t\tconsole.log(\"klaviyoData ::\",klaviyoData)\n\t\t\t\tawait klaviyoTrack(klaviyoData);\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while creating job (callKlaviyaAPI) ::::', { scheduleJobData: jobData, errMessage: err.message });\n\t\t\tconsole.log('There is catch error while creating job (callKlaviyaAPI)  :::: '+ err.message)\n\t\t}\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t{showLoader? <Loader height=\"100%\" className={'loader-outer'} /> :\n\t\t\t\t(\n\t\t\t\t\t<Container span={24} className=\"\">\n\t\t\t\t\t\t{/*newPostJob === 'yes'&&\n\t\t\t\t\t\t\t<Loader  height=\"100%\" className={'loader-outer'} />\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t{/* <Loader height=\"85%\" className={(showLoader ? 'loader-outer' : 'd-none')} /> */}\n\t\t\t\t\t\t<Logo user={user} />\n\t\t\t\t\t\t<StepTitle className=\" job-heading-text mt-30 font-nova my-0\">Let us solve your problem - fast.</StepTitle>\n\t\t\t\t\t\t<div className=\"subHeading text-centre mx-auto font-nova mar-bot-20\">\n                            <span>Please review your summary and estimates.</span>\n                        </div>\n\t\t\t\t\t\t<BodyContainer span={24} className=\"px-0\">\n\n\t\t\t\t\t\t\t<Row className=\" col-xs-12 px-0 d-flex flex-row flex-start font-nova\">\n\t\t\t\t\t\t\t\t{/* <Col className=\"col-lg-5 col-xs-12 px-0 d-flex\"> */}\n\t                                <ItemLabel className=\"col-xs-lg-12 px-0 float-left d-flex flex-wrap justify-around text-label font-nova textTransform-none max-width-990-soft-name\">\n\t                                    <span className=\"mr-3 padding-top-5\" >Software </span> <RoundSelectors  software={job.subSoftware || job.software}   onClick={()=>{return}} active={false} isBtn={false} ></RoundSelectors>\n\t                                 </ItemLabel>\n\t                            {/* </Col> */}\n\t                            { job &&  job?.subOption != undefined && job?.subOption != \"\" &&\n\t                            \t// <Col className=\"col-lg-5 col-xs-12 px-0 col-sm-12\">\n\t\t                                 <ItemLabel className=\"col-xs-lg-12 px-0 float-left d-flex flex-wrap justify-around text-label font-nova textTransform-none max-width-990-soft-name\">\n\t\t                                    <span className=\"mr-3 padding-top-5\">Area  </span>  <RoundSelectors software={job.subOption} onClick={()=>{return}} active={false} isBtn={false}></RoundSelectors>\n\t\t                                 </ItemLabel>\n\t                            \t// </Col>\n\t                            }\n                            </Row>\n\t\t\t\t\t\t\t<Description className=\"text-left font-nova mb-4\">\n\t\t\t\t\t\t\t\t<ItemLabel className=\" text-left text-label my-0 textTransform-none\">\n\n                                    Description\n                                 </ItemLabel>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span className=\"desc-format font-nova\" title={job ? job.issueDescription : ''}>\n\t\t\t\t\t\t\t\t\t\t{console.log(\"job.issueDescription>>>>>>>>>>>>>>>>>>>>\",job.issueDescription)}\n\t\t\t\t\t\t\t\t\t\t{job ? job.issueDescription : ''}\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t{repostJob && <FontAwesomeIcon style={{cursor:'pointer'}} icon={faEdit} onClick={setback} title=\"Click to change job summary.\" />}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t</Description>\n\n\n\t\t\t\t\t\t\t{!priceLoaded && (\n\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t\t<div className=\"myspindiv\">\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t<Spin />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{priceLoaded\n\t\t\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\t\t\t<div className=\"d-flex justify-content-between col-10 mx-0 px-0   solution-review-box text-label font-nova\">\n\t\t\t\t\t\t\t\t\t\t{/*job.selectedValdur == lessThan2Hours &&\n\t\t\t\t\t\t\t\t\t\t\t<ContentAccordingToLongJob totalJobs={totalJobs} user={user} showToolTip={showToolTip} setShowToolTip={setShowToolTip} job={job} estimatedDuration ={estimatedDuration} intialPrice={intialPrice} finalPrice={finalPrice} totalPaidJobs={totalPaidJobs} />\n\t\t\t\t\t\t\t\t\t\t*/}\n\t\t\t\t\t\t\t\t\t\t<ContentAccordingToLongJob totalJobs={totalJobs} user={user} calculatePrice={calculatePrice}  showToolTip={showToolTip} setShowToolTip={setShowToolTip} job={job} estimatedDuration ={estimatedDuration} estimatedWait ={estimatedWait} intialPrice={intialPrice} finalPrice={finalPrice} totalPaidJobs={totalPaidJobs} softwareData = {job.subSoftware || job.software} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{job.selectedValdur == moreThan2Hours &&\n\t\t\t\t\t\t\t\t<div className=\" text-left long-job-text font-italic\">\n\t\t\t\t\t\t\t\t\tYour technician is moments away. On an initial call, you'll get a full quote of how long your job will take, and an exact price. (Don't worry: this is free.)\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t{ /*code commented by manibha on 15 april 22 as meyer is not ready for 2-tier. */}\n\t\t\t\t\t\t\t{/* <Box width=\"100%\" className=\"hire-expert-div\">\n\t\t\t\t\t\t\t\t\t    <Checkbox className=\"hire-expert-check\" onChange={hireCheckboxChange}>Would you like to hire expert with premium price?</Checkbox>\n\t\t\t\t\t\t\t\t\t</Box>  */}\n\n\n\t\t\t\t\t\t\t<Row width=\"100%\" className=\"job-detail-btn mt-200 d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t\t\t{!repostJob && (\n\t\t\t\t\t\t\t\t\t<Button onClick={setback} className=\"btn sm-btn-back hw-60 float-left\"><span> </span><FontAwesomeIcon icon={faArrowLeft} className='arr-size' /></Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Button type=\"back\" onClick={scheduleForLater} title=\"Schedule your job for a later date.\" className=\"btn font-nova app-btn float-left btn-schedule-later ml-3 min-height min-width-247 max-width-btn-width\">\n\t\t\t\t\t\t\t\t\tSchedule help for later\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button onClick={findTechnician} disabled={disableButton} className=\"btn font-nova app-btn app-btn float-left btn-get-help min-height decline-btn max-width-btn-width\">\n\t\t\t\t\t\t\t\t\t{disableButton ? <Spin /> : \"Get help now\"}\n\t\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</BodyContainer>\n\n\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" width=\"100%\" marginTop={14}>\n\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t{user && user.customer && user.customer.customerType && user.customer.customerType !== 'test' && job && stripePromise !== '' &&\n\n\t\t\t\t\t\t\t<Elements stripe={stripePromise}>\n\t\t\t\t\t\t\t\t<AddCardForm user={user} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} cardsInfo={cardsInfo} setCardsInfo={setCardsInfo} newCardAdded={newCardAdded} setNewCardAdded={setNewCardAdded} showCards={false} setDisableButton={setDisableButton}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Elements>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t{/* {componentToRender === 'jobAlive'\n\t\t\t\t&& (\n\t\t\t\t\t<JobAlive\n\t\t\t\t\t\tupdateJob={updateJob}\n\t\t\t\t\t\tjob={updatedJobData}\n\t\t\t\t\t\tsetComponentToRender={setComponentToRender}\n\t\t\t\t\t\testimatedWait={estimatedWait}\n\t\t\t\t\t\tmainEstimatedWait={mainEstimatedWait}\n\t\t\t\t\t\tsetIsTechNotFoundInSearch={setIsTechNotFoundInSearch}\n\t\t\t\t\t\tafterGeekerHours = {afterGeekerHours}\n\t\t\t\t\t\tscheduleForLater = {scheduleForLater}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t{componentToRender === 'notAccepted'\n\t\t\t\t&& <NotAccepted handleDecline={handleDecline} job={updatedJobData} setComponentToRender={setComponentToRender} notFound={notFound} loading={loading} setLoading={setLoading} afterGeekerHours={afterGeekerHours} />}\n\n\t\t\t{componentToRender === 'schedualeLater'\n\t\t\t\t&& (\n\t\t\t\t\t<Schedule\n\t\t\t\t\t\tcreateJob={createJob}\n\t\t\t\t\t\thandleDecline={handleDecline}\n\t\t\t\t\t\tjob={updatedJobData}\n\t\t\t\t\t\tsetComponentToRender={setComponentToRender}\n\t\t\t\t\t\tcardsInfo={cardsInfo}\n\t\t\t\t\t\ttotalJobs={totalJobs}\n\t\t\t\t\t\tsetIsModalOpen={setIsModalOpen}\n\t\t\t\t\t\tisTechNotFoundInSearch={isTechNotFoundInSearch}\n\t\t\t\t\t\thireValue={hireValue}\n\t\t\t\t\t\ttechnicianId={technicianId}\n\t\t\t\t\t\trepostJob={repostJob}\n\t\t\t\t\t\tpostAgainJobReference={postAgainJobReference}\n\n\t\t\t\t\t/>\n\t\t\t\t)} */}\n\n\t\t</>\n\t);\n}\n\n\n\nconst Container = styled(Col)`\n\tdisplay: flex !important;\n\twidth: 100%;\n\tborder-radius: 10px;\n\tmargin-top: 20px;\n\tflex-direction: column;\n`;\n\nconst Description = styled(Text)`\n\tfont-size: 18px;\n\tfont-weight: 600;\n\topacity: 0.8;\n\tp{\n\t\twidth:100%;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\tfont-weight:bold;\n\t\tcursor:pointer;\n\t\tmargin-bottom:unset;\n\t}\n`;\n\nconst ItemLabel = styled.div`\n\tcolor: #8c8c8c;\n\tfont-weight: 700;\n\topacity: 0.4;\n\ttext-transform: uppercase;\n\tmargin-top: 30px;\n\tmargin-bottom: 30px;\n`;\n\nconst ItemDescription = styled(Text)`\n\topacity: 0.8;\n\tfont-weight: 700;\n\tfont-style: italic;\n`;\n\nconst EstimationItem = styled(Text)`\n\tfont-family: var(--novaboldtheme) !important;\n\tcolor: #2F3F4C !important;\n\tfont: normal normal bold 24px/40px Proxima Nova;\n`;\n\n/* const DeclineButton = styled(Button)`\n\tdisplay: flex !important;\n\tborder: none !important;\n\tfont-weight: 700 !important;\n\tpadding: 0 30px !important;\n\theight: 60px !important;\n\tjustify-content: center;\n\talign-items: center;\n`; */\n\nconst FileButtonContainer = styled.button`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tmargin-top: 0px;\n\theight: 60px;\n\tline-height: 60px;\n\tpadding: 0 15px;\n\talign-items: center;\n\tfont-size: 22px;\n\tborder: 0;\n\tfloat: right;\n`;\n\n/* const SystemIcon = styled.img`\n\twidth: 35px;\n\tpadding: 5px;\n`; */\nconst SoftwareImage = styled.img`\n\twidth: 50px;\n\theight: auto;\n`;\n\n//Following comopnent displays the estimated duration and price for long job\nconst ContentAccordingToLongJob = (props)=>{\n\tconst GetPrice = (props)=>{\n\t\ttry{\n\t\t\tlet {initPriceToShow:initPriceToShow,finalPriceToShow:finalPriceToShow} = props.calculatePrice(props.softwareData,false,true)\n\t\t\tconsole.log(\"initPrice to show :::::::::::: \",initPriceToShow)\n\t\t\tconsole.log(\"finalPriceToShow >>>>>>>>>>>>>>>>>>> \",finalPriceToShow)\n\t\t\treturn <>${initPriceToShow}-${finalPriceToShow}</>\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in GetPrice\",err)\n\t\t}\n\t\treturn <></>\n\t}\n\t\treturn <>\n\t\t\t\t<div className='text-left'>\n\t\t\t\t\t<ItemLabel className=\"text-label mar-bot-neg-10 mb-1 dark text-left textTransform-none \">Estimated wait time</ItemLabel>\n\n\t\t\t\t\t<EstimationItem>\n\t\t\t\t\t\t{(props.estimatedWait !== 'NA' ? `${props.estimatedWait}` : props.estimatedWait)}\n\t\t\t\t\t</EstimationItem>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div  className='text-left'>\n\t\t\t\t\t<ItemLabel className=\"text-label mar-bot-neg-10 mb-1 text-left textTransform-none\">Estimated task completion time</ItemLabel>\n\t\t\t\t\t<EstimationItem className='text-left'>\n\t\t\t\t\t\t{(props.estimatedDuration !== 'NA' ? `${props.estimatedDuration} minutes`  : props.estimatedDuration)}\n\t\t\t\t\t</EstimationItem>\n\t\t\t\t</div>\n\n\n\t\t\t\t<div  className='text-left'>\n\t\t\t\t\t<ItemLabel className=\"text-label mb-1 dark text-left textTransform-none mar-bot-neg-10\">Estimated price</ItemLabel>\n\t\t\t\t\t<EstimationItem>\n\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t<div className={(!props.user || props.totalPaidJobs === 0 ?'strike-through' : \"\")}>\n\t\t\t\t\t\t\t{(props.intialPrice !== 'NA' ? `$${props.intialPrice}-$${props.finalPrice}` : props.intialPrice)}</div>&nbsp;&nbsp;\n\t\t\t\t\t\t\t{!props.user || props.totalPaidJobs === 0 ? (props.intialPrice !== 'NA' ? <GetPrice softwareData={props.softwareData} calculatePrice={props.calculatePrice} /> : props.intialPrice) : \"\"}\n\n\t\t\t\t\t\t\t<div className='toolTipwrapper font-nova'>\n\t\t\t\t\t\t\t\t{!props.user || props.totalPaidJobs === 0  ?  <FontAwesomeIcon onMouseEnter={()=>props.setShowToolTip(true)} onMouseLeave={()=>props.setShowToolTip(false)} style={{fontSize: '25px', cursor: 'pointer', marginTop: '10px', marginLeft: '20px',color: '#1bd4d5'}} icon={faQuestionCircle} ></FontAwesomeIcon> : \"\"}\n\t\t\t\t\t\t\t\t{/* {props.user  ? \"\" : <FontAwesomeIcon onMouseEnter={()=>props.setShowToolTip(true)} onMouseLeave={()=>props.setShowToolTip(false)} style={{fontSize: '25px', cursor: 'pointer', marginTop: '10px', marginLeft: '20px',color: '#1bd4d5'}} icon={faQuestionCircle} ></FontAwesomeIcon>} */}\n\t\t\t\t\t\t\t\t{props.showToolTip && (<><div className=\"triangle\"></div>\n\t\t\t\t\t\t\t\t<div className=\"toolTip\">\n\t\t\t\t\t\t\t\t\tFirst 6 minutes free for new user!\n\t\t\t\t\t\t\t\t</div></>)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</EstimationItem>\n\t\t\t\t</div>\n\t\t\t</>\n\t}\n\nexport default JobDetailView;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\JobDetailView.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "NotAccepted.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\n// import { useHistory } from 'react-router-dom';\nimport { Alert, Spin, Col } from 'antd';\nimport styled from 'styled-components';\n// import * as Antd from 'antd';\n// import StepButton from '../../../../components/StepButton';\n// import H2 from '../../../../components/common/H2';\nimport { useSocket } from '../../../../context/socketContext';\nimport Box from '../../../../components/common/Box';\nimport { useAuth } from '../../../../context/authContext';\nimport { Button } from 'react-bootstrap';\nimport mixpanel from 'mixpanel-browser';\nimport { useLocation } from 'react-router';\nimport {\n  BodyContainer\n} from '../../ProfileSetup/steps/style';\nimport * as JobCycleApi from '../../../../api/jobCycle.api'\nimport { JobTags } from '../../../../constants/index.js';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faArrowRight, faCalendarDay } from '@fortawesome/free-solid-svg-icons';\n// import JobAlive from './JobAlive';\nlet timer;\nconst val = 0;\n\nconst NotAccepted = ({ handleDecline, job, setJobFlowStep, jobFlowsDescriptions, notFound, loading, setLoading, afterGeekerHours, setUseTimer }) => {\n  const { user } = useAuth();\n  // const [percent, setPercent] = useState(0);\n  // const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search)\n  const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n  const { socket } = useSocket();\n  const [sch, setsch] = useState(false);\n\n  const [buttonName, setButtonName] = useState('Keep Searching');\n  const [statusText, setStatusText] = useState(\"Hmm... We searched everywhere, but it looks like all our technicians are busy helping others right now. But don't worry! You can always schedule a call for later.\")\n  useEffect(() => {\n    if (technicianId) {\n      setStatusText('Same technician is not available at this time.You can choose to keep searching with other technicians or schedule job with same technician at some other time.')\n      setButtonName(\"Search for another technicians\")\n    }\n  }, [])\n  useEffect(() => {\n    (\n      async () => {\n        if (sch) {\n          if (job && job.id) {\n            await JobCycleApi.create(JobTags.SCHEDULE_AFTER_SEARCH, job.id);\n          }\n          setJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n        }\n      }\n    )()\n  }, [sch]);\n\n  const SendMail = async () => {\n    // mixpanel code//\n    mixpanel.identify(user.email);\n    mixpanel.track('Customer -Looking for 30 min', { 'JobId': job.id });\n    // mixpanel code//\n    socket.emit('KeepSearching', {\n      jobData: job,\n      posted: true,\n      accepted: false,\n      postedTime: new Date(),\n      user,\n      custPhoneNumber: job.customer.phoneNumber,\n    });\n    let lifeCycleTag = ''\n    if (job.is_transferred && job.is_transferred == true) {\n      lifeCycleTag = JobTags.KEEP_SEARCH_AFTER_TRANSFER;\n    } else {\n      lifeCycleTag = JobTags.KEEP_SEARCHING;\n    }\n    await JobCycleApi.create(lifeCycleTag, job.id);\n    setLoading(true)\n  };\n\n  const callSchedule = async () => {\n    if (job && job.id) {\n      await JobCycleApi.create(JobTags.SCHEDULE_AFTER_SEARCH, job.id);\n    }\n    setJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n  };\n\n  const callDecline = () => {\n    let tag = JobTags.DECLINED_AFTER_SEARCH\n    let jobId = job.id\n    handleDecline(false, false, jobId, tag)\n  }\n  return (\n    <Container span={24} className=\"select-job-container find-tecnhician-container\">\n      <BodyContainer span={24}>\n        <Box>\n          {notFound && <Alert\n            message=\"Not Found\"\n            description=\"We searched high and low for you but it looks like all our technicians are busy.What would you like to do next?\"\n            type=\"info\"\n            showIcon\n          />}\n          <ItemLabel className=\"card-label dark\">Job Status</ItemLabel>\n      \n          {loading &&\n            <Message>\n              <div className=\"30-mins-wait\" style={{ 'color': 'black' }}>We are looking for technician...</div>\n            </Message>\n          }\n          {afterGeekerHours &&\n            <Description className=\"text-left\"> We searched high and low for you but it looks like no technician is available at this time (\"Scheduling help for later is a great way to guarantee your issue will be fixed.\")</Description>\n          }\n          {afterGeekerHours &&\n            <Description className=\"text-left\"> Tip: You can schedule one time slot outside business hours and within business hours however please be aware that there are less technicians available after official hours.</Description>\n          }\n\n          {!afterGeekerHours &&\n            <Description>\n              {statusText}\n            </Description>\n          }\n          {/* <Antd.Divider /> */}\n\n          <Box width=\"100%\" className=\"d-flex justify-content-around\">\n            <Button className=\"btn app-btn app-btn app-btn-transparent float-left\" onClick={callDecline}>Decline<span></span></Button >\n            <Button className=\"btn app-btn app-btn  mr-15 float-left\" onClick={callSchedule} title=\"Schedule your job for a later date.\">Schedule for Later<span></span></Button >\n            {!loading && <Button className=\"btn app-btn app-btn float-right mr-15\" onClick={SendMail}>{buttonName}<span></span></Button >}\n            {loading && <Button className=\"btn app-btn app-btn float-right mr-15 app-btn-transparent\" disabled> <Spin /><span></span></Button>}\n     \n          </Box>\n        </Box>\n      </BodyContainer>\n    </Container>\n  );\n};\n\nconst Container = styled(Col)`\n  display: flex !important;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n  background-color:#DCE6ED;\n  `;\n// background-color:#2F3F4C;\n\n\n// const StepHeader = styled.h2`\n// color:#708390;\n// font-size: 35.6364px;\n// font-weight: 900;\n// line-height: 43px;\n// text-align: center;\n// margin-bottom: 0; \n// `;\n\n/*const EstimationItem = styled(H2)`\n  font-weight: 700;\n  font-size: 18px;\n`;*/\n\nconst Description = styled.div`\n  font-size: 18px;\n  font-weight: 600;\n  color: #8c8c8c;\n`;\n\nconst Message = styled.div`\n  font-size: 18px;\n  background: rgba(27,179,1,0.1);\n  padding: 12px;\n  text-align: center;\n  border: green solid 1px;\n  margin-bottom: 10px;\n`;\n\n\nconst ItemLabel = styled.div`\n  color: #8c8c8c;\n  font-weight: 700;\n  opacity: 0.4;\n  text-transform: uppercase;\n  margin-bottom: 30px;\n  margin-top: 30px;\n`;\n// const Title = styled.div`\n// font-weight:400;\n// font-size:18.93px;\n// text-align:center;\n// color:#708390;\n// top:43px;\n// left:217.15px;\n// `;\n\n// const Button = styled.button`\n//   background:#a09e9e !important;\n//   font-size: 15px !important;\n//   align-items: center !important;\n//   display: flex !important;\n//   font-weight: bold !important;\n//   border-radius: 10px !important;\n//   height: 60px !important;\n//   width: 250px !important;\n//   justify-content: center;\n//   margin-left: 20px !important;\n//   border-color: #a09e9e !important;\n//   border-bottom: #a09e9e !important;\n//   border-right: #a09e9e !important;\n//   color: ${props => (props.type === 'back' ? props.theme.primary : '#fff')} !important;\n//   &:hover {\n//     background: ${props => (props.type === 'back' ? '#fff' : '#908d8d')} !important;\n//     color: ${props => (props.type === 'back' ? '#464646' : '#fff')} !important;\n//     border-color: #a09e9e !important;\n//   }\n//   &:active {\n//     background: ${props => (props.type === 'back' ? '#fff' : '#908d8d')} !important;\n//     color: ${props => (props.type === 'back' ? '#464646' : '#fff')} !important;\n//     border-color: #a09e9e !important;\n//   }\n//   &:focus {\n//     background: ${props => (props.type === 'back' ? '#fff' : '#908d8d')} !important;\n//     color: ${props => (props.type === 'back' ? '#464646' : '#fff')} !important;\n//     border-color: #a09e9e !important;\n//   }\n\n//   & .ant-spin .ant-spin-dot  .ant-spin-dot-item{\n//     background-color:#fff !important;\n//   }\n// `;\n\nexport default NotAccepted;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\NotAccepted.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Payment.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\"\nimport {\n\t// CardElement,\n\tuseStripe,\n\tuseElements,\n\tCardNumberElement,\n\tCardExpiryElement,\n\t// injectStripe,\n\t// StripeProvider,\n\tCardCvcElement\n} from \"@stripe/react-stripe-js\";\nimport * as CustomerApi from '../../../../api/customers.api';\nimport { openNotificationWithIcon, GAevent, PushUserDataToGtm } from '../../../../utils';\nimport mixpanel from 'mixpanel-browser';\nimport { Form,Spin} from 'antd';\nimport { Row, Col, Button} from 'react-bootstrap';\n// import PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/high-res.css'\nimport NewInput from \"../../../../components/common/Input/NewInput\"\n// import {ArrowRightOutlined, ArrowLeftOutlined} from \"@ant-design/icons\"\n// import { STRIPE_KEY,STRIPE_TEST_KEY } from '../../../../constants';\nimport * as CommonFunctions from '../../../../utils/'\n// import {loadStripe} from '@stripe/stripe-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight,faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport Logo from \"components/common/Logo\";\nimport { useAuth } from \"context/authContext\";\nimport { useJob } from \"context/jobContext\";\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { PAYMENT_DETAILS_MESSAGE } from \"../../../../constants/index\";\nlet stripePromise = ''\nlet liveUser = true ;\nconst Payment = ({user,cardsInfo,jobFlowsDescriptions,setJobFlowStep,setGuestJobId,guestJobId,job}) =>{\n    const [form] = Form.useForm()\n    const FormItem = Form.Item;\n    const {refetch} = useAuth();\n    // const [phoneNumber, setPhoneNumber] = useState('');\n    const elements = useElements();\n    const {updateJob, createJob, setJob} = useJob()\n    const stripe = useStripe();\n    // const [formData,setFormData] = useState({nameOnCard:'',\n    //                                          address:'',\n    //                                          city:'',\n    //                                          state:'',\n    //                                          zip:'',\n    //                                         })\n    const [formData,setFormData] = useState({zip:'',\n                                            })\n\n    const [createButtonDisabled, setCreateButtonDisabled] = useState(false);\n    const {PAYMENT_DETAILS_MAIN_HEAD,PAYMENT_DETAILS_SUB_HEAD,PAYMNET_DETAILS_TITLE} = PAYMENT_DETAILS_MESSAGE\n\n    const onNext = ()=>{\n        console.log(\"onNext >>>>>. \",onNext)\n    }\n    const onBack = ()=>{\n        setJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n    }\n    useEffect(()=>{\n        (async()=>{\n            if(user){\n                liveUser = await CommonFunctions.isLiveUser(user)\n                stripePromise = await  CommonFunctions.getStripeObject(user)\n            }\n        })()\n    },[user])\n\n    /**\n\t * Following function is to handle change of input fields in the form.\n\t * @author : Vinit\n\t */\n     const handleChange = (e) =>{\n        const { name, value } = e.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        })\n    }\n\n    /**\n\t * Following function is to handle change of phone number field in the form.\n\t * @author : Vinit\n\t */\n    //  const handlePhoneNumber = (e) => {\n\t// \tsetPhoneNumber(`+${e}`);\n\t// };\n\n    /**\n\t * Following function is to handle click on \"next/right arrow\" button.\n\t * @author : Vinit\n\t */\n    const handleForm = ()=>{\n        // e.preventDefault()\n        setCreateButtonDisabled(true);\n        const cardElement = elements.getElement(CardNumberElement);\n        // formData['phoneNumber'] = phoneNumber\n        var dataToStripe ={}\n        dataToStripe['metadata'] = formData\n\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        }\n\n        stripe.createToken(cardElement,dataToStripe).then(\n            async (payload) => {\n                console.log('payload>>>>>>>>>>>>>>>>>>>>',payload)\n                if(payload['error']){\n                    openNotificationWithIcon(\"error\",\"Error\",payload['error']['message'])\n                    setCreateButtonDisabled(false);\n                    // setIsDisabled(false);\n                    // setNewCardAdded(false);\n                    return;\n                }else{\n                    let retrieve_cust = await CustomerApi.retrieveCustomer(user?.customer?.id);\n                    console.log('addCardForm handleSubmit retrieve_cust::',retrieve_cust)\n                    if(!retrieve_cust.stripe_id || retrieve_cust.stripe_id === '' || retrieve_cust.stripe_id == null){\n\n                        checkCardAndAddCardToCustomer(cardElement,dataToStripe,payload,true,false)\n\n                    }else{\n                        checkCardAndAddCardToCustomer(cardElement,dataToStripe,payload,false,retrieve_cust.stripe_id)\n                    }\n                }\n\n            }\n        );\n\n        async function checkCardAndAddCardToCustomer(cardElement,data,payload,newCustomer,stripe_customer_id){\n            stripe.createToken(cardElement,data).then(\n                async (payloadTwo) => {\n                    console.log('payloadTwo>>>>>>>>>>>>>>>>>>>>',payloadTwo)\n                    if(payloadTwo['error']){\n                        setCreateButtonDisabled(false);\n                        openNotificationWithIcon(\"error\",\"Error\",payloadTwo['error']['message'])\n                        return;\n                    }else{\n                        const card_valid  =  await CustomerApi.checkCardValidation({token_id:payloadTwo.token.id,liveUser:liveUser,stripe_id: stripe_customer_id})\n                        if(card_valid['success']){\n                            if(newCustomer){\n                                console.log('addCardForm handleSubmit createCustomerStripe ::')\n                                const result_customer  = await CustomerApi.createCustomerStripe({\n                                    email: user.email,\n                                    liveUser:liveUser\n                                })\n\n                                var customer_id = result_customer.id\n                                CustomerApi.updateCustomer(user.customer.id,{\"stripe_id\":customer_id})\n                                stripe_customer_id = customer_id\n                            }\n\n                            const result_card  = await CustomerApi.addCardToCustomerStripe({\n                                liveUser:liveUser,\n                                stripe_id: stripe_customer_id,\n                                token_id:payload.token.id,\n                                jobId:'NA'\n                            })\n\n                            if(result_card['error'] != undefined){\n                                openNotificationWithIcon(\"error\",\"Error\",result_card['error']['message'])\n                                // mixpanel code//\n                                mixpanel.identify(user.email);\n                                mixpanel.track('Customer - Card not added due to some error in card.');\n                                // mixpanel code//\n                            }else{\n                                 if(cardsInfo){\n                                    let temp_data = []\n                                    if(cardsInfo && cardsInfo != null && Array.isArray(cardsInfo)){\n                                        temp_data = [...cardsInfo]\n                                    }\n                                    if(newCustomer){\n                                        result_card['default_card'] = true;\n                                    }\n                                    temp_data.push(result_card)\n                                    // setCardsInfo(temp_data)\n                                }\n\n                                // mixpanel code//\n                                mixpanel.identify(user.email);\n                                mixpanel.track('Customer - Card details added.');\n                                // mixpanel code//\n                                openNotificationWithIcon(\"success\",\"Success\",\"Card details has been saved.\")\n                                // setUser(user)\n                                refetch()\n                                // commented by ridhima dhir after confirming with sahil 09-12-2022\n                                //updateJob(guestJobId,{\"customer\":user.customer.id,\"status\":\"Pending\"})\n                                let btnclicked = localStorage.getItem(\"btnClicked\")\n                                console.log(\"My console\", btnclicked)\n                                if (btnclicked == 0) {\n                                    if(isMobile || isTablet){\n                                        let jobID = await createUpdateJob(\"Draft\")\n                                        return window.location.href = \"/customer/profile-setup?jobId=\"+jobID+\"&newpost=yes&isMobilePost=yes\"\n                                    }else{\n                                        createUpdateJob(\"Pending\")\n                                        setJobFlowStep(jobFlowsDescriptions['jobAlivePage'])\n                                        //GA3 tag commented by Vinit on 24/04/2023.\n                                        GAevent('Conversion', 'new_job', 'Conversion', user.customer.id)\n                                        if(process.env.REACT_APP_URL){\n                                            const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n                                            PushUserDataToGtm('job_posted', user, appUrl);\n                                        }\n                                        console.log(\"My console if\")\n                                    }\n                                } else if (btnclicked == 1) {\n                                    createUpdateJob(\"Pending\")\n                                    setJobFlowStep(jobFlowsDescriptions['scheduleJob'])\n                                    console.log(\"My console else\")\n                                }\n                                localStorage.removeItem(\"btnClicked\")\n                            }\n                        }\n                        else{\n                            openNotificationWithIcon(\"error\",\"Error\",\"Card is invalid. Please try a different card.\")\n                            setCreateButtonDisabled(false);\n                        }\n                    }\n            })\n        }\n    }\n\n    /**\n\t * Following function is to create and update job after discussion with sahil nagpal as this is a old code. Just status is now dynamic\n\t * @author : Ridhima Dhir\n     * @date : 09-12-2022\n\t */\n    const createUpdateJob= async(status)=>{\n        let jobId = \"\";\n        if (guestJobId) {\n            jobId = guestJobId\n            updateJob(guestJobId, { \"customer\": user.customer.id, \"status\": status })\n        } else {\n            let temp = { ...job }\n            temp.software = job.software.id\n            temp.status = status\n            if(temp.id){\n                updateJob(temp.id, {\"status\": status })\n                jobId = guestJobId\n            }else{\n                if (job.subSoftware && job.subSoftware.id) {\n                    temp.subSoftware = job.subSoftware.id\n                }\n                const jobData = await createJob(temp)\n                console.log(\"jobID ::::3\", jobData)\n                setJob(jobData)\n                jobId = jobData.id\n            }\n        }\n        return jobId\n    }\n\n    /**\n\t * Following function is to handle \"back/left arrow btn\" in the form.\n\t * @author : Vinit\n\t */\n    const handleBack = () => {\n        onBack();\n    }\n\n    /**\n\t * Following function is to handle onFinishFail in the form.\n\t * @author : Vinit\n\t */\n    const failfunc = () => {\n        console.log(\"My console fail\")\n    }\n\n    return (\n        <div className=\" mx-auto\">\n            <Logo user={user} />\n            <Col md=\"12\" className=\"pb-4 m-auto add-card-form-outer text-left font-nova pad-0\">\n                <Form onFinishFailed={failfunc} onFinish={handleForm}>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md=\"auto text-center\">\n                            <span className=\"heading-color letter-spacing-0-16 payment-font\">Payment</span>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Col md=\"auto\">\n                            <h6 className=\"textColor font-size-17 letter-spacing-0-09 text-center\">{PAYMENT_DETAILS_MAIN_HEAD}</h6>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Col md=\"auto\">\n                            <h6 className=\"textColor font-size-17 letter-spacing-0-09 text-center\">{PAYMENT_DETAILS_SUB_HEAD}</h6>\n\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Col md=\"auto\">\n                            <h6 className=\"textColor font-size-17 letter-spacing-0-09 text-center\">{PAYMNET_DETAILS_TITLE}</h6>\n                        </Col>\n                    </Row>\n                    <Row className='mt-5'>\n                        <Col md=\"12\" className=\"pad-right-35 maxWidth-953-padding-right-15 mg-b\">\n                            <span className='headingColor font-size-18'>CARD INFO</span>\n                            {/* <Row>\n                                <Col className=\"textColor myPad-15 m-top-15 font-size-15\">Name on card</Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"\"><NewInput type={'text'} name={'nameOnCard'} placeHolder={''} onChange={handleChange} value={formData.nameOnCard}/></Col>\n                            </Row> */}\n                            <Row>\n                                <Col className=\"textColor myPad-15 font-size-15 pr-20\">Credit Card number </Col>\n                            </Row>\n                            <Row xs=\"12\" className= \"myPad-15 \" >\n                                <Col className=\"newInput margin-bottom-24\">\n                                    <CardNumberElement className=\"margin-top-28 maxWidth-953-margin-left-7\" options={{placeholder:\"CC#\"}} />\n                                </Col>\n                            </Row>\n                            <Row className=\"custom-class\">\n                                <Col className=\"textColor myPad-15 my-pl-0 font-size-15 mg-b myPad-0 \" md={4}>\n                                    <Row className=\"pad-left-15 \" >\n                                        Expiration\n                                    </Row>\n                                    <Row className=\"padding-right-0 maxWidth-953-padding-right-15 myPad-15 myPad-15 newInput ml-0\">\n                                        <CardExpiryElement className=\"margin-top-28 maxWidth-953-margin-left-15\"/>\n                                    </Row>\n                                </Col>\n                                <Col className=\"textColor myPad-15 font-size-15 mg-b myPad-0\" md={4}>\n                                    <Row className=\"maxWidth-953-padding-left-15 ml-0\">\n                                        CVV\n                                    </Row>\n                                    <Row className=\"pad-0 pad-right-13 maxWidth-953-padding-left-15 newInput maxWidth-953-margin-left-0 custom-class\">\n                                        <CardCvcElement className=\"margin-top-28 margin-left-15\"/>\n                                    </Row>\n                                </Col>\n                                <Col className=\"textColor myPad-15 font-size-15 my-pr-0 mg-b myPad-0\" md={4}>\n                                    <Row className=\"maxWidth-953-padding-left-15 ml-0\">\n                                        Zip\n                                    </Row>\n                                    <Row className=\"pad-0 pad-right-13 maxWidth-953-padding-left-15 ml-0\">\n                                        <NewInput type={'text'} name={'zip'} placeHolder={'XXX'} onChange={handleChange} value={formData.zip}/>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Col>\n                        {/* <Col md=\"6\" className=\"pad-left-35 maxWidth-953-padding-left-15 maxWidth-953-margin-top-20\">\n                            <span className='headingColor  font-size-18'>BILLING INFO</span>\n                            <Row>\n                                <Col className=\"textColor myPad-15 m-top-15 font-size-15\">Address</Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"myPad-15\"><NewInput type={'text'} name={'address'} placeHolder={''} onChange={handleChange} value={formData.address}/></Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"textColor myPad-15 font-size-15\">City</Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"myPad-15\"><NewInput type={'text'} name={'city'} placeHolder={''} onChange={handleChange} value={formData.city}/></Col>\n                            </Row>\n                            <Row className=\"\">\n                                <Col className=\"textColor myPad-15 font-size-15\" md={6}>\n                                    <Row className=\"pad-left-15\">\n                                        State\n                                    </Row>\n                                    <Row className=\"padding-right-0 maxWidth-953-padding-right-15 myPad-15\">\n                                        <NewInput type={'text'} name={'state'} placeHolder={''} onChange={handleChange} value={formData.state}/>\n                                    </Row>\n                                </Col>\n                                <Col md={1}></Col>\n                                <Col className=\"textColor myPad-15 font-size-15\" md={5}>\n                                    <Row className=\"maxWidth-953-padding-left-15\">\n                                        Zip\n                                    </Row>\n                                    <Row className=\"pad-0 pad-right-13 maxWidth-953-padding-left-15\">\n                                        <NewInput type={'text'} name={'zip'} placeHolder={'XXX'} onChange={handleChange} value={formData.zip}/>\n                                    </Row>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col className='textColor myPad-15 font-size-15'>Phone number</Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"myPad-15\">\n                                    <PhoneInput countryCodeEditable={false} name={'phoneNumber'} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} className=\"p-0\" containerClass=\"\" inputClass=\"newInput\" buttonClass=\"\" searchClass=\"\" value={phoneNumber} onChange={handlePhoneNumber}  />\n                                </Col>\n                            </Row>\n                        </Col> */}\n                    </Row>\n                    <Row className=\"m-top-25 d-flex justify-content-between my-pad-15\">\n                        {/* <Col md={6}> */}\n                            <Button onClick={handleBack} className=\"grey-btn-color prev-btn sm-btn-back disabled-border\" disabled={createButtonDisabled}>\n                                <span></span>\n                                <FontAwesomeIcon icon={faArrowLeft} className=\"arr-size\" />\n                            </Button>\n                            {/* <Button className=\"grey-btn-color ml-4 decline-btn app-btn sm-btn-back\">\n                                <span></span>Decline\n                            </Button> */}\n                        {/* </Col>\n                        <Col md={6}> */}\n                            <FormItem>\n                                <Button type=\"submit\"  className=\"next-btn float-right green-back-color sm-btn-color disabled-border\" disabled={createButtonDisabled}>\n                                <span></span>\n                                {(createButtonDisabled\n                                    ?\n                                    <Spin className=\"spinner spinner-pos\"/>\n                                    :\n                                    <FontAwesomeIcon icon={faArrowRight} className=\"arr-size\" />\n                                )}\n                                </Button>\n                            </FormItem>\n                        {/* </Col> */}\n                    </Row>\n                </Form>\n            </Col>\n        </div>\n    )\n}\n\nexport default Payment\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\Payment.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Scehdule.js",
                                                                    "fileData": "import React, { useState, useEffect,useMemo } from 'react';\nimport { Row, Col, Modal ,Spin } from 'antd';\n// import * as Antd from 'antd';\n// import { useHistory } from 'react-router';\nimport styled from 'styled-components';\n// import { DatePicker } from 'antd';\n// import DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import {message} from 'antd';\nimport moment from 'moment';\nimport { Button } from 'react-bootstrap';\n// import $ from 'jquery';\nimport './Schedule.css';\nimport { openNotificationWithIcon, GAevent, consoleLog } from 'utils';\nimport mixpanel from 'mixpanel-browser';\nimport { useNotifications } from '../../../../context/notificationContext';\n// import TechImages from '../../../../components/TechImages';\nimport { useAuth } from '../../../../context/authContext';\nimport { useSocket } from '../../../../context/socketContext';\n// import Box from '../../../../components/common/Box';\nimport {\n\tStepTitle,\n\tBodyContainer,\n} from '../../ProfileSetup/steps/style';\n// import ReactTimeslotCalendar from 'react-timeslot-calendar';\nimport * as JobApi from '../../../../api/job.api';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\nimport { JobTags } from '../../../../constants';\nimport { INACTIVE_ACCOUNT_MESSAGE } from '../../../../constants';\nimport { klaviyoTrack } from '../../../../api/typeService.api';\n// import { ConsoleSqlOutlined } from '@ant-design/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaCheck, faExclamationCircle\n} from '@fortawesome/free-solid-svg-icons';\nimport Logo from 'components/common/Logo';\nimport ScheduleModal from './ScheduleModal'\nlet selectedSchedule = {}\nconst Schedule = ({\n\thandleDecline, job, setComponentToRender, jobFlowsDescriptions, setJobFlowStep, createJob, cardsInfo, totalJobs, setIsModalOpen, isTechNotFoundInSearch, hireValue,technicianId,repostJob,postAgainJobReference, showGoBackBtn, showGoBackBtnRedirection\n}) => {\n\tconsoleLog('hireValue>>>>>>>>>>Schedule'+ hireValue +' technicianId '+ technicianId);\n\tconst [errMsg, setErrMsg] = useState('')\n\tconst { createNotification, fetchNotifications } = useNotifications();\n\tconst { user } = useAuth();\n\tconst { socket } = useSocket();\n\t// const history = useHistory();\n\t//  const [myEvents, setEvents] = useState([])\n\tconst [primaryTime, setPrimaryTime] = useState(false);\n\tconst [secondryTime, setSecondaryTime] = useState(false);\n\t// const minDate = new Date();\n\tconst maxDate = new Date();\n\tconst invalids = [{\n        start: '12:00',\n        end: '13:00',\n        title: 'Lunch break',\n        type: 'lunch',\n        recurring: {\n            repeat: 'weekly',\n            weekDays: 'MO,TU,WE,TH,FR'\n        }\n    }];\n\tconst [disableButton, setDisableButton] = useState(false);\n\tconst [showModal, setShowModal] = useState(false)\n\n\tmaxDate.setDate(maxDate.getDate() + 7);\n\n\tconst primaryDateHandler = (selectedTime) => {\n\t\tif (selectedTime === undefined) {\n\t\t\treturn openNotificationWithIcon('error', 'Error', 'Preffered time slot is Needed.');\n\t\t}\n\t\tsetPrimaryTime(selectedTime);\n\t};\n\tuseEffect(()=>{\n\t\tif(user){\n\t\t\tmixpanel.track('Customer - On Schedule Job Page ', { 'Email': user.email });      \n\t\t}\n\t},[user])\n\t\n\tconst secondaryDateHandler = (selectedTime) => {\n\t\tif (selectedTime === undefined) {\n\t\t return openNotificationWithIcon('error', 'Error', 'Secondary time slot  is Needed.');\n\t\t}\n\t\tsetSecondaryTime(selectedTime);\n\t};\n\n\t/**\n\t * Validate primary and secondry time slot is not empty\n\t * @params : isVaild(Type:Boolean) : we are using use state variables in this function\n\t * @returns: true/ false const invalids = [{\n        start: '12:00',\n        end: '13:00',\n        title: 'Lunch break',\n        type: 'lunch',\n        recurring: {\n            repeat: 'weekly',\n            weekDays: 'MO,TU,WE,TH,FR'\n        }\n    }];\n\t * @author : Ridhima Dhir\n\t */\n\tconst checkIsEmptyPrimarySecondryTime = (isValid) =>{\n\t\tif (!primaryTime && !secondryTime) {\n\t\t\tsetErrMsg('Preffered time and Secondary time slot is required.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Preffered time and Secondary time slot is required.');\n\t\t\tisValid = false;\n\t\t}\n\t\tif (!primaryTime && secondryTime) {\n\t\t\tsetErrMsg('Preffered time slot is required.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Preffered time slot is required.');\n\t\t\tisValid = false;\n\t\t}\n\t\tif (primaryTime && !secondryTime) {\n\t\t\tsetErrMsg('Secondary time slot is required.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Secondary time slot is required.');\n\t\t\tisValid = false;\n\t\t}\n\t\treturn isValid \n\t}\n\n\t/**\n\t * Validate primary and secondry time\n\t * @params : isVaild(Type:Boolean) : we are using use state variables in this function \n\t * @returns : true/ false \n\t * @author : Ridhima Dhir\n\t */\n\tconst validatePrimarySecondryTimeSlot = (isValid) =>{\n\t\tconst now_time = moment().now;\n\t\tconst now_time_obj = new Date()\n\t\tconst secondryTimeInSeconds = new Date(secondryTime).setSeconds(0, 0);\n\t\tconst primaryTimeInSeconds = new Date(primaryTime).setSeconds(0, 0);\n\t\tconsoleLog(\"secondryTimeInSeconds ::: \"+parseInt(secondryTimeInSeconds) +\" primaryTimeInSeconds :::::: \"+parseInt(primaryTimeInSeconds))\n\t\tconsoleLog(\"moment >>>>>>>>>>>>>>>>>>>>>>>>> now >>>>>>>\",now_time)\n\t\tconsoleLog(\"primaryTime >>>>>>>>>>>>>>>>>>> \",moment(primaryTimeInSeconds))\n\t\tconst hours = moment.duration(moment(primaryTime).diff(now_time)).asHours();\n\t\tvar date1 = new Date(now_time_obj);\n\t\tvar date2 = new Date(primaryTime);\n\t\tvar hoursdiff = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 36e5); \n\t\t//Primary and current time should have half hour difference\n\t\tif (hoursdiff < 0.5) {\n\t\t\tsetErrMsg('Preffered time slot should be atleast half an hour from now.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Preffered time slot should be atleast half an hour from now.');\n\t\t\tisValid = false;\n\t\t}\n\t\t//Primary and secondry time cannot be same\n\t\tif (secondryTimeInSeconds === primaryTimeInSeconds) {\n\t\t\tsetErrMsg('Secondary time slot cannot be same as preffered time slot.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Secondary time slot cannot be same as preffered time slot.');\n\t\t\tisValid = false;\n\t\t}\n\t\t//Secondry time should be greater than primary time\n\t\tif (secondryTime < primaryTime) {\n\t\t\tsetErrMsg('Secondary time slot should be greater than preffered time slot.')\n\t\t\t// openNotificationWithIcon('error', 'Error', 'Secondary time slot should be greater than preffered time slot.');\n\t\t\tisValid = false;\n\t\t}\n\t\tconsoleLog(\"validatePrimarySecondryTimeSlot :::::::\"+isValid)\n\t\treturn isValid \n\t}\n\n\t/**\n\t * Validate primary and secondry time  \n\t * @params : we are using use state variables in this function as params\n\t * @returns : true/ false \n\t * @author : Ridhima Dhir\n\t */\n\tconst ScheduleJobValidation = async () => {\n\t\tlet isValid = true\n\t\tconsoleLog('primaryTime ::: '+ primaryTime);\n\t\t//Check primary and secondry time is not empty then show message and return false\n\t\tisValid = await checkIsEmptyPrimarySecondryTime(isValid)\n\n\t\t//Check user status. If not active then show message and return false\n\t\tif (user.activeStatus == false) {\n\t\t\topenNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_MESSAGE);\n\t\t\tisValid = false;\n\t\t}\n\n\t\t//Check if both time is selected by user.\n\t\t//Primary and current time should have half hour difference\n\t\t//Primary and secondry time cannot be same\n\t\t//Secondry time should be greater than primary time\n\t\tif(secondryTime && primaryTime){\n\t\t\tconsoleLog('validatePrimarySecondryTimeSlot ::: ');\n\t\t\tisValid = await validatePrimarySecondryTimeSlot(isValid)\n\t\t\tif(isValid){\n\t\t\t\tsetErrMsg(\"\")\n\t\t\t}\n\t\t}\n\t\treturn isValid\n\t}\n\n\t/**\n\t * Closes schedule modal  \t \n\t * @author : Vinit Verma\n\t */\n\tconst handleCancel = () => {\n\t\tsetShowModal(false)\n\t\t// selectedSchedule={}\n\n\t}\n\n\n\t/**\n\t * Post a schedule job\n\t * @author : Vinit Verma\n\t */\n\tconst handleConfirm = async () => {\n\n\t\tconst is_vaild = await ScheduleJobValidation()\n\t\t\tif(!is_vaild){\n\t\t\t\tconsoleLog('Validate false primary Time ::: '+ primaryTime +' and secondry Time '+ secondryTime);\n\t\t\t\treturn false\n\t\t\t}\n\t\tsetDisableButton(true)\n\t\t//This variable will contails job detail.\n\t\tlet jobStats={}\n\n\t\t//check customer is vaild and not a test customer \n\t\tconst customerTypeValid = (user.customer.customerType ? user.customer.customerType !== 'test' : true);\n\n\t\t//Open add card modal if \n\t\t// TotalJobs is grater then 1\n\t\t// CardInfo is empty\n\t\t// Customer is a vaild \n\t\tif (totalJobs >= 1 && cardsInfo == false && customerTypeValid) {\n\t\t\tconsoleLog('inside :: cards if and open add card modal');\n\t\t\tsetIsModalOpen(true);\n\t\t}\n\n\t\t//update only status and add primaryTime and secondryTime if job comming from keep searching screen. \n\t\t//Job is already created but tech not found and customer decide to change job status to schedule.\n\t\tif (isTechNotFoundInSearch) {\n\t\t\tconsoleLog('inside if isTechNotFoundInSearch:::: ' + isTechNotFoundInSearch);\n\t\t\tjobStats = await JobApi.updateJob(job.id, { primarySchedule: primaryTime, secondrySchedule: secondryTime, status: 'Scheduled' });\n\t\t}\n\n\t\t// prepare schedule job data and create / update job \n\t\tawait prepareScheduleJob(jobStats)\n\t\t\n\t}\n\n\t/**\n\t * submit schedule job\n\t * @params : we are using use state variables in this function\n\t * @returns: redirect to schedule detail page. (/dashboard?&schedule=true&jobId='+jobStats.id)\n\t * @author : Ridhima Dhir\n\t */\n\tconst createScheduleJob = async () => {\n\t\ttry{\n\t\t\t//validate schedule Job\n\t\t\tconst is_vaild = await ScheduleJobValidation()\n\t\t\tif(!is_vaild){\n\t\t\t\tconsoleLog('Validate false primary Time ::: '+ primaryTime +' and secondry Time '+ secondryTime);\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tconsoleLog(\"Users ::::::::: \"+ user.id);\n\t\t\tsetShowModal(true)\n\t\t\t// confirmation modal: If ok then create schedule job\n\t\t\t// <Modal.confirm({\n\t\t\t// \ttitle: 'Wait! Before you confirm, please make sure the times you selected are correct.',\n\t\t\t// \tokText: 'Yes',\n\t\t\t// \tcancelText: 'No',\n\t\t\t// \tclassName: 'app-confirm-modal',\n\t\t\t// \tasync onOk() {\n\t\t\t// \t\tsetDisableButton(true)\n\t\t\t// \t\t//This variable will contails job detail.\n\t\t\t// \t\tlet jobStats={}\n\n\t\t\t// \t\t//check customer is vaild and not a test customer \n\t\t\t// \t\tconst customerTypeValid = (user.customer.customerType ? user.customer.customerType !== 'test' : true);\n\n\t\t\t// \t\t//Open add card modal if \n\t\t\t// \t\t// TotalJobs is grater then 1\n\t\t\t// \t\t// CardInfo is empty\n\t\t\t// \t\t// Customer is a vaild \n\t\t\t// \t\tif (totalJobs >= 1 && cardsInfo == false && customerTypeValid) {\n\t\t\t// \t\t\tconsoleLog('inside :: cards if and open add card modal');\n\t\t\t// \t\t\tsetIsModalOpen(true);\n\t\t\t// \t\t}\n\n\t\t\t// \t\t//update only status and add primaryTime and secondryTime if job comming from keep searching screen. \n\t\t\t// \t\t//Job is already created but tech not found and customer decide to change job status to schedule.\n\t\t\t// \t\tif (isTechNotFoundInSearch) {\n\t\t\t// \t\t\tconsoleLog('inside if isTechNotFoundInSearch:::: ' + isTechNotFoundInSearch);\n\t\t\t// \t\t\tjobStats = await JobApi.updateJob(job.id, { primarySchedule: primaryTime, secondrySchedule: secondryTime, status: 'Scheduled' });\n\t\t\t// \t\t}\n\n\t\t\t// \t\t// prepare schedule job data and create / update job \n\t\t\t// \t\tawait prepareScheduleJob(jobStats)\n\t\t\t// \t},\n\t\t\t// });\n\t\t\t\n\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while submit schedule job ', { primaryTime:primaryTime, secondryTime:secondryTime, errMessage: err.message });\n\t\t\tconsoleLog('There is catch error while submit schedule job  :::: '+ err.message)\n\t\t}\n\t};\n\n\tconst view = useMemo(() => {\n        return {\n            schedule: {\n                type: 'week',\n                startDay: 0,\n                endDay: 7,\n                startTime: '09:00',\n                endTime: '22:00'\n            }\n        };\n    }, [])\n\n\n\t/**\n\t * Prepare Schedule Job States for create/ update a job\n\t * @params : scheduleJobData(Type:Object): have job fields with there values \n\t * @returns : job data \n\t * @author : Ridhima Dhir\n\t */\n\tconst prepareScheduleJobStates= (scheduleJobData) =>{\n\t\tlet scheduleDetails = {\n            'primaryTimeAvailable':true,\n            'primaryTimeExpiredAt':null,\n            'secondaryTimeAvailable':true,\n            'secondaryTimeExpiredAt':null,\n            'scheduleExpired':false,\n            'scheduleExpiredAt':null\n        }\n\t\tscheduleJobData.software = job.software.id;\n\t\tscheduleJobData.subSoftware = job.subSoftware ? job.subSoftware.id : '';\n\t\tscheduleJobData.expertise = job.expertise;\n\t\tscheduleJobData.subOption = job.subOption;\n\t\tscheduleJobData.issueDescription = job.issueDescription;\n\t\tscheduleJobData.level = 'advanced';\n\t\tscheduleJobData.estimatedTime = (job.software ? job.software.estimatedTime : '0-0');\n\t\tscheduleJobData.estimatedPrice = (job.software ? job.software.estimatedPrice : '0-0');\n\t\tscheduleJobData.status = 'Scheduled';\n\t\tscheduleJobData.customer = job.customer.id ? job.customer.id : job.customer;\n\t\tscheduleJobData.guestJob = false;\n\t\tscheduleJobData.primarySchedule = primaryTime;\n\t\tscheduleJobData.secondrySchedule = secondryTime;\n\t\tconsole.log(\"scheduleExpiredAt :::\",secondryTime, new Date(secondryTime.getTime() - 20 * 60000));\n\t\t// scheduleJobData.scheduleDetails = {... job.scheduleDetails, \n\t\t// \tscheduleExpiredAt:new Date(secondryTime.getTime() - 20 * 60000)\n\t\t// };\n\t\tscheduleJobData.scheduleDetails = {... scheduleDetails,\n            scheduleExpiredAt:new Date(secondryTime.getTime() - 20 * 60000)\n        };\n\t\t\n\t\t//if technician then update job as post again and add tech as reference\n\t\tif(technicianId){\n\t\t\tscheduleJobData.post_again = true\n\t\t\tscheduleJobData.post_again_reference_technician = technicianId\n\t\t\tscheduleJobData.post_again_reference_job = postAgainJobReference\n\t\t}\n\t\t//update hire_expert if job is alery created\n\t\tif (!job.id) {\n\t\t\tscheduleJobData.hire_expert = hireValue;\n\t\t}\n\t\treturn scheduleJobData\n\t}\n\n\t/**\n\t * create / update schedule job, create job cycle, emit socket send-schedule-alerts and create/fetch notifications \n\t * @params : \n\t * \t\tuseState params:\n\t * \t\tjobStats(Type:Object): Have job object id job already created or empty in case of new job  \n\t * @returns : redirect to schedule detail page\n\t * @author : Ridhima Dhir\n\t */\n\tconst prepareScheduleJob = async (jobStats) =>{\n\t\ttry{\n\t\t\t// will have job stat for create a new job or for update job\n\t\t\tlet scheduleJobData = {};\n\t\t\t//add job data in the object\n\t\t\tscheduleJobData = await prepareScheduleJobStates(scheduleJobData)\n\t\t\t//Check job object is not empty, jobStates length is 0/false/undefine and not a repost. \n\t\t\t//after all checks update job\n\t\t\tif (job && job.id && !jobStats.length && !repostJob) {\n\t\t\t\tconsoleLog(\" job update:::::::::::\"+ job.id)\n\t\t\t\t//Update job if job is alreay created \n\t\t\t\tjobStats = await JobApi.updateJob(job.id, scheduleJobData);\n\t\t\t} \n\n\t\t\t//Check job object is 0/false/undefine or job is repost by customer.\n\t\t\t//(Repost case can be created after click on (Post Again button) job form pending jobs detail page)\n\t\t\tif (!job.id || repostJob) {\n\t\t\t\tconsoleLog('new Job:::: ');\n\t\t\t\t//created new Job\n\t\t\t\tjobStats = await saveScheduleJob(scheduleJobData)\n\t\t\t}\n\t\t\tconsoleLog('new Job:::: return '+ jobStats.id);\n\t\t\tsetTimeout(async () => {\n\t\t\t\tconsoleLog('new Job:::: return inside'+ jobStats.id);\n\t\t\t\tmixpanel.identify(user?.email);\n\t\t\t\tmixpanel.track('Customer - Submit Button on job schedule page.', { JobId: jobStats.id });\n\n\t\t\t\t//call notification function\n\t\t\t\tawait emitSocketCreateFetchNotification(jobStats)\n\t\t\t\tconsoleLog(\"after send-schedule-alerts :::::::::::\")\n\t\t\t\t//call add new job cycle function\n\t\t\t\tawait addJobCycle(jobStats)\n\t\t\t\tsetDisableButton(false)\n\t\t\t\t//redirect schedule job creating job\n\t\t\t\twindow.location.href = '/dashboard?&scheduleJobId='+jobStats.id;\n\n\t\t\t}, 1000);\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while prepare schedule job', { jobStats:jobStats, errMessage: err.message });\n\t\t\tconsoleLog('There is catch error while prepare schedule job  :::: '+ err.message)\n\t\t}\n\t}\n\n\t\n\n\t/**\n\t * create new schedule job and add klaviyoTrack\n\t * @params : scheduleJobData(Type:Object): have job fields with there values\n\t * @returns : job details\n\t * @author : Ridhima Dhir\n\t */\n\tconst saveScheduleJob = async (scheduleJobData) =>{\n\t\ttry{\n\t\t\t//create job by hitting api\n\t\t\tconst newSecheduleJob = await createJob(scheduleJobData);\n\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n    \t\t// GAevent('Conversion','scheduled_job','Conversion',scheduleJobData.customer)\n\t\t\tconsole.log(\"after save :::: \", newSecheduleJob)\n\n\t\t\t//prepare klaviyoStat object for klaviyo track api;\n\t\t\tif(user?.customer?.customerType === 'live'){\n\t\t\t\tconst klaviyoStat = {\n\t\t\t\t\temail: user?.email,\n\t\t\t\t\tevent: 'Scheduled Jobs',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t\t\t$last_name: user?.lastName,\n\t\t\t\t\t\t$job: newSecheduleJob?.id,\n\t\t\t\t\t\t$total_jobs: totalJobs,\n\t\t\t\t\t\t$first_job: false,\n\t\t\t\t\t\t$software_name: newSecheduleJob?.software?.name,\n\t\t\t\t\t\t$primary_schedule: scheduleJobData?.primarySchedule,\n\t\t\t\t\t\t$secondry_schedule: scheduleJobData?.secondrySchedule,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\t//save record in klaviyo for tracking.\n\t\t\t\tawait klaviyoTrack(klaviyoStat);\n\t\t\t};\n\t\t\t//return newly created job details\n\t\t\treturn newSecheduleJob\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while creating schedule job', { scheduleJobData: scheduleJobData, errMessage: err.message });\n\t\t\tconsoleLog('There is catch error while creating schedule job  :::: '+ err.message)\n\t\t}\n\t}\n\n\t/**\n\t * create job cycle entry for the job\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\tconst addJobCycle = async (jobStats)=> {\n\t\ttry{\n\t\t\t//job cycle tag should we \"SCHEDULE_POST\"\n\t\t\tlet Tag = JobTags.SCHEDULE_POST;\n\t\t\t// but check job states have values and job is transferred then update it as \"SCHEDULE_POST_TRANSFER\"\n\t\t\tif(jobStats && jobStats.is_transferred && jobStats.is_transferred == true ){\n\t\t\t\t// add tag \"SCHEDULE_POST_TRANSFER\" in case of trasfer\n\t\t\t\tTag = JobTags.SCHEDULE_POST_TRANSFER;\n\t\t\t}\n\t\t\tawait JobCycleApi.create(Tag, jobStats.id)\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while creating job cycle job', { jobStats: jobStats, errMessage: err.message });\n\t\t\tconsoleLog('There is catch error while creating job cycle job  :::: '+ err.message)\n\t\t}\n\t}\n\n\t/**\n\t * emit send-schedule-alerts socket and create / fetch notification customer notifications\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\tconst emitSocketCreateFetchNotification = async (jobStats) =>{\n\t\ttry{\n\t\t\tconsole.log(\"send-schedule-alerts :::::::::::\")\n\t\t\t//Notification for customer\n\t\t\tconst notificationData = {\n\t\t\t\tuser: user.id,\n\t\t\t\tjob: jobStats.id,\n\t\t\t\tread: false,\n\t\t\t\tactionable: false,\n\t\t\t\ttitle: 'We are finding a technician for you. We will inform you when we find the technician',\n\t\t\t\ttype: 'Scheduled Job',\n\t\t\t};\n\t\t\tconsole.log(\"notificationData ::::::::\", notificationData)\n\t\t\tawait createNotification(notificationData);\n\t\t\tawait fetchNotifications({ user: user.id });\n\n\t\t\t// call send-schedule-alerts socket from backend.\n\t\t\t// It will find available techs and send alerts by sms/email/notification\n\t\t\tsocket.emit('send-schedule-alerts', {\n\t\t\t\tjobId: jobStats.id,\n\t\t\t\tcustomerTimezone: user.timezone,\n\t\t\t\tjobObj: jobStats,\n\t\t\t\tprimaryTime,\n\t\t\t\tsecondryTime,\n\t\t\t\tphoneNumber:user.customer.phoneNumber,\n\t\t\t\tcustomerName:user.firstName,\n\t\t\t\tcustomerEmail:user.email,\n\t\t\t\ttechnicianId:technicianId,\n\t\t\t});\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n\t\t\tconsoleLog('There is catch error while create/fetch notification  :::: '+ err.message)\n\t\t}\n\t}\n\n\tconst getSundays = () => {\n\t\tconst y = new Date().getFullYear();\n\t\tconst A = [];\n\t\tconst D = new Date(y, 0, 1);\n\t\tconst day = D.getDay();\n\t\tif (day != 0) D.setDate(D.getDate() + (7 - day));\n\t\tA[0] = new Date(D);\n\t\twhile (D) {\n\t\t\tD.setDate(D.getDate() + 7);\n\t\t\tif (D.getFullYear() != y) return A;\n\t\t\tA.push(new Date(D));\n\t\t}\n\t\treturn A;\n\t};\n\n\tconst returnIcon = ()=>{\n\t\treturn <FontAwesomeIcon icon={faCheck} />\n\t}\n\tconst handleCellClick = (event,ist)=>{\n\t\ttry{\n\t\t\tsetErrMsg('')\n\t\t\tlet now_time_obj = new Date()\n\t\t\tlet date = new Date(event.date)\n\t\t\tlet keysLength = Object.keys(selectedSchedule).length\n\t\t\tif(keysLength === 0 && date > now_time_obj){\n\t\t\t\tselectedSchedule['primary'] = date.getTime()\n\t\t\t\tsetPrimaryTime(moment(date))\n\t\t\t\tevent.target.classList.add(\"primary-border-class\")\n\t\t\t\tevent.target.innerHTML =`<i style=\"font-size:24px; color:#01D4D5\"  class=\"fa\">&#xf00c;</i>`\n\t\t\t}\n\n\t\t\tif(keysLength > 0 && keysLength < 2 && date.getTime() !== selectedSchedule['primary']){\n\t\t\t\tif(date.getTime() < selectedSchedule['primary']){\n\t\t\t\t\tsetErrMsg('Secondary time should be greater than primary time')\n\t\t\t\t\treturn \n\t\t\t\t\t// openNotificationWithIcon(\"error\",\"Error\",\"Secondary time should be greater than primary time\")\n\t\t\t\t}\n\n\t\t\t\tselectedSchedule['secondry'] = date.getTime()\n\t\t\t\tsetSecondaryTime(date)\n\t\t\t\tevent.target.classList.add(\"secondry-border-class\")\n\t\t\t\tevent.target.innerHTML =`<i style=\"font-size:24px; color:#293742\"  class=\"fa\">&#xf00c;</i>`\n\t\t\t}\n\n\t\t\tif(keysLength === 2  && selectedSchedule['secondry'] === date.getTime()){\n\t\t\t\tdelete selectedSchedule['secondry']\n\t\t\t\tevent.target.classList.remove(\"secondry-border-class\")\n\t\t\t\tevent.target.innerHTML =``\n\t\t\t\tsetSecondaryTime(null) \n\t\t\t}\n\t\t\tif(keysLength === 1  && selectedSchedule['primary'] === date.getTime()){\n\t\t\t\tdelete selectedSchedule['primary']\n\t\t\t\tevent.target.classList.remove(\"primary-border-class\")\n\t\t\t\tevent.target.innerHTML =``\n\t\t\t\tsetPrimaryTime(null)\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in handleCellClick\",err)\n\t\t}\n\t}\n\n\t/**\n\t * Checking Geeker Availability of time for datetimepicker time values\n\t * @params = ''\n\t * @response : Will check if the job post time is between 9am to 9pm (EDT) and returns boolean value to disable or enable time values in datepicker.\n\t * @author : Manibha\n\t */\n\n\tconst filterPassedTime = (time) => {\n\t\tconst currentDate = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));\n\t\tconst selectedDate = new Date(time.toLocaleString('en-US', { timeZone:'America/New_York' }));\n\t\tconst workingHours = selectedDate.getHours();\n\t\tconst currentWorkingHours = currentDate.getHours();\n\n\t\tif (workingHours > 21 || workingHours < 9) {\n\t\t\t\treturn false        \n\t\t}else{\n\t\t\t\tif(currentWorkingHours === workingHours){\n\t\t\t\t\treturn false\n\t\t\t\t}else{\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t}\n\t};\n\n\tconst getSaturdays = () => {\n\t\tconst y = new Date().getFullYear();\n\t\tconst A = [];\n\t\tconst D = new Date(y, 0, 1);\n\t\tconst day = D.getDay();\n\t\tif (day != 6) D.setDate(D.getDate() + (7 - day));\n\t\tA[0] = new Date(D);\n\t\twhile (D) {\n\t\t\tD.setDate(D.getDate() + 7);\n\t\t\tif (D.getFullYear() != y) return A;\n\t\t\tA.push(new Date(D));\n\t\t}\n\t\treturn A;\n\t};\n\tconst allSunday = getSundays();\n\tconst allSaturday = getSaturdays();\n\tconst excludeDates = allSunday.concat(allSaturday);\n\n\tfunction setback() {\n\t\tif(showGoBackBtnRedirection){\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobAlivePage'])\n\t\t}else{\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t}\n\t}\n\n\treturn (\n\t\t<Container span={24} className=\"select-job-container find-tecnhician-container font-nova\">\n\n\t\t\t<Modal className=\"app-confirm-modal modal-container\" closable={false}  \n\t\t\tfooter={null} \n\t\t\tvisible={showModal} \n\t\t\t// selectedSchedule={selectedSchedule}\n\t\t\t>\n\t\t\t{/* ]} visible={showModal} onOk={handleOk} > */}\n\t\t\t{ScheduleModal(selectedSchedule, handleCancel, handleConfirm)}\n\t\t\t</Modal>\n\n\t\t\t<Logo user={user}/>\n\t\t\t<StepTitle className=\"margin-bot-0 job-heading-text\">We'll schedule this for a time that suits you.</StepTitle>\n\t\t\t<div className=\"select-box-labels text-centre mb-4 \">\n                <span>Select the best time for a Geeker to help you with your issue.</span>\n            </div>\n\t\t\t<BodyContainer span={24} className=\"select-job-body pt-0 pb-0 bg-tr \">\n\t\t\t\t<Row className=\"d-flex flex-column mb-4\">\n\n\t\t\t\t\t<Col span={12} className=\"mx-auto mb-2 \" >\n\t\t\t\t\t\t<span className=\"hg-text\"> Please choose two time preferences </span>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={18} className=\"mx-auto\">\n\t\t\t\t\t\t<span className=\"\"> Please select two time slots in the event your technician is unavailable at the requested time. </span>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row span={24}>\n\t\t\t\t\t{/* <Eventcalendar\n\t\t            theme=\"ios\" \n\t\t            themeVariant=\"light\"\n\t\t            onCellClick = {(event,ist)=>{handleCellClick(event,ist)}}\n\t\t            view = {view}\n\t\t            onPageChange = {(event, inst) =>{selectedSchedule = {}}}\n\t\t            allDayText = {''}\n\t\t\t\t\ttimeFormat=\"hh:mm A\"\n\t\t\t\t\t// controls={['time']}\n\t\t       /> */}\n\t\t\t\t</Row>\n\t\t\t\t<Row span={24}>\n\t\t\t\t\t<Col className=\"col-7 d-flex justify-content-start align-items-center\">\n\t\t\t\t\t\t{errMsg !== \"\" && \n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faExclamationCircle} style={{color:'red'}} />\n\t\t\t\t\t\t\t{/* <FontAwesomeIcon icon=\"fa-solid fa-circle-exclamation\" /> */}\n\t\t\t\t\t\t\t<span className='errText'>{errMsg}</span>\n\t\t\t\t\t\t</div>}\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col className=\"float-right col-5 px-0\">\n\t\t\t\t\t\t<div className='d-flex'>\n\t\t\t\t\t\t\t{showGoBackBtn && <Button type=\"back\" onClick={setback} title=\"Go back to the job details page\" className=\"btn font-nova float-left go-back-btn ml-3 min-height\">\n\t\t\t\t\t\t\t\tGo Back\n\t\t\t\t\t\t\t</Button>}\n\t\t\t\t\t\t\t<Button onClick={createScheduleJob} className=\"btn app-btn app-btn float-right new-design-btn\" disabled={ Object.keys(selectedSchedule).length < 2 ? true :false || disableButton}>\n\t\t\t\t\t\t\t\t{disableButton ? <Spin className=\"spinner\" /> : \"Schedule Now\"}\n\t\t\t\t\t\t\t\t{ Object.keys(selectedSchedule).length < 2 ? \"\" :<span />}\n\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Col>\n\n\t\t\t\t</Row>\n\n\n\t\t\t\t\n\t\t\t\t{/*<Box className=\"select-job-body find-technician-screen\">\n\t\t\t\t\t\n\t\t\t\t\t<Summary className=\"light-bg radius-4\">\n\t\t\t\t\t\t<SummaryItem>\n\t\t\t\t\t\t\t<ItemLabel className=\"card-label dark text-left\">Job Summary</ItemLabel>\n\t\t\t\t\t\t\t<Description className=\"text-left\">\n\t\t\t\t\t\t\t\t{job.issueDescription}\n\t\t\t\t\t\t\t</Description>\n\t\t\t\t\t\t</SummaryItem>\n\t\t\t\t\t\t<SummaryItem style={{ textAlign: 'right' }}>\n\t\t\t\t\t\t\t<ItemLabel className=\"card-label dark\">duration</ItemLabel>\n\t\t\t\t\t\t\t<Item>\n\t\t\t\t\t\t\t\t{job && job.software.estimatedTime ? `${job.software.estimatedTime} mins` : '25 mins'}\n\t\t\t\t\t\t\t</Item>\n\t\t\t\t\t\t</SummaryItem>\n\t\t\t\t\t</Summary>\n\t\t\t\t\t<Description className=\"text-left\">Please select your preferred time slot for a technician to reach you.</Description>\n\t\t\t\t\t<div className=\"text-left\">\n\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\tselected={primaryTime}\n\t\t\t\t\t\t\tonChange={primaryDateHandler}\n\t\t\t\t\t\t\tminDate={minDate}\n\t\t\t\t\t\t\tmaxDate={maxDate}\n\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\tfilterTime={filterPassedTime}\n\t\t\t\t\t\t\tdateFormat=\"MM/dd/yyyy, h:mm aa\"\n\t\t\t\t\t\t\ttimeIntervals={15}\n\t\t\t\t\t\t\texcludeDates={excludeDates}\n\t\t\t\t\t\t\tplaceholderText=\"Select date\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>primaryTime\n\t\t\t\t\t<Description className=\"text-left\">Select a secondary time slot</Description>\n\t\t\t\t\t<div className=\"text-left\">\n\n\n\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\tselected={secondryTime}\n\t\t\t\t\t\t\tonChange={secondaryDateHandler}\n\t\t\t\t\t\t\tminDate={minDate}\n\t\t\t\t\t\t\tmaxDate={maxDate}\n\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\tdateFormat=\"MM/dd/yyyy, h:mm aa\"\n\t\t\t\t\t\t\ttimeIntervals={15}\n\t\t\t\t\t\t\tfilterTime={filterPassedTime}\n\t\t\t\t\t\t\texcludeDates={excludeDates}\n\t\t\t\t\t\t\tplaceholderText=\"Select date\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Antd.Divider />\n\t\t\t\t\t<Row style={{ justifyContent: 'flex-end' }}>\n\t\t\t\t\t\t<Button type=\"back\" onClick={() => setComponentToRender('jobDetailsView')} className=\"btn app-btn app-btn app-btn-light-blue float-right mr-15\">\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button onClick={createScheduleJob} className=\"btn app-btn app-btn job-accept-btn float-right\">\n\t\t\t\t\t\t\t{disableButton ? <Spin /> : \"Submit\"}\n\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Row>\n\t\t\t\t</Box>*/}\n\t\t\t</BodyContainer>\n\t\t</Container>\n\t);\n};\n\nconst Container = styled(Col)`\n\tdisplay: flex !important;\n\twidth: 100%;\n\tborder-radius: 10px;\n\tmargin-top: 20px;\n\tflex-direction: column;\n`;\n// const Summary = styled.div`\n// \tdisplay: flex;\n// \tbackground-color: #f4f4f4;\n// \tpadding: 30px;\n// `;\n\n// const SummaryItem = styled.div`\n// \twidth: 50%;\n// `;\n\n// const Description = styled.div`\n// \tfont-size: 18px;\n// \tfont-weight: 600;\n// \tmargin: 15px 0;\n// \tcolor:#000;\n// `;\n\n// const ItemLabel = styled.div`\n// \tcolor: #8c8c8c;\n// \tfont-weight: 700;\n// \topacity: 0.4;\n// \ttext-transform: uppercase;\n// \tmargin-bottom: 20px;\n// `;\n\n// const Item = styled.div`\n// \tfont-weight: 700;\n// \ttext-align: right;\n// \tfont-size: 24px;\n// \tcolor:#000;\n// `;\n// const FileButtonContainer = styled.button`\n// \tdisplay: flex;\n// \tjustify-content: flex-end;\n// \tmargin-top: 0px;\n// \theight: 60px;\n// \tline-height: 60px;\n// \tpadding: 0 15px;\n// \talign-items: center;\n// \tfont-size: 22px;\n// \tborder: 0;\n// \tfloat: right;\n// `;\n// const SystemIcon = styled.img`\n// \twidth: 35px;\n// \tpadding: 5px;\n// `;\nexport default Schedule;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\Scehdule.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Schedule.css",
                                                                    "fileData": ".anticon-close-circle svg{\n\tvertical-align: initial;\n}",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\Schedule.css"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ScheduleModal.js",
                                                                    "fileData": "import { StepTitle } from \"pages/Customer/ProfileSetup/steps/style\"\nimport React, {useState} from \"react\"\nimport {Button} from 'react-bootstrap';\nimport { Spin } from 'antd';\n\nconst ScheduleModal = (selectedSchedule, handleCancel, handleConfirm) => {\n\n    console.log(\"My console\", new Date(selectedSchedule.primary).getHours())\n\n\n    /**\n     * Converts 24 hrs format time to 12 hrs format time\n     * @params : 24 hrs format time\n     * @return : 12 hrs format time\n     * @author : Vinit (From internet)\n     **/\n    function convert24hrsTo12hrsformat (time) {\n        // Check correct time format and split into components\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n    \n        if (time.length > 1) { // If time format correct\n          time = time.slice (1);  // Remove full string match value\n          time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM\n          time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        return time.join (''); // return adjusted time or original string\n    }\n    \n    const [confirmButtonDisabled, setconfirmButtonDisabled] = useState(false);\n    const monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEPT', 'OCT', 'NOV', 'DEC']\n\n    /**\n     * when confirm click then create and update job\n     * @author : Vinit (From internet)\n     **/\n    const handleConfirmClick = async () =>{\n        setconfirmButtonDisabled(true)\n        await handleConfirm()\n        handleCancel()\n        setTimeout(()=>{setconfirmButtonDisabled(false)},2000)\n    }\n\n    return (<div className=\"font-nova\">\n            <StepTitle className=\"job-heading-text margin-bottom\">Your selected times are:</StepTitle>\n            <div className=\"d-flex justify-content-around margin-bottom\">\n\n                <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                    <div className=\"outerMostDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center mb-3\">\n                        <div className=\"centerDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center\">\n                            <div className=\"innerMostDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center\">\n                                <span className=\"bold-26\">1</span>\n                            </div>\n                        </div>\n                    </div>\n                    <span className=\"pri-sec-time-heading\">PRIMARY TIME</span>\n                    <span className=\"medium-font\">\n                        {\n                            new Date(selectedSchedule.primary).getDate()+ \", \" +\n                            monthNames[new Date(selectedSchedule.primary).getMonth()]+ \" \" +\n                            new Date(selectedSchedule.primary).getFullYear()\n                        }\n                    </span>\n                    <span className=\"medium-font\">\n                        {\n                            convert24hrsTo12hrsformat (String(new Date(selectedSchedule.primary).getHours()) + ':00')\n                            +\" - \"+\n                            convert24hrsTo12hrsformat (String(new Date(selectedSchedule.primary).getHours()) + ':30')\n                        }\n                    </span>\n                </div>\n\n                <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                    <div className=\"outerMostDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center mb-3\">\n                        <div className=\"centerDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center\">\n                            <div className=\"innerMostDiv green-bg-color border-radius-50 d-flex justify-content-center align-items-center\">\n                                <span className=\"bold-26\">2</span>\n                            </div>\n                        </div>\n                    </div>\n                    <span className=\"pri-sec-time-heading\">SECONDARY TIME</span>\n                    <span className=\"medium-font\">\n                        {\n                            new Date(selectedSchedule.secondry).getDate()+ \", \" +\n                            monthNames[new Date(selectedSchedule.secondry).getMonth()]+ \" \" +\n                            new Date(selectedSchedule.secondry).getFullYear()\n                        }\n                    </span>\n                    <span className=\"medium-font\">\n                        {\n                            convert24hrsTo12hrsformat (String(new Date(selectedSchedule.secondry).getHours()) + ':00')\n                            +\" - \"+\n                            convert24hrsTo12hrsformat (String(new Date(selectedSchedule.secondry).getHours()) + ':30')\n                        }\n                    </span>\n                </div>\n                \n            </div>\n            \n            <div className=\"d-flex justify-content-around\">\n                \n                    <Button className ={\"grey-btn-color decline-btn app-btn sm-btn-back\"} title=\"Confirm schedule time\" onClick={handleCancel} disabled={confirmButtonDisabled} >\n                    Decline\n                    </Button>\n                \n                    <Button className ={\"app-btn job-accept-btn min-width-0 create-acc-btn decline-btn\"} title=\"Confirm schedule time\" onClick={handleConfirmClick} disabled={confirmButtonDisabled}>\n                        <span></span>\n                        {(confirmButtonDisabled \n                            ?\n                            <Spin className=\"spinner\"/>\n                            :\n                            <>Confirm</>\n                        )}\n                        \n                    </Button>\n                \n            </div>\n\n        </div>)\n}\n\nexport default ScheduleModal",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobCreate\\steps\\ScheduleModal.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "JobProgress",
                                                    "children": [
                                                        {
                                                            "type": "folder",
                                                            "name": "components",
                                                            "children": [
                                                                {
                                                                    "type": "folder",
                                                                    "name": "Footer",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Footer1.js",
                                                                            "fileData": "import { Progress, Row, Col } from 'antd';\nimport React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { getFormattedTime, getFullName } from '../../../../../utils';\nimport { useJob } from '../../../../../context/jobContext';\n\nconst CustomerInfoSection = () => {\n  const { job, jobTime } = useJob();\n\n  return (\n    <InfoSectionStyled>\n      <Col xs={24} sm={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Your tech</InfoSectionTitleStyled> <br />\n          <InfoSectionContent>{job && job.technician && getFullName(job.technician.user)}</InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={10}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Issue</InfoSectionTitleStyled> <br />\n          <InfoSectionContent style={{ fontWeight: 'normal' }}>\n            {job && job.issueDescription}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Estimated Time</InfoSectionTitleStyled> <br />\n          <InfoSectionContent>\n            {job && job.duration\n              ? `${job.duration.from}-${job.duration.to}`\n              : 0}{' '}\n            mins\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={6}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <TimerStatusStyled>Paused</TimerStatusStyled>\n          <CircularProgress\n            type=\"circle\"\n            width=\"80px\"\n            percent={80}\n            format={() => getFormattedTime(jobTime)}\n            strokeColor=\"#fff\"\n            strokeLinecap=\"#908d8d\"\n          />\n        </div>\n      </Col>\n    </InfoSectionStyled>\n  );\n};\n\nconst InfoSectionStyled = styled(Row)`\n  background-color: #464646;\n  color: white;\n  padding: 20px;\n`;\n\nconst InfoSectionTitleStyled = styled.h4`\n  /* text-transform: uppercase; */\n  color: lightgray;\n  font-weight: 500;\n`;\n\nconst InfoSectionItemStyled = styled.div`\n  margin: 0px 20px 15px;\n  // min-width: fit-content;\n`;\n\nconst TimerStatusStyled = styled.h3`\n  color: white;\n  min-width: fit-content;\n  margin: 20px;\n  font-weight: 600;\n`;\n\nconst CircularProgress = styled(Progress)`\n  .ant-progress-inner:not(.ant-progress-circle-gradient)\n    .ant-progress-circle-path {\n    stroke: white;\n  }\n\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\n\nconst InfoSectionContent = styled.div`\n  font-weight: 600;\n`;\n\nCustomerInfoSection.propTypes = {};\n\nexport default memo(CustomerInfoSection);\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\components\\Footer\\Footer1.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Footer2.js",
                                                                            "fileData": "import { CloseOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport { Progress } from 'antd';\nimport React, { memo, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../../components/StepButton';\nimport { getFullName, getFormattedTime } from '../../../../../utils';\nimport { useJob } from '../../../../../context/jobContext';\nimport { useSocket } from '../../../../../context/socketContext';\n\nlet time = 0;\nlet intervalId;\n\nconst CustomerInfoSection = ({ setCurrentStep }) => {\n  const { jobTime, setJobTime, job } = useJob();\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    socket.on('job-completed', () => {\n      setCurrentStep(6);\n    });\n\n    time = jobTime;\n\n    intervalId = setInterval(() => {\n      time += 1;\n      setJobTime(time);\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [jobId, jobTime, setCurrentStep, setJobTime, socket]);\n\n  return (\n    <InfoSectionStyled>\n      <div style={{ display: 'flex', maxWidth: '50%' }}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Your Tech</InfoSectionTitleStyled>\n          {' '}\n          <br />\n          <InfoSectionContent>{(job && job.technician) && getFullName(job.technician.user)}</InfoSectionContent>\n        </InfoSectionItemStyled>\n        <InfoSectionIssueNameStyled>\n          <InfoSectionTitleStyled>Issue</InfoSectionTitleStyled>\n          {' '}\n          <br />\n          <InfoSectionContent style={{ fontWeight: 'normal' }}>\n            {job && job.issueDescription}\n          </InfoSectionContent>\n        </InfoSectionIssueNameStyled>\n      </div>\n      <div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <TimerStatusStyled>Timer</TimerStatusStyled>\n          <CircularProgress\n            type=\"circle\"\n            width=\"80px\"\n            percent={80}\n            format={() => getFormattedTime(jobTime)}\n            strokeColor=\"#fff\"\n            strokeLinecap=\"#908d8d\"\n          />\n          <StepButtonStyled>\n            <CloseOutlined />\n            End Session\n          </StepButtonStyled>\n        </div>\n      </div>\n    </InfoSectionStyled>\n  );\n};\n\nconst InfoSectionStyled = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: ${props => props.theme.secondary};\n  color: white;\n  padding: 20px;\n`;\n\nconst InfoSectionTitleStyled = styled.h4`\n  /* text-transform: uppercase; */\n  color: lightgray;\n  font-weight: 500;\n`;\n\nconst InfoSectionIssueNameStyled = styled.div`\n  /* max-width: 60%; */\n`;\n\nconst InfoSectionItemStyled = styled.div`\n  margin: 0px 20px;\n  min-width: fit-content;\n`;\n\nconst TimerStatusStyled = styled.h3`\n  color: white;\n  min-width: fit-content;\n  margin: 20px;\n  font-weight: 600;\n`;\n\nconst CircularProgress = styled(Progress)`\n  .ant-progress-inner:not(.ant-progress-circle-gradient)\n    .ant-progress-circle-path {\n    stroke: white;\n  }\n\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\n\nconst InfoSectionContent = styled.span`\n  font-weight: 600;\n`;\n\nconst StepButtonStyled = styled(StepButton)`\n  &:hover {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n  &:active {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n  &:focus {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n`;\n\nCustomerInfoSection.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(CustomerInfoSection);\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\components\\Footer\\Footer2.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport Footer2 from './Footer2';\nimport Footer from './Footer1';\n\nconst SelectFooter = ({ currentStep, setCurrentStep }) => {\n  const getFooter = () => {\n    if (currentStep === 4) {\n      return <Footer2 setCurrentStep={setCurrentStep} />;\n    }\n    return <Footer />;\n  };\n  return <div>{getFooter()}</div>;\n};\n\nSelectFooter.propTypes = {\n  currentStep: PropTypes.number,\n  setCurrentStep: PropTypes.func,\n};\n\nexport default SelectFooter;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\components\\Footer\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Sidebar.js",
                                                                    "fileData": "import React, { memo, useState } from 'react';\nimport TempConfirm from '../steps/Confirm';\nimport ConfirmIssueSummary from '../steps/ConfirmIssueSummary';\nimport ConfirmTechMatch from '../steps/ConfirmTechMatch';\nimport CustomerJobInProgress from '../steps/CustomerJobInProgress';\nimport CustomerTimeApproval from '../steps/CustomerTimeApproval';\nimport SummaryCompleted from '../steps/SummaryCompleted';\nimport TechMatchConfirmed from '../steps/TechMatchConfirmed';\nimport WaitForTechSummary from '../steps/WaitForTechSummary';\n\nconst CustomerSidebar = ({ currentStep, setCurrentStep, invited }) => {\n  const [updatedEstimateTime, setUpdatedEstimateTime] = useState(0);\n  const [updatedIssue, setUpdatedIssue] = useState('');\n  const [solutions, setSolutions] = useState([]);\n\n  const getStep = () => {\n    if (currentStep === 0) {\n      // When Tech receives the email\n      return <ConfirmTechMatch setCurrentStep={setCurrentStep} invited={invited} />;\n    }\n    if (currentStep === 1) {\n      // When tech confirms the match, it should be redirected to Time Accurate screen\n      return (\n        <TechMatchConfirmed\n          setCurrentStep={setCurrentStep}\n          onUpdateEstimateTime={setUpdatedEstimateTime}\n          onUpdateIssue={setUpdatedIssue}\n        />\n      );\n    }\n    if (currentStep === 2) {\n      // When tech confirms time is accurate, He should be redirected to confirm Job Summary screen\n      return (\n        <CustomerTimeApproval\n          setCurrentStep={setCurrentStep}\n          estimateTime={updatedEstimateTime}\n        />\n      );\n    }\n    if (currentStep === 3) {\n      //  When tech match is not confirmed, he will be redirected to wrong category page\n      return (\n        <ConfirmIssueSummary\n          setCurrentStep={setCurrentStep}\n          issue={updatedIssue}\n        />\n      );\n    }\n    if (currentStep === 4) {\n      // If tech selects wrong category option from Wrong category screen, He should be redirect to select right category.\n      return <ConfirmTechMatch setCurrentStep={setCurrentStep} invited={true} />;\n    }\n    if (currentStep === 5) {\n      return <TempConfirm setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 6) {\n      return (\n        <WaitForTechSummary\n          setCurrentStep={setCurrentStep}\n          setSolutions={setSolutions}\n        />\n      );\n    }\n    if (currentStep === 7) {\n      return (\n        <SummaryCompleted\n          setCurrentStep={setCurrentStep}\n          solutions={solutions}\n        />\n      );\n    }\n    return <div />;\n  };\n  return <div>{getStep()}</div>;\n};\n\nexport default memo(CustomerSidebar);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\components\\Sidebar.js"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { memo, useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport * as DOM from 'react-router-dom';\nimport { Container, Row, Col, Button,Alert } from 'react-bootstrap';\nimport { getIdFromJobId,cardFullFillTimer,chargeMeetingInfoPopup,lastMinuteTimerPoper,cardAlreadyFilledTimer,showMeetingNotification,clearAllTimeOuts } from 'utils';\nimport Timer  from 'react-compound-timer';\nimport { useJob } from '../../../context/jobContext';\nimport { useUser } from '../../../context/useContext';\nimport { useJitsiMeet } from '../../../context/jitsiMeetContext';\n// import StepButton from '../../../components/StepButton';\nimport {isMobile} from 'react-device-detect';\nimport Box from '../../../components/common/Box';\nimport { useSocket } from '../../../context/socketContext';\nimport { endConferenceCall } from '../../../api/serviceProvider.api';\nimport { CopyOutlined } from '@ant-design/icons';\nimport ConfirmTechMatch from './steps/ConfirmTechMatch';\nimport { useHistory } from 'react-router';\nimport * as JobApi from '../../../api/job.api';\nimport mixpanel from 'mixpanel-browser';\nimport Loader from '../../../components/Loader';\n// import ExtensionModal from '../../Technician/JobAlert/steps/ExtensionModal';\nimport PinModal from '../../Technician/JobAlert/steps/PinModal';\n// import LeftSidebar from '../../../components/Sidebar/LeftSidebar';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDesktop, faShareSquare, faPaperPlane, faPhone, faPhoneAlt ,faVolumeUp} from '@fortawesome/free-solid-svg-icons';\nimport {useServices} from '../../../context/ServiceContext';\nimport * as JobService from \"../../../api/job.api\";\nimport logo from '../../../assets/images/logo.png';\nimport style from 'styled-components';\nimport { Progress, Spin, Modal,notification } from 'antd';\nimport { JITSI_URL } from '../../../constants';\nimport {openNotificationWithIcon} from '../../../utils';\nimport  notifySound from '../../../assets/sounds/notification.mp3';\nimport * as WebSocket from '../../../api/webSocket.api';\nimport * as CustomerApi from '../../../api/customers.api';\nimport LANDING_PAGE_URL from '../../../constants';\nimport CustomerCard from '../../../pages/Customer/Profile/steps/customerCard';\nimport $ from 'jquery';\nlet calledTechnician = false\nlet api = null;\nlet new_on_page = true;\nconst time = { seconds: 0, minutes: 0, hours: 0 };\nlet cardFunctionCalled = false;\nlet calledInterval = false\nlet secs = 0\nlet audio = new Audio(notifySound)\nlet spareTimer = false\nlet freeMin = 0\nlet lastInterval = false\nlet refreshStartTimer = false\nlet fetchJobId = null;\nlet timerCalled = false\nvar seconds_remaining  = 0\nlet sameSeconds = 0\n\nlet popupTimerAlreadyCalled = false\n\n\nconst CustomerJobProgress = () => {\n\tconst [ratePerTime,setratePerTime] = useState(0);\n\tconst [MainInvitation,setInvitation] = useState(false);\n\tconst [invitedNumber,setInvitedNumber] = useState('')\n\tconst history = useHistory();\n\tconst currentStep = 0;\n\tconst [customerWantsToAddCard,setCustomerWantsToAddCard] = useState(null)\n\tconst [newCardAdded, setNewCardAdded] = useState(false);\n\tconst { socket } = useSocket();\n\tconst [secondsToRestartTimer,setSecondsToRestartTimer] = useState(0)\n\tconst [meetingJob, setMeetingJob] = useState({});\n\tconst [softwareSettings, setSoftwareSettings] = useState({});\n\t// const [isExtensionModalOpen, setIsExtensionModalOpen] = useState(false);\n\tconst pinCode = '';\n\tconst [customerContiuedHisFirstMeeting ,setCustomerContiuedHisFirstMeeting] = useState(false)\n\tconst [isOpen, setIsOpen] = useState(false);\n\t// const [extension,setExtension] = useState('')\n\tconst { setJobTime, fetchJob,method,setMethod,job,updateJob, getTotalJobs, getTotalPaidJobs } = useJob();\n\tconst [isModalOpen,setIsModalOpen] = useState(null)\n\tconst { user } = useUser();\n\tconst { getJitsiMeet, createMeeting, meetingInfo, meetingId, isLoading } = useJitsiMeet();\n\tconst [invited, setInvited] = useState(false);\n\tconst jitsiContainerId = '6063bd22202fb514ce26346b123';\n\tconst { jobId } = useParams();\n\tconst jitsiMeetId = getIdFromJobId(jobId);\n\tconst [popupBefore,setPopupBefore] = useState(2)\n\tconst [freeSession,setFreesession] = useState(0)\n\tconst dialInRef = useRef(null);\n\tconst TriggerClick = useRef(null);\n\tconst kick = useRef(null)\n\tconst [computerAudioEnabled,setComputerAudioEnabled] = useState();\n\tconst [showStopButton,setshowStopButton] = useState(false);\n\tconst [showLoader,setShowLoader] = useState(true);\n\tconst [intialTimeVal,setIntialTimeVal] = useState(0);\n\tconst [calledTech,setCalledTech] = useState(false)\n\tconst [dontCalc,setDontCalc] = useState(false)\n\tconst tiRef = useRef();\n\tconst hideButton = useRef();\n\tconst remoteDesktopRef = useRef(null);\n\tconst [disableContinueBtn,setDisableContinueBtn] = useState(false);\n\tconst { CreateEarningReport } = useServices();\n\tconst [waitingForTechNotes, setWaitingForTechNotes] = useState(true);\n\tconst [notesSaveLoader, setNotesSaveLoader] = useState(false);\n\tconst [notesDeclineLoader, setNotesDeclineLoader] = useState(false);\n\tconst [notesConfirmed, setNotesConfirmed] = useState(false);\n\tconst [notesDeclined, setNotesDeclined] = useState(false);\n\tconst [alertMessageShow, setAlertMessageShow] = useState(false);\n\tconst [declineMessageShow, setDeclineMessageShow] = useState(false);\n\tconst [jobDetailsUpdated,setJobDetailsUpdated] = useState(false);\n\tconst [issuesList, setIssuesList] = useState([]);\n\tconst [confirmedIssuesList, setConfirmedIssuesList] = useState([]);\n\tconst [emptyNotesAlert,setEmptyNotesAlert] = useState(false);\n\tconst [cardsInfo,setCardsInfo] = useState(false)\n\tconst [disabledCallYourself, setDisabledCallYourself] = useState(false);\n\tconst [disabledCallTechnician, setDisabledCallTechnician] = useState(false);\n\tconst [jitsiSessionEnd, setJitsiSessionEnd] = useState(false);\n\tconst [allNotesSelected, setAllNotesSelected] = useState(false);\n\tconst [disabledEndCall, setDisabledEndCall] = useState(false);\n    const [totalJobs, setTotalJobs] = useState(-1);\n    const [Joincount, setJoinCount] = useState(0);\n\tconst [minutesFreeForClient,setMinutesFreeForClient] = useState(6);\n\tconst clearAllIntervals = (meeting_pause)=>{\n\t\tif(meeting_pause){\n\t\t\t\tif(window.cardTimerUpdater){\n\t\t\t\t\tclearInterval(window.cardTimerUpdater)\n\t\t\t\t}\n\t\t\t\tif(window.clearIntervalTimer){\n\t\t\t\t\tclearInterval(window.clearIntervalTimer)\n\t\t\t\t}\n\t\t\t\tif(window.lastMinuteInterval){\n\t\t\t\t\tclearInterval(window.lastMinuteInterval)\n\t\t\t\t}\n\t\t\t\tif(window.alreadyFilledInterval){\n\t\t\t\t\tclearInterval(window.alreadyFilledInterval)\n\t\t\t\t}\n\t\t\t}\n\t}\n\n\tconst startTimerAgain = (customerConfirmedNotes,meeting_pause,mainSeconds)=>{\n\tif(customerConfirmedNotes && !meeting_pause){\n\t\tlet hours = mainSeconds / 3600\n\t\tlet realMinutes = mainSeconds/60\n\t\tlet seconds = mainSeconds%60\n\t\tlet timeValue = mainSeconds*1000\n\t\tsetIntialTimeVal(timeValue)\n\t\ttiRef.current.start()\n\t}\n}\n\t\n\n\tconst popUpConditionDecider = async({\n\t\tmainSeconds,\n\t\tclientSeconds,\n\t\tjob,\n\t\tuser,\n\t\tminutesFreeForClient,\n\t\tpopupBefore,\n\t\tcustomerConfirmedNotes,\n\t\t}\n\t)=>{\n\t\tlet openPopup = false\n\t\tlet cardPopUpBeforeSeconds = clientSeconds - (popupBefore*60)\n\t\tlet clientSecondsWithFreeMin = clientSeconds + 60\n\t\tif(customerConfirmedNotes){\n\t\t\tlet paidJobs = await JobService.getTotalPaidJobs({\"customer\":user.customer.id})\n\t\t\t\tif(paidJobs <= 1 && mainSeconds > 0){\n\t\t\t\t\tif   \n\t\t\t\t\t\t((mainSeconds < clientSecondsWithFreeMin) && (mainSeconds >= cardPopUpBeforeSeconds) && !popupTimerAlreadyCalled)\n\t\t\t\t\t{\n\t\t\t\t\t\topenPopup = true\n\t\t\t\t\t\tpopupTimerAlreadyCalled = true\n\t\t\t\t\t\treturn openPopup\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t}\n\t}\n\tconst checkIfCustomerHasCard = async()=>{\n\t\tlet customerId;\n\t\tif(job && job.customer && job.customer.id){\n\t\t\tcustomerId = job.customer.id\n\t\t\t\n\t\t}\n\t\tif(user && user.customer && user.customer.id){\n\t\t\tcustomerId = user.customer.id\n\t\t\t\n\t\t}\n\n\t\tconst customer_info = await CustomerApi.retrieveCustomer(customerId);\n\t\tlet haveCard = customer_info.stripe_id && customer_info.stripe_id != \"\" ? true : false\n\t\treturn haveCard\n\n\t}\n\tconst updateTimerForJob = async()=>{\n\t\tawait JobService.updateJob(jobId,{\"meeting_pause\":false})\n\t}\n\tconst pollingBoth = ()=>{\n\t\tif(new_on_page){\n\t\t\tconsole.log(\"inside if condition pollingBoth\")\n\t\t\tnew_on_page = false\n\t\t\twindow.pollingInterval = setInterval(async()=>{\n\t\t\tif(fetchJobId != null){\n\t\t\t\tlet res = await JobService.retrieveJob(fetchJobId)\n\t\t\t\tconsole.log(\"sample fetch timer every 10 second\",res.total_seconds)\n\t\t\t\tlet totalSeconds = res.total_seconds\n\t\t\t\tlet meeting_pause = res.meeting_pause\n\t\t\t\tlet customerConfirmedNotes = res.customerConfirmedNotes\n\t\t\t\tlet clientSeconds =  parseInt(minutesFreeForClient*60)\n\t\t\t\t// startTimerAgain(customerConfirmedNotes,meeting_pause,totalSeconds,minutesFreeForClient)\n\t\t\t\tclearAllIntervals(meeting_pause)\n\t\t\t\tif(totalSeconds != undefined && !isNaN(totalSeconds)){\n\t\t\t\t\tif(!popupTimerAlreadyCalled && totalSeconds != 0){\n\t\t\t\t\t\tif(job!=undefined){\n\t\t\t\t\t\t\thandleTimerAndPopup(totalSeconds,customerConfirmedNotes,meeting_pause,clientSeconds)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t},3000)\n\t\t}\n\t}\n\tconst handleMainConditions = async(minutesFreeForClient,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup,haveCard=false)=>{\n\t\tconsole.log(\"---------------------------------1---------------------\")\n\t\tlet seconds = parseInt(window.localStorage.getItem(\"secs\"))\n\t\tpopupTimerAlreadyCalled = true\n\t\tif(window.localStorage.getItem(\"extraMin\") === \"true\"){\n\t\t\tif(seconds === 0 || isNaN(seconds)){\n\t\t\t\tif(!haveCard){\n\t\t\t\t\tconsole.log(\"this part 09\")\n\t\t\t\t\tlastMinuteTimerPoper(60,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"this part 10\")\n\t\t\t\t\tif(window.localStorage.getItem(\"notificationSent\") === \"false\"){\n\t\t\t\t\t\tcardAlreadyFilledTimer(seconds)\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tshowMeetingNotification()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(!haveCard){\n\t\t\t\t\tconsole.log(\"this part 11\")\n\t\t\t\t\tlastMinuteTimerPoper(seconds,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"this part 12\")\n\t\t\t\t\tif(window.localStorage.getItem(\"notificationSent\") === \"false\"){\n\t\t\t\t\t\tcardAlreadyFilledTimer(seconds)\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tshowMeetingNotification()\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tconsole.log(\"seconds before calling the pauseTimer :::::::\",seconds)\n\t\t\tif(seconds === 0 || isNaN(seconds)){\n\t\t\t\tif(!haveCard){\n\t\t\t\t\tconsole.log(\"this part 21\")\n\t\t\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t\t\t// if(socket){\n\t\t\t\t\t// \tsocket.emit(\"notification-to-technician\",{\"jobId\":jobId})\n\t\t\t\t\t// }\n\t\t\t\t\tcardFullFillTimer(minutesFreeForClient,120,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"this part 22\")\n\t\t\t\t\tcardAlreadyFilledTimer()\n\t\t\t\t}\n\t\t\t\t// cardTimer(minutesFreeForClient,audio,socket,handleEndOnPopup,freeMin,updateTimingsForFreeCustomer,jobId,endMeeting,false,false,haveCard,false)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"this part23\")\n\t\t\t\tif(!haveCard){\n\t\t\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t\t\t// if(socket){\n\t\t\t\t\t// \tsocket.emit(\"notification-to-technician\",{\"jobId\":jobId})\n\t\t\t\t\t// }\n\t\t\t\t\tcardFullFillTimer(minutesFreeForClient,seconds,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"inside filled Timer ::::::::\")\n\t\t\t\t\tif(window.localStorage.getItem(\"notificationSent\") === \"false\"){\n\t\t\t\t\t\tcardAlreadyFilledTimer(seconds)\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tshowMeetingNotification()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cardTimer(minutesFreeForClient,audio,socket,handleEndOnPopup,freeMin,updateTimingsForFreeCustomer,jobId,endMeeting,false,false,haveCard,seconds)\n\t\t\t}\n\t\t}\n\n\t}\n\tlet handleTimerAndPopup = async(\n\t\tmainSeconds,\n\t\tcustomerConfirmedNotes,\n\t\tmeeting_pause,\n\t\tclientSeconds)=>{\n\t\tconsole.log(\"mainSeconds :::\",mainSeconds)\n\t\tlet differnceRemainSecondsFromClientFreeMinutes  = clientSeconds - mainSeconds\n\t\tlet minuteDiffRemainFromClientFreeMinutes = parseInt(differnceRemainSecondsFromClientFreeMinutes /60)\n\t\tlet haveCard = await checkIfCustomerHasCard()\n\t\tlet condition = await popUpConditionDecider({\n\t\t\tmainSeconds,\n\t\t\tclientSeconds,\n\t\t\tjob,\n\t\t\tuser,\n\t\t\tminutesFreeForClient,\n\t\t\tpopupBefore,\n\t\t\tcustomerConfirmedNotes,\n\t\t})\n\n\t\t\n\t\tconsole.log(\"condition ::::::::\",condition)\n\t\t\n\n\t\tif(condition === true){\n\t\t\tlet seconds = parseInt(window.localStorage.getItem(\"secs\"))\n\t\t\tconsole.log(\"seconds before calling the pauseTimer :::::::\",seconds)\n\t\t\thandleMainConditions(minutesFreeForClient,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup,haveCard)\n\t\t}\n\t\tconsole.log(\"haveCard ::::::::\",haveCard)\n\t\tif(!haveCard && !popupTimerAlreadyCalled){\n\t\t\tif(mainSeconds > (clientSeconds + (1*60))){\n\t\t\t\tendMeeting()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"meeting_pause ::::::::::\",meeting_pause)\n\t\t\n\t\t\n\t\t// if(){\n\t\t// \tconsole.log(\"inside that loop\")\n\t\t// \ttiRef.current.start()\n\t\t// }\n\t}\n\n\t\n\tconst handleModalClose = () => {\n\t\tsetIsOpen(false);\n\t};\n\twindow.startRecordingTimeOut = setTimeout(()=>{\n\t\tif(api != null){\n  \t\t\tapi.executeCommand(\"startRecording\",{\n\t\t\t\tmode:\"file\"\n\t\t\t})\n  \t\t}\n\t},10000)\n\n\tconst jobupdationWithApi = async(data)=>{\n\t\tawait JobService.updateJob(jobId,data)\n\t}\n\tuseEffect(()=>{\n        (async () => {\n            if(user && user.customer && !cardFunctionCalled){\n                let totalJobsCount = await getTotalJobs({'customer':user.customer.id})\n                console.log(\"totalJobsCount\",totalJobsCount)\n                setTotalJobs(totalJobsCount) \n                cardFunctionCalled = true;\n            }\n        })();\n    },[user]);\n\n\tuseEffect(()=>{\n\t\tif(MainInvitation){\n\t\t\t// mixpanel code//\n\t     \tmixpanel.identify(user.email);\n\t      \tmixpanel.track('Customer -Invite on phone',{'JobId':jobId,'invitedNumber':invitedNumber});\n\t      \t// mixpanel code//\n\t      \t// let extLength = (extension && extension !== '' ? extension.length : \"0\")\n\t      \tapi.invite([{allowed: true,number: `${invitedNumber}`,originalEntry:`${invitedNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\n\t\t}\n\t},[MainInvitation])\n\n\tuseEffect(() => {\n\t\t// socket.volatile.emit('join', jobId);\n\t\t\tif(isMobile){\n\t\t\t\topenNotificationWithIcon(\"info\",\"Meeting not allowed\",\"Please join on a pc to start meeting\")\n\t\t\t\twindow.location.href = \"/\"\n\t\t\t}\n\t\t\tlet iframe  =  document.querySelector('[title=\"Button to launch messaging window\"]');\n\t\t\tlet buttonIframe = document.querySelector('[title = \"Message from company\"]')\n\t\t\tconsole.log(\"this is my iframe :::::::\",iframe)\n\t\t\tif(buttonIframe){\n\t\t\t\tbuttonIframe.style.display = \"none\"\n\t\t\t}\n\t\t    if(iframe){\n\t\t      iframe.style.display = \"none\"\n\t\t    }\n\t\t\tsocket.emit('join', jobId);\n\t\t\t// $('#hideHelpButton').trigger('click')\n\t\t// setTimeout(()=>{setShowLoader(false);},15000)\n\t}, []);\n\tuseEffect(() => {\n\t\tconsole.log('in useeffect of customer jobprogress>>>>>>',Joincount)\n\t\tif(job){\n\t\t\tpollingBoth()\n\t\t}\n\t\tif(job && job.callStartType != undefined && Joincount === 0){\n\n\t\t\tconsole.log('job.callStartType>>>>>>>>>>',job.callStartType)\n\t\t\tlet new_method = job.callStartType\n\t\t\tif (new_method === \"ComputerAudio\"){\n\t\t\t\tsetMethod(new_method)\n\t\t\t\tconsole.log('set Joincount one>>>>>>>>>>>>17-03-22')\n\t\t\t\tsetJoinCount(1)\n\n\t\t\t\tsetComputerAudioEnabled(false)\n\t\t\t\twindow.intialJitsiTimeOut = setTimeout(()=>{ \n\t\t\t\t\tinitialiseJitsi(false)},3000)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsetComputerAudioEnabled(true)\n\t\t\t\tconsole.log('set Joincount two>>>>>>>>>>>>17-03-22')\n\t\t\t\tsetJoinCount(1)\n\t\t\t\twindow.intialJitsiTimeOut =  setTimeout(()=>{initialiseJitsi(true)},3000)\n\t\t\t}\t\t\n\t\t}\n\n\t}, [job]);\n\n\n\tuseEffect(()=>{\n\t\tsocket.on(\"hangup-all\",async(data)=>{\n\t\t\tsetJitsiSessionEnd(true);\n\t\t\tHandleHangup(data)\n\t\t})\n\n\t\tsocket.on(\"rejected-by-technician\",(data)=>{\n\t\t\tconsole.log('rejected-by-technician socket>>>>>>>',data.jobId,jobId)\n\t\t\tif(data.jobId === jobId){\n\t\t\t\tif (api != null) {\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t\tapi = null\n\t\t\t}\n\t\t\t openNotificationWithIcon(\n\t\t\t\t\t'info',\n\t\t\t\t\t'Your job was declined',\n\t\t\t\t\t'Your job requires a greater level of support.  Hang tight \u2014 we\u2019re finding you the right geek for the job.'\n\t\t\t\t);\n\t\t\tif(notification){\n\t\t\t\tnotification.destroy()\n\n\t\t\t}\n\t\t\tclearAllIntervals(true)\n\t\t\tclearAllTimeOuts()\n\t\t\twindow.localStorage.removeItem(\"secs\")\n\t\t\twindow.localStorage.removeItem(\"extraMin\")\n\t\t\twindow.location.href = `/customer/create-job/${data.jobId}?jobId=${data.jobId}`\n\t\t\t}\n\t\t})\n\n\t\tsocket.on('send-notes-to-customer', data => {\n\t      \tif (data && data.jobId && jobId && data.jobId === jobId && data.allNotes.trim().length > 0) {\n\t      \t\tfetchJob(jobId);\n\t      \t\tsetWaitingForTechNotes(false);\n\t      \t\tsetNotesConfirmed(false);\n\t\t\t\tsetNotesDeclined(false);\n\t\t\t\tsetDeclineMessageShow(false);\n\t\t\t\tsetEmptyNotesAlert(false);\n\t\t\t\tsetConfirmedIssuesList([])\n\t      \t}\n\t    });\n\t    socket.on('send-updated-job-details-to-customer', data => {\n\t    \tif (data && data.jobId && jobId && data.jobId === jobId) {\n\t    \t\tfetchJob(jobId);\n\t    \t\tsetJobDetailsUpdated(true)\n\t    \t}\n\t    });\n\n\n\n\t    socket.on(\"stop-customer-timer\",(data)=>{\n    \t  \t(async () => {\n\t\t\tconsole.log(\"Received signal to stop-customer-timer\")\n\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\tconsole.log('job stop-customer-timer>>>>>>>>',data)\n\t\t\t\tvar milisec = miliseconds(parseInt(data.timer.hours),parseInt(data.timer.minutes),parseInt(data.timer.seconds));\n\t\t\t\tsetIntialTimeVal(milisec)\n\t\t\t\ttiRef.current.pause()\n\t\t\t\tcalledInterval = false\n\t\t\t\trefreshStartTimer = false\n\t\t\t\tspareTimer = false\n\n\t\t\t}\n\t\t\tsetIsModalOpen(null)\n\t\t\tconsole.log(\"time.minutes ::::::\",time.minutes)\n\t\t\tif(window.updateTime != '' && (parseInt(time.minutes) < 4)){\n\t\t\t\tclearInterval(window.updateTime)\n\t\t\t\tconsole.log(\"window.updateTime:::::::::::::::::\",window.updateTime)\n\t\t\t}\n\t\t\tconsole.log(\"clear_interval:::::::::::::::::\",window.clear_interval)\n\t\t\tif(window.clear_interval != '' && (parseInt(time.minutes) < 4)){\n\t\t\t\tclearInterval(window.clear_interval)\n\t\t\t}\n\t\t\tif(window.theTimeout != '' && (parseInt(time.minutes) < 4)){\n\t\t\t\tclearInterval(window.theTimeout)\n\t\t\t}\t\n\t\t\tclearAllIntervals(true)\t  \n\t\t\t})();\n\t\t})\n\n\n\t\tfunction miliseconds(hrs,min,sec){\n\t\t    return((hrs*60*60+min*60+sec)*1000);\n\t\t}\n\n\n\n\t\tsocket.on(\"start-customer-timer\",async (data)=>{\n\t\t\tconsole.log(\"Received signal to start-customer-timer\")\n\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\t\t\n\t\t\t\ttiRef.current.start()\n\t\t\t}\n\t\t\tconsole.log(\"popupTimerAlreadyCalled :: :::::\",popupTimerAlreadyCalled)\n\t\t\tif(popupTimerAlreadyCalled){\n\t\t\t\tsetIsModalOpen(false)\n\t\t\t}\n\t\t})\n\t},[socket])\n\tuseEffect(() => {\n\t\t// console.log('jobId>>>>>>>>>>>>>>>>>>>>fetchJob',jobId)\n\t\tfetchJob(jobId);\t\t\n\t\tsocket.on('stop-screenshare', () => {\n\t\t\tsetJitsiSessionEnd(true);\n\t\t\tif (api ) {\n\t\t\t\t\n\t\t\t\t// if(kick != null){\n\t\t\t\t// \tkick.current.click()\n\t\t\t\t// }\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t\tapi = null\n\t\t\t}\n\t\t\t// setIsScreenShared(false);\n\t\t\tsetInvited(false);\n\t\t});\n\t}, [jobId]);\n\tconst handleNewCardAdded = async()=>{\n\t\tif(newCardAdded != false){\n\t\t\tconsole.log(\"new Card added ::::::\",newCardAdded)\n\t\t\tclearInterval(window.updateTime)\n\t\t\tclearInterval(window.clear_interval)\n\t\t\tnotification.destroy()\n\t\t\tlet jobRes = await JobService.retrieveJob(fetchJobId)\n\t\t\tsetCustomerContiuedHisFirstMeeting(true)\n\t\t\tclearInterval(window.pollingInterval)\n\n\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\t// setTimerStarted(true);\n\t\t\t\tif(!jobRes.technician_paused_timer){\n\t\t\t\t\t\ttiRef.current.start();\n\t\t\t\t\t\tconsole.log(\"tiref :::::::::::::::::::::::::\")\n\t\t\t\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t\t\t\t// socket.emit(\"start-card-timer\",{\"id\":jobId})\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t//changes on working code ended\n\t\t\t\n\t\t\tsetFreesession(minutesFreeForClient)\n\t\t\tsetDisableContinueBtn(false)\n\t\t\tjobupdationWithApi({\"customerContiuedHisFirstMeeting\":true,\"meeting_pause\":false})\n\t\t\t// updateJob(jobId,)\n\t\t\tnotification.info({\n\t\t\t\t\t\tduration:4.5,\n\t\t\t\t\t\tmessage: `You can continue your meeting `,\n\t    \t\t\t\tdescription: `Thank you for using geeker now you will charged accordingly `\n\t\t\t\t\t})\n\t\t}\n\n\t}\n\tuseEffect(()=>{\n\t\thandleNewCardAdded()\n\n\t},[newCardAdded])\n\n\tconst handleCustomerWantsToAddCard = async()=>{\n\t\tconsole.log(\"new_on_page ::::::::\",new_on_page)\n\t\ttry{\n\t\t\tlet jobRes = await JobService.retrieveJob(fetchJobId)\n\t\t\tif(customerWantsToAddCard === false && new_on_page == false && newCardAdded === false){\n\t\t\tconsole.log(\"customer dont want to add cards this is working\")\n\t\t\t\tcalledInterval = false\n\t\t\t\trefreshStartTimer = true\n\t\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\t// setTimerStarted(true);\n\t\t\t\t\t\tif(!jobRes.technician_paused_timer){\n\t\t\t\t\t\t\tconsole.log(\"tiref 2:::::::::::::::::::::::::\")\n\t\t\t\t\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t\t\t\t\t// socket.emit(\"start-card-timer\",{\"id\":jobId})\n\t\t\t\t\t\t\ttiRef.current.start();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tawait updateTimerForJob()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e){\n\t\t\t\t\t\t\tconsole.log(\"error in updating timer for the job funcName:[handleCustomerWantsToAddCard] ::::: \",e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// setEnableStartPauseTimerButton(true);\n\t\t\t\t}\n\t\t\t\t//changes on Working code\n\t\t\t\t\n\t\t\t\t//changes on working code ended\n\t\t\t\ttry{\n\t\t\t\t\tlet haveCard = await checkIfCustomerHasCard()\n\t\t\t\t\tlet paidJobs = await JobService.getTotalPaidJobs({\"customer\":user.customer.id})\n\t\t\t\t\tconsole.log(\"haveCard ::::::: customerWantsToAddCard\",handleMainConditions)\n\t\t\t\t\tconsole.log(\"paidJobs :\",paidJobs)\n\t\t\t\t\tconsole.log(\"condition paidJobs :::\",paidJobs <= 1)\n\t\t\t\t\tconsole.log(\"haveCard ::::\",haveCard)\n\t\t\t\t\tconsole.log(\"jobRes ::::::::::::: \",jobRes)\n\t\t\t\t\tconsole.log(\"!jobRes.technician_paused_timer :::::::: \",!jobRes.technician_paused_timer)\n\t\t\t\t\tif(paidJobs <= 1 && !jobRes.technician_paused_timer){\n\t\t\t\t\t\tpollingBoth()\n\t\t\t\t\t\thandleMainConditions(minutesFreeForClient,updateTimingsForFreeCustomer,endMeeting,handleEndOnPopup,haveCard)\n\t\t\t\t\t}\n\t\t\t\t\tsetCustomerWantsToAddCard(null)\n\t\t\t\t}\n\t\t\t\tcatch(e){\n\t\t\t\t\tconsole.log(\"error in calling the popup again funcName:[handleCustomerWantsToAddCard] ::::::: \",e)\n\t\t\t\t}\n\n\t\t\t\t// cardTimer(minutesFreeForClient,audio,socket,handleEndOnPopup,freeMin,updateTimingsForFreeCustomer,jobId,endMeeting,false,true)\n\t\t\t\t// startCardTimer()\n\t\t\t// }\n\t\t\t}\n\t\t}\n\t\tcatch(e){\n\t\t\tconsole.log(\"error in retrieving job :::::: \",e)\n\t\t}\n\t\t\n\n\t}\n\tuseEffect(()=>{\n\t\tconsole.log(\"customerWantsToAddCard ::::::\",customerWantsToAddCard)\n\t\t\n\t\thandleCustomerWantsToAddCard()\n\t},[customerWantsToAddCard])\n\n\tuseEffect(()=>{\n\n\t\tif(api != null && api.getNumberOfParticipants() === -1){\n\n\t\t\tsetJitsiSessionEnd(true);\n\t\t}\n\t\tif(job){\n\n\n\n\t\t\tfetchJobId = job.id\n\t\t\t\n\t\t\tsetCustomerContiuedHisFirstMeeting(job.customerContiuedHisFirstMeeting)\n\t\t\tconsole.log('Job>>>>>',job)\t\t\n\t\t\n\t\t\tif(job.meeting_start_time && job.status !== 'Waiting'){\n\t\t\t\tlet meeting_start_time = new Date(job.meeting_start_time)\n\t\t\t\tlet now_date = new Date()\n\t\t\t\tif(job.pause_start_time && job.pause_start_time !== '' && job.meeting_pause){\n\t\t\t\t\tnow_date = new Date(job.pause_start_time)\n\t\t\t\t}\n\t\t\t\tlet lastInterval = false\n\t\t\t\tlet seconds = job.total_seconds\n\t\t\t\tseconds = (job.total_pause_seconds ? parseInt(seconds)- job.total_pause_seconds : parseInt(seconds))\n\t\t\t\tlet milliseconds = seconds * 1000\n\t\t\t\tsetIntialTimeVal(milliseconds)\n\t\t\t\tlet minutes = seconds /60\n\t\t\t\tconsole.log(\"minutes :::::: :\",minutes)\n\t\t\t\tconsole.log(\"conditions :::::::::\",minutes < (minutesFreeForClient-2) && timerCalled == false && minutes >= 0)\n\t\t\t\tconsole.log(\"\")\n\n\t\t\t\tif(minutes < (minutesFreeForClient-2) && timerCalled == false && minutes >= 0 ){\n\t\t\t\t\tlet customerId;\n\t\t\t\t\tif(job && job.customer && job.customer.id){\n\t\t\t\t\t\tcustomerId = job.customer.id\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif(user && user.customer && user.customer.id){\n\t\t\t\t\t\tcustomerId = user.customer.id\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tlet secremain = 120\n\t\t\t\t\tlet filter_dict = {}\n\t\t\t\t\tfilter_dict['customer'] = customerId\n\t\t\t\t\tfilter_dict['customerConfirmedNotes'] = true\n\t\t\t\t\ttimerCalled = true\n\t\t\t\t\tlet waitMinSeconds =  (minutesFreeForClient-2) > minutes? ((minutesFreeForClient-2)-minutes) *60000 : 0\n\t\t\t\t\tconsole.log(\"waitMinSeconds:::1 \",waitMinSeconds)\n\t\t\t\t\tlet additionalMinutes = (minutesFreeForClient) > minutes? ((minutesFreeForClient)-minutes) *60000 : 0\n\t\t\t\t\tconst result = JobService.findJobByParams(filter_dict,{ page:1,pageSize:1000 })\n\t\t\t\t\tresult.then(async(res)=>{\n\t\t\t\t\t\t    setDontCalc(true)\n\t\t\t\t\t\t\tconsole.log(\"waitMinSeconds::: \",waitMinSeconds)\n\t\t\t\t\t\t\tconsole.log(\"res.jobs :::::::\",res.jobs)\n\t\t\t\t\t\t\tif(res.jobs && res.jobs.totalCount && res.jobs.totalCount === 1 ){\n\t\t\t\t\t\t\t\tlet customer_info = await CustomerApi.retrieveCustomer(customerId);\n\t\t\t\t\t\t\t\tlet haveCard = customer_info.stripe_id && customer_info.stripe_id != \"\" ? true : false\n\t\t\t\t\t\t\t\tconsole.log(\"minutes ::::::::::\",minutes)\n\t\t\t\t\t\t\t\tconsole.log(\"minutesFreeForClient ::::: \",minutesFreeForClient)\n\t\t\t\t\t\t\t\tconsole.log(\"minutes >= minutesFreeForClient && !haveCard :::::::\",minutes >= minutesFreeForClient && !haveCard)\n\t\t\t\t\t\t\t\tif(minutes >= minutesFreeForClient && !haveCard && !popupTimerAlreadyCalled){\n\t\t\t\t\t\t\t\t\tendMeeting()\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(!refreshStartTimer){\n\t\t\t\t\t\t\t\t\trefreshStartTimer = true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t timerCalled = false \n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t// console.log('hello start timer startImmediately')\n\n\t\t\t\tif(!job.meeting_pause){\n\t\t\t\t\tconsole.log('tiRef>>>>>>>>>>',tiRef)\t\t\t\t\t\n\t\t\t\t\twindow.stopPauseTimer = setTimeout(function(){ if(tiRef != null && tiRef.current != null){ tiRef.current.start() }}, 1000);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tlet price = 0;\n\t\t    if(job.subSoftware && job.subSoftware.rate){\n\t\t    \tprice = job.subSoftware.rate;\n\t\t    }else if(job.software && job.software.rate){\n\t\t    \tprice = job.software.rate;\n\t\t    }\n\t\t    let issuesListArr = []\n\t\t    if(job.allNotes && job.allNotes.trim().length > 0 && job.technicianSubmitNotes){\n\t    \t\tsetWaitingForTechNotes(false)\n\t    \t\tissuesListArr = job.allNotes.split('|SEP|');\n\t    \t\tsetIssuesList(issuesListArr);\n\t    \t}\n\t    \tif(job.customerConfirmedNotes){\n\t    \t\tsetNotesConfirmed(true);\n\t    \t}\n\t    \tif(job.customerDeclinedNotes){\n\t    \t\tsetDeclineMessageShow(true);\t\n\t    \t}\n\t    \tif(job.customerDeclinedNotes){\n\t    \t\tsetNotesDeclined(true)\n\t    \t}\n\t    \tif(job.confirmedNotes && job.confirmedNotes.trim().length > 0 && job.customerConfirmedNotes){\n\t    \t\tlet confirmedIssuesListArr = job.confirmedNotes.split('|SEP|');\n\t    \t\tsetConfirmedIssuesList(confirmedIssuesListArr)\n\t    \t}\n\t    \tif(job.confirmedNotes && job.confirmedNotes.trim().length > 0 && job.customerConfirmedNotes){\n\t    \t\tlet confirmedIssuesListArr = job.confirmedNotes.split('|SEP|');\n\t    \t\tsetConfirmedIssuesList(confirmedIssuesListArr)\n\t    \t\tif(issuesListArr.length === confirmedIssuesListArr.length){\n\t    \t\t\tsetAllNotesSelected(true)\n\t    \t\t}\n\t    \t}\n\n\t\t    setratePerTime(price)\n\t\t\tlet softSettings = (job.subSoftware ? job.subSoftware : job.software)\n\t\t\tsetSoftwareSettings(softSettings)\n\t\t\tsetMeetingJob(job);\n\t\t\tif(job.status === \"Completed\"){\n\t\t\t\twindow.location.href =  `/meeting-feedback/${job.id}`\n\t\t\t}\t\t\t\n\t\t}\n\t},[job,meetingJob])\n\n\n\tuseEffect(() => {\n\t\tif (user && jobId) {\n\t\t\tcreateMeeting({\n\t\t\t\temail: user.email,\n\t\t\t\tname: `${user.firstName.trim()} ${user.lastName.trim()}`,\n\t\t\t\tavatar:\n\t\t\t\t\t'https://www.gravatar.com/avatar/73543542128f5a067ffc34305eefe48a',\n\t\t\t\tuserId: user.id,\n\t\t\t\tgroup: 'justwinkit',\n\t\t\t\taud: 'jitsi',\n\t\t\t\tiss: 'panther-core',\n\t\t\t\tsub: JITSI_URL.BASE_URL,\n\t\t\t\troom: jitsiMeetId,\n\t\t\t\tauthRoom: '*',\n\t\t\t\texp: 24,\n\t\t\t});\n\t\t}\n\t}, [user, jobId, jitsiMeetId]);\n\n\tuseEffect(() => {\n\t\tif (meetingId) {\n\t\t\tgetJitsiMeet(meetingId);\n\t\t}\n\t}, [meetingId]);\n\n\tuseEffect(() => {\n\t\tif (currentStep === 0) {\n\t\t\tsetJobTime(0);\n\t\t}\n\t}, [currentStep]);\n\n\tconst handleParticipantMic = ()=>{\n\t\t\tif (api != null){\n\t\t\t\tapi.executeCommand('toggleAudio');\n\t\t\t}\t\n\t}\n\n\tconst loadJitsiScript = () => {\n\t\tlet resolveLoadJitsiScriptPromise = null;\n\n\t\tconst loadJitsiScriptPromise = new Promise((resolve) => {\n\t\t\tresolveLoadJitsiScriptPromise = resolve;\n\t\t});\n\n\t\tconst script = document.createElement('script');\n\t\tconst script2 = document.createElement('script');\n\t\tconst script3 = document.createElement('script');\n\t\t// script.src =\n\t\t//   \"https://shard1-tetch-front.panthermediasystem.net/external_api.js\"; //mytestroom\n\n\t\tscript.src = JITSI_URL.FULL_URL+'external_api.js'; // winkit.ml mytestroom\n\t\tscript.async = true;\n\t\tscript2.src = \"https://code.jquery.com/jquery-3.5.1.min.js\"\n\t\tscript3.src = \"https://meet.jit.si/libs/lib-jitsi-meet.min.js\"\n\t\tscript2.async = true;\n\t\tscript3.async = true;\n\t\tscript.onload = () => resolveLoadJitsiScriptPromise(true);\n\t\tdocument.body.appendChild(script);\n\t\tdocument.body.appendChild(script2);\n\t\tdocument.body.appendChild(script3);\n\n\t\treturn loadJitsiScriptPromise;\n\t};\n\n\tconst screenInvite = () => {\n\t\t// mixpanel code//\n     \tmixpanel.identify(user.email);\n     \tsetshowStopButton(!showStopButton)\n      \tmixpanel.track('Customer - Share your screen with technician',{'JobId':jobId});\n      \t// mixpanel code//\n\t\tsetInvited(true)\n\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t// socket.emit('invite-screen', { id: jobId });\n\t\tapi.executeCommand(\"toggleShareScreen\")\t\t\n\t};\n\n\tconst stopShareScreen = () => {\t\n\n\t\t// mixpanel code//\n     \tmixpanel.identify(user.email);\n      \tmixpanel.track('Customer - Stop screen share',{'JobId':jobId});\n      \t// mixpanel code//\n\t\tif(api!=null && showStopButton === true){\t\n\t\t\tapi.executeCommand('toggleShareScreen');\t\n\t\t\tsetshowStopButton(false);\t\n\t\t\t\t\n\t\t}\t\n\t};\n\n\tconst handleEndOnPopup = (key)=>{\n\t\tif(window.cardTimerUpdater){\n\t\t\tclearInterval(window.cardTimerUpdater)\n\t\t}\n\t\tif(window.clearIntervalTimer){\n\t\t\tclearInterval(window.clearIntervalTimer)\n\t\t}\n\t\tif(window.lastMinuteInterval){\n\t\t\tclearInterval(window.lastMinuteInterval)\n\t\t}\n\t\tif(window.alreadyFilledInterval){\n\t\t\tclearInterval(window.alreadyFilledInterval)\n\t\t}\n\t\tif(window.alreadyFilledInterval){\n\t\t\tclearInterval(window.alreadyFilledInterval)\n\t\t}\n\t\tnotification.destroy()\n\t\tendMeeting()\n\t}\n  \tconst clicksession = async() => {    \n  \t\tmixpanel.identify(user.email);\n\t    mixpanel.track('Customer - Start Zoho Session',{'JobId':jobId});\n\n\n    \tconst res = await JobApi.sendDataSession(user.email);  \n    \tvar my_session_data = JSON.parse(res)\n    \tmy_session_data['job'] = job\n    \tsocket.emit('zoho-session', my_session_data);\n    \twindow.open(my_session_data['representation']['customer_url'], '_blank');\n  \t}\n\n\tconst rejoinPhoneCall = async() => {  \n\t\t// mixpanel code//\n\t    mixpanel.identify(user.email);\n\t    mixpanel.track('Customer - Rejoin',{'JobId':jobId,'meetingMethod':method});\n\t     // mixpanel code//\n\n\t    if(!computerAudioEnabled){\n\t    \twindow.localStorage.setItem(\"customerCallingHimSelf\",true)\n\t    \tconsole.log('reload>>>>>>>>>>>>>>>>>>>>111')\n  \t\t\twindow.location.reload();\n\t    }\n\n\t\t// console.log('method>>>>>>>',method)\n\t\tif(method === \"ComputerAudio\"){\n\t    \tconsole.log('reload>>>>>>>>>>>>>>>>>>>>2222')\n\n\t\t\twindow.localStorage.setItem(\"customerCallingHimSelf\",true)\n\t\t\twindow.location.reload()\n\t\t}\n\t\telse{\n\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t// let extLength = (job.customer.extension && job.customer.extension !== '' ? job.customer.extension.length : \"0\")\n\t\t\t// let extension = job.customer.extension && job.customer.extension != null ? job.customer.extension : \"\"\n\t\t\tapi.invite(\n\t\t\t\t[{allowed: true,number: `${job.customer.phoneNumber}`,originalEntry:`${job.customer.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t}\n  \t}\n\n\tconst initialiseJitsi = async (computerAudioEnabled) => {\n\t\twindow.localStorage.removeItem(\"jitsiLocalStorage\");\n\t\tlet startSilentMeeting = false\n\t\tlet customerCalledHimself = false\n\t\ttry {\n\t\t\tvar callDone = true;\n\t\t\tif (!window.JitsiMeetExternalAPI) {\n\t\t\t\tconsole.log('1111111111111 no load jitsi script')\n\t\t\t\tawait loadJitsiScript();\n\t\t\t}\n\t\t\tconsole.log('outside no load jitsi script')\n\n\t\t\tif (computerAudioEnabled){\n\t\t\t\tstartSilentMeeting = true\n\t\t\t}\n\t\t\t// if(window.localStorage.getItem(\"customerCallingHimSelf\") != null && window.localStorage.getItem(\"customerCallingHimSelf\") == \"true\"){\n\t\t\t// \tstartSilentMeeting = true\n\t\t\t// \tcustomerCalledHimself = true\n\t\t\t// \tsetAudioIcon(true)\n\t\t\t// }\n\t\t\tapi = new window.JitsiMeetExternalAPI(JITSI_URL.BASE_URL, {\n\t\t\t\tinterfaceConfigOverwrite: {\n\t\t\t\t\tSHOW_PROMOTIONAL_CLOSE_PAGE: false,\n\n\t\t\t\t\tDISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tconfigOverwrite: {\n\t\t\t\t\tstartScreenSharing: false,\n\t\t\t\t\tstartWithAudioMuted: computerAudioEnabled,\n\t\t\t\t\tstartWithVideoMuted:true,\n\t\t\t\t\tnotifications: [],\n\t\t\t\t\ttoolbarButtons: [\n\t\t\t\t\t\t'microphone',\n\t\t\t\t\t\t'fullscreen',\n\t\t\t\t\t\t'fodeviceselection',\n\t\t\t\t\t\t'profile',\n\t\t\t\t\t\t'chat',\n\t\t\t\t\t\t'desktop'\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\tparentNode: document.getElementById(jitsiContainerId),\n\t\t\t\troomName: jitsiMeetId,\n\t\t\t\tjwt: '',\n\t\t\t\tdisplayName: 'Screen Sharing',\n\t\t\t\tuserInfo: {\n\t\t\t\t\tdisplayName: user?.firstName.trim() + user?.lastName.trim(),\n\t\t\t\t\temail : user.email,\n\t\t\t\t\tid: 1,\n\t\t\t\t},\n\t\t\t});\t\n\n\t\t\tconsole.log('update problem in job correction by manibha 17-03-22')\n\t\t\tJobService.updateJob(jobId,{\"callStartType\":\"ComputerAudio\"})\n\n\t\t\tapi.on('micError',(type,message)=>{\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"Audio Permission Denied\")\n\t\t\t})\n\t\t\tapi.on('videoConferenceLeft', () => {\n\t\t\t\tstopShareScreen();\n\t\t\t});\n\t\t\tif(computerAudioEnabled){\n\t\t\t\tapi.setAudioOutputDevice(null,null)\n\t\t\t}\n\t\t\tconsole.log(\"particpantinfo ::\",api.getParticipantsInfo())\n\t\t\tapi.on('videoConferenceJoined', () => {\n\t\t\t\t// console.log('joined>>>>>>>>>>>>>>')\n\t\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t\t// socket.emit(\"DisableLoader\")\n\t\t\t\t// mixpanel code//\n\t\t     \tmixpanel.identify(user.email);\n\t\t      \tmixpanel.track('Customer - Jitsi session started',{'JobId':jobId});\n\t\t      \t// mixpanel code//\t\t\t\n\t\t\t});\n\t\t\tapi.on('screenSharingStatusChanged', (screen_data) => {\n\t\t\t\tif(screen_data['on'] ===  true){\n\t\t\t\t\tsetshowStopButton(true);\n\t\t\t\t}else{\n\t\t\t\t\tsetshowStopButton(false);\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.on(\"incomingMessage\",()=>{\n\t\t\t\t\n\t\t\t\taudio.play()\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"New Message from Technician\")\n\n\t\t\t})\n\n\t\t\tapi.on('readyToClose', () => {\n\t\t\t     history.push()\n\t\t\t});\n\t\t\t\n\t\t\tif((callDone && computerAudioEnabled === true) || customerCalledHimself){\n\t\t\t\twindow.localStorage.setItem(\"customerCallingHimSelf\",false)\n\t\t\t\thandleParticipantMic()\n\t\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t\t// let extLength = (job.customer.extension && job.customer.extension !== '' ? job.customer.extension.length : \"0\")\n\t\t\t\t// let extension = job.customer.extension && job.customer.extension != null ? job.customer.extension : \"\"\n\t\t\t\tapi.invite(\n\t\t\t\t\t[{allowed: true,number: `${job.customer.phoneNumber}`,originalEntry:`${job.customer.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}]\n\t\t\t\t).then(()=>{\n\t\t\t\t\tconsole.log(\"success111\")\n\t\t\t\t});\n\t\t\t\tcallDone = false\n\t\t\t}\n\t\t\tapi.on('participantJoined', () => {\n\t\t\t\t// /*setEndMeetingBtnDisabled(false)\t*/\t\t\t\n\t\t\t\tsetShowLoader(false);\n\t\t\t});\n\n\t\t\twindow.participantInfo = setTimeout(function(){\n\t\t\t\tif(api){\n\t\t\t\t\tlet partispantsArr = api.getParticipantsInfo()\n\t\t\t\t\tconsole.log(\"partispantsArr>>>>09-03-22\",partispantsArr)\n\t\t\t\t\tif(partispantsArr.length > 0){\n\t\t\t\t\t\tlet valueToFind = user.firstName.trim()+user.lastName.trim()+' (me)';\n\t\t\t\t\t\tconsole.log(\"valueToFind++++++++++++\",valueToFind)\n\t\t\t\t\t\tlet result = partispantsArr.find( ({ formattedDisplayName }) => formattedDisplayName === valueToFind );\n\t\t\t\t\t\tconsole.log(\"result********************\",result)\n\t\t\t\t\t\tif(!result){\n\t\t\t\t\t\t\tretryJitsi();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(result){\n\t\t\t\t\t\t\tconsole.log(\"set loader false>>>>>>09-03-22\")\n\t\t\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tretryJitsi();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log('retry in else>>>>09-03-22')\n\t\t\t\t\tretryJitsi();\n\t\t\t\t}\n\n\t\t\t},35000)\n\n\t\t} catch (error) {\n\t\t\tconsole.log('error from initialize jitsi', error);\n\t\t\tretryJitsi();\n\t\t}\n\t};\n\n\tconst retryJitsi = () => {\n\t\tif(job && job.id && job.status !== \"Completed\"){\n\t\t\tconsole.log(\"Going to reload page to reinitialize jitsi\");\n\t\t\twindow.location.href= `/customer/job/${job.id}`\n\t\t}\n\t}\n\tuseEffect(() => {\n\t\tif (invited) {\n\t\t\tconsole.log(\"yes invited\")\n\t\t}\n\t}, [invited]);\n\n\tuseEffect(()=>{\n\t\tif(isModalOpen){\n\t\t\tif(api!=null && showStopButton === true){\t\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"For Security reasons we stopped your screen sharing. Please enter card details and start screen share again.\")\n\t\t\t\tapi.executeCommand('toggleShareScreen');\t\n\t\t\t\tsetshowStopButton(false);\n\t\t\t}\t\n\t\t}\n\n\t\tif(isModalOpen === false && newCardAdded == false){\n\t\t\tconsole.log(\"inside modal false ::::::::: \")\n\t\t\tconsole.log(\"customer dont want to add cards\")\n\t\t\tsetCustomerWantsToAddCard(false)\n\t\t}\n\t},[isModalOpen])\n\n\tconst updateTimingsForFreeCustomer = async(key,updateTime=null,clear_interval=null,secremain)=>{\n\t\tconsole.log(\"using  :::::::::::: \",secremain)\n\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\t// setTimerStarted(true);\n\t\t\t\t\ttiRef.current.stop();\n\t\t\t\t\t// setEnableStartPauseTimerButton(true);\n\t\t\t}\n\n\t\tseconds_remaining = secremain \n\t\tif(window.cardTimerUpdater){\n\t\t\tclearInterval(window.cardTimerUpdater)\n\t\t}\n\t\tif(window.clearIntervalTimer){\n\t\t\tclearInterval(window.clearIntervalTimer)\n\t\t}\n\t\tif(window.lastMinuteInterval){\n\t\t\tclearInterval(window.lastMinuteInterval)\n\t\t}\n\t\tif(window.alreadyFilledInterval){\n\t\t\tclearInterval(window.alreadyFilledInterval)\n\t\t}\n\t\ttry{\n\t\t\tawait JobService.updateJob(job.id,{\"meeting_pause\":true})\n\t\t}\t\n\t\tcatch(e){\n\t\t\tconsole.log(\"error in update job :::\",e)\n\t\t}\n\t\t\n\t\t// clearInterval(window.clear_interval)\n\t\tif (job.customer.stripe_id != undefined && job.customer.stripe_id != \"\"){\n\t\t\tsetNewCardAdded(true)\n\t\t\treturn \n\t\t}\n\t\tnew_on_page = false\n\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t// socket.emit(\"stop-timer-due-to-card\",{\"id\":jobId})\n\t\tsetCustomerWantsToAddCard(true)\n\t\tsetIsModalOpen(true)\t\t\n\t}\n\n\tasync function updateJobTime(){\n\t\tconst res = await JobApi.retrieveJob(jobId);\n\t\tif(!res.meeting_start_time){\n\t\t\ttiRef.current.start()\n\t\t\tlet secremain = 120\n\t\t\tlet className = `d-block label-total-value `\n\t\t\tvar countDownTarget = new Date().getTime() + 1* 60 * 1000;\n\t\t\tlet filter_dict = {}\n\t\t\tlet lastInterval = false\n\t\t\tlet additionalMinutes = minutesFreeForClient *60000 \n\t\t\tlet customerId;\n\t\t\tif(job && job.customer && job.customer.id){\n\t\t\t\tcustomerId = job.customer.id\n\t\t\t\t\n\t\t\t}\n\t\t\tif(user && user.customer && user.customer.id){\n\t\t\t\tcustomerId = user.customer.id\n\t\t\t\t\n\t\t\t}\n\n\t\t\tsetDisableContinueBtn(true)\n\t\t\tfilter_dict['customer'] = customerId\n\t\t\tfilter_dict['customerConfirmedNotes'] = true\n\t\t\tlet startTimer = false\n\t\t\tconst res = await JobService.findJobByParams(filter_dict,{ page:1,pageSize:1000 })\n\t\t\t\n\t\t\tif(res.jobs.totalCount <= 1)\n\t\t\t{\n\t\t\t\tconst customer_info = await CustomerApi.retrieveCustomer(customerId);\n\t\t\t\tlet haveCard = customer_info.stripe_id && customer_info.stripe_id != \"\" ? true : false\n\t\t\t\tconsole.log(\"haveCard ::::::::::: \",haveCard)\n\t\t\t}\n\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t// socket.emit('add-start-time-in-job', job);\n\t\t}\n\t}\n\tconst kickPhoneParticipant = ()=>{\n\t\ttry{\n\t\t\tif (api != null) {\n\t\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\tconsole.log(\"condition 1 ::::::: \",participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim())\n\t\t\t\t\tconsole.log(\"participant_array[k]['displayname'] ::: \",participant_array[k]['displayname'])\n\t\t\t\t\tconsole.log(\" user?.firstName + user?.lastName :::: \", user?.firstName.trim() + user?.lastName.trim())\n\t\t\t\t\tif(participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\tconsole.log(\"kicking out participant \",participant_id)\n\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(kick != null){\n\t\t\t\t\tkick.current.click()\n\t\t\t\t}\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t\tapi = null\n\n\t\t\t}\n\t\t}\t\n\t\tcatch(err){\n\t\t\tconsole.log(\"kickPhoneParticipant ::: \".err)\n\t\t}\n\t}\n\tconst HandleHangup = async (data)=>{\n\t\ttry{\n\t\t\tconsole.log(\"Cust :All data before hangup is \",data);\n\t\t\tconsole.log('job.id>>>>>>>>>>HandleHangup',jobId);\n\t\t\tconsole.log(\"job data is \",job);\n\t\t\tconsole.log(\"meetingJob data is \",meetingJob);\n\t\t\tWebSocket.updateSocket(data['web_socket_id'],{'hitFromCustomerSide':true})\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in HandleHangup err :::\",err)\n\t\t}\n\t\tnotification.destroy()\n\t\twindow.location.href =  `/meeting-feedback/${data.jobId}`;\n\t}\n\n\n\tconst endMeetingConfirm = () => {\n\t\tModal.confirm({\n\t      \ttitle: 'Are you sure you want to end the meeting?',\n\t\t    okText: 'Continue',\n\t\t    cancelText: 'Go back',\n\t\t    className:'app-confirm-modal',\n\t\t    onOk(){\n\t\t        endMeeting();\n\t\t    },\n\t    });  \t\t\n\t}\t\n\n\n\tfunction convert_millis_to_hms_format(millis){\n\t\tlet sec = Math.floor(millis / 1000);\n\t\tlet hrs = Math.floor(sec / 3600);\n\t\tsec -= hrs * 3600;\n\t\tlet min = Math.floor(sec / 60);\n\t\tsec -= min * 60;\n\n\t\tsec = '' + sec;\n\t\tsec = ('00' + sec).substring(sec.length);\n\n\t\tif (hrs > 0) {\n\t\t\tif(hrs < 10){\n\t\t\t\tmin = '' + min;\n\t\t\t\tmin = ('00' + min).substring(min.length);\n\t\t\t\treturn '0'+hrs + \":\" + min + \":\" + sec;\n\t\t\t}else{\n\t\t\t\tmin = '' + min;\n\t\t\t\tmin = ('00' + min).substring(min.length);\n\t\t\t\treturn hrs + \":\" + min + \":\" + sec;\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"min ::::\",min)\n\t\t\tif(min === 0){\n\t\t\t\treturn  `00:00:${sec}`;\n\t\t\t}\n\t\t\telse if(min > 0 && min < 10){\n\t\t\t\tconsole.log(\"min > 0 && min < 10 :::::\",min > 0 && min < 10)\n\t\t\t\treturn  `00:0${min}:${sec}`;\n\t\t\t}else{\n\t\t\t\tconsole.log(\"condition 2::::::\",min > 0 && min < 10)\n\t\t\t\treturn  `00:${min}:${sec}`;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tconst endMeeting = async (intervals,clear_interval=null) => {\n\t\tsetJitsiSessionEnd(true);\n\t\tsetDisabledEndCall(true)\n      \tconsole.log(\"Inside end meeting of customer\")\n      \tclearInterval(window.pollingInterval)\n      \tclearAllTimeOuts()\n\t\t// mixpanel code//\n\t\tclearAllIntervals(true)\n     \tmixpanel.identify(user.email);\n      \tmixpanel.track('Customer -End meeting',{'JobId':jobId});\n      \t// mixpanel code//\n\t\tsetMethod(\"ComputerAudio\");\n\t\twindow.localStorage.setItem(\"secs\",0)\n\t\twindow.localStorage.removeItem(\"secs\")\n\t\twindow.localStorage.removeItem(\"extraMin\")\n\n\t\tlet jobTechId = (job && job.technician && job.technician.id ? job.technician.id : \"\");\n\t\tlet data = {jobId : jobId,user_type:user.userType,techId:jobTechId}\n\n\t\tlet fetchUpdatedJob =  await JobService.retrieveJob(job.id)\n\t\tconsole.log('fetchUpdatedJob>>>>>>>>',fetchUpdatedJob)\n\t\tlet miliseconds = fetchUpdatedJob.total_seconds*1000\n\t\tconsole.log('miliseconds>>>>>>>',miliseconds)\n\t\tdata['total_time'] =  convert_millis_to_hms_format(miliseconds)\n\t\tconsole.log(data['total_time'],'.............................')\n\n\n\t\tdata['job_data'] = job\n\t\tdata['total_seconds'] = fetchUpdatedJob.total_seconds\n\t\tlet totalPaidJobsCount = await getTotalPaidJobs({'customer':job.customer.id})\n        console.log(\"totalPaidJobsCount\",totalPaidJobsCount)\n\n\t\tdata['is_free_job'] = (totalPaidJobsCount > 1 ? false : true)\n\n\t\tif(notification){\n\t\t\tnotification.destroy()\n\t\t}\n\t\tlet totalCostGenerationData = {\"jobId\":jobId,\"customerId\":job.customer.id}\n\t\tconsole.log(\"************************ Job Service Request Total Cost  *****************************************\")\n\t\tlet res = await JobService.generateTotalCost(totalCostGenerationData)\n\t\tconsole.log(\"************************ Job Service Request Total Cost *****************************************\")\n\n\t\tawait CreateEarningReport(jobId, job, res.total_cost);\t\t\n\n\n\t\tif (api != null) {\n\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\tconsole.log(\"condition 1 ::::::: \",participant_array[k]['displayName'] != user?.firstName.trim() + user?.lastName.trim())\n\t\t\t\t\tconsole.log(\"participant_array[k]['displayname'] ::: \",participant_array[k]['displayName'])\n\t\t\t\t\tconsole.log(\" user?.firstName + user?.lastName :::: \", user?.firstName.trim() + user?.lastName.trim())\n\t\t\t\t\tif(participant_array[k]['displayName'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\tconsole.log(\"kicking out participant \",participant_id)\n\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\tapi.executeCommand('hangup');\n\t\t}\n\t\tconsole.log(\"Data in end meeting is \",data)\n\t\tawait WebSocket.create({\n\t\t        user: user.id,\n\t\t        job : jobId,\n\t\t        socketType:'meeting-closed',\n\t\t        userType:user.userType,\n\t\t        data:data,\n\t\t        from:\"meetingEnd\"\n\t\t\t});\n\t}\n\n  \tconst hideLoader = ()=>{\n\t\tsetShowLoader(false)\n\t}\n\n\n\n  \tconst confirmNotes = async() => {\n  \t\tsetEmptyNotesAlert(false);\n  \t\tif(confirmedIssuesList.length === 0){\n  \t\t\tsetEmptyNotesAlert(true);\n  \t\t}else{\n\t  \t\tModal.confirm({\n\t\t      title: 'By selecting \u201ccontinue,\u201d you confirm we\u2019ve understood and summarized your issue correctly. You will not be able to request support for additional issues during this session.',\n\t\t      okText: 'Continue',\n\t\t      cancelText: 'Go back',\n\t\t      className:'app-confirm-modal',\n\t\t      onOk() {\n\t\t        confirmNotesSubmit();\n\t\t      },\n\t\t    });  \t\t\n  \t\t}\n  \t}\n  \tconst confirmNotesSubmit = async() => {\n  \t\tsetNotesSaveLoader(true)\n  \t\tconfirmedIssuesList.sort(function(a, b){  \n\t\t  return issuesList.indexOf(a) - issuesList.indexOf(b);\n\t\t});\n\n  \t\twindow.confirmNotesSubmit = setTimeout(async function(){\n  \t\t\tlet confirmedNotes = confirmedIssuesList.join(\"|SEP|\");\n\t  \t\tawait updateJob(jobId,{confirmedNotes:confirmedNotes,\"customerConfirmedNotes\":true,})\n\t  \t\tsetAlertMessageShow(true)\n\t  \t\tsetNotesConfirmed(true);\n\t  \t\tlet data = {}\n\t\t\tdata['jobId'] = jobId\n\t\t\tdata['customerConfirmedNotes'] = true\n\t\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t\t// socket.emit(\"customer-confirmed-notes\",data)\n\n\t  \t\tmixpanel.identify(user.email);\n\t      \tmixpanel.track('Customer - Confirmed the notes',{'JobId':jobId});\n\n\t      \t//Start the meeting time\n\t      \tupdateJobTime()\n\n\t  \t\twindow.noteSaveLoaderTimeOut = setTimeout(function(){\n\t\t\t\tsetNotesSaveLoader(false)\n\t\t\t},1500)\n\t\t\twindow.alertMessageTimeOut = setTimeout(function(){\n\t\t\t\tsetAlertMessageShow(false)\n\t\t\t},4000)\n  \t\t},1000)\n  \t}\n\n  \tconst declineNotes = async() => {\n  \t\tModal.confirm({\n\t      title: 'We`ll send these notes back to technician to review it again. Do you want to proceed?',\n\t      okText: 'Continue',\n\t      cancelText: 'Cancel',\n\t      className:'app-confirm-modal',\n\t      onOk() {\n\t        declineNotesSubmit();\n\t      },\n\t    });  \t\t\n  \t}\n\n  \tconst declineNotesSubmit = async() => {\n  \t\tsetNotesDeclineLoader(true)\n  \t\tawait updateJob(jobId,{\"customerDeclinedNotes\":true, \"technicianSubmitNotes\":false})\n  \t\tsetDeclineMessageShow(true)\n  \t\tsetNotesDeclined(true)\n  \t\t\n  \t\tlet data = {}\n\t\tdata['jobId'] = jobId\n\t\tdata['customerDeclinedNotes'] = true\n\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t// socket.emit(\"customer-declined-notes\",data)\n\n  \t\tmixpanel.identify(user.email);\n      \tmixpanel.track('Customer - Declined the notes',{'JobId':jobId});\n\n  \t\twindow.notesDeclineTimer = setTimeout(function(){\n\t\t\tsetNotesDeclineLoader(false)\n\t\t},1500)\n  \t}\n\n  \tconst issueChecked = (e) => {\n  \t\tif(e.target.value === 'all'){\n  \t\t\tsetAllNotesSelected(!allNotesSelected)\n  \t\t\tif(e.target.checked){\n  \t\t\t\tsetConfirmedIssuesList(issuesList)\n  \t\t\t}else{\n  \t\t\t\tsetConfirmedIssuesList([])\n  \t\t\t}\n  \t\t}else{\n  \t\t\tsetAllNotesSelected(false)\n\t\t\tlet confirmedIssuesListArr = [...confirmedIssuesList];\n\t\t\tlet idx = e.target.value\n\t  \t\tif(e.target.checked){\n\t  \t\t\tconfirmedIssuesListArr.push(issuesList[idx])\n\t  \t\t}else{\n\t  \t\t\tlet findIdx = confirmedIssuesListArr.indexOf(issuesList[idx])\n\t  \t\t\tconfirmedIssuesListArr.splice(findIdx,1)\n\t  \t\t}\n\t  \t\tsetConfirmedIssuesList(confirmedIssuesListArr)\n\n\t  \t\tif(confirmedIssuesListArr.length === issuesList.length){\n\t  \t\t\tsetAllNotesSelected(true)\n\t  \t\t}\n  \t\t}\n  \t}\n  \tconst handleUserUsingComputer = ()=>{\n  \t\ttry{\n  \t\t\thandleParticipantMic()\n  \t\t\twindow.localStorage.setItem(\"customerCallingHimSelf\",false)\n  \t\t\t// window.location.reload()\n  \t\t}\n  \t\tcatch(err){\n  \t\t\tconsole.log(\"error ::::: \",err)\n  \t\t}\n  \t}\n  \tconst call_yourself = ()=>{\n  \t\t\thandleParticipantMic()\n\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n  \t\t\t// let extLength = (job.customer.extension && job.customer.extension !== '' ? job.customer.extension.length : \"0\")\n\t\t\t// let extension = job.customer.extension && job.customer.extension != null ? job.customer.extension : \"\"\n  \t\t\tapi.invite(\n\t\t\t[{allowed: true,number: `${job.customer.phoneNumber}`,originalEntry:`${job.customer.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}]\n\t\t\t).then(()=>{\n\t\t\t\tconsole.log(\"successfully called myself\")\n\t\t\t});\n\t\twindow.localStorage.setItem(\"customerCallingHimSelf\",true)\n\t\t// window.location.reload();\n  \t\t\n  \t}\n\n  \tconst call_technician = ()=>{\n\n  \t\tif(api != null){\n  \t\t\tsetDisabledCallTechnician(true)\n  \t\t\tapi.invite([{allowed: true,number: `${job.technician.profile.confirmId.phoneNumber+\"0\"}`,originalEntry: `${job.technician.profile.confirmId.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n  \t\t\twindow.disabledCallTechnician = setTimeout(function(){ setDisabledCallTechnician(false) }, 15000);\n  \t\t}\n  \t\t\n  \t}\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row>\n                <Col md=\"3\" lg=\"2\">\n                    <Row>\n\t\t\t\t\t    <Col xs={12} className=\"pt-4\">\n\t\t\t\t\t        <div className=\"bar-logo-box\">\n\t\t\t\t\t          \t<Link to=\"/\">\n\t\t\t\t\t            \t<Image onClick={localStorage.removeItem('CurrentStep')}src=\"https://winkit-software-images.s3.amazonaws.com/geeker_logo.png\" alt=\"Geeker\" />\n\t\t\t\t\t          \t</Link>\n\t\t\t\t        \t</div>\n\t\t\t\t      \t</Col>\n\t\t\t\t\t      \n\t\t\t\t      \t<Col xs={12} className=\"mt-4 side-menu-bar px-3\">\n\t\t\t\t      \t\t<Row>\n\t\t\t\t\t      \t\t{waitingForTechNotes &&\n\t\t\t\t\t\t      \t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t        <h5 className=\"font-weight-bold\">First, let\u2019s confirm your issue</h5>\n\t\t\t      \t\t\t\t\t\t<ProgressStyled percent={40} showInfo={false} />\n\t\t      \t\t\t\t\t\t</Col>\n\t\t      \t\t\t\t\t}\n\t\t      \t\t\t\t\t{jobDetailsUpdated &&\n\t\t\t\t\t\t            <Alert variant='success' className=\"w-100\">\n\t\t\t\t\t\t                Technician updated the job details. You can see the updated information at bottom of meeting block.\n\t\t\t\t\t\t            </Alert>\n\t\t\t\t\t          \t}\n\t\t      \t\t\t\t\t{!waitingForTechNotes &&\n\t\t      \t\t\t\t\t\t<React.Fragment key=\"Technotes\">\n\t\t      \t\t\t\t\t\t\t{alertMessageShow &&\n\t\t\t\t\t\t\t\t            <Alert variant='success' className=\"w-100\">\n\t\t\t\t\t\t\t\t                Thanks for confirmation.\n\t\t\t\t\t\t\t\t            </Alert>\n\t\t\t\t\t\t\t          \t}\n\t\t\t\t\t\t\t          \t{declineMessageShow &&\n\t\t\t\t\t\t\t\t            <Alert variant='danger' className=\"w-100\">\n\t\t\t\t\t\t\t\t                Notes are declined by you. Technician will review the notes again. Please wait for technician input.\n\t\t\t\t\t\t\t\t            </Alert>\n\t\t\t\t\t\t\t          \t}\n\t\t\t\t\t\t\t          \t{emptyNotesAlert &&\n\t\t\t\t\t\t\t\t            <Alert variant='danger' className=\"w-100\">\n\t\t\t\t\t\t\t\t                Please select the issues you want to solve before confirm.\n\t\t\t\t\t\t\t\t            </Alert>\n\t\t\t\t\t\t\t          \t}\n\t\t      \t\t\t\t\t\t\t<Col xs={12}>\n\t\t      \t\t\t\t\t\t\t\t{notesConfirmed \n\t\t      \t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t        \t\t<h5 className=\"font-weight-bold\">Confirmed Points :</h5>\n\t\t\t\t\t\t\t\t        \t\t:\n\t\t\t\t\t\t\t\t        \t\t\t<h5 className=\"font-weight-bold\">Please confirm the issues listed :</h5>\n\t\t      \t\t\t\t\t\t\t\t}\n\t\t\t      \t\t\t\t\t\t</Col>\n\t\t\t      \t\t\t\t\t\t<Col xs={12} className=\"notes-outer\">\n\t\t\t      \t\t\t\t\t\t\t {issuesList.length > 0 &&\n\t\t\t\t\t\t\t\t        \t\t<ul className=\"small-text p-0 m-0\">\n\t\t\t\t\t\t\t\t        \t\t\t{!notesConfirmed &&\n\t\t\t\t\t\t\t\t\t        \t\t\t<li className=\"issue-list-item-with-check\">\n\t\t\t\t\t\t\t        \t\t\t\t\t\t<label className=\"m-0\">\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t<span className=\"issue-checkbox-outer\">\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tvalue='all' \n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tclassName=\"issue-checkbox\" \n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tonChange={issueChecked}\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tdisabled={meetingJob.customerConfirmedNotes}\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tchecked={allNotesSelected}\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tid={\"checkbox-issue-all\"}\n\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t        \t\t\t\t\t\t\t<span htmlFor={\"checkbox-issue-all\"} className=\"issue-text\"><b>Select all</b></span>\n\t\t\t\t\t\t\t        \t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t        \t\t\t\t\t</li>\n\t\t\t\t\t\t\t        \t\t\t\t}\n\t\t\t\t\t\t\t\t\t        \t\t{\n\t\t\t\t\t\t\t\t\t        \t\t\tissuesList.map((i,idx)=>{\n\t\t\t\t\t\t\t\t\t        \t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t<li className=\"issue-list-item-with-check\" key={'issue_item_'+idx}>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t<span className=\"issue-checkbox-outer\">\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tvalue={idx} \n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tclassName=\"issue-checkbox\" \n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tonChange={issueChecked}\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tdisabled={meetingJob.customerConfirmedNotes}\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tchecked={(confirmedIssuesList.indexOf(i) === -1 ? false : true)}\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\tid={\"checkbox-issue-\"+idx}\n\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t<span htmlFor={\"checkbox-issue-\"+idx} className=\"issue-text\">{i}</span>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t        \t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t        \t\t})\n\t\t\t\t\t\t\t\t\t\t        \t}\n\t\t\t\t\t\t\t\t        \t\t</ul>\n\t\t\t\t\t\t\t\t\t        }\n\t\t\t      \t\t\t\t\t\t</Col>\n\t\t\t      \t\t\t\t\t\t{!notesConfirmed && !notesDeclined &&\n\t\t\t      \t\t\t\t\t\t\t<React.Fragment key=\"notes\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"Confirm\" className={(notesSaveLoader ? \"disabled-btn\" : \"\") + \" btn app-btn w-100 mt-3 notes-submit-btn\"} onClick={confirmNotes} disabled={notesSaveLoader}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{notesSaveLoader\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Spin />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Confirm</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"Decline\" className={(notesDeclineLoader ? \"disabled-btn\" : \"\") + \" btn app-btn app-btn-transparent w-100 mt-3 notes-submit-btn\"} onClick={declineNotes} disabled={notesDeclineLoader}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{notesDeclineLoader\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Spin />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Decline</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t      \t\t\t\t\t\t</React.Fragment>\n\t\t\t\t      \t\t\t\t\t}\n\n\t\t\t      \t\t\t\t\t</React.Fragment>\n\t\t      \t\t\t\t\t}\n\t      \t\t\t\t\t</Row>\n\t\t\t\t        </Col>\n\t\t\t      \t\n\t\t\t\t    </Row>\n\n                </Col>\n                <Col md=\"9\" lg=\"10\" className=\"px-4\">\n                \t<Row>\n                \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n                \t\t<Col xs=\"12\" className=\"jitsi-screen-outer mt-4\">\n\t\t\t\t\t\t\t{showLoader && (\n\t\t\t\t\t\t\t\t<div className=\"session_loading\">\n\t\t\t\t\t\t\t\t\t<button onClick={hideLoader} style={{\"display\":\"none\"}} ref={hideButton}>Hide me</button>Loading the session\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t )}\n\t\t\t\t\t\t\t{jitsiSessionEnd &&\n\t\t\t\t\t\t\t\t<div className=\"no-meeting-loaded\">\n\t\t\t\t\t\t\t\t \t<div className=\"meeting-area text-center\">\n\t\t\t\t\t\t\t\t \t\t<h2 className=\"mb-3\">Thanks for using Geeker service.</h2>\n\t\t\t\t\t\t\t\t \t\t<h1>Looked like meeting session is ended. Please reload your page.</h1>\n\t\t\t\t\t\t\t\t \t</div>\n\t\t\t\t\t\t\t\t </div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{!jitsiSessionEnd &&\n\t\t\t\t\t\t\t\t<div id={jitsiContainerId} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs=\"12\">\n\t                \t\t<Col xs=\"12\" className=\"jitsi-bottom-section my-4 p-3 radius-8\">\n\t                \t\t\t<Row>\n\t                \t\t\t\t<Col lg=\"5\" md=\"12\">\n\t                \t\t\t\t\t<Row>\n\t                \t\t\t\t\t\t<Col xs=\"12\" className=\"pt-3\">\n\t                \t\t\t\t\t\t\t<Row>\n\t                \t\t\t\t\t\t\t\t<Col md=\"5\">\n\t                \t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.customer &&\n\t                \t\t\t\t\t\t\t\t\t\t<>\t\n\t                \t\t\t\t\t\t\t\t\t\t\t<p>\n\t                \t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Software:</span>\n\t                \t\t\t\t\t\t\t\t\t\t\t<span >{job.software.name + (job.subSoftware ? ' ('+job.subSoftware.name+')' : '')}</span>\n\t                \t\t\t\t\t\t\t\t\t\t\t</p>\n                \t\t\t\t\t\t\t\t\t\t\t</>\n                \t\t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.technician &&\n\t                \t\t\t\t\t\t\t\t\t\t<>\n\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Technician:</span>\n\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t                \t\t\t\t\t\t\t\t\t\t\t{meetingJob.technician.user.firstName} {meetingJob.technician.user.lastName}\n\t\t                \t\t\t\t\t\t\t\t\t\t</span>\n\t\t                \t\t\t\t\t\t\t\t\t\n\t                \t\t\t\t\t\t\t\t\t\t</>\n\t                \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t\t\t<Col md=\"3\">\n\t                \t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.estimatedTime \n\t                \t\t\t\t\t\t\t\t\t\t?\n\t                \t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. time:</span>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t{meetingJob.estimatedTime} mins\n\t\t\t                \t\t\t\t\t\t\t\t\t\t</span>\n\t\t                \t\t\t\t\t\t\t\t\t\t</>\n\t                \t\t\t\t\t\t\t\t\t\t:\n\t                \t\t\t\t\t\t\t\t\t\t<>\n\t                \t\t\t\t\t\t\t\t\t\t\t{softwareSettings && softwareSettings.estimatedTime &&\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. time:</span>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t{softwareSettings.estimatedTime} mins\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t</>\n\t\t\t                \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t\t\t\t\t</>\n\t                \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t\t\t<Col md=\"4\">\n\t                \t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.estimatedPrice\n\t                \t\t\t\t\t\t\t\t\t\t?\n\t                \t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. price:</span>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t<EstimatedPriceToggle  softwareSettings = {meetingJob}/>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t{totalJobs === 0 &&\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"small-font font-italic\">(First 6 minutes free)</div>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t                \t\t\t\t\t\t\t\t\t\t</span>\n\t\t                \t\t\t\t\t\t\t\t\t\t</>\n\t                \t\t\t\t\t\t\t\t\t\t:\n\t                \t\t\t\t\t\t\t\t\t\t<>\n\t                \t\t\t\t\t\t\t\t\t\t\t{softwareSettings && softwareSettings.estimatedPrice &&\n\t\t\t                \t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. price:</span>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t<EstimatedPriceToggle  softwareSettings = {softwareSettings}/>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t{totalJobs === 0 &&\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t\t<div className=\"small-font font-italic\">(First 6 minutes free)</div>\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t                \t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t                \t\t\t\t\t\t\t\t\t\t</>\n\t\t\t                \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t\t\t\t\t</>\n                \t\t\t\t\t\t\t\t\t\t} \n\t                \t\t\t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t\t</Row>\n\t                \t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t<Col xs=\"12\" className=\"mt-3\">\n\t                \t\t\t\t\t\t\t{meetingJob && meetingJob.customer &&\n            \t\t\t\t\t\t\t\t\t\t<React.Fragment key={meetingJob.customer}>\n                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">\n                \t\t\t\t\t\t\t\t\t\t\t{meetingJob.updatedIssueDescription && meetingJob.updatedIssueDescription.length > 0 \n                \t\t\t\t\t\t\t\t\t\t\t\t?\n                \t\t\t\t\t\t\t\t\t\t\t\t\t<>Issue (Added by you):</>\n            \t\t\t\t\t\t\t\t\t\t\t\t\t:\n            \t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Issue:</>\n                \t\t\t\t\t\t\t\t\t\t\t}                \t\t\t\t\t\t\t\t\t\t\t\n                \t\t\t\t\t\t\t\t\t\t</span>\n                \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n                \t\t\t\t\t\t\t\t\t\t\t{meetingJob.issueDescription}                \t\t\t\t\t\t\t\t\t\t\t\n                \t\t\t\t\t\t\t\t\t\t</span>\n            \t\t\t\t\t\t\t\t\t\t</React.Fragment>\n            \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t\t</Col>\n                \t\t\t\t\t\t\t{meetingJob && meetingJob.customer && meetingJob.updatedIssueDescription && meetingJob.updatedIssueDescription.length > 0 &&\n\t\t                \t\t\t\t\t\t<Col xs=\"12\" className=\"mt-3\">\n\t        \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Issue [Updated by technician ({meetingJob.updatedIssueDescription[meetingJob.updatedIssueDescription.length-1].technicianName})]:</span>\n\t        \t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.updatedIssueDescription[meetingJob.updatedIssueDescription.length-1].issueDescription}        \t\t\t\t\t\t\t\t\t\t\t\n\t        \t\t\t\t\t\t\t\t\t\t</span>\n\t\t                \t\t\t\t\t\t</Col>\n        \t\t\t\t\t\t\t\t\t}\n\t                \t\t\t\t\t</Row>\n\t                \t\t\t\t</Col>\n\t                \t\t\t\t<Col md=\"12\" lg=\"7 text-right\">\n\t                \t\t\t\t\t<Row>\n\t                \t\t\t\t\t\t<Col lg=\"2\" md=\"12\" className=\"pt-3 pt-lg-0\">\n\t                \t\t\t\t\t\t\t<div key={intialTimeVal} className=\"meeting-timer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer initialTime={intialTimeVal} startImmediately={false} ref={tiRef}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{() => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"f-16\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Hours\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.hours = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Minutes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.minutes = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Seconds\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.seconds = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Timer>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t                \t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t<Col md=\"12\" lg=\"6\" className=\"text-right\">\n\t                \t\t\t\t\t\t\t<Row>\n\t                \t\t\t\t\t\t\t\t<Col xs=\"12\">\n\t                \t\t\t\t\t\t\t<Row style={{justifyContent:\"center\"}}>\n\t\t\t                \t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Give remote access to technician.\">\n\t\t\t                \t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t                \t\t\t\t\t\t\t<Button className=\"meeting-btn\" onClick={clicksession}>\n\t\t\t\t\t                \t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faDesktop}/>\n\t\t\t\t\t                \t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={clicksession}>Remote</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\t\t\t                \t\t\t\t\t\t\t\n\t\t\t                \t\t\t\t\t\t</Col>\n\t\t\t                \t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Invite user\">\n\t\t\t                \t\t\t\t\t\t\t<Row>\n\t\t\t                \t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t                \t\t\t\t\t\t\t<Button className=\"meeting-btn\" onClick={()=>{dialInRef.current.click()}}>\n\t\t\t\t\t                \t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPaperPlane}/>\n\t\t\t\t\t                \t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{dialInRef.current.click()}}>Invite</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t                \t\t\t\t\t\t\t\n\t\t\t                \t\t\t\t\t\t</Col>\n\n\n\t\t\t                \t\t\t\t\t\t\n\n\t\t\t                \t\t\t\t\t\t</Row>\n\t\t\t                \t\t\t\t\t\t</Col>\n\t\t\t                \t\t\t\t\t\t<Col xs=\"12\">\n\t                \t\t\t\t\t\t\t<Row style={{justifyContent:\"center\"}}>\n\t\t\t                \t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Call yourself on mobile\">\n\t\t\t                \t\t\t\t\t\t\t<Row>\n\t\t\t\t\t                \t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t                \t\t\t\t\t\t\t<Button className={(disabledCallYourself ? \"disabled-btn\" : \"\") +\" meeting-btn\"}  onClick={()=>{call_yourself()}} disabled={disabledCallYourself} title=\"Call yourself on phone\">\n\t\t\t\t\t                \t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPhone}/>\n\t\t\t\t\t                \t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{call_yourself()}} disabled={disabledCallYourself}>Call yourself</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Call customer on mobile\">\n\t\t\t                \t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t                \t\t\t\t\t\t\t<Button className={(disabledCallTechnician ? \"disabled-btn\" : \"\") +\" meeting-btn\"}  onClick={()=>{call_technician()}} disabled={disabledCallTechnician} title=\"Call customer on phone\" >\n\t\t\t\t\t                \t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPhoneAlt} />\n\t\t\t\t\t                \t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{call_technician()}} disabled={disabledCallTechnician}>Call Technician</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t                \t\t\t\t</Col>\n\t\t\t                \t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center invisible\" title=\"Kick Phone Participant\">\n\t\t\t                \t\t\t\t\t\t\t<Row>\n\t\t\t                \t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t                \t\t\t\t\t\t\t<Button className=\"meeting-btn\" ref={kick} onClick={()=>{kickPhoneParticipant()}}>\n\t\t\t\t\t                \t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPaperPlane}/>\n\t\t\t\t\t                \t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{kickPhoneParticipant()}}>Kick Phone Participant</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t                \t\t\t\t\t\t\t\n\n\t\t\t                \t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t\t</Row>\n\t                \t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t\t\n\t                \t\t\t\t\t\t<Col lg=\"4\" md=\"12\" className=\" text-left text-lg-center pt-3\">\n\t                \t\t\t\t\t\t\t<Row>\n\t                \t\t\t\t\t\t\t\t<Col md=\"12\" className=\"end-meeting-btn-outer\">\n\t\t\t                \t\t\t\t\t\t\t<Button key=\"endmeeting\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={(disabledEndCall ? \"disabled-btn\" : \"\") +\" app-btn app-btn-red\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tendMeetingConfirm();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Click this button to end the meeting.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={disabledEndCall}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{disabledEndCall ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <Spin/>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>End Meeting</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ job && job.customer &&<CustomerCard user={user} values={job.customer} onNext={false} onPrev={false} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} cardsInfo={cardsInfo} setCardsInfo={setCardsInfo} newCardAdded={newCardAdded} setNewCardAdded={setNewCardAdded} showCards={false} />}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ method !==\"ComputerAudio\" && <><span>Disconnected?</span> <Button className=\"app-btn app-btn-transparent joinBtn\" onClick={rejoinPhoneCall} >  <span></span> Call me again </Button> </>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t                \t\t\t\t\t\t</Col>\n\t                \t\t\t\t\t</Row>\n\t                \t\t\t\t</Col>\n\t                \t\t\t</Row>\n\t\t\t\t\t\t\t\t<ConfirmTechMatch \n\t\t\t\t\t\t\t\t\tinvited={true} \n\t\t\t\t\t\t\t\t\tdialInRef={dialInRef} \n\t\t\t\t\t\t\t\t\tstopScreenShare = {stopShareScreen}\n\t\t\t\t\t\t\t\t\tsetInvitation = {setInvitation}\n\t\t\t\t\t\t\t\t\tsetInvitedNumber = {setInvitedNumber}\n\t\t\t\t\t\t\t\t\t// setExtension = {setExtension} \n\t\t\t\t\t\t\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t\t\t\t\t\t\tremoteDesktopRef = {remoteDesktopRef}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{/* <ExtensionModal\n\t\t\t\t\t\t\t\t\tonClose={() => setIsExtensionModalOpen(false)}\n\t\t\t\t\t\t\t\t\tisOpen={isExtensionModalOpen}\n\t\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t\t Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t\t\t\t\t\t*/}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<PinModal pinCode={pinCode} onClose={handleModalClose} isOpen={isOpen} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Col>\n                    </Row>\n                </Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nconst Link = style(DOM.Link)`\n  \tcursor:pointer;\n`;\nconst Image = style.img`\n  \tdisplay: block;\n  \twidth: 120px;\n`;\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #1bd4d5;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n  .ant-progress-inner{\n  \tbackground-color: #CBD1D6;\t\n  }\n`;\n\nconst EstimatedPriceToggle = (props)=>{\n\t// console.log(props,\"i am the props\")\n\tconst time1 = (props.softwareSettings ? parseInt(props.softwareSettings.estimatedTime.split(\"-\")[0]) : 'NA')\n    const time2 = (props.softwareSettings ? parseInt(props.softwareSettings.estimatedTime.split(\"-\")[1]) : 'NA')\n\tlet price_per_six_min =props.softwareSettings.rate\n\tlet price1 = (props.softwareSettings ? props.softwareSettings.estimatedPrice.split(\"-\")[0] : price_per_six_min )\n    let price2 = (props.softwareSettings ? props.softwareSettings.estimatedPrice.split(\"-\")[1] : price_per_six_min )\n\tlet temp1 = (time1/6)*parseInt(price1)\n\ttemp1 = (temp1 ? temp1.toFixed(0) : 'NA')\n\t let temp2 = (time2/6)*parseInt(price2)\n\t temp2 = (temp2 ? temp2.toFixed(0) : 'NA')\n\treturn <>\n\t\t\t${temp1}-{temp2}\n\t</>\n\n}\nCustomerJobProgress.propTypes = {};\n\nexport default memo(CustomerJobProgress);",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "Confirm.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title, Text } = Typography;\n\nconst ConfirmJobCompleted = () => {\n  const { jobId } = useParams();\n  const history = useHistory();\n  const { socket } = useSocket();\n\n  const handleConfirm = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('confirm-solution', { id: jobId, confirmed: true });\n    history.replace('/dashboard');\n  };\n\n  const handleCancel = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('confirm-solution', { id: jobId, confirmed: false });\n    history.replace('/dashboard');\n  };\n\n  return (\n    <div>\n      <Title level={3}>Job completed!</Title>\n      <Text>\n        Your tech has indicated that they have successfully resolved your issue.\n        Please confirm if accurate\n      </Text>\n      <StepButtonStyled onClick={handleConfirm}>Confirm</StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleCancel}>\n        Need more work\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nConfirmJobCompleted.propTypes = {};\n\nexport default memo(ConfirmJobCompleted);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\Confirm.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmIssueSummary.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport TextArea from '../../../../components/TextArea';\nimport { useJob } from '../../../../context/jobContext';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title, Text } = Typography;\n\nconst ConfirmIssueSummary = ({ setCurrentStep, issue }) => {\n  const { jobId } = useParams();\n  const { history } = useHistory();\n  const { updateJob } = useJob();\n  const { socket } = useSocket();\n\n  const handleConfirm = async () => {\n    try {\n      await updateJob(jobId, { issueDescription: issue });\n      // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n      // socket.emit('confirm-issue-summary', { id: jobId, confirmed: true });\n      setCurrentStep(4);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleCancel = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('confirm-issue-summary', { id: jobId, confirmed: false });\n    history.push('/dashboard');\n  };\n\n  return (\n    <div>\n      <Title level={3}>Please confirm the issue summary</Title>\n      <Text>\n        As soon as you feel your tech properly summarized your issue, Please\n        confirm below\n      </Text>\n      <TextAreaStyled rows={15} value={issue} />\n      <StepButtonStyled onClick={handleConfirm}>Confirm</StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleCancel}>\n        Cancel Job\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst TextAreaStyled = styled(TextArea)`\n  margin-top: 20px;\n  resize: none;\n  height: 70%;\n`;\n\nConfirmIssueSummary.propTypes = {\n  setCurrentStep: PropTypes.func,\n  issue: PropTypes.string,\n};\n\nexport default memo(ConfirmIssueSummary);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\ConfirmIssueSummary.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmJobCompleted.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo } from 'react';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\n\nconst { Title, Text } = Typography;\n\nconst ConfirmJobCompleted = () => (\n  <div>\n    <Title level={3}>Job completed!</Title>\n    <Text>\n      Your tech has indicated that they have successfully resolved your issue.\n      Please confirm if accurate\n    </Text>\n    <StepButtonStyled>Confirm</StepButtonStyled>\n    <StepButtonStyled type=\"back\">Need more work</StepButtonStyled>\n  </div>\n);\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nConfirmJobCompleted.propTypes = {};\n\nexport default memo(ConfirmJobCompleted);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\ConfirmJobCompleted.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmTechMatch.js",
                                                                    "fileData": "import React, { memo, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Typography } from 'antd';\nimport styled from 'styled-components';\nimport { useSocket } from '../../../../context/socketContext';\nimport Box from '../../../../components/common/Box';\nimport StepButton from '../../../../components/StepButton';\n// import ExtensionModal from '../../AcceptJob/steps/ExtensionModal';\nimport PinModal from '../../AcceptJob/steps/PinModal';\n// import AcceptJob from 'pages/Customer/AcceptJob';\nimport DialInOutModal from '../../AcceptJob/steps/DialInOutModal';\nimport { useUser } from '../../../../context/useContext';\nimport mixpanel from 'mixpanel-browser';\n\nconst { Text } = Typography;\n\nconst ConfirmTechMatch = ({ setCurrentStep, invited, stopScreenShare, dialInRef, enableComputerAudio, disableComputerAudio ,setInvitation, setInvitedNumber, remoteDesktopRef, inviteRef}) => {\n  const history = useHistory();\n  const { jobId } = useParams();\n  const {user} = useUser();\n  // console.log(\">>>>>>.user\",user)\n  const { socket } = useSocket();\n  // const [isExtensionModalOpen, setIsExtensionModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [openSecondModal, setopenSecondModal] = useState(false);\n  const [openFirstModal, setopenFirstModal] = useState(false);\n  const [isDialInOutModalOpen, setIsDialInOutModalOpen] = useState(false);\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.on('match-confirmed', isMatched => {\n    //   if (isMatched) {\n    //     setCurrentStep(1);\n    //   } else {\n    //     history.replace('/dashboard');\n    //   }\n    // });\n\n    socket.on(\"start-remote-desktop\",(result)=>{\n      if(jobId === result.id){\n        if(user.userType  === 'technician'){\n           // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician - Invite to call button',{'JobId':jobId});\n            // mixpanel code//\n\n        }else{\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer -  Invite to call button',{'JobId':jobId});\n            // mixpanel code//\n        }\n      \n        window.open('https://remotedesktop.google.com/support', 'Generate Code', \"height=600,width=800\");\n      }\n\n    })\n  }, [history, jobId, setCurrentStep, socket]);\n\n  const endPinModal = () => {\n    setIsPinModalOpen(false);\n  };\n\n  /*const startChromeExtension = () => {\n    socket.emit('dial-number', { id: jobId });\n    setIsExtensionModalOpen(true);\n  }*/\n\n  // const endChromeExtension = () => {\n  //   // setIsPinModalOpen(true);\n  //   // setopenFirstModal(true);\n  // }\n  const onSubmit = pinCode => {\n    setInvitation(true)\n    console.log(\">>>>hy\")\n    // setIsPinModalOpen(false);\n  }\n\n  const openRemoteDesktopInstallWindow = () => {\n    try{\n      \n      // console.log('heloooooooooooooooooo thereeee>>>>>>>>>>>>>')\n      if(user.userType  === 'technician'){\n        // mixpanel code//\n        mixpanel.identify(user.email);\n        mixpanel.track('Technician - Start remote desktop',{'JobId':jobId});\n        // mixpanel code//\n\n      }else{\n        // mixpanel code//\n        mixpanel.identify(user.email);\n        mixpanel.track('Customer - Start remote desktop',{'JobId':jobId});\n        // mixpanel code//\n      }\n\n      socket.emit(\"remote-desktop-triggered\",jobId)\n\n      // stopScreenShare()\n    \n    }\n    catch{\n      console.log(\"functions not found\")\n    }\n\n\n  };\n\n  const openDialInModal = () => {\n    if(user.userType  === 'technician'){\n       // mixpanel code//\n        mixpanel.identify(user.email);\n        mixpanel.track('Technician - Invite to call button',{'JobId':jobId});\n        // mixpanel code//\n\n      }else{\n        // mixpanel code//\n        mixpanel.identify(user.email);\n        mixpanel.track('Customer -  Invite to call button',{'JobId':jobId});\n        // mixpanel code//\n      }\n      // setIsDialInOutModalOpen(true);\n  };\n  const closeDialInModal = () => {\n    setIsDialInOutModalOpen(false);\n  };\n  return (\n    <div>\n     {/* <h2>Let&apos;s confirm your tech can resolve your issue</h2>\n      <div>Please demonstrate the issue you are trying to resolve</div>\n      <br />\n      <h2>Waiting for tech Input....</h2>*/}\n    \n      {\n        invited && (\n          <Box marginTop={30} className=\"d-none\">\n            <h3>&nbsp;</h3>\n            <StyledButton ref={remoteDesktopRef} onClick={openRemoteDesktopInstallWindow} title=\"If necessary, you can offer your technician the ability to control your desktop.\">Start remote desktop session</StyledButton>\n            <Text className=\"text-below\">* Please note: Remote desktop requires software to be downloaded and installed to your computer and may require guidance from the technician to start a session. </Text>\n          </Box>\n        )\n      }\n      {\n      // Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n      /* <ExtensionModal\n        onClose={endChromeExtension}\n        isOpen={isExtensionModalOpen}\n      /> */}\n     <PinModal\n        onClose={endPinModal}\n        isOpen={isPinModalOpen}\n        onSubmit={onSubmit}\n        openSecondModal={openSecondModal}\n        openFirstModal={openFirstModal}\n        setopenSecondModal={setopenSecondModal}\n        setopenFirstModal={setopenFirstModal}\n      />\n\n       <Box marginTop={30} className=\"d-none\">\n          <StyledButton onClick={openDialInModal} ref={dialInRef} title=\"\" className=\"call_options\">Invite to call</StyledButton>\n        </Box> \n      {\n      <DialInOutModal\n        onClose={closeDialInModal}\n        isOpen={isDialInOutModalOpen}\n        enableComputerAudio={enableComputerAudio}\n        disableComputerAudio={disableComputerAudio}\n        onSubmit = {onSubmit}\n        setInvitation = {setInvitation}\n        setInvitedNumber = {setInvitedNumber}\n        JobId={jobId}\n        // setExtension = {setExtension}\n        setIsDialInOutModalOpen = {setIsDialInOutModalOpen}\n\n      /> }\n    </div>\n  );\n};\n\n\n/*const ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;*/\n\nconst StyledButton = styled(StepButton)`\n  margin-top: 15px;\n  margin-bottom: 15px;\n  margin-left:0px !important;\n  span {\n    white-space: break-spaces;\n    margin-left: 15px;\n  }\n`;\n\nexport default memo(ConfirmTechMatch);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\ConfirmTechMatch.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "CustomerJobInProgress.js",
                                                                    "fileData": "import React, { memo } from 'react';\n\nconst CustomerJobInProgress = () => <div></div>;\n\nCustomerJobInProgress.propTypes = {};\n\nexport default memo(CustomerJobInProgress);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\CustomerJobInProgress.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "CustomerTimeApproval.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport { useJob } from '../../../../context/jobContext';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title, Text } = Typography;\n\nconst CustomerTimeApproval = ({ setCurrentStep, estimateTime }) => {\n  const { jobId } = useParams();\n  const history = useHistory();\n  const { updateJob } = useJob();\n  const { socket } = useSocket();\n\n  const handleApprove = async () => {\n    try {\n      await updateJob(jobId, { estimatedTime: estimateTime });\n      // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n      // socket.emit('time-estimate-approve', { id: jobId, approved: true });\n      setCurrentStep(1);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleDecline = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('time-estimate-approve', { id: jobId, approved: false });\n    history.replace('/dashboard');\n  };\n\n  return (\n    <div>\n      <Title level={3}>Time estimate approval</Title>\n      <Text>\n        Your tech expects the job to take longer than originally estimated\n      </Text>\n\n      <TimeEstimatedWrapper>\n        <Text>New Estimate</Text>\n        <TimeStyled level={2}>\n          {estimateTime}\n          {' '}\n          mins\n        </TimeStyled>\n      </TimeEstimatedWrapper>\n      <StepButtonStyled onClick={handleApprove}>Approve</StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleDecline}>\n        Decline\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst TimeEstimatedWrapper = styled.div`\n  margin-top: 20px;\n`;\n\nconst TimeStyled = styled(Title)`\n  margin-top: 0px !important;\n`;\n\nCustomerTimeApproval.propTypes = {\n  setCurrentStep: PropTypes.func,\n  estimateTime: PropTypes.number,\n};\n\nexport default memo(CustomerTimeApproval);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\CustomerTimeApproval.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SummaryCompleted.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport Checkbox from '../../../../components/common/CheckBox';\nimport StepButton from '../../../../components/StepButton';\nimport {useJob} from '../../../../context/jobContext';\n\nconst { Title } = Typography;\n\nconst SummaryCompleted = ({ setCurrentStep, solutions }) => {\n  const history = useHistory();\n  const [completedSolutions, setCompletedSolutions] = useState([]);\n  const { jobId } = useParams();\n  const { jobTime, updateJob } = useJob();\n\n  const handleChangeSolutions = (e, solution) => {\n    if (e.target.checked) {\n      setCompletedSolutions([...completedSolutions, solution]);\n    } else {\n      setCompletedSolutions(\n        completedSolutions.filter(item => item !== solution),\n      );\n    }\n  };\n\n  const handleConfirm = async () => {\n    try {\n      await updateJob(jobId, { solutions: completedSolutions, jobTime });\n      setCurrentStep(5);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleCancel = () => {\n    history.replace('/dashboard');\n  };\n\n  return (\n    <div>\n      <Title level={3}>Summary Completed!</Title>\n      <JobItemsWrapper>\n        {solutions.map(item => (\n          <CheckboxStyled\n            key={item}\n            onChange={e => handleChangeSolutions(e, item)}\n          >\n            {item}\n          </CheckboxStyled>\n        ))}\n      </JobItemsWrapper>\n      <TimeCostWrapper>\n        <div>\n          Time Spent\n          <br />\n          <Title level={3}>{Math.round(jobTime / 60)} mins</Title>\n        </div>\n        <div>\n          Cost\n          <br />\n          <Title level={3}>\n            ${((Math.round(jobTime / 60) * 100) / 60).toFixed(0)}\n          </Title>\n        </div>\n      </TimeCostWrapper>\n      <StepButtonStyled onClick={handleConfirm}>Confirm</StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleCancel}>\n        Cancel Job\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst JobItemsWrapper = styled.div`\n  margin-top: 30px;\n`;\n\nconst TimeCostWrapper = styled.div`\n  background-color: ${props => props.theme.light};\n  display: flex;\n  justify-content: space-between;\n  padding: 15px;\n`;\n\nconst CheckboxStyled = styled(Checkbox)`\n  margin-bottom: 20px;\n  /* display: inline-flex;\nspan {\n  margin-top: -7px;\n}\n.ant-checkbox{\n  margin-top: 0px;\n} */\n\n  margin-left: 0px !important;\n  .ant-checkbox-checked .ant-checkbox-inner {\n    background-color: ${props => props.theme.primary};\n    border-color: ${props => props.theme.primary};\n    &:focus {\n      border-color: ${props => props.theme.primary};\n    }\n    &:hover {\n      border-color: ${props => props.theme.primary};\n    }\n  }\n`;\n\nSummaryCompleted.propTypes = {\n  setCurrentStep: PropTypes.func,\n  solutions: PropTypes.array,\n};\n\nexport default memo(SummaryCompleted);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\SummaryCompleted.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "TechMatchConfirmed.js",
                                                                    "fileData": "import React, { memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Progress } from 'antd';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst TechMatchConfirmed = ({\n  setCurrentStep,\n  onUpdateEstimateTime,\n  onUpdateIssue,\n}) => {\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023 \n    // socket.on('confirm-with-customer', time => {\n    //   onUpdateEstimateTime(time);\n    //   setCurrentStep(2);\n    // });\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023 \n    // socket.on('issue-breakdown', issue => {\n    //   onUpdateIssue(issue);\n    //   setCurrentStep(3);\n    // });\n  }, [jobId, onUpdateEstimateTime, onUpdateIssue, setCurrentStep, socket]);\n\n  return (\n    <div>\n      <h2>It&apos;s a match!</h2>\n      <div>\n        Your tech will break down your issue and create written confirmation to\n        ensure your job is completed successfully.\n      </div>\n      <br />\n      <h2>Waiting for tech Input....</h2>\n      <ProgressStyled percent={80} showInfo={false} />\n    </div>\n  );\n};\n\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\n\nTechMatchConfirmed.propTypes = {\n  setCurrentStep: PropTypes.func,\n  onUpdateEstimateTime: PropTypes.func,\n  onUpdateIssue: PropTypes.func,\n};\n\nexport default memo(TechMatchConfirmed);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\TechMatchConfirmed.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WaitForTechSummary.js",
                                                                    "fileData": "import { Progress, Typography } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { memo, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useJob } from '../../../../context/jobContext';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title, Text } = Typography;\n\nconst WaitForTechSummary = ({ setCurrentStep, setSolutions }) => {\n  const { jobId } = useParams();\n  const { jobTime } = useJob();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.on('summarize-solution', data => {\n    //   setSolutions(data);\n    //   setCurrentStep(7);\n    // });\n  }, [jobId, setCurrentStep, setSolutions, socket]);\n\n  return (\n    <div>\n      <Title level={3}>Job completed!</Title>\n      <Text>\n        Your tech is creating a summary of the steps taken to resolve your\n        issue...\n      </Text>\n      <ProgressStyled percent={80} showInfo={false} />\n      <TimeCostWrapper>\n        <div>\n          Time Spent\n          <br />\n          <Title level={3}>\n            {Math.round(jobTime / 60)}\n            {' '}\n            mins\n          </Title>\n        </div>\n        <div>\n          Cost\n          <br />\n          <Title level={3}>\n            $\n            {((Math.round(jobTime / 60) * 100) / 60).toFixed(0)}\n          </Title>\n        </div>\n      </TimeCostWrapper>\n    </div>\n  );\n};\n\nconst ProgressStyled = styled(Progress)`\n  margin: 20px 0;\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\nconst TimeCostWrapper = styled.div`\n  background-color: ${props => props.theme.light};\n  display: flex;\n  justify-content: space-between;\n  padding: 15px;\n`;\n\nWaitForTechSummary.propTypes = {\n  setCurrentStep: PropTypes.func,\n  setSolutions: PropTypes.func,\n};\n\nexport default memo(WaitForTechSummary);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobProgress\\steps\\WaitForTechSummary.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "JobTechNotFound",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n// import { useLocation } from 'react-router';\n// import * as JobApi from '../../../api/job.api';\n// import Navbar from '../../../components/Navbar';\nimport { useJob } from '../../../context/jobContext';\nimport NotAccepted from './../JobCreate/steps/NotAccepted';\nimport JobDetailView from './../JobCreate/steps/JobDetailView';\nimport JobAlive from './../JobCreate/steps/JobAlive';\nimport Schedule from './../JobCreate/steps/Scehdule';\nimport { Modal } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSocket } from '../../../context/socketContext';\nimport { useParams } from 'react-router';\nimport mixpanel from 'mixpanel-browser';\n\nconst JobCreate = () => {\n  const { socket } = useSocket();\n  const history = useHistory();\n  const { job, fetchJob,updateJob } = useJob();\n  // const location = useLocation();\n  const [currentStep, setCurrentStep] = useState(3);\n  const [notFound, setNotFound] = useState(true); \n  const [loading,setLoading]  = useState(false);\n  const { jobId } = useParams();\n\n   useEffect(() => {\n    socket.emit(\"join\", jobId)\n  }, [])\n\n  const pushBack =() =>{\n    // mixpanel code//\n    mixpanel.identify(job.customer.user.email);\n    mixpanel.track('Customer - Job Declined when no technician available',{'JobId':jobId});\n    // mixpanel code//\n    history.push(\"/\")\n  }\n\n  const handleDecline = () =>{\n    Modal.confirm({\n      title: 'Are you sure you want to decline this job?',\n      okText :\"Yes\",\n      cancelText:\"No\",\n      className:'app-confirm-modal',\n      onOk :pushBack\n    })\n  }\n\n  useEffect(() => {\n\n    if (jobId) {\n      console.log('first fetch job details');\n      fetchJob(jobId);\n    }\n  }, [fetchJob, jobId]);\n\n\n  useEffect(() => {\n     socket.on('not-found-30min',function(){\n        setNotFound(true);\n        setLoading(false);      \n        setCurrentStep(3);\n\n      });\n  }, []);\n\n  return (\n    <div className=\"w-85\">\n      <Container>\n        {\n          job && (\n            <Content>\n                {currentStep === 0 && <JobDetailView handleDecline={handleDecline}  job={job} setStep={setCurrentStep} />}\n                {currentStep === 1 && <Schedule updateJob={updateJob} handleDecline={handleDecline} job={job} setStep={setCurrentStep} />}\n                {currentStep === 2 && <JobAlive updateJob={updateJob} handleDecline={handleDecline} job={job} setStep={setCurrentStep} />}\n                {currentStep === 3 && <NotAccepted handleDecline={handleDecline} job={job} setStep={setCurrentStep} notFound={notFound} loading={loading} setLoading={setLoading}/>}\n            </Content>\n          )\n        }\n      </Container>\n    </div>\n  );\n};\n\nconst Container = styled.div`\n  background-color: #f4f4f4;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  margin-top:100px;\n  justify-content: center;\n`;\nconst Content = styled.div`\n  box-shadow: 0px 6px 15px 0px rgba(0, 0, 0, 0.1);\n  border-radius: 20px;\n  width: 85%;\n  height: fit-content;\n  background-color: #fff;\n  padding: 40px;\n  min-width: 800px;\n`;\n\nexport default JobCreate;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\JobTechNotFound\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "MessageTab",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import ChatPanelTwilio from 'components/ChatPanelTwilio'\nimport React, { useState } from 'react'\nimport Avatar from '@mui/material/Avatar';\nimport { useEffect } from 'react';\nimport * as JobApi from '../../../api/job.api'\nimport { useSocket } from 'context/socketContext';\nimport Badge from '@mui/material/Badge';\nimport './style.css';\nimport { Spin } from 'antd';\nimport Alert from '@mui/material/Alert';\nimport { useHistory, useLocation } from 'react-router';\nimport * as TwilioChatApi from '../../../api/twilioChat.api';\n\nfunction MessageTab({ user }) {\n    const { socket } = useSocket();\n    const [userTwilioData, setUserTwilioData] = useState([])\n    const [chatId, setChatId] = useState('')\n    const [selectedChatId, setSelectedChatId] = useState(null);\n    const [refreshTechUseEffect, setRefreshTechUseEffect] = useState(false)\n    const [notificationDot, setNotificationDot] = useState([])\n    const [loadChat, setLoadChat] = useState(false);\n    const [disableDiv, setdisableDiv] = useState(false)\n    const [noConversationLoad, setNoConversationLoad] = useState(false)\n    const [refreshTechChat, setrefreshTechChat] = useState(false)\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const tech_id = queryParams.get('message') ? queryParams.get('message') : false;\n    const history = useHistory();\n\n    function stringToColor(string) {\n        let hash = 0;\n        let i;\n\n        for (i = 0; i < string.length; i += 1) {\n            hash = string.charCodeAt(i) + ((hash << 5) - hash);\n        }\n\n        let color = '#';\n        for (i = 0; i < 3; i += 1) {\n            const value = (hash >> (i * 8)) & 0xff;\n            color += `00${value.toString(16)}`.slice(-2);\n        }\n        return color;\n    }\n    function stringAvatar(name) {\n        return {\n            sx: {\n                bgcolor: stringToColor(name),\n            },\n            children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\n        };\n    }\n\n    const dynamicClassName = user.userType === 'technician' ? 'col-md-9' : 'col-md-9';\n\n    useEffect(() => {\n        console.log(\"Debug new message twillio userType :::\", user.userType)\n        if (user.userType === 'technician') {\n            socket.on(\"user-twilioChat-notification-tech\", (activeChatId) => {\n                showNotificationDot(activeChatId)\n                SortListOfUsersById(activeChatId)\n            })\n        }else{\n            socket.on(\"user-twilioChat-notification-to-customer\", (activeChatId) => {\n                showNotificationDot(activeChatId)\n                SortListOfUsersById(activeChatId)\n            })\n        }\n            socket.on(\"user-twilioChat-refresh-tech\", (activeChatId) => {\n                if (activeChatId === chatId) {\n                    setrefreshTechChat(true)\n                }\n            })\n    }, [socket, chatId])\n\n\n    // This function will put recent messages on top : ~ Jagroop\n    const SortListOfUsersById = (activeChatId) => {\n\n        if (userTwilioData && userTwilioData.length > 0) {\n            // Create a new array to store the rearranged results.\n            const sortedResult = [];\n\n            // Loop through the original array and add the elements to the new array, keeping the input id first.\n            for (let i = 0; i < userTwilioData.length; i++) {\n                if (userTwilioData[i].chat_id == activeChatId) {\n                    sortedResult.push(userTwilioData[i]);\n                }\n            }\n\n            // Loop through the original array again and add the remaining elements to the new array, sorted by id.\n            for (let i = 0; i < userTwilioData.length; i++) {\n                if (userTwilioData[i].chat_id !== activeChatId) {\n                    sortedResult.push(userTwilioData[i]);\n                }\n            }\n            if (userTwilioData.length == sortedResult.length) {\n                setUserTwilioData(sortedResult)\n            }\n\n\n        }\n    }\n\n    const showNotificationDot = (activeChatId) => {\n        let finalChatId = getChatId();\n        console.log('Debug new message twillio socket :::', { activeChatId, finalChatId, comparison: activeChatId !== finalChatId })\n        if (finalChatId !== '' && activeChatId !== finalChatId) {\n            console.log('Debug new message twillio message from not active tab.', { notificationDot, activeChatId })\n            setNotificationDot(prevNotificationDot => {\n                if (!prevNotificationDot.includes(activeChatId)) {\n                    return [...prevNotificationDot, activeChatId];\n                } else {\n                    return prevNotificationDot;\n                }\n            });\n        } else {\n            if (notificationDot.includes(activeChatId)) {\n                console.log(\"Debug new message twillio  activeTab\", { activeChatId })\n                const filteredResult   = notificationDot.filter(item => item !== activeChatId)\n                setNotificationDot(filteredResult)\n            }\n        }\n    }\n\n    const getChatId = () => {\n        try {\n            const finalChatId = window.sessionStorage.getItem(\"chatId\")\n            if (finalChatId) {\n                return finalChatId;\n            } else {\n                return chatId\n            }\n        } catch (error) {\n            return chatId\n        }\n    }\n    \n\n    useEffect(() => {\n        console.log(\"My console to chk 5\", notificationDot)\n    }, [notificationDot])\n\n    useEffect(() => {\n        if(userTwilioData && userTwilioData.length > 0){\n            console.log(\"My console to chk userTwilioData\", userTwilioData)\n            for (let i = 0; i < userTwilioData.length; i++) {\n                if(userTwilioData[i].new_message_alert){\n                    console.log(\"My console for userTwilioData\", userTwilioData[i].new_message_alert)\n                    console.log(\"My console for userTwilioData 2\", userTwilioData[i])\n                    setNotificationDot(prevNotificationDot => {\n                        if (!prevNotificationDot.includes(userTwilioData[i].chat_id)) {\n                            return [...prevNotificationDot, userTwilioData[i].chat_id];\n                        } else {\n                            return prevNotificationDot;\n                        }\n                    });\n                }\n            }\n        }\n    }, [userTwilioData])\n\n    useEffect(() => {\n        (async function () {\n            if (refreshTechUseEffect) {\n                setLoadChat(false)\n                setNoConversationLoad(false)\n                socket.emit(\"user-twilioChat-refresh-chat\", chatId)\n            }\n            await fetchTwilioChatDetails()\n        })()\n    }, [refreshTechUseEffect, refreshTechChat, socket]); // Add\n\n    const fetchTwilioChatDetails = async () => {\n        try {\n            setLoadChat(true)\n            let queryParam;\n            if (user.userType === 'technician') {\n                queryParam = { 'technician.id': user.id };\n            } else {\n                queryParam = { 'customer.id': user.id };\n            }\n            const chatResponse = await JobApi.getTwilioChatUserDetails(queryParam);\n            console.log('chat responce ::::::', chatResponse)\n\n            if (chatResponse.conversation.length > 0) {\n                setUserTwilioData(chatResponse.conversation)\n\n                if (chatId === '') {\n                    const chatId = chatResponse.conversation[0].chat_id\n                    console.log(\"Debugging wrong messages setChatId\",chatId)\n                    window.sessionStorage.setItem('chatId',chatId)\n                    setChatId(chatId)\n                    setSelectedChatId(chatId)\n                }\n                if (tech_id){\n                    let customerId = user.id\n                    let technicianId = tech_id\n                    let chatId = `${customerId}_${technicianId}`\n                    window.sessionStorage.setItem('chatId',chatId)\n                    setChatId(chatId)\n                    setSelectedChatId(chatId)\n                }\n                setLoadChat(false)\n            }\n            else {\n                if (!tech_id) {\n                    setLoadChat(false)\n                    setNoConversationLoad(true)\n                }\n            }\n        } catch (error) {\n            setLoadChat(false)\n            setNoConversationLoad(false)\n            console.error('Error fetching chat details:', error);\n        }\n    }\n\n  \n\n    const handelChatId = async (id) => {\n        if(tech_id){\n            deleteParams();\n        }\n        if (id !== chatId) {\n            console.log(\"Debugging wrong messages setChatId\", id)\n            window.sessionStorage.setItem('chatId', id)\n            setChatId(id)\n            setSelectedChatId(id)\n            const indexToRemove = notificationDot.indexOf(id);\n            if (indexToRemove !== -1) {\n                notificationDot.splice(indexToRemove, 1);\n            }\n            socket.emit(\"calculate-unread-twiio-messages\", { user })\n        }\n    }\n\n    const deleteParams = () => {\n        try {\n            if (queryParams.has('message')) {\n                queryParams.delete('message')\n                history.replace({\n                    search: queryParams.toString(),\n                })\n            }\n            return;\n        } catch (error) {\n            return;\n        }\n    }\n\n    if (loadChat) {\n        return (\n            <div className=\"d-flex container h-100  justify-content-center align-items-center \"\n                style={{ minHeight: \"60vh\" }} >\n                <div className='d-flex flex-column'>\n                    <Alert severity=\"info\">Loading \u2014 conversations!</Alert>\n                    <Spin size=\"large\" className='mt-5' />\n                </div>\n            </div>\n        );\n    }\n    if (noConversationLoad) {\n        return (\n            <div className=\"col-12 text-center mt-2 py-5\">\n                <h4 className=\"bg-level-1 w-80 py-5 radius-4 border\">Currently you didn't have any chat message.</h4>\n            </div>\n        );\n    }\n\n    return (\n        <div className='col-12'>\n            <div className=\"row h-100 main-outer-container mt-4\">\n\n                {/* {userTwilioData && userTwilioData.length > 0 && */}\n                <>\n                    <div className=\"col-md-3 chat-participants-container\" >\n                        <div className=\"tech-container\">\n                            <div className=''>\n                                <p className='tech-name-heading'>Message Center</p>\n                            </div>\n                            {user.userType === 'technician' &&\n                                // userTwilioData.length > 0 && userTwilioData.map((item, index) => (\n                                userTwilioData && userTwilioData.length > 0 && userTwilioData.map((item, index) => {\n                                    console.log('userTwilioData012 555:::::', selectedChatId === item.chat_id)\n\n                                    return (\n                                        <div onClick={() => { handelChatId(item.chat_id) }} className={`tech-name-div-1 mb-3 ${selectedChatId === item.chat_id ? 'selected' : ''}  ${disableDiv ? 'disabled-state' : ''}`} key={index}>\n                                            <div className='d-flex justify-content-between align-items-center pr-2'>\n                                                <div className='d-flex align-items-center'>\n                                                    <Avatar\n                                                        style={{ fontSize: '14px', width: '30px', height: '30px', marginRight: '10px' }}\n                                                        {...stringAvatar(`${item?.customer?.name}`)}\n                                                    />\n                                                    <span style={{ fontWeight: 'bold' }}>{`${item?.customer?.name}`}</span>\n                                                </div>\n                                                <Badge className='badge-notification-style' sx={{ \"& .MuiBadge-badge\": { zIndex: 100, backgroundColor: `${(notificationDot.includes(item.chat_id)) && !(selectedChatId === item.chat_id) ? 'red' : ''} ` } }} variant=\"dot\">\n                                                {/* <Badge className='badge-notification-style' sx={{ \"& .MuiBadge-badge\": { zIndex: 100, backgroundColor: `${(item.new_message_alert || notificationDot.includes(item.chat_id)) && !(selectedChatId === item.chat_id) ? 'red' : ''} ` } }} variant=\"dot\"> */}\n                                                </Badge>\n                                            </div>\n\n                                        </div>\n                                    )\n                                })\n                            }\n                            {user.userType === 'customer' &&\n                                userTwilioData && userTwilioData.length > 0 && userTwilioData.map((item, index) => {\n                                    return (\n                                        <div onClick={() => { handelChatId(item.chat_id) }} className={`tech-name-div-1 mb-3 ${selectedChatId === item.chat_id ? 'selected' : ''} ${disableDiv ? 'disabled-state' : ''}`} key={index}>\n                                            <div className='d-flex justify-content-between align-items-center pr-2'>\n                                                <div className='d-flex align-items-center'>\n                                                    <Avatar\n                                                        style={{ fontSize: '14px', width: '30px', height: '30px', marginRight: '10px' }}\n                                                        {...stringAvatar(`${item.technician.name}`)}\n                                                    />\n                                                    <span style={{ fontWeight: 'bold' }}>{`${item.technician.name}`}</span>\n                                                    {/* <span style={{ fontWeight: 'bold' }}>{item.firstName} {item.lastName}</span> */}\n                                                </div>\n                                                <Badge className='badge-notification-style' sx={{ \"& .MuiBadge-badge\": { zIndex: 100, backgroundColor: `${(notificationDot.includes(item.chat_id)) && !(selectedChatId === item.chat_id) ? 'red' : ''} ` } }} variant=\"dot\">\n                                                </Badge>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            }\n\n                        </div>\n                    </div>\n\n                    <div className={`${dynamicClassName} new-mb-chat`} >\n                        {user.userType === 'technician' && chatId !== '' &&\n                            <ChatPanelTwilio setdisableDiv={setdisableDiv} chatIdFromProp={chatId} setRefreshTechUseEffect={setRefreshTechUseEffect} chatUser={user} width={'100%'} height={'500px'} job={null} />\n                        }\n                        {user.userType === 'customer' &&\n                            <ChatPanelTwilio setdisableDiv={setdisableDiv} chatIdFromProp={chatId} setRefreshTechUseEffect={setRefreshTechUseEffect} chatUser={user} width={'100%'} height={'500px'} job={null} />\n                        }\n                    </div>\n                </>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(MessageTab)",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\MessageTab\\index.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "style.css",
                                                            "fileData": ".main-outer-container {\n    /* width: 1000px; */\n    /* border: 1px solid black; */\n}\n.chat-participants-container {\n    max-height: 500px !important;\n    overflow-y: scroll;\n    overflow-x: hidden;\n}\n.tech-name-heading {\n    text-align: center;\n    font-size: 20px;\n    font-weight: bolder;\n    color: black;\n}\n\n.tech-container {\n    min-height: 500px;\n    width: 100%;\n    background-color: #edf4fa;\n    padding: 10px;\n    border-radius: 8px;\n    border: solid 1px #efefef;\n}\n\n.tech-name-div {\n    border: 1px solid gray;\n    padding: 4px;\n    background-color: lightgray;\n    border-radius: 4px;\n    height: 40px;\n    cursor: pointer;\n}\n\n.tech-name-div-1 {\n    border: 1px solid grey;\n    padding: 4px;\n    background-color: white;\n    border-radius: 4px;\n    min-height: 40px;\n    cursor: pointer;\n}\n.selected {\n    background-color: lightgray; /* Replace this with the desired color */\n    /* Add any other styles you want to apply when the div is selected */\n  }\n.disabled-state {\n /* opacity: 0.5;  */\n pointer-events: none; \n}\n\n@media screen and (max-width: 1340px) {\n\t.responsive-flex{\n        display: flex;\n        flex-direction: column;\n        margin-bottom: 20px;\n        align-items: center;\n        justify-content: center;\n        padding: 0;\n    }\n    .tech-container {\n        margin-bottom: 20px;\n        height: auto;\n    }\n}",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\MessageTab\\style.css"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Onboarding",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, {useState, useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\n// import GoogleLogin from 'react-google-login';\n// import FacebookLogin from 'react-facebook-login';\n// import { FaFacebook } from 'react-icons/fa';\nimport { Row, Col, Alert} from 'react-bootstrap';\nimport PhoneInput from 'react-phone-input-2';\nimport { Form ,Modal, Spin} from 'antd';\n// import { FB_APP_ID, GOOGLE_CLIENT_ID } from 'constants/social';\nimport Header from 'components/NewHeader';\nimport * as ReferPeopleApi from '../../../api/refer.api';\nimport FormItem from 'components/FormItem';\nimport InputPassword from 'components/AuthLayout/InputPassword';\nimport Input from 'components/AuthLayout/Input';\nimport Link from 'components/AuthLayout/Link';\nimport { useAuth } from '../../../context/authContext';\nimport {privacyPolicy} from '../../../policy-pages/privacy-policy';\nimport {cookiePolicy} from '../../../policy-pages/cookie-policy';\nimport {TermsCondition} from '../../../policy-pages/conditions';\n// import { useHistory } from 'react-router-dom';\nimport { Select} from 'antd';\nimport {languages,LANDING_PAGE_URL} from '../../../constants';\nimport mixpanel from 'mixpanel-browser';\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\nimport {openNotificationWithIcon} from '../../../utils'\nimport { useLocation } from 'react-router';\nimport {useTools} from '../../../context/toolContext';\nimport { useFetchInvite } from 'api/invite.api';\nimport { Window } from '@mui/icons-material';\n\nconst { Option } = Select;\nconst CustomerRegister = () => {\n\tconst [form] = Form.useForm()\n\tconst { register} = useAuth();\n\t// const { verificationEmailHandler } = useAuth();\n\tconst [phoneNumber, setPhoneNumber] = useState('');\n\t// const [extension, setExtension] = useState('');\n\tconst {setOpenModal, setHearAboutUsModal} = useTools()\n\tconst [language,setLanguage] = useState('English')\n\t// const [AdditionalLanguage,setAdditionLanguage] = useState('');\n\tconst AdditionalLanguage = '';\n\tconst [showError,setshowError] = useState(false)\n\tconst [alertMessagePhone, setAlertMessagePhone] = useState('');\n\tconst [alertMessage, setAlertMessage] = useState('');\n\tconst [alertMessageEmail, setAlertMessageEmail] = useState('');\n\tconst [languageErrorMsg, setLanguageErrorMsg] = useState({});\n\tconst [boxChanged,setBoxChanged] = useState(true);\n\tconst [checkBox, setCheckBox]= useState(true);\n\t// const [openTermsCondition,setOpenTermsCondition] = useState(true);\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [isPrivacyPolicyModalAvailable,setIsPrivacyPolicyModalAvaliable] = useState(false)\n\tconst [linkToLogin,setLinkToLogin] = useState('/login')\n\tconst [createButtonDisabled, setCreateButtonDisabled] = useState(false);\n\tconst [privacyBoxChanged,setPrivacyBoxChanged] = useState(false)\n\tconst [isCookiesPolicyModalAvailable,setIsCookiesPolicyModalAvailable] = useState(false)\n\tconst location = useLocation();\n\tconst queryParams = new URLSearchParams(location.search);\n\tconst inviteCode = queryParams.get('inviteCode') || 'nothing';\n\tconst { data: inviteData } = useFetchInvite(inviteCode);\n\tconst [haveValue,setHaveValue] = useState(false)\n\tconst [isBusinessTypeAccount, setIsBusinessTypeAccount] = useState(false);\n\tconst [alertMessageBusinessName,setAlertMessageBusinessName] = useState('')\n    console.log(\"inviteCode>>>>>\",inviteCode,inviteData?.status)\n\n\n\tuseEffect(() => {\n\n\t\tif (inviteData) {\n\t\t\tif(inviteData?.status === 'completed'){\n\t\t\t\twindow.location.href = '/login';\n\t\t\t}\n\t\t\tconsole.log(\"inviteDatainviteData\",inviteData)\n\t\t\tform.setFieldsValue({\n\t\t\t\t[\"email\"]: inviteData?.email,\n\t\t\t})\n\t\t\tconst businessTypeAccount  = inviteData?.ownerBusinessName ?  false  : true\n\t\t\tsetIsBusinessTypeAccount(businessTypeAccount)\n\t\t}\n\t}, [form, inviteData])\n\t\n\tuseEffect(()=>{\n\t\tif(true){\n\t\t\t// console.log(location)\n\t\t\t// let url = location.pathname\n\t\t\tlet urlArr = location.pathname.split(\"/\").filter(item => item != '')\n\t\t\tconsole.log(\"urlArr :::::::: \",urlArr)\n\t\t\tlet count = urlArr.length\n\t\t\t// console.log(\"count ::::: \",count)\n\t\t\tif(count >= 2){\n\t\t\t\tlet indexOfregister = urlArr.findIndex((item)=> item == 'register')\n\t\t\t\tlet job_id_index = indexOfregister + 1\n\t\t\t\tlet indexOfYes = urlArr.findIndex((item) => item =='yes')\n\t\t\t\tif(indexOfYes == -1){\n\t\t\t\t\tsetLinkToLogin(`/login?job-id=${urlArr[job_id_index]}`)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetLinkToLogin(`/login?job-id=${urlArr[job_id_index]}&status=schedule`)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(!true)\n\t\t}\n\t},[location.pathname]);\n\t//location.pathname added by Rajat\n\t/*const find_id_from_url =() =>{\n\t\tlet params = new URLSearchParams(location.search)\n\t\treturn params.get('jobId')\n\t}*/\n\t\t\n\tconst { jobId } = useParams();\n\tconst { schedule } = useParams();\n\tconst search = useLocation().search;\n \tconst referred_by_user = new URLSearchParams(search).get('referred_by');\n \tlet referred_by_value = ''\n\n\tconst showModal = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst showPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(true);\n\t};\n\n    const handleOk = () => {\n\t\tsetIsModalVisible(false);\n\t};\n\n\tconst handleOkPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(false);\n\t};\n\n\tconst handleCancel = () => {\n\t\tsetIsModalVisible(false);\n\t};\n\n\tconst showCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(true);\n\t}\n\n\tconst handleCancelPrivacyModal = () => {\n\t\tsetIsPrivacyPolicyModalAvaliable(false);\n\t}\n\tconst handleCancelCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(false)\n\t}\n\n\tconst handleOkCookiesModal = ()=>{\n\t\tsetIsCookiesPolicyModalAvailable(false)\n\t}\n\n\tconst HandlePhoneNumber = (e) => {\n\t\tsetPhoneNumber(`+${e}`);\n\t\tsetAlertMessagePhone(\"\");\n\t\tsetAlertMessageEmail(\"\");\n\t};\n// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t// const handleExtension = e => {\n\t// \tsetExtension(e.target.value);\n\t// };\n\t\n\tconst handleCheck = ()=>{\n\t\tconsole.log(\"i am in\")\n\t\tconsole.log(\"boxChanged:::::\",boxChanged) \n\t\tsetBoxChanged(!boxChanged)\n\t}\n\n\tconst handleIsBusinessAccountType=()=>{\n\t\tsetIsBusinessTypeAccount(!isBusinessTypeAccount)\n\t}\n\n\tconst handlePrivacyCheck = ()=>{\n\t\tsetPrivacyBoxChanged(!privacyBoxChanged)\n\t}\n\t\n\tconst handleCheckBox=()=>{\n\t\tsetCheckBox(!checkBox)\n\t}\n\n\t/*const handleOpenTermsCondition = async()=>{\n\t\tsetOpenTermsCondition(!openTermsCondition)\n\t}*/\n\n\tconst onSignUp = async (values) => {  \n\t\tconsole.log(\"registering customer \");\n\t\tsetAlertMessageBusinessName(\"\")\n\t\t// setHearAboutUsModal(true);\n\t\tsetAlertMessageBusinessName(\"\")\n\t\tsetAlertMessagePhone(\"\")\n\t\tsetAlertMessageEmail(\"\")\n\t\tsetLanguageErrorMsg({});\n\t\t// console.log(\"phoneNumber\",phoneNumber,language)\n\t\tif (isPossiblePhoneNumber(phoneNumber) === false && isValidPhoneNumber(phoneNumber) === false) {\n\t\t\t\t// return \n\t\t\t\tsetAlertMessagePhone(\"Phone Number Not Valid\")\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(language && AdditionalLanguage && language === AdditionalLanguage){\n\t\t\tlet msg = 'Language and Additional Language should not be same.';\n\t\t\tlet temp = {'language':msg,'additionalLanguage':msg}\n\t\t\tsetLanguageErrorMsg(temp);\n\t\t\treturn false;      \n\t\t}\n\t\tconsole.log(\"isBusinessTypeAccount\",isBusinessTypeAccount,values['businessName'])\n\t\tif (!inviteData) {\n\t\t\tif(isBusinessTypeAccount && (!values['businessName']  || values['businessName'] == '')){\n\t\t\t\tsetAlertMessageBusinessName(\"Please Input Business Name\")\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if(!boxChanged){\n\t\t// \topenNotificationWithIcon('error', 'Error', 'Please accept terms & Conditions');\n\t\t// \treturn false;      \n\t\t// }\n\t\t// if(!privacyBoxChanged){\n\t\t// \topenNotificationWithIcon('error', 'Error', 'Please accept Cookie Policies');\n\t\t// \treturn false;      \n\t\t// }\n\t\tif(referred_by_user ==  null){\n\t\t\treferred_by_value = null\n\t\t}else{\n\t\t\treferred_by_value = 'usr_'+referred_by_user\n\t\t}\n\t\tif(language !== '' ){\n\t\t\tsetCreateButtonDisabled(true);\n\t\t\tsetshowError(false)\n\t\t\t\tconst cleanedValues = {};\n\t\t\t\tfor (const key in values) {\n\t\t\t\t\tif(key == \"business-type\"){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t  if (typeof values[key] === 'string') {\n\t\t\t\t    cleanedValues[key] = values[key].replace(/\\s/g, '');\n\t\t\t\t  } else {\n\t\t\t\t    cleanedValues[key] = values[key];\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\tlet res = await register({\n\t\t\t\t  ...cleanedValues,\n\t\t\t\t  userType: 'customer',\n\t\t\t\t  phoneNumber: phoneNumber,\n\t\t\t\t//   extension: extension,\n\t\t\t\t  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n\t\t\t\t  billing: {\n\t\t\t\t    cardNumber: '',\n\t\t\t\t    expiryDate: '',\n\t\t\t\t    nameOnCard: '',\n\t\t\t\t    address: '',\n\t\t\t\t    cvv: '',\n\t\t\t\t  },\n\t\t\t\t  language: language,\n\t\t\t\t  additionalLanguage: AdditionalLanguage,\n\t\t\t\t  status: 'completed',\n\t\t\t\t  jobId: jobId ? jobId : '',\n\t\t\t\t  scheduleJob: schedule ? true : false,\n\t\t\t\t  referred_by: referred_by_value,\n\t\t\t\t  inviteCode: inviteCode,\n\t\t\t\t  receiveEmails: boxChanged,\n\t\t\t\t  isBusinessTypeAccount : isBusinessTypeAccount,\n\t\t\t\t  askedForBusiness:false,\n\t\t\t\t  businessName: isBusinessTypeAccount ? values['businessName'] : \"\"\n\t\t\t\t});\n\n\t\t\tconsole.log(\"in the customer res ::::: \",res)\n\t\t\tif(res.message === \"Network Error\"){\n\t\t\t\t// setLoading(false)\n\t\t\t\tsetCreateButtonDisabled(false);\n\t\t\t\tres.message = 'Seems like you are offline. Please try reloading the page.'\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(referred_by_user !== \"\"){\n\t\t\t\tconst responseForTotalRefers = await ReferPeopleApi.checkReferEmail({\"email\":values['email']})\n\t\t\t\tconsole.log(\"totalEntries ::::::::::::\",responseForTotalRefers.totalCount)\n\t\t\t\tif(responseForTotalRefers.totalCount === 0){\n\t\t\t\t\tconsole.log(\"called create ref :: \")\n\t\t\t\t\tawait ReferPeopleApi.createRefer({'user':'usr_'+referred_by_user,'email':values['email'],'status':\"Completed\"})\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// verificationEmailHandler({email:values.email})\n\n\t\t\tif(res && res['userIntId']){\n\t\t\t\t// mixpanel code//\n\t\t\t\tmixpanel.identify(values.email);\n\t\t\t\tmixpanel.track('Customer - Registered Successfully');\n\t\t\t\t// mixpanel code//\t\t\n\t\t\t}else{\n\t\t\t\tsetCreateButtonDisabled(false);\n\t\t\t\tif(res && res.message && res.message === \"The email already exists.\"){\n\t\t\t\t\tsetAlertMessageEmail(\"Email address already exists\")\n\t\t\t\t\tmixpanel.identify(values.email);\n\t\t\t\t\tmixpanel.track(res.message,{ 'Email': values.email});\n\t\t\t\t}else{\n\t\t\t\t\tif(res && res.message){\n\t\t\t\t\tmixpanel.identify(values.email);\n\t\t\t\t\tmixpanel.track(res.message,{ 'Email': values.email});\n\t\t\t\t\tsetAlertMessage(res.message)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tsetOpenModal(true)\n\t\t\tsetshowError(true)\n\t\t}\n\t\t\n\t\t\n\t};\n\n\t// const preventMinusAndPlus = (e) => {\n\t// \tif (e.nativeEvent.code === 'Minus' || e.nativeEvent.code === 'Equal' || e.nativeEvent.code === 'NumpadSubtract' || e.nativeEvent.code === 'NumpadAdd') {\n\t// \t\te.preventDefault();\n\t// \t}\n\t//   };\n\n\n\treturn (\n\t\t\n\t\t<div className=\"w-100 register-page customer-register-page\">\n\n\t\t<Modal title=\"Terms & Conditions\"  className=\"app-confirm-modal\" closable={false}  footer={[\n\t\t\t\t<button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancel}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n\t\t\t]} visible={isModalVisible} onOk={handleOk} >\n\t\t\t{TermsCondition()}\n\t\t\t\n\t\t</Modal>\n\n\t\t<Modal title=\"Privacy Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n\t\t\t\t<button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelPrivacyModal}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n\t\t\t]} visible={isPrivacyPolicyModalAvailable} onOk={handleOkPrivacyModal} >\n\t\t\t{privacyPolicy()}\n\t\t</Modal>\n\n\t\t<Modal title=\"Cookies Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n\t\t\t\t<button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelCookiesModal}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n\t\t\t]} visible={isCookiesPolicyModalAvailable} onOk={handleOkCookiesModal} >\n\t\t\t{cookiePolicy()}\n\t\t</Modal>\n\n\n\n\t\t<Header link={LANDING_PAGE_URL} />\n\t\t\t\t<SectionEmail>     \n\t\t\t\t <Row md={12} className=\"justify-content-center\">\n\t\t\t\t\t\t<div > \n\t\t\t\t\t\t\t{inviteCode && inviteCode != 'nothing' ? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"subtitle-invite\">You\u2019ve been invited by {inviteData?.ownerName ? inviteData?.ownerName : \"Your Owner\"} {inviteData?.ownerBusinessName ? ` to Join the  ${inviteData?.ownerBusinessName} Group.` : ''} <br/>Please enter your details below to complete your registration.</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"subtitle\">Let\u2019s get you the help you need,<br/>First tell us a little about yourself  </p>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Row>     \n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col span=\"24\">\n\t\t\t\t\t\t\t{alertMessage !== '' &&\n\t\t\t\t\t\t\t\t<Alert variant=\"danger\" className=\"w-100 text-center\">\n\t\t\t\t\t\t\t\t\t\t{alertMessage}\n\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Form form={form} className=\"items-center \" onFinish={onSignUp}\n\t\t\t\t\tlayout=\"vertical\">\n\t\t\t\t\t\t<Col md={12}>\n\t\t\t\t\t\t\t<Row className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t<Col md={5}>                 \n\t\t\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"FIRST NAME *\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0\"\n\t\t\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please input your First Name!',\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n                                                            const trimmedvalue = value.trim();\n                                                            if(!trimmedvalue){\n                                                            \t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Input your first name.',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n                                                            }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(trimmedvalue.split(\" \").length > 1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'No empty spaces allowed in first name.',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst re = /^\\s*[a-zA-Z\\s]*\\s*$/;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!re.test(String(trimmedvalue))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'No numbers or special characters are allowed',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (trimmedvalue && trimmedvalue.length > 30) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('Maximum length is 30 characters');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<RegInput\n\t\t\t\t\t\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"First Name\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"p-0\"\n\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col md={2}></Col>\n\t\t\t\t\t\t\t\t\t<Col md={5}>\n\t\t\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"LAST NAME *\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0\"\n\t\t\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please input your Last Name!',\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst trimmedValue = value.trim()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!trimmedValue){\n                                                            \t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Input your last name.',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n                                                            }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(trimmedValue.split(\" \").length > 1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'No empty spaces allowed in last name.',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst re = /^\\s*[a-zA-Z\\s]*\\s*$/;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!re.test(String(trimmedValue))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'No numbers or special characters are allowed',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (trimmedValue && trimmedValue.length > 30) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('Maximum length is 30 characters');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<RegInput name=\"lastName\" size=\"small\" placeholder=\"Last Name\" className=\"p-0\" />\n\t\t\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t </Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col md={12}>\n\t\t\t\t\t\t<Row className=\"d-flex\">\n\t\t\t\t\t\t\t <Col md={5} xs={12}>\n\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"EMAIL\"\n\t\t\t\t\t\t\t\t\t\tclassName = {\"mt-3 mb-1 p-0\" + (alertMessageEmail !== '' ? ' red-border-bottom-input' : '')}\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'email',\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Check the format of the email you entered',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please input your E-mail.',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t() => ({\n\t\t\t\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (value && value.length > 70) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('Maximum length is 70 characters');\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<RegInput name=\"email\" size=\"small\" placeholder=\"Email\" className=\"p-0\" disabled={!!inviteData?.email} />  \n\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t{inviteCode && inviteCode != 'nothing' &&\n\t\t\t\t\t\t\t\t\t\t\t<div className='mb-2'>{\"This email is invited by your account admin so it can\u2019t be changed.\"}</div>}\n\t\t\t\t\t\t\t\t\t{alertMessageEmail !== '' &&\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-error-msg\">{alertMessageEmail}</div>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t <Col md={2}></Col>\n\n\t\t\t\t\t\t\t\t<Col md={5} xs={12}>\n\t\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\t\tname=\"language\"\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"LANGUAGE *\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tinitialValue= \"English\"\n\n\t\t\t\t\t\t\t\t\t\t\t >\n\t\t\t\t\t\t\t\t\t\t\t<LanguageSelect\n\t\t\t\t\t\t\t\t\t\t\t\tshowSearch\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue=\"English\"\n\t\t\t\t\t\t\t\t\t\t\t\t optionFilterProp=\"children\"\n\t\t\t\t\t\t\t\t\t\t\t\tfilterOption={(input, option) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\toption.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange = {(value,option)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetLanguage(option.children)\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetLanguageErrorMsg({});\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(AdditionalLanguage && AdditionalLanguage === option.children){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet temp = {'language':'Language and Additional Language should not be same.'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetLanguageErrorMsg(temp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tfilterSort={(optionA, optionB) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{languages.map((item,index)=>{\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn <Option value={index} key={index}>{item[0]}</Option>\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t</LanguageSelect>  \n\n\t\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t { showError ?<p className=\"error-msg\">Language Required</p> :\"\"}\n\t\t\t\t\t\t\t\t\t { languageErrorMsg['language'] !== '' ?<p className=\"error-msg\">{languageErrorMsg['language']}</p> :\"\"}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col md={12} xs={12}>\n\n\t\t\t\t\t\t\t<Row className=\"d-flex\">\n\t\t\t\t\t\t\t\t<Col md={5} xs={12}>\n\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"PASSWORD *\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0\"\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please input your password.',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t({getFieldValue}) => ({\n\t\t\t\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// console.log('value',value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line no-useless-escape\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst re = /^(?=.*[a-z])(?=.*[0-9])(?=.*[\\^$*.\\[\\]{}()?\\-\u201c!@#%&/,><\u2019:;|_~`])\\S{6,99}$/;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!re.test(String(value))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Passwords must include at least six numbers, letters, and special characters (like ! and &)',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<RegInputPassword\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e)=>{\n\t\t\t\t\t\t\t\t\t\t\t\tif(e.target.value != ''){\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetHaveValue(true)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetHaveValue(false)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<Col md={2}></Col>\n\t\t\t\t\t\t\t\t<Col md={5} xs={12}>\n\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\tname=\"confirm_password\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"CONFIRM PASSWORD *\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0\"\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Please input your confirm password.',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t({ getFieldValue }) => ({\n\t\t\t\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!value || getFieldValue('password') === value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'The two passwords that you entered do not match!',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<RegInputPassword\n\t\t\t\t\t\t\t\t\t\t\tname=\"confirm_password\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Confirm Password\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"p-0\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled = {!haveValue}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t</Col>  \n\t\t\t\t\t\t<Col md={12}>\n\t\t\t\t\t\t\t<Row className=\"d-flex\" span={24} gutter={16}></Row>\n\n\t\t\t\t\t\t</Col>  \n\t\t\t\t\t\t<Col md={12} xs={12}>\n\t\t\t\t\t\t\t<Row className=\"d-flex\">\n\t\t\t\t\t\t\t\t<Col md={5} xs={12}>\n\t\t\t\t\t\t\t\t\t<Row className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t\t<Col md={12} xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t<FormItem\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"phonenumber\"\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"MOBILE NUMBER *\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName = {\"mt-3 mb-1 p-0 suffix\"+(alertMessagePhone !== '' ? ' red-border-bottom-input' : '')}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputWithLabel>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<PhoneInput value={phoneNumber} countryCodeEditable={false} onChange={HandlePhoneNumber} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca','gb']} className=\"p-0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t\t\t\t\t{inviteCode && inviteCode != 'nothing' &&\n\t\t\t\t\t\t\t\t\t\t\t<div className='mb-2'>{\"Your personal phone is needed in case the technician needs to reach you away from your desk\"}</div>}\n\t\t\t\t\t\t\t\t\t\t\t{alertMessagePhone !== '' &&\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-error-msg\">{alertMessagePhone}</div>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{/* Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t\t\t\t\t\t\t\t<Col md={5} xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"extension\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"EXTENSION\"        \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 mb-1 p-0 d-none\"          \n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RegInput\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"extension\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Extension(optional)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"extension-input p-0\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleExtension}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonKeyPress={preventMinusAndPlus}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t\t</Col> */}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={2}></Col>\n\t\t\t\t\t\t\t\t{ inviteCode && inviteCode != 'nothing' ? null :\n\t\t\t\t\t\t\t\t\t<Col md={5}>\n\t\t\t\t\t\t\t\t\t\t<div className='mt-3'>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"d-flex d-inline-flex align-items-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"checkbox1\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input className=\"mb-2\" type=\"checkbox\" id=\"isBusinessAccount\" onChange={handleIsBusinessAccountType} defaultChecked={isBusinessTypeAccount} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"ml-1\" htmlFor=\"isBusinessAccount\">I\u2019m using this account for business use .</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<RegForm\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"businessName\"\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mb-1 p-0\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<RegInput\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"businessName\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Business Name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = {\"p-0 \" + (alertMessageBusinessName !== '' ? ' red-border-bottom-input ' : '') + (isBusinessTypeAccount ? \"\" : \" opacity-half \")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t// disabled={inviteCode && inviteCode != 'nothing'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={!isBusinessTypeAccount}\n\t\t\t\t\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</RegForm>\n\t\t\t\t\t\t\t\t\t\t\t{alertMessageBusinessName !== '' &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-error-msg\">{alertMessageBusinessName}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>  \n\t\t\t\t\t\t<Col md={12}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col md={5}>                     \n\t\t\t\t\t\t\t\t\t </Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Row className=\"\">\n\t\t\t\t\t\t\t<div className=\"display-flex col-md-12 flex-column align-items-baseline justify-content-center\">\n\t\t\t\t\t\t\t<Col md={12} xs={12} className=\" mt-2 text-center\">\n\t\t\t\t\t\t\t\t<div className=\"d-flex d-inline-flex align-items-center\">\n\t\t\t\t\t\t\t\t\t<div className=\"checkbox1\">\n\t\t\t\t\t\t\t\t\t\t<input className=\"mb-2\" type=\"checkbox\" id=\"receiveEmails\" onChange={handleCheck} defaultChecked={boxChanged} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<label className=\"ml-1\" htmlFor=\"receiveEmails\">Check this box to receive emails about our latest deals,discounts and promotions.</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col md={12} xs={12} className=\" mt-2 text-center\">\n\t\t\t\t\t\t\t\t{/* <input type=\"checkbox\" id=\"terms&condtion\" onChange={handleCheck}  defaultChecked={boxChanged}/> */}\n\t\t\t\t\t\t\t\t<label className=\"ml-2\" htmlFor=\"terms&condtion\"> By Signing up I agree to <a href=\"javascript:void(0)\" onClick={showModal}>Terms & Condtions</a>, <a href=\"javascript:void(0)\" onClick={showPrivacyModal}>Privacy Policy</a>  & <a href=\"javascript:void(0)\" onClick={showCookiesModal}>Cookies Policy</a> </label>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t {/*<Col md={12} xs={12} className=\" mt-2 text-center\">\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"privacy&cookies\" onChange={handlePrivacyCheck}  defaultChecked={privacyBoxChanged}/> \n\t\t\t\t\t\t\t\t\t\t\t<label className=\"ml-2\" htmlFor=\"privacy&cookies\"> I agree to the <a href=\"javascript:void(0)\" onClick={ showPrivacyModal}>Privacy Policy</a>  & <a href=\"javascript:void(0)\" onClick={ showCookiesModal}>Cookies Policy</a> </label>\n\t\t\t\t\t\t\t\t\t</Col> */}\n\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<Col md={12} xs={12} className=\"text-center\">\n\t\t\t\t\t\t\t\t\t<RegButton\n\t\t\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\thtmlType=\"submit\"\n\t\t\t\t\t\t\t\t\t\tloading={false}\n\t\t\t\t\t\t\t\t\t\ttitle=\"Click to create account.\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"app-btn mt-2\"\n\t\t\t\t\t\t\t\t\t\tdisabled={createButtonDisabled}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t{(createButtonDisabled \n\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t<Spin className=\"spinner\"/>\n\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<>Create Account</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</RegButton>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t</Form>\n\t\t\t\t</SectionEmail>\n\t\t\t\t<SectionEmail>\n\t\t\t\t<div>\n\t\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t <Col className=\"text-center mt-3\" span={24}>         \n\t\t\t\t\t\t\t<Link className=\"linkColor app-link font-weight-normal\" to={linkToLogin}>   \n\t\t\t\t\t\t\t\t\tAlready have an account? Sign In.\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Col>\n\t\t\t\t\t </Row>\n\t\t\t\t</div>\n\t\t\t\t</SectionEmail>\n\t\t\t \n\t\t</div>\n\t);\n};\n\n\n\nconst SectionEmail = styled.section`\n\twidth:60%\n\tmargin: auto;\n\t@media screen and (max-width: 763px) {\n\t\twidth:90%\n\t}\n\t\t@media screen and (max-width: 640px) and (min-width:375px) {\n\t\twidth:77%\n\t}\n\t\t@media screen and (max-width: 1000px) and (min-width:765px) {\n\t\twidth:73%\n\t}\n\t& .ant-col-12{\n\t\tdisplay:inline-block;\n\t\twidth: 40%;\n\t\tmargin-left: 15px;\n\t}\n\n\t& .ant-col-20{\n\t\tpadding-left: 15px;\n\t}\n`;\n\n\n\nconst RegForm = styled(FormItem)`\n\t&.ant-form-item-has-error {\n\t\tmargin-bottom: 6px;\n\t}\n\n`;\n\nconst RegInput = styled(Input)`\n\tborder-radius: 10px;\n\tpadding: 15px 20px;\n\tfont-family: 'Open-Sans', sans-serif;\n`;\n\nconst RegInputPassword = styled(InputPassword)`\n\tborder-radius: 10px;\n\tpadding: 15px 0px;\n\tfont-family: 'Open-Sans', sans-serif;\n\n & .ant-input-suffix {\n\tmargin-left:0px !important;\n\tborder-bottom: 2px #d0d0d0 solid;\n }\n\n`;\n\nconst RegButton = styled.button`\n\tborder-radius: 10px;\n\tpadding: 15px 20px;\n\tfont-family: 'Open-Sans', sans-serif;\n\tborder: 1px solid #707070;\n\toutline: none;\n\tbackground: #383838;\n\tcolor: white;\n\tfont-size: 18px;\n\tfont-weight: 600;\n\tmin-width: 250px;\n\tcursor:pointer;\n`;\n\nconst LanguageSelect = styled(Select)`\n\n\tborder:0px none;\n\tmargin-bottom:none;\n\n\t& .ant-select-selector{\n\t\tmargin-top:18px;\n\t}\n\n`\n\n/*const FormSectionContainer = styled(Row)`\n\twidth: 100%;\n\tmargin-bottom:none;\n`;*/\n\n\n\nexport const InputWithLabel = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\ttext-align: left;\n\tmarginRight: 30px;\n\tposition: relative;\n\t&:last-child {\n\t\tmarginRight: 0;\n\t}\n\t& input{\n\t\theight:50px;\n\t\tpadding:10px;\n\t\tborder-radius: 10px;\n\t\tmargin-top: 15px;\n\t\tborder : 2px solid #F3F3F3;\n\t\tmargin-top:15px;\n\t\tmargin-left:20px;\n\t}\n\t& .react-tel-input .form-control {\n\t\theight:50px;   \n\t}\n`;\n\nCustomerRegister.propTypes = {};\n\nexport default CustomerRegister;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Onboarding\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "Registration",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "HelpIsOnItsWay.js",
                                                                    "fileData": "import React, { useState } from \"react\"\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport NewInput from \"../../../../components/common/Input/NewInput\"\nimport DropDown from \"../../../../components/common/DropDown\"\nimport {Button} from 'react-bootstrap';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/high-res.css'\nimport { useAuth } from '../../../../context/authContext';\nimport Link from 'components/AuthLayout/Link';\nimport { Form, Modal, Spin } from 'antd';\nimport {TermsCondition} from '../../../../policy-pages/conditions';\nimport {privacyPolicy} from '../../../../policy-pages/privacy-policy';\nimport {cookiePolicy} from '../../../../policy-pages/cookie-policy';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport {languages} from '../../../../constants';\nimport * as AuthApi from '../../../../api/auth.api'\nimport Logo from \"components/common/Logo\";\nimport mixpanel from 'mixpanel-browser';\nimport { klaviyoTrack } from '../../../../api/typeService.api';\nimport { useLocation } from 'react-router';\nimport { useFetchInvite } from 'api/invite.api';\n\n\nconst HelpIsOnItsWay =({setJobFlowStep, jobFlowsDescriptions,setRegisteredUser,guestJobId})=>{\n\n    const [form] = Form.useForm()\n    function useQuery() {\n    \tconst { search } = useLocation();\n    \treturn React.useMemo(() => new URLSearchParams(search), [search]);\n  \t}\n  \tconst query = useQuery();\n\tconst inviteCode = query.get('inviteCode') || 'nothing';\n\tconst { data: inviteData } = useFetchInvite(inviteCode);\n    const { register,setToken} = useAuth();\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [linkToLogin,setLinkToLogin] = useState(`/login?job-id=${guestJobId}`)\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [isPrivacyPolicyModalAvailable,setIsPrivacyPolicyModalAvaliable] = useState(false)\n    const [isCookiesPolicyModalAvailable,setIsCookiesPolicyModalAvailable] = useState(false)\n    const [createButtonDisabled, setCreateButtonDisabled] = useState(false);\n    const [boxChanged,setBoxChanged] = useState(false);\n    const [privacyBoxChanged,setPrivacyBoxChanged] = useState(false)\n    const [dialCode,setDialCode] = useState(\"\")\n    const [inputValues, setInputValues] = useState({firstName:'',\n                                                    lastName:'', \n                                                    email:'',\n                                                    password:'',\n                                                    confirmPassword:'',\n                                                    // extension:'',// Commented by Nafees as per ticket - GKF-237 on 10-07-2023y\n                                                    hearAboutUs:'',\n                                                    language:'',\n                                                    })  \n    const [dropDownValue, setDropDownValue] = useState(['English', 'en'])\n                                        \n    /**\n\t * Following function is to handle click on \"Create Account\" button.\n\t * @author : Vinit\n\t */                                                    \n    const signUp = async (e) => {\n        // e.preventDefault();\n        if(boxChanged && privacyBoxChanged){\n            /**\n             * Following function is to register user(Customer).\n             * @params =  {firstName, lastName, email, password, confirmPassword, phoneNumber, language, referred_by, userType}\n             * @response : res\n             * @author : Vinit\n             */\n            if(phoneNumber ===  \"\" || phoneNumber.length === (dialCode.length+1)){\n                return openNotificationWithIcon('error', 'Error', \"Phone Number is required\" )\n            }else if(phoneNumber.length < (11 + dialCode.length)){\n                return openNotificationWithIcon('error', 'Error', \"Phone Number is invalid\" )                \n            }\n            let res  = await AuthApi.register({\n                timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,\n                firstName:inputValues.firstName, \n                lastName:inputValues.lastName, \n                email:inputValues.email, \n                password:inputValues.password, \n                confirm_password:inputValues.confirmPassword, \n                // extension:inputValues.extension, \n                phoneNumber, \n                language:dropDownValue[0], \n                referred_by:inputValues.hearAboutUs, \n                userType:'customer',\n                status:'completed',\n                inviteCode: inviteCode,\n             })\n            console.log(\">>>>>>>>>>res >>>>>>>>>>>>>>>>>>>> \",res)\n            if(res?.success !== false){\n                setCreateButtonDisabled(true);\n                // mixpanel code//\n\t\t\t\tmixpanel.identify(res?.user?.email);\n\t\t\t\tmixpanel.track('Customer - Registered Successfully');\n\t\t\t\t// mixpanel code//\n                setToken(res.token.accessToken)\n                setRegisteredUser(res.user)\n                \n                if(guestJobId){\n                    //Call Klaviyo api\n                    const klaviyoData = {\n                        email: res?.user?.email,\n                        event: 'Job Post Button Click',\n                        properties: {\n                            $first_name: res?.user?.firstName,\n                            $last_name: res?.user?.lastName\n                        },\n                    };\n                    await klaviyoTrack(klaviyoData);   \n                }\n\n                setJobFlowStep(jobFlowsDescriptions['creditCardInformation'])\n            }else{\n                openNotificationWithIcon('error', 'Error', res.message )\n            }\t\t\n\n            //let res = await register({firstName:inputValues.firstName, lastName:inputValues.lastName, email:inputValues.email, password:inputValues.password, confirm_password:inputValues.confirmPassword, phoneNumber, language:inputValues.language, referred_by:inputValues.hearAboutUs, userType:'customer' });\n\n        }else{\n            openNotificationWithIcon('error', 'Error', 'Please accept terms & Conditions.');\n        }\n    }\n\n    /**\n\n\t * Following function is to handle change of dropdown fields in the form.\n\t * @author : Vinit\n\t */\n    const handleDropDownChange= (e) => {\n        setDropDownValue(e)\n    }\n\n    /**\n\n\t * Following function is to handle change of input fields in the form.\n\t * @author : Vinit\n\t */\n    const handleChange = (e) =>{\n        const { name, value } = e.target;\n        setInputValues({\n            ...inputValues,\n            [name]: value\n        }) \n    }\n\n    /**\n\t * Following function is to handle change of phone number field in the form.\n\t * @author : Vinit\n\t */\n    const handlePhoneNumber = (value, data) => {\n\t\tsetPhoneNumber(`+${value}`);\n        setDialCode(data.dialCode)\n\n\t};\n\n    /**\n\t * Following function is to display \"Terms & Conditions\" modal.\n\t * @author : Vinit\n\t */\n    const showModal = () => {\n        setIsModalVisible(true);\n\t};\n    \n    /**\n     * Following function is to hide \"Terms & Conditions\" modal.\n     * @author : Vinit\n     */\n    const handleOk = () => {\n        setIsModalVisible(false);\n\t};\n    \n    /**\n     * Following function is to hide \"Terms & Conditions\" modal.\n     * @author : Vinit\n     */\n    const handleCancel = () => {\n        setIsModalVisible(false);\n\t};\n    \n    /**\n     * Following function is to hide \"Privacy Policy\" modal.\n     * @author : Vinit\n     */\n    const handleCancelPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(false);\n\t}\n\n    /**\n     * Following function is to hide \"Cookies Policy\" modal.\n     * @author : Vinit\n     */\n    const handleCancelCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(false)\n\t}\n    \n    /**\n     * Following function is to hide \"Cookies Policy\" modal.\n     * @author : Vinit\n     */\n    const handleOkCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(false)\n\t}\n    \n    /**\n     * Following function is to hide \"Privacy Policy\" modal.\n     * @author : Vinit\n     */\n    const handleOkPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(false);\n\t};\n    \n    /**\n     * Following function is to show \"Privacy Policy\" modal.\n     * @author : Vinit\n     */\n    const showPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(true);\n\t};\n    \n    /**\n     * Following function is to show \"Cookie Policy\" modal.\n     * @author : Vinit\n     */\n    const showCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(true);\n\t}\n    \n    /**\n     * Following function is to toggle checkbox for \"Terms & Conditions\".\n     * @author : Vinit\n     */\n    const handleCheck = ()=>{\n        setBoxChanged(!boxChanged)\n\t}\n    \n    /**\n     * Following function is to toggle checkbox for \"Privacy Policy & Cookie Policy\".\n     * @author : Vinit\n     */\n    const handlePrivacyCheck = ()=>{\n\t\tsetPrivacyBoxChanged(!privacyBoxChanged)\n\t}\n    return (<>\n\n    <Modal title=\"Terms & Conditions\"  className=\"app-confirm-modal\" closable={false}  footer={[\n            <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancel}>\n                Close\n            </button>\n        ]} visible={isModalVisible} onOk={handleOk} >\n        {TermsCondition()}\n    </Modal>\n\n    <Modal title=\"Privacy Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n            <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelPrivacyModal}>\n                Close\n            </button>\n        ]} visible={isPrivacyPolicyModalAvailable} onOk={handleOkPrivacyModal} >\n        {privacyPolicy()}\n    </Modal>\n\n    <Modal title=\"Cookies Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n            <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelCookiesModal}>\n                Close\n            </button>\n        ]} visible={isCookiesPolicyModalAvailable} onOk={handleOkCookiesModal} >\n        {cookiePolicy()}\n    </Modal>\n\n    <Container className=\"font-nova box-container p-2\">\n        <Logo />\n        <Row className=\"justify-content-md-center\">\n            <Col md=\"auto\"><span className=\"heading heading-color\">Help is on its way!</span></Col>\n       </Row>    \n        <Row className=\"justify-content-md-center\">\n            <Col md=\"auto\"><h6 className=\"textColor\">Please fill out the details below so we can finalize your request.</h6></Col>\n        </Row>\n        <br/>\n        <br/>\n        <Form form={form} onFinish={signUp}>\n            <Row>\n                {/* <Col className=\"textColor text-left myPad text-left\">First Name</Col>\n                <Col className=\"textColor text-left myPad text-left\">Last Name</Col> */}\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        {/* <Col className=\"textColor text-left myPad text-left\"> */}\n                            <Col className=\"textColor text-left\">\n                                First Name\n                            </Col>\n                        {/* </Col> */}\n                    </Row>\n                    <Row>\n                        <Col>\n                            <NewInput type={'text'} name={'firstName'} placeHolder={''} onChange={handleChange} value={inputValues.firstName}/>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            Last Name\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <NewInput type={'text'} name={'lastName'} placeHolder={''} onChange={handleChange} value={inputValues.lastName}/>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col className=\"myPad parent-class\"><NewInput type={'text'} name={'firstName'} placeHolder={''} onChange={handleChange} value={inputValues.firstName}/></Col>\n                <Col className=\"myPad parent-class\"><NewInput type={'text'} name={'lastName'} placeHolder={''} onChange={handleChange} value={inputValues.lastName}/></Col>\n            </Row> */}\n            {/* <Row>\n                <Col className=\"textColor text-left myPad\">Email Address</Col>\n                <Col className=\"textColor text-left myPad\">Password</Col>\n            </Row>\n            <Row>\n                <Col className=\"myPad parent-class\"><NewInput type={'email'} name={'email'} placeHolder={''} onChange={handleChange} value={inputValues.email}/></Col>\n                <Col className=\"myPad parent-class\"><NewInput type={'password'} name={'password'} placeHolder={''} onChange={handleChange} value={inputValues.password}/></Col>\n            </Row> */}\n\n            <Row>\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            Email Address\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <NewInput type={'email'} name={'email'} placeHolder={''} onChange={handleChange} value={inputValues.email}/>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            Password\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <NewInput type={'password'} name={'password'} placeHolder={''} onChange={handleChange} value={inputValues.password}/>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n\n\n            {/* <Row>\n                <Col xs={4} className=\"textColor text-left myPad\">Phone Number</Col>\n                <Col xs={2} className=\"textColor text-left myPad\">Extension</Col>\n                <Col xs={6} className=\"textColor text-left myPad\">Confirm Password</Col>\n            </Row>\n            <Row>\n                <Col xs={4} className=\"myPad\">\n                    <PhoneInput countryCodeEditable={false} name={'phoneNumber'} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} className=\"p-0\" containerClass=\"\" dropdownClass=\"phoneInputDropdownClass\" inputClass=\"newInput\" buttonClass=\"\" searchClass=\"\" value={phoneNumber} onChange={handlePhoneNumber}  />\n                </Col>\n                <Col className=\"myPad\" xs={2}><NewInput type={'text'} name={'extension'} onChange={handleChange} value={inputValues.extension} placeHolder={''}/></Col>\n                <Col className=\"myPad\" xs={6}><NewInput type={'password'} name={'confirmPassword'} onChange={handleChange} value={inputValues.confirmPassword} placeHolder={''} password={inputValues.password}/></Col>\n            </Row>   */}\n\n\n            <Row className=\"max-width-990-flex-direction-col-reversed\">\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col md=\"8\" className=\"textColor text-left\">\n                            <Row className=\"myPad-15\">\n                                Phone Number\n                            </Row>\n                            <Row className=\"myPad-15\">\n                                <PhoneInput countryCodeEditable={false} name={'phoneNumber'} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} className=\"p-0\" containerClass=\"\" dropdownClass=\"phoneInputDropdownClass\" inputClass=\"newInput\" buttonClass=\"\" searchClass=\"\" value={phoneNumber} onChange={handlePhoneNumber}  />\n                            </Row>\n                        </Col>\n                        {/* <Col md=\"4\" className=\"textColor text-left maxWidth-767-margin-top-20\">\n                            <Row className=\"myPad-15\">\n                                Extension\n                            </Row>\n                            <Row className=\"myPad-15\">\n                                <NewInput type={'text'} name={'extension'} onChange={handleChange} value={inputValues.extension} placeHolder={''}/>\n                            </Row>\n                        </Col> */}\n                    </Row>\n                </Col>\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            Confirm Password\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <NewInput type={'password'} name={'confirmPassword'} onChange={handleChange} value={inputValues.confirmPassword} placeHolder={''} password={inputValues.password}/>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n\n\n\n            {/* <Row>\n                <Col className=\"textColor text-left myPad\">How did you hear about us ?</Col>\n                <Col className=\"textColor text-left myPad\">Select Language</Col>\n            </Row>\n            <Row>\n                <Col className=\"myPad parent-class\">\n                    <DropDown title={'Other'} dropDownOptions={['Linkedin', 'Facebook', 'Friend', 'Other']} name={'hearAboutUs'} value={dropDownValue} onChange={handleDropDownChange} />\n                </Col>\n                <Col className=\"myPad parent-class\">\n                    <DropDown title={'English'} dropDownOptions={languages} name={'language'} value={dropDownValue} onChange={handleDropDownChange} />\n                </Col>\n            </Row> */}\n\n            <Row>\n                <Col md=\"6\" className=\"myPad\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            How did you hear about us ?\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <DropDown title={'Other'} dropDownOptions={['Linkedin', 'Facebook', 'Friend', 'Other']} name={'hearAboutUs'} value={dropDownValue} onChange={handleDropDownChange} />\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md=\"6\" className=\"myPad maxWidth-767-margin-top-20\">\n                    <Row>\n                        <Col className=\"textColor text-left\">\n                            Select Language\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <DropDown title={'English'} dropDownOptions={languages} name={'language'} value={dropDownValue} onChange=   {handleDropDownChange} />\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col className=\"maxWidth-767-display-none\">\n                    {/* <NewInput type={'text'} placeHolder={'Type'}/> */}\n                </Col>\n                <Col className=\"d-flex flex-column justify-content-center mt-20\">\n\n                    <div className=\"checkboxDiv\">\n                        <label className=\"ml-2 textColor checkboxContainer\" htmlFor=\"terms&condtion\">\n                            <input type=\"checkbox\" className=\"customCheckbox\" id=\"terms&condtion\" defaultChecked={boxChanged} onChange={handleCheck} /> \n                            <span className=\"checkmark\"></span>\n                        I agree to the <a className=\"headingColor\" href=\"javascript:void(0)\" onClick={ showModal}>Terms & Condtions</a> </label>\n                    </div>\n                    <div className=\"checkboxDiv\">\n                        <label className=\"ml-2 textColor checkboxContainer\" htmlFor=\"privacy&cookies\">\n                            <input type=\"checkbox\" className=\"customCheckbox\" id=\"privacy&cookies\" onChange={handlePrivacyCheck}  defaultChecked={privacyBoxChanged}/> \n                            <span className=\"checkmark\"></span>\n                         I agree to the <a className=\"headingColor\" href=\"javascript:void(0)\" onClick={ showPrivacyModal}>Privacy Policy</a>  & <a className=\"headingColor\" href=\"javascript:void(0)\" onClick={ showCookiesModal} >Cookies Policy</a> </label>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col className=\"maxWidth-767-display-none\"></Col>\n                <Col className=\"mb-50 padding-0\">\n                    <div className=\"d-flex justify-content-around align-items-center mt-4\">\n                        <div className=\"textColor\">\n                            <span>Already have an account? </span>\n                            <Link className=\"headingColor font-weight-normal font-size-15\" to={linkToLogin}>Sign in</Link>\n                        </div>\n                        <Button type=\"submit\"  className ={\"app-btn job-accept-btn min-width-0 create-acc-btn\"} title=\"Create account\" >\n                        {/* <Button onClick={signUp}  className ={\"app-btn job-accept-btn\"} title=\"Create account\" > */}\n                            <span></span>\n                            {(createButtonDisabled \n                                ?\n                                <Spin className=\"spinner\"/>\n                                :\n                                <>Create Account</>\n                            )}\n\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n        </Form>\n    </Container>\n    </>)\n\n}\n\nexport default HelpIsOnItsWay",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Onboarding\\Registration\\HelpIsOnItsWay.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "PreviousTechnicianList",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useState } from \"react\";\nimport { Button, Col, Row } from 'react-bootstrap';\nimport * as JobApi from '../../../api/job.api';\nimport { Table, Pagination } from \"antd\";\nimport mixpanel from 'mixpanel-browser';\nimport Loader from '../../../components/Loader';\nconst PreviousTechList = ({ user }) => {\n    const [previousTechList, setPreviousTechList] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    /**\n      This useEffect is responsible to fetch all the relevant techs that techs completed job with this customer\n      @param:user\n      @returns:returns a list of relevant techs(whether online/offline)\n      @author:Mritunjay\n    **/\n    useEffect(() => {\n        try {\n            (async () => {\n                if (user && user?.customer) {\n                    let allCustomerJobsRes = await JobApi.findAllJobsByParams({ customer: user?.customer?.id });\n                    let temp = [];\n                    let techArray = [];\n                    allCustomerJobsRes.jobs.data.map((item) => {\n                        if (item?.technician?.id !== undefined && item?.technician?.id !== \"\") {\n                            let techId = item?.technician?.id;\n\n                            let value = item?.technician?.user?.id;\n                            let label = `${item?.technician?.user?.firstName} ${item?.technician?.user?.lastName}`;\n                            let rating = item?.technician?.rating;\n                            if (!techArray.includes(value)) {\n                                techArray.push(value)\n                                temp.push({ techId, value, label, rating })\n                            };\n                        };\n                    })\n\n                    if (temp.length > 0) {\n                        const allTechId = temp.map((item) => item.techId);\n                        const techCountMap = new Map();\n                        allCustomerJobsRes.jobs.data.forEach((item) => {\n                            allTechId.forEach((techId) => {\n                                if (item?.technician?.id.includes(techId)) {\n                                    if (techCountMap.has(techId)) {\n                                        techCountMap.set(techId, techCountMap.get(techId) + 1);\n                                    } else {\n                                        techCountMap.set(techId, 1);\n                                    };\n                                };\n                            });\n                        });\n                        temp.forEach((technicianId) => {\n                            const count = techCountMap.get(technicianId.techId);\n                            const technician = temp.find((item, id) => item.techId === technicianId.techId);\n                            if (technician) {\n                                technician.count = count;\n                            };\n                        });\n                        setPreviousTechList([...temp]);\n                    };\n                    setIsLoading(false)\n                };\n            })()\n        } catch (error) {\n            console.log(\"Error occurs during fetching all previous technicians \", error);\n        };\n    }, [user]);\n\n    const push_to_profile_detail = (data) => {\n        if (user && user.email) {\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Click on profile view button.');\n        };\n        const newPageUrl = `/technician-details-setup?technicianId=${data}&medium=technician-profile`\n        window.open(newPageUrl, \"_blank\")\n    };\n\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'label',\n            key: 'label',\n            render: text => (\n                (text ? text : '')\n            ),\n        },\n        {\n            title: 'Rating',\n            dataIndex: 'rating',\n            width: '30%',\n            key: 'rating',\n            render: text => (\n                (text ? text : '')\n            ),\n        },\n        {\n            title: 'Total Jobs',\n            dataIndex: 'count',\n            key: 'count'\n\n        },\n        {\n            title: 'Action',\n            dataIndex: 'value',\n            key: 'value',\n            render: value => {\n                if (value) {\n                    return (\n                        <>\n                            <Button className=\"mb-2 btn app-btn  app-btn-super-small\" onClick={() => { push_to_profile_detail(value) }} title=\"Technician profile.\">View Profile<span></span></Button>\n                        </>\n                    )\n                }\n            },\n\n        },\n    ];\n    return (\n        <React.Fragment>\n            <Col xs=\"12\">\n                <Loader height=\"100%\" className={(isLoading ? 'loader-outer' : 'd-none')} />\n                <Col className=\"py-4 mt-1 table-responsive\">\n                    <Col className=\"ant-table-structure-outer previousTechList table-responsive p-0\">\n                        <div className=\"highlight-background\" />\n                        <Table\n                            dataSource={previousTechList}\n                            pagination={true}\n                            columns={columns}\n                            rowKey={(record) => record.techId}\n                            className=\"previousTechnician-table\"\n                        />\n                    </Col>\n                </Col>\n            </Col>\n        </React.Fragment>\n    )\n};\nexport default PreviousTechList",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\PreviousTechnicianList\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Profile",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React,{useState, useEffect} from 'react';\nimport { Col, Tabs, Tab} from 'react-bootstrap';\nimport ScreenSteps from '../../../components/ScreenSteps';\nimport ProfileReview from './steps/profilereview';\nimport EditCustomer from './steps/editCustomer';\nimport CustomerCard from './steps/customerCard';\nimport BusinessDetails from './steps/businessDetails';\n// import Subscription from '../Subscription';\nimport { useAuth } from '../../../context/authContext';\nimport Loader from '../../../components/Loader';\nimport { roleStatus, openNotificationWithIcon } from '../../../utils/index';\nimport mixpanel from 'mixpanel-browser';\nimport * as UserApi from \"../../../api/users.api\"\n\nconst CustomerProfile = ({cardDetailActive}) =>{\n\n \tconst [currentStep, setCurrentStep] = useState(0);\n\tconst {refetch,user} = useAuth();\n\tconst [customer,setCustomer] = useState('')\n\t// const [showLoader, setShowLoader] = useState(false);\n\tconst showLoader = false;\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [newCardAdded, setNewCardAdded] = useState(false);\n\tconst [defaultActiveTab, setDetaultActiveTab] = useState(\"Manage Account\")\n\tconst [ownerHasBusinessAccount,setOwnerHasBusinessAccount] = useState(false);\n\n\tuseEffect(()=>{\n\t\t// code added by manibha because phone number was not getting updated\n\t\trefetch() \n\t},[currentStep])\n\n\t// This will set default tab to  card Detail when we are accessing this through url : \"customer/card-detail-page\"\n\tuseEffect(() =>{\n\tif(cardDetailActive){\n\t\tsetDetaultActiveTab(\"Card Details\")\n\t}\n\t},[])\n\n\tuseEffect(()=>{\n        (async()=>{\n            if(user && user?.ownerId && user?.ownerId !== null){\n                const ownerUserInfo = await UserApi.getUserById(user.ownerId)\n\t\t\t\tif(ownerUserInfo && ownerUserInfo.isBusinessTypeAccount === true){\n\t\t\t\t\tsetOwnerHasBusinessAccount(true)\n\t\t\t\t}\n            }else{\n\t\t\t\tif(user.isBusinessTypeAccount === true){\n\t\t\t\t\tsetOwnerHasBusinessAccount(true)\n\t\t\t\t}\n\t\t\t};\n        })()\n    },[]);\n\n\n\tconst onNext = () => {\n\t\tsetCurrentStep(currentStep+1)\n\t}\n\tconst prev = () =>{\n    console.log(\"its called..............\",currentStep)\n\t \tsetCurrentStep(currentStep-1)\n\t}\n\n  const handleActiveTab = (k) => {\n    console.log(\"active kye\",k)\n    if(k.toLowerCase() === 'buy prepaid minutes'){\n      refetch()\n    }\n    setDetaultActiveTab(k)\n  }\n\n\tconst steps = [{\n      title: 'profileReview',\n      content: <ProfileReview user={user} setCustomer={setCustomer} onNext={onNext} />,\n    },\n    {\n      title: 'editCustomer',\n      content: <EditCustomer user={user} values={user.customer}  onNext={onNext} onPrev={prev} />,\n    },\n\t{\n\t\ttitle: 'businessDetails',\n\t\tcontent: <BusinessDetails user={user} values={user.customer} onNext={onNext} onPrev={prev} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} newCardAdded={newCardAdded} setNewCardAdded={setNewCardAdded} showCards={true}/>,\n\t  },\n    {\n      title: 'customeCard',\n      content: <CustomerCard user={user} values={user.customer} onNext={onNext} onPrev={prev} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} newCardAdded={newCardAdded} setNewCardAdded={setNewCardAdded} showCards={true}/>,\n    },\n    // {\n    //   title: 'subscription',\n    //   content: <Subscription user={user} handleActiveTab={handleActiveTab} />,\n    // }\n    ];\n\n    const push_to_pricing_plans = (e) => {\n        if(user){\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Buy Subscription');\n            mixpanel.people.set({\n                $first_name: user.firstName,\n                $last_name: user.lastName,\n            });\n            // mixpanel code//\n        }\n        \n        if(user && user.customer){\n            // history.push('/subscription')\n        }else{\n            openNotificationWithIcon('error', 'Error', 'Something went wrong. Please logout and login again to continue.');\n        }        \n        \n    };\n\n\n\treturn (\n        <React.Fragment>\n        \t<Col md=\"12\" className=\"\">\n\t    \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\n\t            <Col md=\"12\" className=\"py-4 mt-1\">\n\t            \t<Col xs=\"12\" className=\"p-0\">\n\n                \t<Tabs activeKey={defaultActiveTab} onSelect={handleActiveTab} id=\"uncontrolled-tab-example\" className=\"mb-3 tabs-outer\">\n\n\t\t\t\t\t\t\t<Tab eventKey=\"Manage Account\" title=\"Manage Account\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t<ScreenSteps stepsContent={steps[0].content} />\n\t\t\t\t\t\t\t</Tab>\n\n\t\t\t\t\t\t\t{(user && user?.userType === \"customer\") && ownerHasBusinessAccount && user.roles[0] !== 'user' &&\t (\n\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Business Details\" title=\"Business Details\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<ScreenSteps stepsContent={steps[2].content} />\n\t\t\t\t\t\t\t\t\t</Tab>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{/* {(user && user?.userType === \"customer\" && (user.isBusinessTypeAccount || user.ownerId !==null)) &&\n\t\t\t\t\t\t\t\tuser?.roles?.length > 0 && user.roles.indexOf(roleStatus.USER) === -1 && (\n\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Business Details\" title=\"Business Details\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<ScreenSteps stepsContent={steps[2].content} />\n\t\t\t\t\t\t\t\t\t</Tab>\n\t\t\t\t\t\t\t\t)} */}\n\n\t\t\t\t\t\t\t{user?.userType === \"customer\" &&\n\t\t\t\t\t\t\t\tuser?.roles?.length > 0 && user.roles.indexOf(roleStatus.USER) === -1 && user.roles.indexOf(roleStatus.ADMIN) === -1 && (\n\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Card Details\" title=\"Card Details\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<ScreenSteps stepsContent={steps[3].content} />\n\t\t\t\t\t\t\t\t\t</Tab>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\n                      \t\t{/*{user?.userType === \"customer\" &&\n                       \t\t\tuser?.roles?.length> 0 && user.roles.indexOf(roleStatus.USER) === -1 && (\n                        \t\t\t<Tab\n                                \t\teventKey=\"Buy prepaid minutes\"\n                                \t\ttitle=\"My Subscriptions\"\n                                \t\tclassName=\"col-md-12 p-0\"\n                          \t\t\t>\n                          \t\t\t\t<ScreenSteps stepsContent={steps[3].content} />\n                            \t\t\t\n                        \t\t\t</Tab>\n                      \t\t)}*/}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Tabs>\t\t\n\t\t            </Col>\n\t            </Col>\n\t        </Col>\n        </React.Fragment>\n\n\t\t)\n}\n\nexport default CustomerProfile\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "addCardForm.js",
                                                                    "fileData": "import React, {useEffect, useState} from 'react';\nimport {\n\t// Elements,\n\t// CardElement,\n\tuseStripe,\n\tuseElements,\n\tCardNumberElement,\n\tCardExpiryElement,\n\t// injectStripe,\n\t// StripeProvider,\n\tCardCvcElement\n} from \"@stripe/react-stripe-js\";\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as UserApi from '../../../../api/users.api';\nimport { openNotificationWithIcon ,isLiveUser} from '../../../../utils';\nimport mixpanel from 'mixpanel-browser';\nimport { Input,Spin,Modal} from 'antd';\nimport { Row, Col, Button} from 'react-bootstrap';\nimport { useUser } from '../../../../context/useContext';\n// import styled from 'styled-components';\n// import { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faQuestionCircle} from '@fortawesome/free-regular-svg-icons';\nimport { PAYMENT_DETAILS_MESSAGE } from '../../../../constants/index';\n// import { LineWave } from 'react-loader-spinner';\nimport stripeSecureLogo from \"../../../../assets/images/stripe-secure-logo.png\"\n\nlet liveUser = true;\nconst AddCardForm = ({user,cardsInfo,setCardsInfo,isModalOpen,setIsModalOpen, setNewCardAdded,setDisableButton=false, source, setDisableBtn}) => {\n\tconst stripe = useStripe();\n\tconst elements = useElements();\n\t// const [firstName,setFirstName] = useState('')\n\t// const [Address,setAddress] = useState('')\n\tconst [zip,setZip] = useState('')\n\tconst [isDisabled,setIsDisabled] = useState(false)\n\tconst { refetch } = useUser();\n\tconst {PAYMENT_DETAILS_MAIN_HEAD_SUBSCRIPTION,PAYMENT_DETAILS_MAIN_HEAD,PAYMENT_DETAILS_SUB_HEAD,PAYMNET_DETAILS_TITLE} = PAYMENT_DETAILS_MESSAGE\n\t// const title =  \"Please enter your credit card information. \\n You won't be charged for anything here! This is to make your job easier, so you won't need to enter it at every stage again.\\n  Again, you won't be charged here.\";\n\t// console.log('card title:::::::::::::',title);\n\tuseEffect(()=>{\n\t\t(async()=>{\n\t\t\tif(user){\n\t\t\t\tliveUser = await isLiveUser(user)\n\t\t\t}\n\t\t})()\n\t},[user])\n\tconst handleSubmit = async (event) => {\n\t\t// Block native form submission.\n\t\tevent.preventDefault();\n\n\t\tif(!isDisabled){\n\t\t\tsetIsDisabled(true);\n\t\t\tif(zip === \"\"){\n\t\t\t\topenNotificationWithIcon(\"error\", \"Info missing\", \"Please enter zip!\")\n\t\t\t\tsetIsDisabled(false)\n\t\t\t\treturn\n\t\t\t}else{\n\t\t\t\tawait UserApi.updateUser({userId:user.id, zip:zip})\n\t\t\t}\n\n\t\t\tif (!stripe || !elements) {\n\t\t\t\t// Stripe.js has not loaded yet. Make sure to disable\n\t\t\t\t// form submission until Stripe.js has loaded.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get a reference to a mounted CardElement. Elements knows how\n\t\t\t// to find your CardElement because there can only ever be one of\n\t\t\t// each type of element.\n\t\t\tvar data = {}\n\t\t\tconst cardElement = elements.getElement(CardNumberElement);\n\t\t\t// data['name'] = firstName\n\t\t\t// data['address_line1'] = Address\n\t\t\tdata['zipcode'] = zip\n\t\t\t// data['metadata'] = {'phone_number':'675124'}\n\n\n\t\t\t// if (isPossiblePhoneNumber(editedPhoneNumber) === false && isValidPhoneNumber(editedPhoneNumber) === false) {\n\t\t\t// \tsetIsDisabled(false)\n\t\t\t// \treturn (openNotificationWithIcon('error', 'Error', 'Phone number is not valid'));\n\t\t\t// }\n\t\t\t// Use your card Element with other Stripe.js APIs\n\t\t\tstripe.createToken(cardElement,data).then(\n\t\t\t\tasync (payload) => {\n\t\t\t\t\tconsole.log('payload>>>>>>>>>>>>>>>>>>>>',payload)\n\t\t\t\t\tif(payload['error']){\n\t\t\t\t\t\topenNotificationWithIcon(\"error\",\"Error\",payload['error']['message'])\n\t\t\t\t\t\tsetIsDisabled(false);\n\t\t\t\t\t\tsetNewCardAdded(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else{                   \n\t\t\t\t\t\tlet retrieve_cust = await CustomerApi.retrieveCustomer(user.customer.id);\n\t\t\t\t\t\tif(!retrieve_cust.stripe_id || retrieve_cust.stripe_id === '' || retrieve_cust.stripe_id == null){\n\t\t\t\t\t\t\tcheckCardAndAddCardToCustomer(cardElement,data,payload,true,false)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tcheckCardAndAddCardToCustomer(cardElement,data,payload,false,retrieve_cust.stripe_id)\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}          \n\t\t\t);    \n\t\t}\n\t};\n\n\tasync function checkCardAndAddCardToCustomer(cardElement,data,payload,newCustomer,stripe_customer_id){\n\t\tstripe.createToken(cardElement,data).then(\n\t\t\tasync (payloadTwo) => {\n\t\t\t\tconsole.log('payloadTwo>>>>>>>>>>>>>>>>>>>>',payloadTwo)\n\t\t\t\tif(payloadTwo['error']){\n\t\t\t\t\topenNotificationWithIcon(\"error\",\"Error\",payloadTwo['error']['message'])\n\t\t\t\t\tsetIsDisabled(false);\n\t\t\t\t\tsetNewCardAdded(false);\n\t\t\t\t\treturn;\n\t\t\t\t}else{\n\t\t\t\t\t// const card_valid  =  await CustomerApi.checkCardValidation({token_id:payloadTwo.token.id,liveUser:liveUser}) \n\t\t\t\t\t// if(card_valid['success']){\n\t\t\t\t\t\tif(newCustomer){\n\t\t\t\t\t\t\tconsole.log('addCardForm handleSubmit createCustomerStripe ::')\n\t\t\t\t\t\t\tconst result_customer  = await CustomerApi.createCustomerStripe({\n\t\t\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\t\t\tliveUser:liveUser\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\tvar customer_id = result_customer.id\n\t\t\t\t\t\t\tCustomerApi.updateCustomer(user.customer.id,{\"stripe_id\":customer_id})\n\t\t\t\t\t\t\tstripe_customer_id = customer_id\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\n\n\t\t\t\t\t\tconst result_card  = await CustomerApi.addCardToCustomerStripe({\n\t\t\t\t\t\t\tliveUser:liveUser,\n\t\t\t\t\t\t\tstripe_id: stripe_customer_id,\n\t\t\t\t\t\t\ttoken_id:payload.token.id,\n\t\t\t\t\t\t\tjobId:'NA'\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(result_card['error'] != undefined){\n\t\t\t\t\t\t\t openNotificationWithIcon(\"error\",\"Error\",result_card['error']['message'])\n\t\t\t\t\t\t\t setIsDisabled(false)\n\t\t\t\t\t\t\t  // mixpanel code//\n\t\t\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\t\t\tmixpanel.track('Customer - Card not added due to some error in card.');\n\t\t\t\t\t\t\t// mixpanel code//\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* This  Condition is for if user has already added card and now adding new card\n\t\t\t\t\t \t\tthen we will mark this new card as default card */\n\t\t\t\t\t\t\tif (result_card[\"id\"]) {\n\t\t\t\t\t\t\t\tawait CustomerApi.updateDefaultCard({\n\t\t\t\t\t\t\t\t\tliveUser: liveUser,\n\t\t\t\t\t\t\t\t\tcard_id: result_card[\"id\"],\n\t\t\t\t\t\t\t\t\tcustomer_id: stripe_customer_id,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// mixpanel code//\n\t\t\t\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\t\t\t\tmixpanel.track('Customer - Mark Upcoming Card As Default Card.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Here we are holding $100 from customer's account\n\t\t\t\t\t\t\tconst holdChargeResponse = await holdPaymentFromcustomerCard(stripe_customer_id, liveUser)\n\t\t\t\t\t\t\t// This condition check if $100 hold is not successful then show error message\n\t\t\t\t\t\t\tif (holdChargeResponse.status !== \"Successful\") {\n\t\t\t\t\t\t\t\topenNotificationWithIcon(\"error\", \"Error\", holdChargeResponse.message);\n\t\t\t\t\t\t\t\t const card_id = holdChargeResponse?.response?.source?.id\n\t\t\t\t\t\t\t\t const stripe_id = holdChargeResponse?.response?.payment_intent?.customer\n                                 console.log(\"checking we are getting details or not\",{stripe_id,card_id});\n\t\t\t\t\t\t\t\t if(card_id && stripe_id){\n\t\t\t\t\t\t\t\t\tawait removeCard(card_id,stripe_id);\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\tsetIsDisabled(false)\n\t\t\t\t\t\t\t\t\tsetIsModalOpen(false)\n\t\t\t\t\t\t\t\t\tsetNewCardAdded(false);\n\t\t\t\t\t\t\t\t}, 1000);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (cardsInfo) {\n\t\t\t\t\t\t\t\t\tlet temp_data = []\n\t\t\t\t\t\t\t\t\tif (cardsInfo && cardsInfo != null && Array.isArray(cardsInfo)) {\n\t\t\t\t\t\t\t\t\t\ttemp_data = [...cardsInfo]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (newCustomer) {\n\t\t\t\t\t\t\t\t\t\tresult_card['default_card'] = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttemp_data.push(result_card)\n\t\t\t\t\t\t\t\t\tsetCardsInfo(temp_data)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t const refundedMoney = await refundHoldedMoney(holdChargeResponse);\n\t\t\t\t\t\t\t\t// mixpanel code//\n\t\t\t\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\t\t\t\tmixpanel.track('Customer - Card details added and refunded holded money',refundedMoney);\n\t\t\t\t\t\t\t\t// mixpanel code//\n\t\t\t\t\t\t\t\tawait refetch()\n\t\t\t\t\t\t\t\topenNotificationWithIcon(\"success\", \"Success\", \"Card details has been saved.\")\n\t\t\t\t\t\t\t\tsetIsDisabled(false)\n\t\t\t\t\t\t\t\tsetIsModalOpen(false)\n\t\t\t\t\t\t\t\tsetNewCardAdded(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t// }else{\n\t\t\t\t\t// \topenNotificationWithIcon(\"error\",\"Error\",card_valid['message']);\n\t\t\t\t\t// \tsetIsDisabled(false)\n\t\t\t\t\t// }\n\t\t\t\t}               \n\t\t})\n\t}\n\t// const changeNameOnCard = (e) =>{\n\t// \tsetFirstName(e.target.value)\n\t// }\n\n\t// const changeAddress = (e) =>{\n\t// \tsetAddress(e.target.value)\n\t// }\n\n\tconst changeZip = (e) =>{\n\t\tsetZip(e.target.value)\n\t}\t\n\n\t// const HandlePhoneNumber = (e)=>{\n\t// \tsetEditedPhoneNumber(`+${e}`);\n\t// }\n\n\t// This function is used to refund the holded amount to the customer back after authorization\n\tconst refundHoldedMoney= async(holdChargeResponse)=>{\n\t\t // This will refund the hold money from customer account\n\t\t if (holdChargeResponse?.payment_id  && holdChargeResponse?.payment_status ==\"requires_capture\") {\n\t\t\tconst obj = {\n\t\t\t  payment_hold_id: holdChargeResponse?.payment_id,\n\t\t\t  isDeduct: false,\n\t\t\t  jobId: \"NA\",\n\t\t\t  stripe_id :  holdChargeResponse?.stripe_id\n\t\t\t}\n\t\t\tconst cancelledResponse = await CustomerApi.deductOrRefundHoldMoney(obj);\n\t\t\t // mixpanel code//\n\t\t\t mixpanel.identify(user.email);\n\t\t\t mixpanel.track('Customer - Refund $100 from customer', cancelledResponse);\n\t\t\t// mixpanel code//\n\t\t\treturn cancelledResponse;\n\t\t  }\n\t}\n\n\t// This function will hold the amount from card during authorization of card of customer\n\tconst holdPaymentFromcustomerCard = async (stripe_customer_id,liveUser) => {\n\t\t// Holding $100 Dollars here from customer which will be refunded or deducted depnding on customer action\n\t\tconst custObj = {\n\t\t\t\"stripe_id\": stripe_customer_id,\n\t\t\t'liveUser': liveUser,\n\t\t\t'jobId': \"NA\",\n\t\t}\n\t\tconsole.log(\"Logging customer object for verification:\", custObj)\n\t\tconst holdChargeResponse = await CustomerApi.holdChargeFromCustomer(custObj);\n\t\t// mixpanel code//\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Customer - Hold $100 from customer', holdChargeResponse);\n\t\t// mixpanel code//\n\t\treturn holdChargeResponse;\n\t}\n\n\t// This function will remove the card if it fails to hold the amount\n\tconst removeCard = async (card_id,stripe_id) => {\n\t\tconst response = await CustomerApi.removeCard({\n\t\t\tliveUser: liveUser,\n\t\t\tcard_id: card_id,\n\t\t\tcustomer_id: stripe_id,\n\t\t});\n\t\treturn response;\n\n\t}\n\n\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle={<><div className='text-center mb-3'><span>{source === \"subscription\" ? PAYMENT_DETAILS_MAIN_HEAD_SUBSCRIPTION : PAYMENT_DETAILS_MAIN_HEAD}</span><br/>\n\t\t\t<span className='text-center'>{source === \"subscription\" ? \"\" : PAYMENT_DETAILS_SUB_HEAD}</span><br/><span className='text-center'>{source === \"subscription\" ? \"\" : PAYMNET_DETAILS_TITLE}</span>\n\t\t\t</div><br/>\n\t\t\t</>}\n\t\t\tvisible={isModalOpen}\n\t\t\tonOk={() => {}}\n\t\t\tonCancel={() => {setIsModalOpen(false); if(setDisableButton){setDisableButton(false)}} }\n\t\t\tclosable={false}\n\t\t\tmaskClosable={false}\n\t\t\tkeyboard={false}\n\t\t\tclassName=\"add-card-modal-outer\"\n\t\t\tfooter={[\n\t\t\t\t<div className='d-flex justify-content-between align-items-center flex-wrap'>\n\t\t\t\t\t<img className=\"w-40p max-width-768-w-100per\" src={stripeSecureLogo} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button key=\"back\" onClick={() => {\n\t\t\t\t\t\t\tsetIsModalOpen(false); if(setDisableBtn){setDisableBtn(false)}; if(setDisableButton){setDisableButton(false)}\n\t\t\t\t\t\t}} className=\"btn app-btn app-btn-light-blue modal-footer-btn\">\n\t\t\t\t\t\t\t<span></span>Close\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tloading={false}\n\t\t\t\t\t\t\tclassName={\"btn app-btn modal-footer-btn \"+(isDisabled ? \"disabled-btn\" : \"\")}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t{isDisabled \n\t\t\t\t\t\t\t? \n\t\t\t\t\t\t\t\t<Spin/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<>Add Card</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t]}\n\t\t\t>\n\t\t\t\t{/* <Col md=\"12\" className=\"card-validation-message mb-5\">\n\t\t\t\t\tTo validate the card, we will pre-authorize a charge which will be returned within 24 hrs.\n\t\t\t\t</Col> */}\n\t\t\t\t<Col md=\"12\" className=\"pb-4 m-auto add-card-form-outer text-left\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col md=\"12\" className= \"card-element-outer mt-2 mb-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"pl-0 pb-2\">\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Card Number</label>              \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner pb-3 iframe-outer\" >\n\t\t\t\t\t\t\t\t\t<CardNumberElement  options={{placeholder:\"CC#\"}} />\n\t\t\t\t\t\t\t\t</Col>                            \n\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t<Col md=\"4\" className= \"card-element-outer mt-2 mb-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"pl-0 pb-2\">\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Expiry Date</label>         \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner pb-3 iframe-outer\" >\n\t\t\t\t\t\t\t\t\t<CardExpiryElement/> \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t<Col md=\"4\" className= \"card-element-outer mt-2 mb-4 cvv-item-outer\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"pl-0 pb-2\">\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">CVV</label>         \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner pb-3 iframe-outer\" >\n\t\t\t\t\t\t\t\t\t<CardCvcElement/>\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon  icon={faQuestionCircle} className=\"card-icon\" title=\"CVV code mentioned on the back of the Credit & Debit Card.\"/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Col md=\"4\" className= \"card-element-outer mt-2 mb-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"pl-0\">\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Zip</label>         \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner\" >\n\t\t\t\t\t\t\t\t<Input onFocus={(e) => { e.target.style.boxShadow = 'none' }} placeholder=\"XXX\" onChange={changeZip} required/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t{/* <Col md=\"12\" className= \"card-element-outer my-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner\" >\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Name on a Card</label>              \n\t\t\t\t\t\t\t\t\t<Input placeholder=\"Card`s Holder Name\" onChange={changeNameOnCard} required/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col> */}\n\n\t\t\t\t\t\t\t{/* <Col md=\"8\" className= \"card-element-outer my-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner\" >\n\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Address</label>              \n\t\t\t\t\t\t\t\t\t<Input placeholder=\"Enter address\" onChange={changeAddress} required/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col></Col> */}\n\t\t\t\t\t\t\t{/*<Col md=\"4\" className= \"card-element-outer my-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner card-billing-phone\" >\n\t\t\t\t\t\t\t\t\t<InputWithLabel>\n\t\t\t\t\t\t\t\t\t\t<label className=\"label-name\">Billing Phone</label>\n\t\t\t\t\t\t\t\t\t\t<PhoneInput placeholder=\"\" countryCodeEditable={false} onChange={HandlePhoneNumber} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} /> \n\t\t\t\t\t\t\t\t\t</InputWithLabel>                   \n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Col>*/}\n\n\t\t\t\t\t\t\t{/*<Col md=\"12\" className= \"mb-4\">\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"app-btn\" disabled={isDisabled}>\n\t\t\t\t\t\t\t\t\t<span></span> \n\t\t\t\t\t\t\t\t\tAdd Card                \n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</Col>*/}\n\t\t\t\t\t\t\t{isDisabled ? <span></span> : ''}\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</form>            \n\t\t\t\t</Col>\n\t\t\t</Modal>\n\t);\n};\n\n\n//  const InputWithLabel = styled.div`\n// \tdisplay: flex;\n// \tflex-direction: column;\n// \ttext-align: left;\n// \tmarginRight: 30px;\n// \tposition: relative;\n// \t&:last-child {\n// \t\tmarginRight: 0;\n// \t}\n// \t& input{\n// \t\theight:50px;\n// \t\tpadding:10px;\n// \t\tborder-radius: 10px;\n// \t\tmargin-top: 15px;\n// \t\tborder : 2px solid #F3F3F3;\n// \t\tmargin-top:15px;\n// \t\tmargin-left:20px;\n// \t}\n// \t& .react-tel-input .form-control {\n// \t\theight:50px;   \n// \t}\n// `;\n\nexport default AddCardForm;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\addCardForm.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "businessDetails.js",
                                                                    "fileData": "import React, { useEffect, useRef, useState } from 'react';\nimport mixpanel from 'mixpanel-browser';\nimport { Row, Col, Form,Input,Select } from 'antd';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { openNotificationWithIcon } from '../../../../utils';\nimport styled from 'styled-components';\nimport { ItemContainer, ItemTitle,DescriptionText } from './style';\nimport editIcon from '../../../../assets/images/edit.png';\nimport ReactQuill from 'react-quill'\nimport 'quill/dist/quill.snow.css'\nimport { updateUser, getUserById } from '../../../../api/users.api';\nimport { useSocket } from '../../../../context/socketContext';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faCheck} from '@fortawesome/free-solid-svg-icons';\nimport H4 from 'components/common/H4';\nimport {Button} from 'react-bootstrap';\nimport * as BusinessApi from '../../../../api/businessDetails.api'\nimport { INDUSTRY, TEAM_SIZE } from '../../../../constants/index';\nimport { useAuth } from 'context/authContext';\nconst BusinessDetails = ({ user }) => {\n\n    const digitRegex = /(\\d{501,})|([A-Za-z]{501,})/;\n    const [aboutBusinesDetails, setAboutBusinesDetails] = useState('');\n    const [aboutBusinesDetailsForTech, setAboutBusinesDetailsForTech] = useState('');\n    const [haveDescription, setHaveDescription] = useState(true)\n    const [haveDescriptionForTech, setHaveDescriptionForTech] = useState(true)\n    const [exceedsLimit, setExceedsLimit] = useState(false)\n    const [exceedsLimitForTech, setExceedsLimitForTech] = useState(false)\n    const quillRef = useRef(null);\n    const quillRefforTech = useRef(null);\n    const [showSpinner, setShowSpinner] = useState(false);\n    const [showSpinnerForTech, setShowSpinnerForTech] = useState(false);\n    const [showEditor, setShowEditor] = useState(false);\n    const [showEditorForTech, setShowEditorForTech] = useState(false);\n    const [isOwnerAccount , setIsOwnerAccount] = useState(false)\n    const { socket } = useSocket();\n    const { Option } = Select;\n    const { updateUserInfo } = useAuth();\n    const [businessDetails , setBusinessDetails] = useState({\n        businessName : '',\n        isBusinessTypeAccount : false,\n        businessWebsite : '',\n        industry : '',\n        teamSize :'',\n        editBusinessNameFeild : false,\n        editBusinessWebSiteField : false,\n        editIndustryField : false,\n        editTeamSizeField : false\n    })\n\n    useEffect(() => {\n        (async () => {\n            if (user && user?.userType === 'customer') {\n                const haveOwnerId = user?.ownerId;\n                let userDetails;\n                if (haveOwnerId && haveOwnerId !== null) {\n                    userDetails = await getUserById(user.ownerId)\n                } else {\n                    userDetails = await getUserById(user.id)\n                };\n                if(userDetails && userDetails?.business_details?.businessInfoMessage){\n                    setAboutBusinesDetails(userDetails?.business_details?.businessInfoMessage);\n                }\n                if(userDetails && userDetails?.business_details?.businessInfoMessageForTech){\n                    setAboutBusinesDetailsForTech(userDetails?.business_details.businessInfoMessageForTech);\n                }\n            }\n        })()\n    }, [user]);\n\n    useEffect(()=>{\n       // This will decide to show Business Name Edit Field Or not\n        const userRolesArray = user?.roles\n        const isOwner = userRolesArray.includes(\"owner\");\n        if(userRolesArray && isOwner){\n          setIsOwnerAccount(true)\n        }\n      },[user])\n\n    useEffect(()=>{\n        if(user && user?.userType == \"customer\" && user?.business_details){\n            const businessDetails = user?.business_details\n            \n            const businessType = businessDetails?.isBusinessTypeAccount ? businessDetails?.isBusinessTypeAccount : false\n            const businessName = businessDetails?.businessName ?  businessDetails?.businessName : '';\n            const businessWebsite = businessDetails?.businessWebsite ?  businessDetails?.businessWebsite : '';\n            const industry = businessDetails?.industry ?  businessDetails?.industry : INDUSTRY[0].value;\n            const teamSize = businessDetails?.teamSize ?  businessDetails?.teamSize : TEAM_SIZE[0].value;\n            const updatedFields = {\n                businessName : businessName,\n                isBusinessTypeAccount : businessType,\n                businessWebsite : businessWebsite,\n                industry : industry,\n                teamSize : teamSize\n            }\n            setBusinessDetails((prevBusinessDetails) => ({\n                ...prevBusinessDetails,\n                ...updatedFields,\n              }));\n        }\n    },[user])\n\n\n    useEffect(() => {\n        (async () => {\n             socket.on(\"updated-business-message\",(data) => {\n                   if(data && (data?.userId === user.id) || (data?.userId === user?.ownerId) && data?.businessInfoMessage){\n                    setAboutBusinesDetails(data?.businessInfoMessage);\n                   }\n             })\n        })()\n    }, [socket])\n\n    const validateContent = (text) => {\n        if (digitRegex.test(text)) {\n            setExceedsLimit(true);\n        } else {\n            setExceedsLimit(false);\n        };\n    };\n\n    const validateContentForTech = (text) => {\n        if (digitRegex.test(text)) {\n            setExceedsLimitForTech(true);\n        } else {\n            setExceedsLimitForTech(false);\n        };\n    };\n\n    const handlePaste = (event) => {\n        const clipboardData = event.clipboardData || window.clipboardData;\n        const pastedText = clipboardData.getData('text');\n        if (digitRegex.test(pastedText)) {\n            setExceedsLimit(true);\n        } else {\n            setExceedsLimit(false);\n        };\n        setHaveDescription(false);\n    };\n\n    const handlePasteForTech = (event) => {\n        const clipboardData = event.clipboardData || window.clipboardData;\n        const pastedText = clipboardData.getData('text');\n        if (digitRegex.test(pastedText)) {\n            setExceedsLimitForTech(true);\n        } else {\n            setExceedsLimitForTech(false);\n        };\n        setHaveDescriptionForTech(false);\n    };\n\n    const handleComplete = async () => {\n        try {\n            if (user && user.email) {\n                mixpanel.identify(user.email);\n                mixpanel.track('Customer - Update business details.');\n            }\n            if (quillRef.current) {\n                const quillEditor = quillRef.current?.getEditor();\n                const htmlContent = quillEditor?.root.innerHTML;\n                // Convert HTML to plain text\n                const parser = new DOMParser();\n                const parsedHtml = parser.parseFromString(htmlContent, 'text/html');\n                const plainText = parsedHtml.body.textContent || '';\n                 const removeSpaceOfText = plainText.trim(); \n                console.log(\"editor text length\",removeSpaceOfText.length)\n\n                // if (removeSpaceOfText == '') {\n                //     setHaveDescription(true);\n                // } else {\n                    if (removeSpaceOfText.length > 500) {\n                        setExceedsLimit(true);\n                    } else {\n                        setExceedsLimit(false);\n                        let customerUserId;\n                        if (user && user?.userType === 'customer') {\n                            if (user && user?.ownerId && user?.ownerId !== null) {\n                                customerUserId = user?.ownerId\n                            } else {\n                                customerUserId = user.id\n                            };\n\n                            setShowSpinner(true);\n\n                            await BusinessApi.updateBusinessDetails(user.business_details?.id, {\n                                businessInfoMessage: aboutBusinesDetails, businessMessNofication: { ownerNotify: true, userNotify: true, adminNotify: true }\n                            }).then(res => {\n                                if (res) {\n                                    setTimeout(() => {\n                                        setShowEditor(false);\n                                        setShowSpinner(false);\n                                        socket.emit(\"update-business-info-message\", {\n                                            userId: customerUserId,\n                                            businessInfoMessage: aboutBusinesDetails\n                                        });\n                                        openNotificationWithIcon('success', 'Success', 'Business details submitted successfully.');\n                                    }, 800);\n                                }\n                            })\n                        };\n                    };\n                // };\n            };\n        } catch (e) {\n            console.log(\"Error occurs while technician submit his profile description.\", e)\n        };\n    };\n\n    const saveMessageForTech = async () => {\n        try {\n            if (user && user.email) {\n                mixpanel.identify(user.email);\n                mixpanel.track('Customer - Update business details.');\n            }\n            if (quillRefforTech.current) {\n                const quillEditor = quillRefforTech.current?.getEditor();\n                const htmlContent = quillEditor?.root.innerHTML;\n                // Convert HTML to plain text\n                const parser = new DOMParser();\n                const parsedHtml = parser.parseFromString(htmlContent, 'text/html');\n                const plainText = parsedHtml.body.textContent || '';\n                 const removeSpaceOfText = plainText.trim(); \n                console.log(\"editor text length\",removeSpaceOfText.length)\n\n                // if (removeSpaceOfText == '') {\n                //     setHaveDescription(true);\n                // } else {\n                    if (removeSpaceOfText.length > 500) {\n                        setExceedsLimitForTech(true);\n                    } else {\n                        setExceedsLimitForTech(false);\n                        let customerUserId;\n                        if (user && user?.userType === 'customer') {\n                            if (user && user?.ownerId && user?.ownerId !== null) {\n                                customerUserId = user?.ownerId\n                            } else {\n                                customerUserId = user.id\n                            };\n\n                            setShowSpinnerForTech(true);\n\n                            await BusinessApi.updateBusinessDetails(user.business_details?.id, {\n                                businessInfoMessageForTech: aboutBusinesDetailsForTech\n                            }).then(res => {\n                                if (res) {\n                                    setTimeout(() => {\n                                        setShowEditorForTech(false)\n                                        setShowSpinnerForTech(false);\n                                        // socket.emit(\"update-business-info-message\",{\n                                        //     businessInfoMessage:aboutBusinesDetails\n                                        //  });\n                                        openNotificationWithIcon('success', 'Success', 'Business details submitted successfully.');\n                                    }, 800);\n                                }\n                            })\n                        };\n                    };\n                // };\n            }else{\n                console.log(\"My console in my else \")\n            };\n        } catch (e) {\n            console.log(\"Error occurs while technician submit his profile description.\", e)\n        };\n    };\n\n    let modules = {\n        toolbar: [\n            [{ size: [\"small\", false, \"large\", \"huge\"] }],\n            [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n            [{ list: \"ordered\" }, { list: \"bullet\" }],\n            [\"link\"],\n            [\n                { list: \"ordered\" },\n                { list: \"bullet\" },\n                { indent: \"-1\" },\n                { indent: \"+1\" },\n                { align: [] }\n            ],\n            [{ \"color\": [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\", 'custom-color'] }],\n        ]\n    };\n\n    let formats = [\n        \"header\", \"height\", \"bold\", \"italic\",\n        \"underline\", \"strike\", \"blockquote\",\n        \"list\", \"color\", \"bullet\", \"indent\",\n        \"link\", \"align\", \"size\",\n    ];\n\n    const changeBusinessDetails = (content, type, inputType) => {\n        let value = '';\n        if(inputType == \"text\"){\n            value = content.target.value\n        }\n        if(inputType == \"dropdown\"){\n            value = content\n        }\n        setBusinessDetails((prevBusinessDetails) => ({\n            ...prevBusinessDetails,\n            ...{ [type]: value },\n        }));\n    }\n\n    const handleBusinessDetailsChange = async (type, resetField) => {\n        const trimmedValue = businessDetails[type].trim();\n        if (trimmedValue !== '') {\n            const businessId = user?.business_details?.id\n            if (businessId) {\n                const dataToUpdate = {\n                    [type]: trimmedValue\n                }\n                await BusinessApi.updateBusinessDetails(businessId,dataToUpdate);\n                if(type == 'businessName'){\n                    updateUserInfo({\n                        \"userId\":user.id,\n                        \"businessName\" : trimmedValue,\n                        \"isBusinessTypeAccount\":true\n                      });  \n                }\n                openNotificationWithIcon(\"success\", \"Success\", \"Changes saved successfully.\");\n                setBusinessDetails((prevBusinessDetails) => ({\n                    ...prevBusinessDetails,\n                    ...{ [resetField]: !businessDetails[resetField] },\n                }));\n            }\n        } else {\n            openNotificationWithIcon(\"error\", \"Error\", \"Please enter your business name.\");\n        }\n\n    }\n\n    const editBusinessDetailField = (type) => {\n        setBusinessDetails((prevBusinessDetails) => ({\n            ...prevBusinessDetails,\n            ...{ [type]: !businessDetails[type] },\n        }));\n    }\n\n    return (\n        <>\n            <Container>\n                <BodyContainer>\n                    <Section>\n                        <ItemContainer className=\"editContainer\">\n                            <ItemTitle>Business Message - For Business Users</ItemTitle>\n                            <DescriptionText>\n                                <span className=\"font-italic\">\n                                    This message will be displayed to all your users with any instructions or information about how/when to use the Geeker platform.\n                                </span>\n                            </DescriptionText>\n                            <Row >\n                                {!showEditor ? <div className='text-left' dangerouslySetInnerHTML={{ __html: aboutBusinesDetails }}></div> :\n                                    <React.Fragment key=\"primarylg\" >\n                                        <Form>\n                                            <div className='w-100 my-2 text-left'>\n                                                <Row className='mb-3'>\n                                                    <Col className='w-100'>\n                                                        <ReactQuill\n                                                            ref={quillRef}\n                                                            theme=\"snow\"\n                                                            value={aboutBusinesDetails}\n                                                            modules={modules}\n                                                            formats={formats}\n                                                            placeholder=\"Business Message\"\n                                                            onChange={(text) => {\n                                                                setAboutBusinesDetails(text);\n                                                                validateContent(text);\n                                                                setHaveDescription(false);\n                                                            }}\n                                                            onPaste={handlePaste}\n                                                        />\n                                                    </Col>\n                                                </Row>\n                                                {exceedsLimit && (\n                                                    <div className=\"error-message\" style={{ color: \"red\" }}>\n                                                        <p>You can write less than or equal to 500 characters.</p>\n                                                    </div>\n                                                )}\n\n                                                <BasicButton disable={showSpinner || haveDescription} onClick={handleComplete} btnTitle={\"Save\"} height={\"60px\"} width={\"223px\"} background={\"#01D4D5\"} color={\"#FFFFFF\"} showSpinner={showSpinner} />\n                                            </div>\n                                        </Form>\n                                    </React.Fragment>\n                                }\n                                <div className=\"EditIcons\" >\n                                    <img onClick={()=>setShowEditor(!showEditor)} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                </div>\n                            </Row>\n                        </ItemContainer>\n                    </Section>\n                    <Section>\n                        <ItemContainer className=\"editContainer\">\n                            <ItemTitle>Business Message - For Technicians</ItemTitle>\n                            <DescriptionText>\n                                <span className=\"font-italic\">\n                                    Optional message for technicians with all basic information or rules regarding your company to review during/before call.\n                                </span>\n                            </DescriptionText>\n                            <Row >\n                                {!showEditorForTech ? <div className='text-left' dangerouslySetInnerHTML={{ __html: aboutBusinesDetailsForTech }}></div> :\n                                    <React.Fragment key=\"primarylg\" >\n                                        <Form>\n                                            <div className='w-100 my-2 text-left'>\n                                                <Row className='mb-3'>\n                                                    <Col className='w-100'>\n                                                        <ReactQuill\n                                                            ref={quillRefforTech}\n                                                            theme=\"snow\"\n                                                            value={aboutBusinesDetailsForTech}\n                                                            modules={modules}\n                                                            formats={formats}\n                                                            placeholder=\"Business Message\"\n                                                            onChange={(text) => {\n                                                                setAboutBusinesDetailsForTech(text);\n                                                                validateContentForTech(text);\n                                                                setHaveDescriptionForTech(false)\n                                                            }}\n                                                            onPaste={handlePasteForTech}\n                                                        />\n                                                    </Col>\n                                                </Row>\n                                                {exceedsLimitForTech && (\n                                                    <div className=\"error-message\" style={{ color: \"red\" }}>\n                                                        <p>You can write less than or equal to 500 characters.</p>\n                                                    </div>\n                                                )}\n\n                                                <BasicButton disable={showSpinnerForTech || haveDescriptionForTech} onClick={saveMessageForTech} btnTitle={\"Save\"} height={\"60px\"} width={\"223px\"} background={\"#01D4D5\"} color={\"#FFFFFF\"} showSpinner={showSpinnerForTech} />\n                                            </div>\n                                        </Form>\n                                    </React.Fragment>\n                                }\n                                <div className=\"EditIcons\" >\n                                    <img onClick={()=>setShowEditorForTech(!showEditorForTech)} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                </div>\n                            </Row>\n                        </ItemContainer>\n                    </Section>\n                   \n                            {/*<ItemContainer className=\"editContainer\">\n                                <ItemTitle>BUSINESS NAME</ItemTitle>\n                                <Row>\n                                    {!businessDetails.editBusinessNameFeild ? <H4>{businessDetails.businessName}</H4> :\n\n                                        <React.Fragment key=\"additional\">\n                                            <Input placeholder=\"Enter Business Name\" onChange={(e)=> {changeBusinessDetails(e,'businessName','text')}}  value={businessDetails.businessName} className=\"customer-edit-profile-input\" style={{ width: 200, margin: 0 }} />\n                                            <Button onClick={() =>{handleBusinessDetailsChange('businessName','editBusinessNameFeild')}} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                                                <FontAwesomeIcon icon={faCheck} /><span></span>\n                                            </Button>\n                                        </React.Fragment>}\n                                    <div className=\"EditIcons\" >\n                                        <img onClick={()=>{editBusinessDetailField('editBusinessNameFeild')}} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                    </div>\n                                </Row>\n                        </ItemContainer>*/}\n                         {isOwnerAccount && user.isBusinessTypeAccount &&\n                    <>\n                        <Section>\n                            <ItemContainer className=\"editContainer\">\n                                <ItemTitle>BUSINESS WEBSITE</ItemTitle>\n                                <Row>\n                                    {!businessDetails.editBusinessWebSiteField ? <H4>{businessDetails.businessWebsite}</H4> :\n\n                                        <React.Fragment key=\"additional\">\n                                            <Input placeholder=\"Enter Business Website\" value={businessDetails.businessWebsite}  onChange={(e)=> {changeBusinessDetails(e,'businessWebsite','text')}}   className=\"customer-edit-profile-input\" style={{ width: 200, margin: 0 }} />\n                                            <Button  onClick={() =>{handleBusinessDetailsChange('businessWebsite','editBusinessWebSiteField')}} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                                                <FontAwesomeIcon icon={faCheck} /><span></span>\n                                            </Button>\n                                        </React.Fragment>}\n                                    <div className=\"EditIcons\" >\n                                        <img onClick={()=>{editBusinessDetailField('editBusinessWebSiteField')}} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                    </div>\n                                </Row>\n                            </ItemContainer>\n                        </Section>\n                        <Section>\n                            <ItemContainer className=\"editContainer\">\n                                <ItemTitle>INDUSTRY</ItemTitle>\n                                <Row>\n                                    {!businessDetails.editIndustryField ? <H4>{businessDetails.industry}</H4> :\n                                        <React.Fragment key=\"primarylg\" >\n                                            <Select\n                                                optionFilterProp=\"children\"\n                                                style={{ width: 200, textAlign: 'left' }}\n                                                defaultValue={businessDetails.industry}\n                                                onChange={(value)=> {changeBusinessDetails(value,'industry', 'dropdown')}}\n                                                className=\"background-class\"\n                                            >\n                                                {INDUSTRY.map((item, index) => {\n                                                        return <Option disabled={item.disabled} key={index} value={item.value} >{item.value}</Option>\n                                                })}\n                                            </Select>\n\n                                            <Button onClick={() =>{handleBusinessDetailsChange('industry','editIndustryField')}}  className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                                                <FontAwesomeIcon icon={faCheck} /><span></span>\n                                            </Button>\n                                        </React.Fragment>\n                                    }\n                                    <div className=\"EditIcons\" >\n                                        <img onClick={()=>{editBusinessDetailField('editIndustryField')}} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                    </div>\n                                </Row>\n                            </ItemContainer>\n                            <ItemContainer className=\"editContainer\">\n                                <ItemTitle>TEAM</ItemTitle>\n                                <Row>\n                                {!businessDetails.editTeamSizeField ? <H4>{businessDetails.teamSize}</H4> :\n                                        <React.Fragment key=\"primarylg\" >\n                                            <Select\n                                                optionFilterProp=\"children\"\n                                                style={{ width: 200, textAlign: 'left' }}\n                                                defaultValue={businessDetails.teamSize}\n                                                onChange={(value)=> {changeBusinessDetails(value,'teamSize', 'dropdown')}}\n                                                className=\"background-class\"\n                                            >\n                                                {TEAM_SIZE.map((item, index) => {\n                                                        return <Option key={index} disabled={item.disabled} value={item.value} >{item.value}</Option>\n                                                })}\n                                            </Select>\n\n                                            <Button onClick={() =>{handleBusinessDetailsChange('teamSize','editTeamSizeField')}}  className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                                                <FontAwesomeIcon icon={faCheck} /><span></span>\n                                            </Button>\n                                        </React.Fragment>\n                                    }\n                                    <div className=\"EditIcons\" >\n                                        <img onClick={()=>{editBusinessDetailField('editTeamSizeField')}} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                                    </div>\n                                </Row>\n                            </ItemContainer>\n                        </Section>\n                    </>\n                        \n                        }\n\n\n                </BodyContainer>\n            </Container>\n        </>\n    )\n};\nconst Container = styled.div`\n  background: transparent;  \n\n  & .margin-class{\n    margin-top:10px;\n  }\n\n  & .background-class{\n      background-color:transparent;\n      border-bottom: solid 1px #999;\n  }\n\n  & .margin-class-left{\n    margin-left:15px;\n  }\n`;\nconst BodyContainer = styled.div`\n  background: transparent;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  // padding: 40px;\n  flex: 1;\n\n`;\nconst Section = styled(Row)`\n  width: 100%;\n`;\nexport default BusinessDetails",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\businessDetails.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "checkoutForm.js",
                                                                    "fileData": "// import {\n//     Elements,\n//     CardElement,\n//     useStripe,\n//     useElements,\n//     CardNumberElement,\n//     CardExpiryElement,\n//     injectStripe,\n//     StripeProvider,\n//     CardCvcElement\n// } from \"@stripe/react-stripe-js\";\nimport React, {useState,useEffect} from 'react';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as JobApi from '../../../../api/job.api';\nimport { isLiveUser } from '../../../../utils';\n// import mixpanel from 'mixpanel-browser';\nimport { Table, Modal} from 'antd';\nimport { Row, Col, Button} from 'react-bootstrap';\nimport { openNotificationWithIcon } from '../../../../utils'; \n\n// import PhoneInput from 'react-phone-input-2';\n// import styled from 'styled-components';\n// import { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCreditCard } from '@fortawesome/free-regular-svg-icons';\nimport AddCardForm from './addCardForm';\n// import { useJob } from '../../../context/jobContext';\n\nlet liveUser = true;\nconst CheckoutForm = ({user,value,onNext,onPrev,isModalOpen, setIsModalOpen, cardsInfo, setCardsInfo, newCardAdded,setNewCardAdded, showCards,setDisableButton}) => {\n    // const stripe = useStripe();\n    // const elements = useElements();\n    // const [firstName,setFirstName] = useState('')\n    // const [Address,setAddress] = useState('')\n    // const [editedPhoneNumber,setEditedPhoneNumber] = useState('')\n    // const [isDisabled,setIsDisabled] = useState(false)\n    // const [cardsInfo,setCardsInfo] = useState([])\n\n    // const [isModalVisible, setIsModalVisible] = useState(false);\n    // const liveUser = isLiveUser(user)\n    const [pendingJobCount,setPendingJobCount] = useState();\n    const [cardInfoUpdated, setCardInfoUpdated] = useState(cardsInfo);\n    const [cards_to_display,setCardsToDisplay] = useState([]);\n    const [isInprogressJobs,setIsInprogressJobs] = useState(false);\n    \n    // const [isModalOpen, setIsModalOpen] = useState(false);\n    useEffect(()=>{\n        setCardInfoUpdated(cardsInfo)\n    },[cardsInfo])\n    \n    useEffect(()=>{\n        const pendingJobs = async () =>{ \n            const pendingJobsFinal =  await JobApi.getPendingJobs({id:user.customer.id}) \n            setPendingJobCount(pendingJobsFinal)\n        }\n        \n        if(user && user.customer){\n            const inProgressJobs = async () =>{ \n                const pendingJobsFinal =  await JobApi.getInprogressJobs({id:user.customer.id}) \n                if(pendingJobsFinal > 0){\n                    // setIsInprogressJobs(true)\n                }\n            }   \n            inProgressJobs()\n        }\n\n        pendingJobs()\n    },[user])\n    \n    useEffect(()=>{\n        (async()=>{\n            if(user){\n                liveUser = await isLiveUser(user)\n            }\n        })()\n    },[user])\n\n      const showModal = () => {\n        // setIsModalVisible(true);\n      };\n\n      /*const handleOk = () => {\n        setIsModalVisible(false);\n      };*/\n\n      /*const handleCancel = () => {\n         setIsModalVisible(false);\n      };*/\n\n    const markCardAsDefault = (card_id) =>{        \n        Modal.confirm({\n          title: 'Are you sure you want to make this card as default?',\n          okText: 'Yes',\n          className:'app-confirm-modal',\n          cancelText: 'No',\n            async  onOk() {\n\n            await CustomerApi.updateDefaultCard({\n                liveUser:liveUser,\n                card_id: card_id,\n                customer_id: user.customer.stripe_id,\n            })\n\n            fetchMyCardsInfo()            \n\n          },\n        });\n    }\n    const removeCustomerCard = (card_id) =>{        \n        Modal.confirm({\n          title: 'Are you sure you want to remove this card?',\n          okText: 'Yes',\n          className:'app-confirm-modal',\n          cancelText: 'No',\n            async  onOk() {\n\n            await CustomerApi.removeCard({\n                liveUser:liveUser,\n                card_id: card_id,\n                customer_id: user.customer.stripe_id,\n            })\n\n            fetchMyCardsInfo()            \n\n          },\n        });\n    }\n\n    const columns = [\n        {\n            title: '',\n            dataIndex: 'last4',\n            render: (text, record) => (\n                <>  \n                   { record.default_card ?   \n                        <a href=\"#\"><FontAwesomeIcon icon={faCreditCard} className=\"mr-2\"/>{'Credit Card ************'+text}<span className=\"default_card_tag\">Default</span></a>\n                    : <><FontAwesomeIcon icon={faCreditCard} className=\"mr-2\"/>{'Credit Card ************'+text} </>\n                    }  \n                </>\n            ),\n        },        \n        {\n            title: '',\n            dataIndex: 'exp_year',\n            render: (text, record) => (\n                <>\n                     {/* record.default_card  \n                        ?  pendingJobCount === 0 && (<Button className=\"btn app-btn app-btn-light-blue app-btn-small\" onClick={(e)=> {removeCustomerCard(record.id)}} >Remove<span></span></Button>)\n                        :    \n                            <div> \n                                <Button className=\"btn app-btn app-btn-light-blue app-btn-small mr-md-3\" onClick={(e)=>{markCardAsDefault(record.id)}}>Mark as default<span></span></Button>  \n                                <Button className=\"btn app-btn app-btn-light-blue app-btn-small \" onClick={(e)=>{removeCustomerCard(record.id)}} >Remove<span></span></Button>\n\n                            </div> \n            */}    \n                {!record.default_card  &&    \n                    <div> \n                        <Button className=\"btn app-btn app-btn-light-blue app-btn-small mr-md-3\" onClick={(e)=>{ isInprogressJobs ? callNotification() : markCardAsDefault(record.id)}}>Mark as default<span></span></Button>  \n                        <Button className=\"btn app-btn app-btn-light-blue app-btn-small \" onClick={(e)=>{removeCustomerCard(record.id)}} >Remove<span></span></Button>\n\n                    </div> \n                }    \n                </>\n            ),\n           onHeaderCell: (column) => {\n              return {\n                onClick: () => {\n                  showModal()\n                }\n              };\n            }\n\n        },       \n      \n    ];\n    async function fetchMyCardsInfo() {\n        if(user && user.customer.stripe_id && user.customer.stripe_id !== ''){\n            const customer_info  = await CustomerApi.getStripeCustomerCardsInfo({\n                liveUser:liveUser,\n                stripe_id: user.customer.stripe_id,\n            })\n            if(customer_info && customer_info.data){\n                setCardsInfo(customer_info.data)\n                setCardInfoUpdated(()=>{\n                    return [...customer_info.data]\n                })\n            }\n        }\n    }\n    useEffect( ()=>{\n        fetchMyCardsInfo()\n    },[user])\n\n    /*useEffect(()=>{\n        console.log(\"newCardAdded changed\")\n        fetchMyCardsInfo()\n    },[newCardAdded])*/\n        \n\n    \n\n\n    /*const handleSubmit = async (event) => {\n        // Block native form submission.\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        }\n\n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        var data = {}\n        const cardElement = elements.getElement(CardNumberElement);\n        data['name'] = firstName\n        data['address_line1'] = Address\n        // data['metadata'] = {'phone_number':'675124'}\n\n        setIsDisabled(true)\n\n        if (isPossiblePhoneNumber(editedPhoneNumber) === false && isValidPhoneNumber(editedPhoneNumber) === false) {\n            setIsDisabled(false)\n            return (openNotificationWithIcon('error', 'Error', 'Phone number is not valid'));\n        }\n        // Use your card Element with other Stripe.js APIs\n        stripe.createToken(cardElement,data).then(\n            async (payload) => {\n                // console.log('payload>>>>>>>>>',payload);\n                if(payload['error'] != undefined){\n                    openNotificationWithIcon(\"error\",\"Error\",payload['error']['message'])\n                    setIsDisabled(false)\n                    return;\n                }else{                   \n                    let retrieve_cust = await CustomerApi.retrieveCustomer(user.customer.id);\n                    // console.log('retrieve_cust>>>>>>',retrieve_cust)\n                    if(retrieve_cust.stripe_id == undefined){\n                        const result_customer  = await CustomerApi.createCustomerStripe({\n                            email: user.email,\n                        })\n\n                        const result_card  = await CustomerApi.addCardToCustomerStripe({\n                            stripe_id: result_customer.id,\n                            token_id:payload.token.id,\n                            phone_number:editedPhoneNumber,\n                        })\n\n                        let temp_data = [...cardsInfo]\n                        temp_data.push(result_card)\n                        setCardsInfo(temp_data)\n\n                        var customer_id = result_customer.id\n                        CustomerApi.updateCustomer(user.customer.id,{\"stripe_id\":customer_id})\n\n                        // mixpanel code//\n                        mixpanel.identify(user.email);\n                        mixpanel.track('Customer - Card details added.');\n                        // mixpanel code//\n                        openNotificationWithIcon(\"success\",\"Success\",\"Card details has been saved.\")\n                        setIsDisabled(false)\n                    }\n                    else{\n\n                        const result_card  = await CustomerApi.addCardToCustomerStripe({\n                            stripe_id: retrieve_cust.stripe_id,\n                            token_id:payload.token.id,\n                            phone_number:editedPhoneNumber,\n                        })\n\n                        let temp_data = [...cardsInfo]\n                        temp_data.push(result_card)\n                        setCardsInfo(temp_data)\n\n                        openNotificationWithIcon(\"success\",\"Success\",\"Card added successfully\")\n                        setIsDisabled(false)\n\n                    }\n                }\n                \n            }          \n        );    \n    };\n\n    const changeNameOnCard = (e) =>{\n        setFirstName(e.target.value)\n    }\n\n    const changeAddress = (e) =>{\n        setAddress(e.target.value)\n    }\n\n    const HandlePhoneNumber = (e)=>{\n        setEditedPhoneNumber(`+${e}`);\n    }*/\n\n    const callNotification = () =>{\n      return  openNotificationWithIcon('error', 'Error', 'Please complete your pending meeting.');\n    }\n    \n    useEffect(()=>{\n        const seen = new Set();\n        if(cardInfoUpdated.length > 0){\n            const cards_data = cardInfoUpdated.filter(el => {\n            const duplicate = seen.has(el.fingerprint);\n            seen.add(el.fingerprint);\n            return !duplicate;\n            });\n        setCardsToDisplay(cards_data)\n        }\n    },[cardInfoUpdated])\n\n    return (\n        <Row>\n            \n            <AddCardForm user={user} cardsInfo={cardInfoUpdated} setCardsInfo={setCardInfoUpdated} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} setNewCardAdded={setNewCardAdded} setDisableButton={setDisableButton}/>            \n            {showCards &&\n                <Col md=\"12\" className=\"payment-methods-outer p-0 pb-4\">\n                    <Row>\n                        <Col md=\"8\" className=\"text-left pl-5 py-3\">\n                            <h6>Payment Methods</h6>\n                        </Col>\n                        <Col md=\"4\" className=\"text-right pr-md--5 py-3\">\n                            <Button \n                                className=\"btn app-btn app-btn-small app-btn-light-blue-remove\"\n                                onClick={()=>isInprogressJobs ? callNotification() : setIsModalOpen(true)}\n                            >\n                                Add Method<span></span>\n                            </Button>\n                        </Col>\n\n                        <Col md=\"12\" className=\"px-4 px-md-5\">\n                            {cardInfoUpdated.length > 0 \n                            ?       \n                            <>\n                            <Table dataSource={cards_to_display} columns={columns} rowKey=\"id\" className=\"myCardTable\" pagination={true} />\n                            </>\n                            :\n                                <table className=\"table empty-table\">\n                                    <tbody>\n                                    <tr>\n                                        <td colSpan=\"2\" className=\"text-center\">No cards available. Please click on Add Method button to add card.</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            }\n                        </Col>\n                    </Row>\n                </Col>\n            }\n        </Row>\n    );\n};\n\nexport default CheckoutForm;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\checkoutForm.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "customerCard.js",
                                                                    "fileData": "import React, {useState,useEffect} from 'react';\nimport styled from 'styled-components';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport {getStripeObject,isLiveUser} from '../../../../utils/'\nimport {Elements} from '@stripe/react-stripe-js';\n// import {loadStripe} from '@stripe/stripe-js';\nimport MyCheckoutForm from './checkoutForm';\n// import { STRIPE_KEY,STRIPE_TEST_KEY } from '../../../../constants';\nlet stripePromise = '';\nlet liveUser = true;\nconst  CustomerCard =  ({user,value,onNext,onPrev,isModalOpen,setIsModalOpen, newCardAdded, setNewCardAdded, showCards,setDisableButton}) => {\n  // const formRef = useRef();\n  const customer = (user ? user.customer : {})\n  // const history = useHistory()\n  const [cardsInfo,setCardsInfo] = useState([])\n  useEffect(()=>{\n      if(user){\n        fetchMyCardsInfo()\n\n      }\n    },[user])\n\n  useEffect(() => {\n    (async () => {\n      if(user){\n        liveUser = await isLiveUser(user)\n        stripePromise = await getStripeObject(user)\n      }\n    })();        \n  }, [user])\n\n  async function fetchMyCardsInfo() {\n     if(user && user.customer && user.customer.stripe_id !== \"\"){\n          const customer_info  = await CustomerApi.getStripeCustomerCardsInfo({\n              liveUser:liveUser,\n              stripe_id: user.customer.stripe_id,\n          })\n          setCardsInfo(customer_info.data)\n          console.log('customer_info.data :::',customer_info.data)\n      }\n\n  }\n  return (\n    <div>\n        <SectionEmail>                  \n          { stripePromise !== '' &&  \n            <Elements stripe={stripePromise}>\n                <MyCheckoutForm user={user} values={customer} onNext={onNext} onPrev={onPrev} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen}  cardsInfo={cardsInfo} setCardsInfo={setCardsInfo} newCardAdded={newCardAdded} setNewCardAdded={setNewCardAdded} fetchMyCardsInfo={fetchMyCardsInfo} showCards={showCards} setDisableButton={setDisableButton}/>\n            </Elements>\n            }\n        </SectionEmail>\n\n       \n    </div>\n  );\n};\n\n/*const flexedDiv = styled.div`\n  display:flex;\n  justify-content:flex-around;\n\n`*/\n\nconst SectionEmail = styled.section`\n  width:100%\n  margin: auto;\n\n  & .ant-col-12{\n    display:inline-block;\n    width: 40%;\n    margin-left: 15px;\n    padding:30px;\n    margin-top:20px;\n  }\n\n  & .ant-col-20{\n    padding-left: 20px;\n  }\n`;\n\nCustomerCard.propTypes = {};\n\nexport default CustomerCard;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\customerCard.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "editCustomer.js",
                                                                    "fileData": "import React, {useState,useRef,useEffect} from 'react';\nimport styled from 'styled-components';\n// import GoogleLogin from 'react-google-login';\n// import FacebookLogin from 'react-facebook-login';\n// import { FaFacebook } from 'react-icons/fa';\nimport { Col } from 'antd';\nimport PhoneInput from 'react-phone-input-2';\nimport { Form } from 'antd';\n// import { FB_APP_ID, GOOGLE_CLIENT_ID } from 'constants/social';\n// import Header from 'components/Header/UnAuthHeader';\nimport FormItem from 'components/FormItem';\n// import InputPassword from 'components/AuthLayout/InputPassword';\nimport Input from 'components/AuthLayout/Input';\n// import Link from 'components/AuthLayout/Link';\nimport { useAuth } from 'context/authContext';\n// import { useHistory } from 'react-router-dom';\nimport * as CustomerService from '../../../../api/customers.api';\nimport {Button} from 'react-bootstrap';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport { Select } from 'antd'; \nimport {languages} from   '../../../../constants';\nimport mixpanel from 'mixpanel-browser';\n\nconst { Option } = Select;\n\n// const {p} = Typography;\n\n\nconst  EditCustomer =  ({user,value,onNext,onPrev}) => {\n  const formRef = useRef();\n  const customer = user.customer\n  // const history = useHistory()\n  useEffect(()=>{\n    formRef.current.setFieldsValue({\n      firstName : user.firstName,\n      lastName : user.lastName\n    })\n    setLanguage(customer.language)\n    setPhoneNumber(customer.phoneNumber)\n\n  },[])\n\n\n  const { updateUserInfo } = useAuth();\n  const [phoneNumber, setPhoneNumber] = useState('');\n  // const [extension, setExtension] = useState('');\n  const [language,setLanguage] = useState('')\n  \n\n  const HandlePhoneNumber = (e) => {\n    setPhoneNumber(`+${e}`);\n  };\n\n  /*const handleExtension = e => {\n    setExtension(e.target.value);\n  };*/\n\n  const onSignUp = async (values) => {  \n    if(phoneNumber && language !== ''){\n      updateUserInfo({\"userId\":user.id,\"firstName\":values.firstName,\"lastName\":values.lastName})\n      CustomerService.updateCustomer(customer.id,{phoneNumber:phoneNumber,language:language})\n\n      // mixpanel code//\n      mixpanel.identify(user.email);\n      mixpanel.track('Customer - User profile updated');\n      // mixpanel code//\n      openNotificationWithIcon(\"success\",\"Success\",\"Details Successfully changed\")\n      setTimeout(()=>{window.location.reload()},1000)\n\n    }\n  \n  };\n\n  return (\n    <div>\n        <SectionEmail>     \n          {/*<Col span={24}>\n            <Col span={12}>  \n              <Title className=\"subtitle\">Edit Account</Title>         \n            </Col>\n          </Col>*/     }\n          <Form  onFinish={onSignUp} layout=\"vertical\" ref={formRef}>\n          <Col span={24}>              \n              <RegForm\n                      name=\"firstName\"\n\n                      label=\"FIRST NAME\"\n                      rules={[\n                        {\n                          required: true,\n                          message: 'Please input your First Name!',\n                        },\n                        () => ({\n                          validator(_, value) {\n                            const re = /^[a-zA-Z ]*$/;\n                            if (!re.test(String(value))) {\n                              return Promise.reject(\n                                'No numbers or special characters are allowed',\n                              );\n                            }\n                            if (value && value.length > 30) {\n                              return Promise.reject('Maximum length is 30 characters');\n                            }\n                            return Promise.resolve();\n                          },\n                        }),\n                      ]}\n                    >\n       \n                  <RegInput\n                      name=\"firstName\"\n                      size=\"large\"\n                      \n                      placeholder={user.firstName}\n                  />\n                   \n                </RegForm>\n                <RegForm\n                    name=\"lastName\"\n                    label=\"LAST NAME\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your Last Name!',\n                      },\n                      () => ({\n                        validator(_, value) {\n                          const re = /^[a-zA-Z ]*$/;\n                          if (!re.test(String(value))) {\n                            return Promise.reject(\n                              'No numbers or special characters are allowed',\n                            );\n                          }\n                          if (value && value.length > 30) {\n                            return Promise.reject('Maximum length is 30 characters');\n                          }\n                          return Promise.resolve();\n                        },\n                      }),\n                    ]}\n                  >\n                    <RegInput  name=\"lastName\" size=\"large\" placeholder=\"Last Name\" />\n                  </RegForm>\n            </Col>\n             <Col span={24}>\n                <FormItem\n\n                  name=\"phonenumber\"\n                  label=\"PHONE NUMBER\" >\n                  <InputWithLabel>\n                    <PhoneInput value={customer.phoneNumber} countryCodeEditable={false} onChange={HandlePhoneNumber} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} />\n                  </InputWithLabel>\n                </FormItem>\n            </Col>  \n\n            <Col span={24}>\n\n            <FormItem\n\n                  name=\"language\"\n                  label=\"Language\" >\n                  <LanguageSelect\n                    showSearch\n                     optionFilterProp=\"children\"\n                     defaultValue={customer.language}\n                    filterOption={(input, option) =>\n                    \n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                    onChange = {(value,option)=>{\n                      setLanguage(option.children)\n                    }}\n\n\n\n                  >\n                  {languages.map((item,index)=>{\n                    if(index === 2){\n                      return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                    }\n                    else{\n                      return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                    }\n                    // return ({ index ==2 ? <Option key={`lang_${index}`} value={index} selected>{item[0]}</Option>:<Option key={`lang_${index}`} value={index}>{item[0]}</Option>})\n                  })}\n                  </LanguageSelect>  \n                </FormItem>\n\n               \n\n\n            </Col>\n\n            <Col span={20}>\n                <Button\n                  type=\"primary\"\n                  size=\"large\"\n                  className=\"app-btn\"\n                  >\n                  <span></span>\n                Update \n                </Button>\n            </Col>\n            \n          </Form>\n        </SectionEmail>\n       {/* <SectionEmail>\n        <div>\n          <Row>\n           <Col span={24}>         \n              <Link to='/' className=\"signin-btn-link\">   \n                  Already have an account? Sign In.\n              </Link>\n          </Col>\n           </Row>\n        </div>\n        </SectionEmail>*/}\n       \n    </div>\n  );\n};\n\n\nconst SectionEmail = styled.section`\n  width:100%\n  margin: auto;\n\n  & .ant-col-12{\n    display:inline-block;\n    width: 40%;\n    margin-left: 15px;\n    padding:30px;\n    margin-top:20px;\n  }\n\n  & .ant-col-20{\n    padding-left: 20px;\n  }\n`;\n\n\n\nconst RegForm = styled(FormItem)`\n  &.ant-form-item-has-error {\n    margin-bottom: 6px;\n  }\n\n`;\n\nconst RegInput = styled(Input)`\n  border : 0px none !important;\n  border-radius:0px none !important;\n  border-bottom : 1px solid black  !important;\n  padding: 15px 20px;\n  width:30%;\n   background:transparent !important;\n  border-radius: initial;\n  font-family: 'Open-Sans', sans-serif;\n`;\n\nconst LanguageSelect = styled(Select)`\n\n  border:0px none;\n  color:black;\n  border-bottom : 1px solid black !important;\n\n`\n\n\nexport const InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  &:last-child {\n    marginRight: 0;\n  }\n  & input{\n    height:50px;\n    padding:10px;\n    padding: 15px 20px;\n    width:30%;\n    border-radius: 10px;\n    margin-top: 15px;\n    border : 0px none !important;\n    border-radius:0px none !important;\n    border-bottom : 1px solid black !important;\n     padding: 15px 20px;\n      width:30%;\n    background:transparent !important;\n    margin-top:15px;\n    margin-left:20px;\n  }\n  & .react-tel-input .form-control {\n    height:50px;  \n    border : 0px none !important;\n    border-radius:0px none !important;\n    width:100%;\n    border-bottom : 1px solid black !important;\n\n\n\n }\n  & .react-tel-input .flag-dropdown {\n    background:transparent;\n    border : 0px none !important;\n    border-radius: 0px none !important;\n    border-bottom : 1px solid black !important;\n  }\n\n\n \n`;\n\nEditCustomer.propTypes = {};\n\nexport default EditCustomer;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\editCustomer.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "profilereview.js",
                                                                    "fileData": "import React, { memo ,useEffect,useState} from 'react';\nimport { Row, Input,Select, Modal, Checkbox} from 'antd';\nimport styled from 'styled-components';\nimport {\n  // PageTitle,\n  // DescriptionText,\n  ItemContainer,\n  ItemTitle,\n  // StepActionContainer,\n} from './style';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faCheck} from '@fortawesome/free-solid-svg-icons';\n// import TechImages from '../../../../components/TechImages';\n// import StepButton from '../../../../components/StepButton';\nimport H4 from '../../../../components/common/H4';\n// import { getFullName } from '../../../../utils';\nimport * as CustomerService from '../../../../api/customers.api';\nimport editIcon from '../../../../assets/images/edit.png';\nimport PhoneInput from 'react-phone-input-2';\nimport {Button} from 'react-bootstrap';\n// import { useHistory } from 'react-router-dom';\nimport {languages} from   '../../../../constants';\nimport { useAuth } from 'context/authContext';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport * as JobApi from 'api/job.api';\n// const { Text } = Typography;\nimport {deleteUserByParam} from 'api/users.api';\n\n// import { Window } from '@mui/icons-material';\n\n\n/*const ratingScale = [\n  'Beginner',\n  'Basic knowledge but never used professionally',\n  'Pretty fluent & limited use professionally',\n  'Very fluent and a lot of use professionally',\n  'Complete mastery with extensive professional use',\n];\n\nconst engilshLevels = [\n  'Beginner',\n  'Intermediate',\n  'Advanced',\n  'Fluent',\n  'Native',\n];\n\nconst averageLevel = experience => {\n  let sum = 0;\n\n  // for (const expertise of experience.expertises) {\n  //   sum += expertise.rate;\n  // }\n\n  // return Math.round(sum / experience.expertises.length);\n};*/\n\nfunction ProfileReview({user,onNext,setCustomer}) {\n  // const history = useHistory()\n  const [showInput,setShowInput] = useState(false)\n  const {email,customer:{id:customerId,phoneNumber}} = user ;\n  const [editedPhoneNumber,setEditedPhoneNumber] = useState(phoneNumber)\n  const [showNameInput,setShowNameInput] = useState(false)\n  const { updateUserInfo,updateUserBusinessDetailsInfo } = useAuth();\n  const [firstName,setFirstName] = useState(user.firstName)\n  const [lastName,setLastName] = useState(user.lastName)\n  const { Option } = Select;\n  const [language,setLanguage] = useState(user.customer.language)\n  const [additionalLanguage,setAdditionalLanguage] = useState(user.customer.additionalLanguage)\n  const [showlangInput,setShowlangInput] = useState(false)\n  const [showAddlangInput,setShowAddlangInput] = useState(false)\n  // const [showExtensionInput,setShowExtensionInput] = useState(false)\n  // const [editedExtension,setEditedExtension] = useState(user.customer.extension)\n  const [dialCode, setDialCode] =useState(\"\")\n  const [showBusinessNameInput , setShowBusinessNameInput] = useState(false)\n  const [showChangeToBusinessAccount , setShowChangeToBusinessAccount] = useState(false)\n  const [businessName, setBusinessName] = useState('')\n  const [businessNameWhileConvertion, setBusinessNameWhileConvertion] = useState('')\n  const [isOwnerAccount , setIsOwnerAccount] = useState(false)\n  const { logout } = useAuth();\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n  const [disableDeleteButton, setDisableDeleteButton] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [checkBoxValue, setCheckBoxValue] = useState(false)\n  const [isBusinessAccount, setIsBusinessAccount] = useState(user.isBusinessTypeAccount)\n  const { refetch } = useAuth();\n\n  const handleCheckboxChange = (e) => {\n    setCheckBoxValue(e.target.checked)\n};\n\n  useEffect(()=>{\n    \n    setEditedPhoneNumber(user.customer.phoneNumber)\n    // Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n    // if(user.customer.extension){ \n    //   console.log(\"user.id ::::: \",user.id)\n    //   console.log(\"user.customer.extension :::::: ::\",user.customer.extension)\n    //   setEditedExtension(user.customer.extension)\n    // }\n\n    // This will decide to show Business Name Edit Field Or not\n    const userRolesArray = user?.roles\n    const isOwner = userRolesArray.includes(\"owner\");\n    if(userRolesArray && isOwner){\n      setIsOwnerAccount(true)\n      setIsBusinessAccount(user.isBusinessTypeAccount)\n    }\n    const userDetail = user?.businessName ? user?.businessName  : 'NA'\n    setBusinessName(userDetail)\n  },[user])\n\n  useEffect(() => {\n      (async () => {\n      let pendingJobs;\n      try {\n        if (user && user.customer ) {\n          setLoading(true);\n          pendingJobs =  await JobApi.latestJobForCustomer({ \"customer\": user.customer.id })\n\n          console.log(\"checking pending jobs\", pendingJobs[0]?.status, pendingJobs)\n          if (pendingJobs.length > 0) {\n            const hasInProgressJob = pendingJobs.some(job => {\n              return (\n                job?.status === \"Inprogress\" ||\n                job?.status === \"long-job\" ||\n                job?.status === \"Accepted\" ||\n                job?.status === \"Pending\" ||\n                job?.status === \"Scheduled\" ||\n                job?.status === \"Waiting\" ||\n                job?.schedule_accepted\n              );\n            });\n            setDisableDeleteButton(hasInProgressJob);\n        }else{\n          //Check if there is a change in the job status before updating the state\n          setDisableDeleteButton(false)\n        }\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n     })();\n  }, [user])\n\n  const HandlePhoneNumber = (e, data)=>{\n\n    setEditedPhoneNumber(`+${e}`);\n    setDialCode(data.dialCode)\n\n  }\n// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n  // const handleExtensionChange = (e)=>{\n  //     console.log(\"editedExtension ::::: \",editedExtension)\n  //     CustomerService.updateCustomer(customerId,{\"extension\":editedExtension})\n  //     openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\")\n  //     setShowExtensionInput(false)   \n  // }\n  const inputHandler = ()=>{\n    setEditedPhoneNumber(user.customer.phoneNumber)\n    onNext()\n    setCustomer(user.customer)\n    setShowInput(!showInput)\n  }\n  const handleNumberChange = ()=>{\n    if(editedPhoneNumber ===  \"\" || editedPhoneNumber.length === (dialCode.length+1)){\n      return openNotificationWithIcon('error', 'Error', \"Phone Number is required\" )\n    }else if(editedPhoneNumber.length < (11 + dialCode.length)){\n      return openNotificationWithIcon('error', 'Error', \"Phone Number is invalid\" )                \n    }\n    CustomerService.updateCustomer(customerId,{\"phoneNumber\":editedPhoneNumber})\n    openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\")   \n    setShowInput(false)\n  }\n  const handleLangChange = ()=>{\n    CustomerService.updateCustomer(customerId,{\"language\":language})\n    openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\")   \n    setShowlangInput(false)\n  }\n\n\n  const handleAddLangChange = ()=>{\n    CustomerService.updateCustomer(customerId,{\"additionalLanguage\":additionalLanguage})\n    openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\")   \n    setShowAddlangInput(false)\n  }\n\n  // const extensionEditHandler = async()=>{\n  //   console.log(\"editedExtension :::::: \",editedExtension)\n  //   await CustomerService.updateCustomer(customerId,{\"extension\":editedExtension})\n  //    setShowExtensionInput(!showExtensionInput);\n  //   }\n\n  const handleNameChange = () => {\n\t\t\tlet valid =\t/^[a-zA-Z ]*$/;\n\t\n\t\t\t if(!valid.test(String(firstName))){\n\t\t\t\t\treturn openNotificationWithIcon(\"error\",\"Error\", \"No numbers & special characters are allowed.\");\n\t\t\t\t}\n\t\t\t\tif(!valid.test(String(lastName))){\n\t\t\t\t\treturn openNotificationWithIcon(\"error\",\"Error\", \"No numbers & special characters are allowed.\");\n\t\t\t\t}\n        const trimmedValue1 = firstName.trim()\n\t\t\tif(trimmedValue1.split(\" \").length > 1){\n\t\t\t\treturn openNotificationWithIcon(\"error\", \"Error\", \"No empty space allowed in First Name.\")\n\t\t\t}\n\t\t\tconst trimmedValue2 = lastName.trim()\n\t\t\tif(trimmedValue2.split(\" \").length > 1){\n\t\t\t\treturn openNotificationWithIcon(\"error\", \"Error\", \"No empty space allowed in Last Name.\")\n\t\t\t}\t\n\t\t\t if(trimmedValue1 !== '' && trimmedValue2 !== ''){\n\t\t\t   updateUserInfo({\n\t\t\t     \"userId\":user.id,\n\t\t\t     \"firstName\":firstName.replace(/\\s/g, ''),\n\t\t\t     \"lastName\":lastName.replace(/\\s/g, '')\n\t\t\t   });  \n\t\t\t   openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\");   \n\t\t\t   setShowNameInput(false);  \n\t\t\t}else{\n\t\t\t   openNotificationWithIcon(\"error\",\"Error\",\"One of the names seems to be empty.\");  \n\t\t\t}     \n\t\t  };\n\t\t  \n\n  const handleBusinessNameChangeWhileConvertion = async () => {\n    const businesNameTrimmed = businessNameWhileConvertion.trim()\n    if(businesNameTrimmed !== \"\"){\n      const updatedUser = await updateUserInfo({\n        userId:user.id,\n        businessName : businesNameTrimmed,\n        isBusinessTypeAccount:true\n      });  \n      openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\");\n      if(updatedUser && updatedUser.business_details === ''){\n        await updateUserBusinessDetailsInfo({\n          userId:user.id,\n          businessName : businesNameTrimmed,\n          isBusinessTypeAccount:true\n        })\n      }\n      if(updatedUser){\n        setIsBusinessAccount(user.isBusinessTypeAccount)\n      }\n      refetch()\n    }else{\n      openNotificationWithIcon(\"error\",\"Error\",\"Please enter your business name.\");  \n    }\n  }\n  const handleBusinessNameChange = () => {\n\n    const trimmedValue = businessName.trim()\n     if(trimmedValue !== ''){\n       updateUserInfo({\n         \"userId\":user.id,\n         \"businessName\" : trimmedValue,\n         \"isBusinessTypeAccount\":true\n       });  \n       openNotificationWithIcon(\"success\",\"Success\",\"Changes saved successfully.\");   \n       setShowBusinessNameInput(false);  \n    }else{\n       openNotificationWithIcon(\"error\",\"Error\",\"Please enter your business name.\");  \n    }     \n    };\n    \n\n\n  const editNameInputHandler = ()=>{\n      if(showNameInput){\n        setFirstName(user.firstName)\n       setLastName(user.lastName)\n        onNext()\n       setCustomer(user.customer)\n        setShowNameInput(false)\n      }else{\n        setShowNameInput(true)\n      }      \n  }\n\n  const editBusinessNameHandler =()=>{\n    if(showBusinessNameInput){\n      const businessName = user?.businessName ? user?.businessName : 'NA'\n       setBusinessName(businessName)\n       onNext()\n       setCustomer(user.customer)\n       setShowBusinessNameInput(false);\n    }else{\n      setShowBusinessNameInput(true);\n\n    }\n  }\n\n   const editLangInputHandler = ()=>{\n      if(showlangInput){\n        setLanguage(user.customer.language) \n         onNext()\n       setCustomer(user.customer)\n        setShowlangInput(false)\n      }else{\n        setShowlangInput(true)\n      }  \n  }\n\n  const editAddLangInputHandler = ()=>{\n      if(showAddlangInput){\n        setAdditionalLanguage(user.customer.additionalLanguage)\n         onNext()\n        setCustomer(user.customer)\n        setShowAddlangInput(false)\n      }else{\n        setShowAddlangInput(true)\n      }      \n  }\n\n\n  \n\n  const changeFirstname = (e) =>{\n    setFirstName(e.target.value)\n  }\n\n  const changeBusinessName =(e)=>{\n    setBusinessName(e.target.value)\n  }\n\n  const changeBusinessNameWhileConvertion =(e)=>{\n    setBusinessNameWhileConvertion(e.target.value)\n  }\n\n\n  const changeLastname = (e)=>{\n    setLastName(e.target.value)\n  }\n\n  const preventMinusAndPlus = (e) => {\n\t\tif (e.nativeEvent.code === 'Minus' || e.nativeEvent.code === 'Equal' || e.nativeEvent.code === 'NumpadSubtract' || e.nativeEvent.code === 'NumpadAdd') {\n\t\t\te.preventDefault();\n\t\t}\n  };\n  const openConfirmationModal = async() => {\n    const pendingJobs = await JobApi.latestJobForCustomer({ \"customer\": user.customer.id })\n      if (pendingJobs.length > 0) {\n        const hasInProgressJob = pendingJobs.some(job => {\n          return (\n            job?.status === \"Inprogress\" ||\n            job?.status === \"long-job\" ||\n            job?.status === \"Accepted\" ||\n            job?.status === \"Pending\" ||\n            job?.status === \"Scheduled\" ||\n            job?.status === \"Waiting\" ||\n            job?.schedule_accepted\n          );\n        });\n        setDisableDeleteButton(hasInProgressJob);\n        if(hasInProgressJob) {\n          setShowConfirmationModal(false);\n        }else{\n          setShowConfirmationModal(true);\n        }\n\n    }else{\n      //Check if there is a change in the job status before updating the state\n      setDisableDeleteButton(false) \n      setShowConfirmationModal(true);\n\n    }\n    \n  };\n\n  const closeConfirmationModal = () => {\n    setShowConfirmationModal(false);\n  };\n\n  const deleteUser = async () => {\n    try {\n      console.log(\"user info: \",JSON.stringify(user));\n      \n      const userInfo = {\n        _id:user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.customer.phoneNumber,\n        customerId: user.customer.id,\n        createdAt: user.customer.createdAt,\n        customerType: user.customer.customerType\n\n      };\n      if (user?.customer && user?.customer?.stripe_id) {\n        userInfo.stripe_id = user.customer.stripe_id;\n      }\n      const response = await deleteUserByParam(userInfo);\n      console.log('User deleted successfully',response);\n      if (response.success) {\n        console.log('inside user info if ');\n        logout();\n      }\n      setShowConfirmationModal(false);\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  };\n\n  const editChangeToBusinessAccount = () => {\n    setShowChangeToBusinessAccount(!showChangeToBusinessAccount)\n  }\n\n  return (\n    <>\n    <Container>\n      {/*<DescriptionText>First, review your profile</DescriptionText>*/}\n      <BodyContainer>\n        <Section>\n          <ItemContainer className= \"editContainer\">\n            <ItemTitle>NAME</ItemTitle>\n            <Row>\n             {!showNameInput ? <H4>{firstName} {lastName}</H4> :  \n              \n              <React.Fragment key=\"cusprofile\">\n                <label className=\"font-weight-bold\">First Name</label>              \n                <Input placeholder=\"Enter First Name\" onChange={changeFirstname}  value={firstName} className=\"customer-edit-profile-input\"/>\n                <label className=\"font-weight-bold\">Last Name</label>        \n                <Input placeholder=\"Enter Last Name\" onChange={changeLastname}  value={lastName} className=\"customer-edit-profile-input\" />\n                <Button onClick={handleNameChange} className=\"app-btn small-btn btn mt-3 customer-edit-profile-btn\">\n                  <FontAwesomeIcon  icon={faCheck}/><span></span>\n                </Button>              \n            </React.Fragment>}\n            </Row>\n            <div className=\"EditIcons\" >\n                <img onClick={editNameInputHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n          </ItemContainer>\n          <ItemContainer className= \"editContainer\">\n            <ItemTitle>EMAIL</ItemTitle>\n            <Row>\n              <H4>{email}</H4>\n            </Row>\n          </ItemContainer>\n        </Section>\n        <Section>\n         <ItemContainer className= \"editContainer\">\n            <ItemTitle>Primary Language</ItemTitle>\n            <Row >\n            {!showlangInput ? <H4>{language}</H4> :  \n               <React.Fragment key=\"primarylg\" >\n                  <Select\n                    showSearch\n                    optionFilterProp=\"children\"\n                    style={{ width: 200, textAlign: 'left' }}\n                    defaultValue={language}\n                    filterOption={(input, option) =>\n\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                    onChange={(value, option) => {\n                      setLanguage(option.children)\n                    }}\n                    className=\"background-class\"\n                  >\n                    {languages.map((item, index) => {\n                      if (index === 2) {\n                        return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                      }\n                      else {\n                        return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                      }\n                    })}\n                  </Select>\n\n                  <Button onClick={handleLangChange} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                    <FontAwesomeIcon  icon={faCheck}/><span></span>\n                  </Button>            \n                </React.Fragment>\n              }\n              <div className=\"EditIcons\" >\n                <img onClick={editLangInputHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n          </ItemContainer>\n        </Section>\n\n                <Section>\n         <ItemContainer className= \"editContainer\">\n            <ItemTitle>Additional Languages</ItemTitle>\n            <Row >\n            {!showAddlangInput ? <H4>{additionalLanguage}</H4> :  \n               <React.Fragment key=\"additional\">\n              <Select\n                    showSearch\n                    optionFilterProp=\"children\"\n                    style={{ width: 200, textAlign:'left' }}\n                    defaultValue={additionalLanguage}\n                    filterOption={(input, option) =>\n                    \n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                    onChange = {(value,option)=>{\n                      setAdditionalLanguage(option.children)\n                    }}\n                    className=\"background-class\"\n                  >\n                    {languages.map((item,index)=>{\n                      if(index === 2){\n                        return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                      }\n                      else{\n                        return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                      }                    \n                    })}\n                  </Select>\n\n                  <Button onClick={handleAddLangChange} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                    <FontAwesomeIcon  icon={faCheck}/><span></span>\n                  </Button>            \n                  </React.Fragment>\n              }\n              <div className=\"EditIcons\" >\n                <img onClick={editAddLangInputHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n          </ItemContainer>\n        </Section>\n\n\n        <Section className=\"phone-edit-outer\">\n          <ItemContainer className= \"editContainer\">\n            <ItemTitle>Phone Number</ItemTitle>\n            <Row >\n\n             {!showInput ? <H4>{editedPhoneNumber}</H4> :  \n             <React.Fragment key=\"editPhone\">\n             <InputWithLabel>\n                    <PhoneInput value={editedPhoneNumber} countryCodeEditable={false} onChange={HandlePhoneNumber} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca','gb']} />                    \n              </InputWithLabel>\n              <Button onClick={handleNumberChange} className = \"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                <FontAwesomeIcon  icon={faCheck}/><span></span>\n              </Button>              \n\n              \n            </React.Fragment>}\n              <div className=\"EditIcons\" >\n                <img onClick={inputHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n          </ItemContainer>\n\n\n          {/* \n          Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n          <ItemContainer className= \"editContainer d-none\">\n            <ItemTitle>Extension</ItemTitle>\n            <Row >\n\n             {!showExtensionInput ? <H4>{editedExtension}</H4> :  \n             <React.Fragment key=\"editedExtension\">\n             <InputWithLabel>            \n                  <Input onChange={(e) => setEditedExtension(e.target.value)} type=\"number\" min={0} value={editedExtension} onKeyPress={preventMinusAndPlus} className=\"customer-edit-profile-input\"/>                    \n              </InputWithLabel>\n              <Button onClick={handleExtensionChange} className = \"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                <FontAwesomeIcon  icon={faCheck}/><span></span>\n              </Button>              \n\n              \n            </React.Fragment>}\n              <div className=\"EditIcons\" >\n                <img onClick={extensionEditHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n          </ItemContainer> */}\n          {user.roles && user.roles[0] && ((user?.roles[0] === \"user\") || (user?.roles[0] === \"owner\" && !user.isBusinessTypeAccount)) && (\n          <ItemContainer className=\"editContainer\">\n          <ItemTitle>Delete account </ItemTitle>\n            <Button onClick={openConfirmationModal} className={`app-btn small-btn btn ${disableDeleteButton ? 'delete-disabled' : 'red-button-delete'} mt-3`}\n            disabled={disableDeleteButton || loading}\n            >\n              Delete My Account\n            </Button>\n            {disableDeleteButton && (\n            <span className='customer-account-delete-button-text'>You need to complete your pending jobs to perform this action</span>\n            )}\n          </ItemContainer>\n          )}\n\t   {isOwnerAccount && user.isBusinessTypeAccount && (\n          <ItemContainer className=\"editContainer\">\n          <ItemTitle>Delete account </ItemTitle>\n            <Button className={`app-btn small-btn btn delete-disabled mt-3`}\n            disabled=\"true\">\n              Delete My Account\n            </Button>\n            <span className='customer-account-delete-button-text'>Please contact geeker support at shoshana@geeker.co to delete your account.</span>            \n          </ItemContainer>\n          )} \n\n        </Section>\n      {isOwnerAccount && user.isBusinessTypeAccount &&\n        <Section>\n        <ItemContainer className= \"editContainer\">\n            <ItemTitle>BUSINESS NAME</ItemTitle>\n            <Row>\n             {!showBusinessNameInput ? <H4>{businessName}</H4> :  \n              \n              <React.Fragment key=\"additional\">           \n                <Input placeholder=\"Enter Business Name\" onChange={changeBusinessName}  value={businessName} className=\"customer-edit-profile-input\"  style={{ width: 200 , margin : 0}}/>\n                <Button onClick={handleBusinessNameChange} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                  <FontAwesomeIcon  icon={faCheck}/><span></span>\n                </Button>              \n            </React.Fragment>}\n            <div className=\"EditIcons\" >\n                <img onClick={editBusinessNameHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n          </ItemContainer>\n          {/*<ItemContainer className= \"editContainer\">\n            <ItemTitle>BUSINESS WEBSITE</ItemTitle>\n            <Row>\n             {!businessDetails.businessWebsite !='' ? <H4>{businessDetails.businessWebsite}</H4> :  \n              \n              <React.Fragment key=\"additional\">           \n                <Input placeholder=\"Enter Business Name\" onChange={changeBusinessName}  value={businessName} className=\"customer-edit-profile-input\"  style={{ width: 200 , margin : 0}}/>\n                <Button onClick={handleBusinessNameChange} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                  <FontAwesomeIcon  icon={faCheck}/><span></span>\n                </Button>              \n            </React.Fragment>}\n            <div className=\"EditIcons\" >\n                <img onClick={editBusinessNameHandler} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n              </div>\n            </Row>\n      </ItemContainer>*/}\n        </Section> }\n\n      {/* Providing user an option to change to businss account */}\n          {isOwnerAccount && !isBusinessAccount &&\n            <Section>\n              <ItemContainer className=\"editContainer\">\n                <ItemTitle>Change to Business Account</ItemTitle>\n                <Row className=\"d-flex flex-column justify-content-start align-items-start\">\n                  {!showChangeToBusinessAccount ?\n                    <span className='change-account-text'>Click on edit icon to change your personal account to business account</span>\n                    :\n\n                    <React.Fragment key=\"additional\">\n\n                      <Checkbox className=\"personalUseCheckbox mb-2\" onChange={handleCheckboxChange}>\n                        <span>\n                          {/* I\u2019m using this account for business use  */}\n                          Convert my account to business account.\n                        </span>\n                      </Checkbox>\n\n                      {checkBoxValue && <> <div>\n                        <Input placeholder=\"Enter Business Name\" onChange={changeBusinessNameWhileConvertion} value={businessNameWhileConvertion} className=\"customer-edit-profile-input\" style={{ width: 200, margin: 0 }} />\n\n                        <Button onClick={handleBusinessNameChangeWhileConvertion} className=\"app-btn small-btn btn ml-3 customer-edit-profile-btn\">\n                          <FontAwesomeIcon icon={faCheck} /><span></span>\n                        </Button>\n                      </div>\n                        <span className=\"no-business-text color-red-imp\" >You can't undo once converted to business account</span>\n                      </>}\n\n                    </React.Fragment>}\n                  <div className=\"EditIcons\" >\n                    <img onClick={editChangeToBusinessAccount} src={editIcon} width=\"20px\" height=\"20px\" alt=\"Edit\" />\n                  </div>\n                </Row>\n              </ItemContainer>\n            </Section>}\n      </BodyContainer>\n    </Container>\n    <Modal\n        closable={false}\n        visible={showConfirmationModal}\n        onCancel={closeConfirmationModal}\n        maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n        maskClosable={true}\n        width={window.innerWidth > 768 ? 800 : '90%'}\n        bodyStyle={{ height: 'auto', paddingTop: '2rem', paddingBottom: '2rem' }}\n        footer={[\n          <Button key=\"cancel\" onClick={closeConfirmationModal} className=\"btn app-btn app-btn-light-blue modal-footer-btn\">\n            Cancel\n          </Button>,\n          <Button key=\"confirm\" type=\"primary\"  onClick={deleteUser} className=\"btn app-btn job-accept-btn modal-footer-btn red-button-delete\">\n            Confirm\n          </Button>,\n        ]}\n      >\n        <div className=\"delete-text-container\">\n          <span className=\"div-font-deleteText\">Are you sure you want to delete your account?</span>\n          <span className='div-font-deleteSub' style={{display: 'block' }} >This action is irreversible and will permanently delete all your account information, including your personal data, jobs, credit cards, and subscriptions history. Please note that you will no longer be able to access your account and its associated features.</span>\n          <span className=\"div-font-deleteTextLast\" style={{ display: 'block'}}>To proceed with the account deletion, please click on the Confirm button.</span>\n        </div>\n      </Modal>\n   </>\n  );\n  \n}\n\nconst Container = styled.div`\n  background: transparent;  \n\n  & .margin-class{\n    margin-top:10px;\n  }\n\n  & .background-class{\n      background-color:transparent;\n      border-bottom: solid 1px #999;\n  }\n\n  & .margin-class-left{\n    margin-left:15px;\n  }\n`;\n/*const LevelText = styled(Text)`\n  font-size: 15;\n  font-weight: bold;\n  text-align: left;\n`;\nconst OtherLangLevel = styled(Text)`\n  font-size: 15;\n  font-weight: bold;\n  text-align: left;\n  margin-bottom: 10px;\n  padding-left: 10px;\n`;\nconst LevelDescription = styled(Text)`\n  font-style: italic;\n  padding-top: 15px;\n`;*/\nconst BodyContainer = styled.div`\n  background: transparent;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  // padding: 40px;\n  flex: 1;\n\n`;\n/*const OtherLan = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst SoftwareRightSection = styled.div`\n  padding-left: 30px;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\nconst SoftwareImage = styled.img`\n  width: 50px;\n  height: 50px;\n`;*/\nconst Section = styled(Row)`\n  width: 100%;\n`;\n const InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  marginRight: 30px;\n  position: relative;\n  &:last-child {\n    marginRight: 0;\n  }\n  & input{\n    height:50px;\n    padding:10px;\n    border-radius: 10px;\n    margin-top: 15px;\n    border : 2px solid #F3F3F3;\n    margin-top:15px;\n    margin-left:20px;\n  }\n  & .react-tel-input .form-control {\n    height:50px;   \n  }\n`;\n\n\n\nexport default memo(ProfileReview);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\profilereview.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "style.js",
                                                                    "fileData": "import styled from 'styled-components';\nimport { Col, Typography } from 'antd';\n\nconst { Text, Title } = Typography;\n\nconst PageTitle = styled(Title)`\n  padding-bottom: 20px;\n  text-align: left;\n`;\n\nconst DescriptionText = styled(Text)`\n  margin-bottom: 10px;\n  display: block;\n  font-size: 15px;\n  text-align: left;\n`;\n\nconst StepActionContainer = styled.div`\n  width: 100%;\n  margin-top: 24px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ItemContainer = styled(Col)`\n  background: white;\n  padding: 20px;\n  justify-content: flex-start;\n  display: flex;\n  border-radius: 10px;\n  margin: 10px;\n  flex-direction: column;\n  min-width: 45%;\n  flex: 1;\n  align-items: flex-start;\n`;\n\nconst ItemTitle = styled(Text)`\n  font-size: 15px;\n  color: #8c8989;\n  letter-spacing: 3px;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\nexport {\n  PageTitle,\n  DescriptionText,\n  ItemContainer,\n  ItemTitle,\n  StepActionContainer,\n};\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Profile\\steps\\style.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "ProfileSetup",
                                                    "children": [
                                                        {
                                                            "type": "folder",
                                                            "name": "Components",
                                                            "children": [
                                                                {
                                                                    "type": "folder",
                                                                    "name": "AccountSummary",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\nimport { useLocation } from 'react-router';\n\nconst AccountSummary = ({setJobFlowStepNumber, jobFlowStepsArray, userInfo, user}) => {\n\n    const firstName = userInfo.firstName !== \"\" ? userInfo.firstName : user.firstName\n    const lastName = userInfo.lastName !== \"\" ? userInfo.lastName : user.lastName\n    const email = userInfo.email !== \"\" ? userInfo.email : user.email\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n\n    // const handleEditClick = ({userInfo}) => {\n    //     console.log(\"edit clicked\")\n    //     // setJobFlowStepNumber(jobFlowStepsArray['selectSoftware'])\n    //     window.location.href = `/customer/start-profile-setup?page=select-software&jobId=${jobIdFromUrl}&edit=true`\n    // }\n\n    return(<React.Fragment>\n        <Row className=\"pl-15 align-items-center pad-left\">\n            {/* <Col md={8} xs={10} className=\"p-0\"> */}\n            <Col md={8} xs={10} className=\"\">\n                <Row>\n                    <Col>\n                        <span className=\"acc-details-label\">Account Details</span>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"d-flex flex-column\">\n                        <span className=\"customer-name mr-30\">{firstName}{\" \"}{lastName}</span>\n                        <span className=\"customer-email\">{email}</span>\n                    </Col>\n                </Row>\n            </Col>\n            {/* <Col md={4} xs={12} className=\"pr-30-imp text-right text-to-left pl-0-max-width-600 pad-left-edit\"> \n            <Col md={4} xs={12} className=\"pr-30-imp text-right text-to-left\">\n                <span onClick={handleEditClick} className=\"edit-label\">Edit</span>\n            </Col>*/}\n        </Row>\n    </React.Fragment>)\n}\n\nexport default AccountSummary",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\AccountSummary\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "AddCard",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React, {useEffect, useState} from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\nimport {CardNumberElement, CardExpiryElement,r,\tCardCvcElement, useStripe, useElements} from \"@stripe/react-stripe-js\";\nimport NewInput from \"components/common/Input/NewInput\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { STRIPE_KEY,STRIPE_TEST_KEY, JOB_STATUS } from '../../../../../constants';\nimport * as CommonFunctions from '../../../../../utils'\nimport {loadStripe} from '@stripe/stripe-js';\nimport { openNotificationWithIcon, GAevent, PushUserDataToGtm } from '../../../../../utils';\nimport * as CustomerApi from '../../../../../api/customers.api';\nimport * as JobApi from '../../../../../api/job.api';\nimport * as UserApi from '../../../../../api/users.api';\nimport mixpanel from 'mixpanel-browser';\nimport { useAuth } from \"context/authContext\";\nimport { TermsCondition } from '../../../../../policy-pages/conditions';\nimport { Modal } from 'antd';\nimport { useJob } from '../../../../../context/jobContext';\nimport { useNotifications } from '../../../../../context/notificationContext';\nimport * as PromocodeApi from '../../../../../api/promoCode.api';\nimport { useSocket } from '../../../../../context/socketContext';\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { useHistory, useLocation } from 'react-router';\nimport { getPrimaryTime } from \"../../../../../utils/index\";\n// import stripeSecureLogo from \"../../../../../assets/images/stripe-secure-logo.png\"\n\nlet liveUser = true;\nconst MESSAGES = [ \"Promo Code is Already Expired !!\" , \"Promo Code is already used !!\",\n                   \"Promo Code Successfully Applied !!\" , \"Please Enter a Promo Code !!\" , \"Something Went Wrong !!\"];\n\nconst AddCard = ({setJobFlowStepNumber, jobFlowStepsArray, user, jobInfo,cardsInfo, isScheduleJob, job, guestJobId, scheduleJobTime, isGuestJob}) => {\n\n     // Promocode States\n    const [promoCodeInput , setPromoCodeInput] = useState('');\n    const [promoCodeApplied , setIsPromocodeApplied] = useState({});\n    const [formData,setFormData] = useState({zip:\"\"})\n    const stripe = useStripe();\n    const elements = useElements();\n    const {refetch} = useAuth();\n    const [showSpinner, setShowSpinner] = useState(false)\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const { updateJob, createJob, setJob, fetchJob } = useJob();\n    const [havePromoCode , setHavePromoCode] = useState(false)\n    const { createNotification, fetchNotifications } = useNotifications();\n    const { socket } = useSocket();\n    const history = useHistory();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n\n    useEffect(()=>{\n        (async () => {\n            liveUser= await CommonFunctions.isLiveUser(user)\n            if(jobIdFromUrl){\n\t\t\t\tconsole.log(\"My console from job summary\", jobIdFromUrl)\n\t\t\t\tfetchJob(jobIdFromUrl)\n\t\t\t}\n        })();\n    },[])\n\n    useEffect(()=>{\n        if(job){\n            if(user){\n\t\t\t\tif(job.status !== \"Draft\") window.location.href = \"/\"\n\t\t\t}\n        }\n    },[job])\n\n    const handleCancel = () => {\n\t\tsetIsModalVisible(false);\n\t};\n\n    const showModal = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\n    const handleButtonClick = async() => {\n\n        setShowSpinner(true)\n        if(formData.zip===\"\"){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"error\", \"Error\", \"Zip cannot be left empty\")\n            return\n        }else{\n            await UserApi.updateUser({userId:user.id, zip:formData.zip})\n        }\n\n        if(promoCodeInput && promoCodeApplied){\n\t\t\tconst requiredData = {\n\t\t\t\t\"promoCodeId\" : promoCodeApplied.id,\n\t\t\t\t\"promoCode\" : promoCodeApplied.promo_code,\n\t\t\t\t\"discountType\" : promoCodeApplied.discount_type,\n\t\t\t\t\"couponcodeDiscount\" : promoCodeApplied.discount_value\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Promocode Discount Details- Guest User Side\", requiredData)\n\t\t\t\tawait window.sessionStorage.setItem(\"promo-code-details\", JSON.stringify(requiredData))\n\t\t\t}\n\n        const cardElement = elements.getElement(CardNumberElement);\n        var dataToStripe ={}\n        dataToStripe['metadata'] = formData\n        if (!stripe || !elements) {\n            setShowSpinner(false)\n            return;\n        }\n        stripe.createToken(cardElement,dataToStripe).then(\n            async (payload) => {\n                console.log('payload>>>>>>>>>>>>>>>>>>>>',payload)\n                if(payload['error']){\n                    setShowSpinner(false)\n                    openNotificationWithIcon(\"error\",\"Error\",payload['error']['message'])\n                    return;\n                }else{\n                    // retrieve customer's strip id to Db\n                    let retrieve_cust = await CustomerApi.retrieveCustomer(user?.customer?.id);\n                    console.log('addCardForm handleSubmit retrieve_cust::',retrieve_cust)\n                    if(!retrieve_cust.stripe_id || retrieve_cust.stripe_id === '' || retrieve_cust.stripe_id == null){\n                        checkCardAndAddCardToCustomer(cardElement,dataToStripe,payload,true,false)\n                    }else{\n                        checkCardAndAddCardToCustomer(cardElement,dataToStripe,payload,false,retrieve_cust.stripe_id)\n                    }\n                }\n\n            }\n        );\n\n        /**\n\t* mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n\t* @author : Ridhima Dhir\n\t*/\n\tconst confirmModaloFMobileTabletJobPosting = async (message = '') => {\n\t\tif(user && user.email){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Job created from mobile or tablet')\n\t\t}\n\t\tModal.confirm({\n\t\t\ttitle: \"To better assist you please join from your computer.\",\n\t\t\tcontent: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n\t\t\tokText: 'Ok',\n\t\t\tcancelButtonProps : { style: { display: 'none' } },\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\thistory.push(\"/\")\n\t\t\t},\n\t\t});\n\t}\n\n    /**\n\t* send email with job link for desktop\n\t* @params : job\n\t* @author : Ridhima Dhir\n\t*/\n\tconst emailOFMobileTabletJobPosting = async (jobData) => {\n\t\tsocket.emit('mobile_tablet_job_post_email', jobData);\n\t}\n\n        async function checkCardAndAddCardToCustomer(cardElement,data,payload,newCustomer,stripe_customer_id){\n            stripe.createToken(cardElement,data).then(\n                async (payloadTwo) => {\n                    console.log('payloadTwo>>>>>>>>>>>>>>>>>>>>',payloadTwo)\n                    if(payloadTwo['error']){\n                        setShowSpinner(false)\n                        openNotificationWithIcon(\"error\",\"Error\",payloadTwo['error']['message'])\n                        return;\n                    }else{\n                        // const card_valid  =  await CustomerApi.checkCardValidation({token_id:payloadTwo.token.id,liveUser:liveUser})\n                        // console.log(\"Check Card Validation res\", card_valid)\n                        // if(card_valid['success']){\n\n                            if(newCustomer){\n                                console.log('addCardForm handleSubmit createCustomerStripe ::')\n                                // creating customer's stripe id\n                                const result_customer  = await CustomerApi.createCustomerStripe({\n                                    email: user.email,\n                                    liveUser:liveUser\n                                })\n\n                                var customer_id = result_customer.id\n                                // updating customers strip id in DB\n                                CustomerApi.updateCustomer(user.customer.id,{\"stripe_id\":customer_id})\n                                stripe_customer_id = customer_id\n                                if(job && job.id){\n                                    // updating job.id\n                                    JobApi.updateJob(job.id, { tech_search_start_at: new Date()});\n                                }\n\n                            }\n                        //   adding card to customer's strip.id\n                            const result_card  = await CustomerApi.addCardToCustomerStripe({\n                                liveUser:liveUser,\n                                stripe_id: stripe_customer_id,\n                                token_id:payload.token.id,\n                                jobId:job.id\n                            })\n\n\n                            if(result_card['error'] != undefined){\n                                setShowSpinner(false)\n                                openNotificationWithIcon(\"error\",\"Error\",result_card['error']['message'])\n                                // mixpanel code//\n                                mixpanel.identify(user.email);\n                                mixpanel.track('Customer - Card not added due to some error in card.');\n                                // mixpanel code//\n                            }else{\n                                // Making the new card as default card\n                                if (result_card[\"id\"]) {\n                                    await CustomerApi.updateDefaultCard({\n                                        liveUser: liveUser,\n                                        card_id: result_card[\"id\"],\n                                        customer_id: stripe_customer_id,\n                                    });\n                                }\n\n                                openNotificationWithIcon(\"success\",\"Success\",\"Card details has been saved.\")\n                                // mixpanel code//\n                                mixpanel.identify(user.email);\n                                mixpanel.track('Customer - Card details added.');\n                                // mixpanel code//\n                                // This condition will first check whether a user join from mobile or tablet. If so then don't hold any money.\n                                // if((isMobile || isTablet) && localStorage.getItem(\"isScheduleJob\") !== 'true'){\n                                //     console.log(\"isMobile or isTablet\")\n                                //     await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                                //     await emailOFMobileTabletJobPosting(job)\n                                // }else{\n\n                                // Holding $100 Dollars here from customer which will be refunded or deducted depnding on customer action\n                                const custObj ={\n                                    \"stripe_id\" :stripe_customer_id,\n                                    'liveUser':liveUser,\n                                     'jobId': job?.id\n                                }\n                                console.log(\"custObj:::\",custObj)\n                                const holdChargeResponse = await CustomerApi.holdChargeFromCustomer(custObj);\n                                 // mixpanel code//\n                                 mixpanel.identify(user.email);\n                                 mixpanel.track('Customer - Hold $100 from customer',holdChargeResponse);\n                                 // mixpanel code//\n\n                                 // This condition check if $100 hold is not successful then redirect to dashboard\n                                 if(holdChargeResponse.status !== \"Successful\"){\n                                    openNotificationWithIcon(\"error\",\"Error\",holdChargeResponse.message)\n                                    // setTimeout(() => {\n                                    //     window.location.href = '/customer/card-detail-page';\n                                    // }, 1000);\n                                    setShowSpinner(false);\n                                    return;\n                                }else{\n                                refetch()\n                                let promoCodeDetails = await window.sessionStorage.getItem(\"promo-code-details\");\n                                promoCodeDetails = JSON.parse(promoCodeDetails)\n                                console.log(\"Checking Parsed Data is Available--\", promoCodeDetails)\n                                await updatJobwithPromocode(promoCodeDetails, jobIdFromUrl);\n                                console.log(\"My console to check job from here\", localStorage.getItem(\"isScheduleJob\"))\n                                console.log(\"My console to check job from here 2\", localStorage.getItem(\"scheduleData\"))\n                                if(localStorage.getItem(\"isScheduleJob\")){\n                                    localStorage.removeItem(\"isScheduleJob\")\n                                    // await updateJob(job.id, {status:\"Scheduled\", customer:user.customer.id, guestJob:false})\n                                    // const jobData = await createUpdateJob(\"Scheduled\")\n                                    // let scheduleDetails = {\n                                    //     'primaryTimeAvailable':true,\n                                    //     'primaryTimeExpiredAt':null,\n                                    //     'secondaryTimeAvailable':false,\n                                    //     'secondaryTimeExpiredAt':null,\n                                    //     'scheduleExpired':false,\n                                    //     'scheduleExpiredAt':null\n                                    // }\n                                    // let jobUpdate = {}\n                                    // jobUpdate.status = \"Scheduled\"\n                                    // jobUpdate.customer = user.customer.id\n                                    // jobUpdate.scheduleDetails = scheduleDetails\n                                    // jobUpdate.scheduleDetails.scheduleExpiredAt = new Date(localStorage.getItem(\"scheduleData\") - 1200000)\n                                    // // jobUpdate.primarySchedule = localStorage.getItem(\"scheduleData\");\n\n                                    // await JobApi.updateJob(jobIdFromUrl, jobUpdate)\n                                    // console.log(\"My console for job\", job ? job : jobData)\n\n\n                                    // updating scheduled job into DB\n                                    const updatedJob = await JobApi.updateJob(jobIdFromUrl, {status:JOB_STATUS.SCHEDULED,\n                                                                          customer:user.customer.id,\n                                                                        })\n                                    console.log(\"My console to see updatedJob\", updatedJob)\n                                    await emitSocketCreateFetchNotification(updatedJob)\n                                    setTimeout(() => {\n                                        window.location.href = '/dashboard?&scheduleJobId='+jobIdFromUrl;\n                                        setShowSpinner(false)\n                                    }, 2000);\n                                }else{\n                                    // await updateJob(job.id, {status:\"Pending\", customer:user.customer.id, guestJob:false})\n\n                                    // if(isMobile || isTablet){\n                                    //     console.log(\"isMobile or isTablet\")\n                                    //     await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                                    //     await emailOFMobileTabletJobPosting(job)\n                                    // }else{  \n                                        if (technicianId) {\n                                            await JobApi.updateJob(jobIdFromUrl,{status:\"Pending\",tech_search_time:'300000',tech_search_start_at:new Date(),customer:user.customer.id,})\t\t\t\n                                        } else{\n                                            console.log(\"Going to Page helpIsOnTheWay\")\n                                            await JobApi.updateJob(jobIdFromUrl, {status:\"Pending\", \n                                                                                  tech_search_start_at:new Date(), \n                                                                                  customer:user.customer.id,\n                                                                                })\n                                        }\n                                        // const jobData = await createUpdateJob(\"Pending\")\n                                        // setJobFlowStepNumber(jobFlowStepsArray[\"helpIsOnTheWay\"])\n\n                                        /*try{\n                                            console.log(\"jobData after add card successfully :: \",jobData)\n                                        }catch(e){\n                                            console.log(\"Error in try when print job info and job only\",e)\n                                        }\n\n                                        let jobId = jobData.id ? jobData.id : jobData;\n                                        // This line updates the job data with the current date and time as the start time of a tech search.\n                                        if(jobId){\n                                            await updateJob(jobId,{tech_search_start_at:new Date()})\n                                            // The following lines of code use the Mixpanel analytics service to track a customer action\n                                            mixpanel.identify(jobData.id ? jobData.id : jobData);\n                                            mixpanel.track('Customer - card added and redirected to tech serching page.');\n                                            // mixpanel code//\n                                        }\n\n                                        window.location.href= `/customer/profile-setup?id=${jobId}`*/\n                                        window.location.href = `/customer/profile-setup?page=tech-search&jobId=${jobIdFromUrl}`\n                                        setShowSpinner(false)\n                                    // }\n                                }\n                            }\n                                if (user && job && job.GA_conversion_event_called === undefined) {\n                                    //GA3 tag commented by Vinit on 24/04/2023.\n                                    GAevent('Conversion', isScheduleJob ? 'scheduled_job' : 'new_job', 'Conversion', user.customer.id ? user.customer.id : user.customer)\n                                    if(process.env.REACT_APP_URL){\n                                      const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n                                      PushUserDataToGtm('job_posted', user, appUrl);\n                                    }\n                                    JobApi.updateJob(job.id, { GA_conversion_event_called: 'yes' });\n                                    // this is commented by Jagroop as discussed with Vineet Sir as it cause issue .\n                                    // JobApi.updateJob(job.id, { GA_conversion_event_called: 'yes',cardPreAuthorization:true });\n\n                                }\n                            // }\n                        // }\n                        // else{\n                        //     setShowSpinner(false)\n                        //     openNotificationWithIcon(\"error\",\"Error\",card_valid['message']) //Chintan sir asked to show stripe err here\n                        // }\n                    }\n\n                }\n            })\n        }\n\n    }\n\n    /**\n\t * emit send-schedule-alerts socket and create / fetch notification customer notifications\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\t const emitSocketCreateFetchNotification = async (jobStats) =>{\n\t\ttry{\n\t\t\tconsole.log(\"send-schedule-alerts :::::::::::\", jobStats)\n\t\t\t//Notification for customer\n\t\t\tconst notificationData = {\n\t\t\t\tuser: user.id,\n\t\t\t\tjob: jobStats.id,\n\t\t\t\tread: false,\n\t\t\t\tactionable: false,\n\t\t\t\ttitle: 'We are finding a technician for you. We will inform you when we find the technician',\n\t\t\t\ttype: 'Scheduled Job',\n\t\t\t};\n\t\t\tconsole.log(\"notificationData ::::::::\", notificationData)\n\t\t\tawait createNotification(notificationData);\n\t\t\tawait fetchNotifications({ user: user.id });\n\n            console.log(\"My console to see now\")\n\n\t\t\t// call send-schedule-alerts socket from backend.\n\t\t\t// It will find available techs and send alerts by sms/email/notification\n\t\t\tsocket.emit('search-for-tech', {\n\t\t\t\tjobId: jobStats.id,\n\t\t\t\tcustomerTimezone: user.timezone,\n\t\t\t\tjobData: jobStats,\n\t\t\t\tprimaryTime: jobStats.primarySchedule,\n\t\t\t\tphoneNumber:user.customer.phoneNumber,\n\t\t\t\tcustomerName:user.firstName,\n\t\t\t\tcustomerEmail:user.email,\n                technicianId:false\n\t\t\t});\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n\t\t\tconsole.log('There is catch error while create/fetch notification  :::: '+ err.message)\n\t\t}\n\t}\n\n    /**\n\t * Following function is to create and update job after discussion with sahil nagpal as this is a old code. Just status is now dynamic\n\t * @author : Ridhima Dhir\n     * @date : 09-12-2022\n\t */\n     const createUpdateJob= async(status)=>{\n        let promoCodeDetails = await window.sessionStorage.getItem(\"promo-code-details\");\n        promoCodeDetails = JSON.parse(promoCodeDetails)\n        console.log(\"Checking Parsed Data is Available--\", promoCodeDetails)\n        let jobId = \"\";\n        console.log(\"guestJobId<><>1\",guestJobId)\n        if (guestJobId) {\n            console.log(\"guestJobId<><>2\",guestJobId)\n            jobId = guestJobId\n            if(promoCodeDetails && guestJobId){\n            await  updatJobwithPromocode(promoCodeDetails, guestJobId);\n            }\n            updateJob(guestJobId, { \"customer\": user.customer.id, \"status\": status })\n        } else {\n            let temp = {}\n            if(job){\n                temp = { ...job }\n                // temp.software = job?.software?.id ? job?.software?.id : job?.software\n                temp.status = status\n                if(temp.id){\n                    updateJob(temp.id, {\"status\": status, \"customer\": user.customer.id })\n                    jobId = guestJobId\n                }\n            }\n            else{\n                temp.software = jobInfo.currentSoftware.id\n                temp.status = status\n                temp.estimatedPrice = jobInfo.currentSoftware.estimatedPrice\n                temp.estimatedTime = jobInfo.currentSoftware.estimatedTime\n                temp.customer = user?.customer?.id\n                temp.guestJob = false\n                temp.hireExpert = false\n                temp.issueDescription = jobInfo.moreDetails\n                temp.level = \"advanced\"\n                temp.subOption = jobInfo.currentSubSoftware\n                if(isScheduleJob){\n                    let timeToSend = getPrimaryTime(scheduleJobTime)\n                    temp.primarySchedule = timeToSend\n                }\n                const jobData = await createJob(temp)\n                console.log(\"My console to check job \", jobData)\n                if(promoCodeDetails && jobData && jobData.id){\n                    await  updatJobwithPromocode(promoCodeDetails , jobData.id);\n                }\n                setJob(jobData)\n                jobId = jobData.id\n                return jobData\n            }\n        }\n        return jobId\n    }\n\n    // Updating User Job Detail with Promocode Details\n    const updatJobwithPromocode =async(promoCodeDetails, jobId)=>{\n        try {\n            console.log(\"Checking Parsed Data is Available--\", promoCodeDetails)\n            if(promoCodeDetails && promoCodeDetails.promoCodeId){\n                const updateData ={\n                      user_id : user && user.id,\n                      job_id :  jobId,\n                      used_date : new Date()\n                  }\n              console.log('updateData',updateData)\n              // updating promocode details to db\n              const updateResponse = await PromocodeApi.updatePromoData(promoCodeDetails.promoCodeId , updateData);\n              if(updateResponse){\n                      const updateUser= {\n                          \"coupon_id\": promoCodeDetails.promoCodeId,\n                          \"coupon_code\" :  promoCodeDetails.promoCode,\n                          \"discount_type\":  promoCodeDetails.discountType,\n                          \"coupon_code_discount\" :  promoCodeDetails.couponcodeDiscount\n                      }\n                      await updateJob(jobId,updateUser)\n                      sessionStorage.removeItem('promo-code-details')\n                      return;\n\n              }\n          }else {\n            return ;\n          }\n\n        } catch (error) {\n            console.log(\"updating job details with promocode if applied  : error \", error)\n        }\n    }\n\n\n    // Promo Code Apply Function\n\tconst applyPromoCode= async()=>{\n\n        if(promoCodeInput) {\n            setIsPromocodeApplied({})\n            const promocode = promoCodeInput.trim()\n            // retrieving promocode data to DB\n\t        const response  = await PromocodeApi.retrievePromoData(promocode);\n\t        if(response){\n\t            if(response && response.message){\n\t            \treturn openNotificationWithIcon(\"error\", \"Error\",  response.message);\n\t            }if(response && response.expiry_date && (new Date(response.expiry_date).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) ){\n\t                return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[0]);\n\t            }if(response && response.used_by){\n\t            \tif(user && user.id){\n\t                const findUser  = response.used_by.find((item) => item.user_id === user.id);\n\t                   if(findUser && !(JSON.stringify(findUser) === \"{}\")){\n\t                     return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[1]);\n\t                   }\n\t\t\t            else{\n\t\t\t            \tsetIsPromocodeApplied(response);\n\t\t\t            \tconst message = response.discount_type === \"fixed\" ? `Promocode of $${response.discount_value} is applied !!` :\n\t\t\t            \t                                              `Promocode of ${response.discount_value}% is applied !!`\n\t\t\t            \treturn openNotificationWithIcon(\"success\",\"Success\",message);\n\t\t\t            }\n\t            \t}\n\t            }\n\n            }else{\n        \t  return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[4]);\n             }\n\t    }else{\n\t    \t return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[3]);\n\t    }\n\t}\n\n    const handelApply = () => {\n        openNotificationWithIcon('error', 'Invalid Promocode', \"Please check your promocode\");\n    }\n\n    return (<>\n\n        <Modal title=\"Terms & Conditions\"  className=\"app-confirm-modal terms-and-conditions-modal\" closable={false}  footer={[\n\t\t\t\t<button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancel}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n\t\t\t]} visible={isModalVisible} >\n\t\t\t{TermsCondition()}\n\n\t\t</Modal>\n        {/* <Row className=\"mb-25 w-98p float-right\"> */}\n        <Row className=\"mb-25 w-98p ml-25\">\n            <Col className=\"cardNumberCol\" md={12} lg={6} sm={12}>\n                <span className=\"add-card-label\">Card Number</span><span className=\"add-card-label-astrisk\">*</span>\n                <div className=\"newInput mt-14\" >\n                    <CardNumberElement className=\"mt-28-imp\" options={{placeholder:\"CC#\"}} />\n                </div>\n            </Col>\n            <Col md={12} lg={6} sm={12} className=\"mt-20-max-width-600\">\n                <span className=\"add-card-label\">Expiry Date</span><span className=\"add-card-label-astrisk\">*</span>\n                <div className=\"newInput mt-14\" >\n                    <CardExpiryElement className=\"mt-28-imp\" options={{placeholder:\"MM/YY\"}} disabled={true} />\n                </div>\n            </Col>\n        </Row>\n        {/* <Row className=\"mb-78 mb-0-max-width-600 w-98p float-right\"> */}\n        <Row className=\"mb-0-max-width-600  w-98p ml-25\">\n        {/* <Row className=\"mb-78 mb-0-max-width-600\"> */}\n            <Col md={12} lg={6} sm={12}>\n                <span className=\"add-card-label\">Security Code (CVC)</span><span className=\"add-card-label-astrisk\">*</span>\n                <div className=\"newInput mt-14\" >\n                    <CardCvcElement className=\"mt-28-imp\" options={{placeholder:\"XXX\"}} />\n                </div>\n            </Col>\n            <Col md={12} lg={6} sm={12} className=\"mt-20-max-width-600\">\n                <span className=\"add-card-label\">Billing Zip Code</span><span className=\"add-card-label-astrisk\">*</span>\n                <NewInput name={\"zip\"} type={\"text\"} marginTop={\"14px\"} onChange={(e)=>setFormData({zip:e.target.value})} />\n            </Col>\n        </Row>\n\n            <Col className=\"mb-10-max-width-600 ml-25\">\n                <span className=\"termsAndConditionsText\">By confirming, you agree to the</span>{\" \"}\n                <span className=\"termsAndConditions\"> <a href=\"javascript:void(0)\" onClick={ showModal}>Terms & Condtions</a></span>\n            </Col>\n            <Row className=\"mb-25 w-98p ml-25 justify-content-end\">\n\n                <Col md={12} sm={12} xs={12} lg={12} xl={12} xxl={7}>\n                    {isGuestJob && havePromoCode && <Row className=\"mb-2 w-98p ml-25\">\n                        <Col md={12} lg={12} sm={12} className=\"\">\n                            <span className=\"add-card-label\">Promo Code</span><span className=\"add-card-label-astrisk\">*</span>\n                            <div className=\"promoInputGroup2 mt-14\" >\n                                <input className=\"promoInput mr-8 media-max-width-500-width-70p media-max-width-280-width-60p\" type=\"text\" onChange={(e) => { setPromoCodeInput(e.target.value) }}  />\n                                <a className=\"promoApplyText\" onClick={applyPromoCode} >Apply</a>\n\n                            </div>\n                        </Col>\n                    </Row>}\n                </Col>\n                <Col md={12} lg={6} sm={12} xs={12} xl={6} xxl={8} className=\"mt-3 p-0 min-width-350\">\n                    {/* <img className=\"w-100p min-width-350\" src={stripeSecureLogo} /> */}\n                    {/*<div className=\"astrisk\">\n                        <span className=\"add-card-label-astrisk star-label\">*</span>\n                    <span className='holdChargeText'>You may see a temporary pre-authorization \u201chold\u201d charge on your card. This is used to verify the card, and will be released within a day or two.</span>\n                    </div>*/}\n                </Col>\n                <Col className=\"promo-btn-card-style mt-4 mb-1\" md={12} lg={6} sm={6} xs={12} xl={6} xxl={4}>\n                    <BasicButton onClick={handleButtonClick} btnTitle={\"Get Help Now\"} height={\"67px\"} width={\"190px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} disable={showSpinner} />\n                    {isGuestJob && !havePromoCode && <p onClick={() => setHavePromoCode(true)} className='softare-label-n mt-2 promo-hover-effect'>Promo Code? Click Here</p>}\n                </Col>\n          </Row>\n\n    </>)\n}\n\nexport default AddCard\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\AddCard\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "AfterBusinessHrsPopUpModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React,{useEffect} from 'react';\nimport { Modal,Typography } from 'antd';\nimport styled from 'styled-components';\nimport BasicButton from 'components/common/Button/BasicButton'\nconst { Title } = Typography;\nconst AfterBusinessHrsPopUpModal = ({ showAfterBusinessHrs, setShowAfterBusinessHrs }) => {\n    /**\n   * Continue Search a job by click on button\n   * @params = \n   * @response : it redirects the customer at the page where countdown timer run .\n   * @author : Mritunjay\n  */\n useEffect(()=>{\n    console.log(\">>>>>>>>>>showAfterBusinessHrs>>>>>>>>>>\",showAfterBusinessHrs)\n },[showAfterBusinessHrs])\n\n const clickForContinueSearch = () =>{\n    setShowAfterBusinessHrs(false)\n    localStorage.setItem('showAfterBusinessHrs', 'false');\n };\n    return (\n        <>\n            <Modal\n                style={{ top: 183 }}\n                closable={false}\n                visible={showAfterBusinessHrs}\n                maskStyle={{ backgroundColor: \"#DCE6EDCF\" }}\n                maskClosable={true}\n                width={720}\n                footer={null}\n            >\n                <div className=\"afterBusinessHrs\">\n                    {/* <span className=\"afterBusinessHrs-heading\">\ud83d\ude34 Geeker Off-Peak Time</span>\n                    <div className='afterBusinessHrs-subheading'>\n                    <span>Hey! Just a quick FYI that our techs are mostly available between 9am-9pm EST Mon-Fri. </span>\n                    <span>Please continue to search or feel free to schedule a good time during business hours.</span>\n                    </div> */}\n                    <PageTitle>Hold tight! \ud83d\udca8 Your Geek is on the way!</PageTitle>\n                    <div className='afterBusinessHrs-descriptionText d-flex flex-column justify-content-center align-items-center'>\n                        <span className='pt-3'> We're experiencing high demand right now. But your Geek is getting to you as fast as they can!</span>\n                        <span className='text-center py-4'>Please wait a few more moments.You'll be connected asap.</span>\n                    </div>\n                    <BasicButton onClick={clickForContinueSearch} holdTight={'holdTight'}   btnTitle={\"Okay!\"} height={\"73px\"} width={\"420px\"} background={\"#01D4D5\"} color={\"#fff\"}/>\n                </div>\n            </Modal>\n        </>\n    )\n};\n\nconst PageTitle = styled(Title)`\nfont-size: 41px !important;\ntext-align: center;\ncolor: black;\nfont-weight: bold;\n`;\n\nexport default AfterBusinessHrsPopUpModal;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\AfterBusinessHrsPopUpModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "AfterSelectedSoftwareModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from 'react';\nimport { Modal } from 'antd';\nimport {Button} from 'react-bootstrap';\nconst AfterSelectedSoftwareModal = ({ isSpecificSoftwareSelected, setIsSpecificSoftwareSelected, setGoToJobSummaryPage, isSoftwareEmailOrOutlook, setNextButton, setShowSpinner }) => {\n    /**\n   * Modal open when customer select subsoftware of  Local printer and scanner or software of Email\\Outlook\n   * @params = \n   * @response : it redirects the customer at the Job summary page .\n   * @author : Mritunjay\n  */\n\n    const backToDashboard = () => {\n        window.location.href = \"/\"\n    };\n\n    const goToJobSummaryPage = () => {\n        setIsSpecificSoftwareSelected(false);\n        setGoToJobSummaryPage(true);\n    };\n\n    return (\n        <>\n            <Modal\n                style={{ top: 100 }}\n                closable={true}\n                onCancel={()=>{setIsSpecificSoftwareSelected(false); setNextButton(false); setShowSpinner(false);}}\n                visible={isSpecificSoftwareSelected}\n                maskStyle={{ backgroundColor: \"#DCE6EDCF\" }}\n                maskClosable={true}\n                width={764}\n                className=\"select-software-info-popup\"\n                footer={[\n                    <Button key=\"back\" onClick={backToDashboard} className=\"btn app-btn app-btn-light-blue modal-footer-btn my-3\">\n                        <span></span>Back to dashboard\n                    </Button>,\n                    <Button\n                        className={\"btn app-btn modal-footer-btn my-3\"}\n                        onClick={goToJobSummaryPage}\n                      >\n                        <span></span>Continue\n                    </Button>,\n                ]}\n            >\n                <div className=\"specificSlectedSoftware\">\n                    <div className='specificSlectedSoftware-subHeading'>\n                        <span>Please note that our experts specialize in resolving various {isSoftwareEmailOrOutlook ? \"email issues\" : \"printer and scanner problems\"}. However, there are a few issues that our experts may not be able to fix, including: </span>\n                    </div>\n                    <div className='software-solutions'>\n                        {isSoftwareEmailOrOutlook ?\n                            <>\n                                <span>1. You can't remember your email address or password.</span>\n                                <span>2. Your email is locked out.</span>\n                                <span>3. Billing issues. Or you cancelled your subscription and need help with it.</span>\n                            </>\n                            :\n                            <>\n                                <span>1. The printer or scanner not powering on.</span>\n                                <span>2. The printer or scanner cable not being connected.</span>\n                            </>\n\n                        }\n                    </div>\n                    <div className='specificSlectedSoftware-subHeading'>\n                        {isSoftwareEmailOrOutlook ?\n                           <div className='slectedSoftwareSubHeading'>\n                            <span>We recommend you contact your email provider directly.</span><br/>\n                            <span>You can still give us a try. If you would like to proceed and discuss your specific issue further, please continue.</span>\n                           </div>\n                            :\n                            <span>We still encourage you to give it a try. If you would like to proceed and discuss your specific issue further, please continue.</span>\n                        }\n\n                    </div>\n{/*<div className='specificSlectedSoftware-button mt-4'>\n                        <Button onClick={backToDashboard} title=\"Back to dashboard\" className=\"btn app-btn app-btn-light-blue modal-footer-btn\" style=\"color:#fff\" >Back to dashboard</Button>\n                        <Button onClick={goToJobSummaryPage} title=\"Continue\" className=\"btn app-btn modal-footer-btn\" style=\"color:#fff\">Continue</Button>\n                    </div>*/}\n\n\n                </div>\n            </Modal>\n        </>\n    )\n};\nexport default AfterSelectedSoftwareModal;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\AfterSelectedSoftwareModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "CancelJobConfirmationModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from \"react\"\nimport {Modal} from 'antd';\nimport { Button } from 'react-bootstrap';\nimport * as JobApi from '../../../../../api/job.api';\nimport * as CustomerApi from '../../../../../api/customers.api';\nimport * as UserApi from '../../../../../api/users.api';\nimport mixpanel from 'mixpanel-browser';\nimport { useSocket } from '../../../../../context/socketContext';\nimport { openNotificationWithIcon } from '../../../../../utils';\n\nconst CancelJobConfirmationModal = ({showCancelJobModal, setShowCancelJobModal,job}) => {\n  const { socket } = useSocket();\n  /**\n   * Cancel a job by click on button\n   * @params = \n   * @response : it redirects the customer to Dashboard.\n   * @author : Nafees\n  */\n\tconst cancelJobByCustomer = async() =>{\n\t\t// mixpanel code//\n\n\t\tmixpanel.track('Customer - Cancel Job by customer',{'JobId':job.id});\n\t\t// updating job cancelled by customer into DB\n    await JobApi.updateJob(job.id, { status: 'Declined' });\n    let updateJob = await JobApi.retrieveJob(job.id);\n    // This will refund the hold money from customer account\n    if (job && job?.customer_holded_payments && job?.customer_holded_payments.length >0) {\n      console.log('job from stratipekfe',job.customer.user.ownerId)\n      let ownerStripeId = '';\n      const ownerId =job?.customer?.user?.ownerId;\n      if(ownerId){\n         const ownerStripeRes = await UserApi.getUserById(ownerId)\n         if(ownerStripeRes?.customer?.stripe_id){\n          ownerStripeId = ownerStripeRes?.customer?.stripe_id \n      }\n      }\n      \n      // getStripeIdOfOwner()\n      const stripeId = ownerId ? ownerStripeId : job?.customer?.stripe_id\n      // Here payment_hold_id is not-applicable-here because we want to send only when we are Adding card as in that case of card no payment_hold_id is stored somewhere  but in normal cases like this all the data is stored in the form of object and may have more than one stripe id \n      const obj = {\n        payment_hold_id: \"not-applicable-here\",\n        isDeduct: false,\n        jobId: job?.id,\n        stripe_id : stripeId\n      }\n      await CustomerApi.deductOrRefundHoldMoney(obj)\n    }\n  \n    socket.emit('job-cancel-by-customer', updateJob)\n    console.log(\"window.location.href from cancelJobModalconfirmation\", updateJob)\n\t\t window.location.href=  \"/\"\n\t} \n  const handleCancel = () => {\n    setShowCancelJobModal(false);\n  };\n\n    return<Modal\n    style={{ top: 40 }}\n    closable={false}\n    onCancel={handleCancel}\n    visible={showCancelJobModal} \n    maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n    maskClosable={true}\n    width={615}\n    footer={\n        [\n          <Button\n            className=\"btn app-btn app-btn-light-blue modal-footer-btn\"\n            onClick={() => {\n              setShowCancelJobModal(false);\n            }}\n            key='no'\n          >\n            <span></span>No\n          </Button>,\n\n          <Button\n              className=\"btn app-btn job-accept-btn modal-footer-btn\"\n              onClick={cancelJobByCustomer}\n              key='yes'\n          >\n            <span></span>Yes\n          </Button>,\n\n        ]}\n>\n   <div className=\"\">\n      <span className=\"divsize\">Are you sure you want to cancel search process?</span>\n    </div> \n</Modal>\n}\n\nexport default CancelJobConfirmationModal;",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\CancelJobConfirmationModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "CheckBox",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React,{useState} from \"react\"\nimport {Radio, Space } from 'antd';\nconst CheckBox = ({scheduleJobTime, setScheduleJobTime, showSpinner}) =>{\n    const [value, setValue] = useState(scheduleJobTime?.durationType?.length > 0 ? scheduleJobTime.durationType : \"AM\");\n\n    const onChange = (e) => {\n      setValue(e.target.value);\n      setScheduleJobTime(prevState=> ({...prevState, durationType:e.target.value}))\n    };\n  \n    return (\n      <Radio.Group onChange={onChange} value={value}>\n        <Space direction=\"vertical\">\n          <Radio value={\"AM\"} disabled={showSpinner}><span className=\"am-span\">AM</span></Radio>\n          <Radio value={\"PM\"} disabled={showSpinner}><span className=\"am-span\" >PM</span></Radio>\n        </Space>\n      </Radio.Group>\n    );\n  };\nexport default CheckBox\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\CheckBox\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "CreateYourAccount",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import BasicButton from \"components/common/Button/BasicButton\";\nimport NewInput from \"components/common/Input/NewInput\";\nimport React, {useEffect, useState} from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\nimport PhoneInput from 'react-phone-input-2';\nimport { openNotificationWithIcon } from \"utils\";\nimport * as AuthApi from '../../../../../api/auth.api'\nimport { useLocation } from 'react-router';\nimport { useFetchInvite } from 'api/invite.api';\nimport PasswordInput from \"../../../../../components/AuthComponents/PasswordInput\";\nimport { klaviyoTrack } from '../../../../../api/typeService.api';\nimport { useJob } from '../../../../../context/jobContext';\nimport * as JobApi from '../../../../../api/job.api';\nimport { Select } from \"antd\";\n//import mixpanel from 'mixpanel-browser';\nimport ValidatorModel from \"components/AuthComponents/ValidatorModel\";\nimport PasswordValidator from \"components/AuthComponents/PasswordValidator\";\nconst CreateYourAccount = ({setShowCCForm, userInfo, setUserInfo, setUserSignedUp, setUser, setToken, guestJobId, job, setSignInTabDisabled}) => {\n\n    const {fetchJob} = useJob();\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [dialCode,setDialCode] = useState(\"\")\n    const [disableLastName, setDisableLastName] = useState(true)\n    const [disablePhoneNumber, setDisablePhoneNumber] = useState(true)\n    const [disableEmail, setDisableEmail] = useState(true)\n    const [disablePassword, setDisablePassword] = useState(true)\n    const [showSpinner, setShowSpinner] = useState(false)\n    const [checkBox, setCheckBox]= useState(true);\n    const [isBusinessTypeAccount, setIsBusinessTypeAccount] = useState(false);\n    function useQuery() {\n    \tconst { search } = useLocation();\n    \treturn React.useMemo(() => new URLSearchParams(search), [search]);\n  \t}\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false      \n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const query = useQuery();\n    const inviteCode = query.get('inviteCode') || 'nothing';\n\tconst { data: inviteData } = useFetchInvite(inviteCode);\n    const [businessType, setBusinessType] = useState('not-using-business-type')\n    const reValidationObject = {\n                                firstName:/^\\s*[a-zA-Z\\s]*\\s*$/,\n                                lastName:/^\\s*[a-zA-Z\\s]*\\s*$/,\n                                email:/^[a-zA-Z0-9]+[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+?\\.[a-zA-Z]{2,3}$/,\n                                password:/[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/,\n    }\n    const validationMessages = {\n                                firstName:'No numbers or special characters are allowed',\n                                lastName:'No numbers or special characters are allowed',\n                                email:'Check the format of the email you entered',\n    }\n    const nameForValidationMessage ={\n                                firstName: 'in First Name',\n                                lastName: \"in Last Name\",\n                                email:'',\n    }\n    let sixChar = false;\n    let letter = false;\n    let specialChar = false;\n    let number = false;\n    const [pwModelVisible, setPwModelVisible] = useState()\n    const [alertMessagePassword, setAlertMessagePassword] = useState()\n    useEffect(() => {\n        (async () => {\n            if(jobIdFromUrl){\n                console.log(\"My console from job summary\", jobIdFromUrl)\n                fetchJob(jobIdFromUrl)\n            }\n        })();\n    },[])\n    \n\n    /**\n\t * Following function is to handle change of phone number field in the form.\n\t * @author : Vinit\n\t */\n     const handlePhoneNumber = (value, data) => {\n\t\tsetPhoneNumber(`+${value}`);\n        setDialCode(data.dialCode)\n\t};\n\n\n    const handleCheckBox=()=>{\n    \t\tsetCheckBox(!checkBox)\n    \t}\n    \n    const handleIsBusinessAccountType = () => {\n        if(!isBusinessTypeAccount){\n            setUserInfo(prevState => {\n                const { businessName, ...newState } = prevState;\n                return newState;\n            });\n        }\n        setIsBusinessTypeAccount(!isBusinessTypeAccount);\n    }\n    /**\n\t * Following function is to handle next button click.\n\t * @author : Vinit\n\t */\n    const handleNextButtonClick = async () => {\n        const userFirstName = userInfo.firstName.trim();\n        const userLastName = userInfo.lastName.trim();\n\n        setShowSpinner(true)\n        const firstNameValidation = regularExpressionTesting(\"firstName\")\n        const lastNameValidation = regularExpressionTesting(\"lastName\")\n\n        if(!firstNameValidation || !lastNameValidation) return\n\n        // Password validation :-\n        if(userInfo.password.indexOf(\" \") >= 0){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Password should not contain any empty space.\")\n            return\n        }\n\n        if(userFirstName.indexOf(\" \") >= 0){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"info\", \"First name should not contain any empty space.\")\n            return\n        }\n        \n        if(userLastName.indexOf(\" \") >= 0){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Last name should not contain any empty space.\")\n            return\n        }\n\n        if(isBusinessTypeAccount && (!userInfo.businessName || userInfo.businessName === \"\")){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"info\", \"Please enter your business name.\")\n            return\n        }\n            \n        if (userInfo.password.length > 5) sixChar = true;\n        if (/[a-zA-Z]/.test(userInfo.password)) letter = true;\n        if (reValidationObject[\"password\"].test(userInfo.password)) specialChar = true;\n        if (/[0-9]/.test(userInfo.password)) number = true;\n\n        if(sixChar && letter && specialChar && number){\n            // Email validation :-\n            const regularExpressionResponse = regularExpressionTesting(\"email\")\n\n            if(regularExpressionResponse){\n                // registering user's data to DB\n                let res  = await AuthApi.register({\n                        timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,\n                        firstName:userInfo.firstName.replace(/\\s/g, ''), \n                        lastName:userInfo.lastName.replace(/\\s/g, ''), \n                        email:userInfo.email, \n                        password:userInfo.password, \n                        confirm_password:userInfo.password, \n                        phoneNumber, \n                        language:\"English\", \n                        userType:'customer',\n                        status:'completed',\n                        inviteCode: inviteCode,\n                        receiveEmails:checkBox,\n                        businessName : userInfo?.businessName && isBusinessTypeAccount ? userInfo?.businessName : '',\n                        isBusinessTypeAccount : isBusinessTypeAccount,\n                        askedForBusiness:false,\n                        businessName:isBusinessTypeAccount ? userInfo.businessName : \"\"\n                })\n                if(res.user){\n                    setSignInTabDisabled(true)\n                    setUserSignedUp(true)\n                    openNotificationWithIcon(\"success\", \"Success\", \"User registered successfully!\")\n                    setToken(res.token.accessToken)\n                    setUser(res.user)\n                    // updating customer data into DB\n                    await JobApi.updateJob(jobIdFromUrl, { customer:res.user.customer.id, guestJob:false,tech_search_start_at: new Date()}).then((testingRes)=>{\n                            \n                            // window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobIdFromUrl}`\n                            if(technicianId){\n                                window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobIdFromUrl}&technicianId=${technicianId}`\n                            }else{\n                                window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobIdFromUrl}`\n                            }\n                    })\n                    // setShowCCForm(true)\n                    if(guestJobId){\n                        \n                        //Call Klaviyo api\n                        const klaviyoData = {\n                            email: res?.user?.email,\n                            event: 'Job Post Button Click',\n                            properties: {\n                                $first_name: res?.user?.firstName,\n                                $last_name: res?.user?.lastName\n                            },\n                        };\n                        await klaviyoTrack(klaviyoData);   \n                    }\n                } else if(res.success === false && res.message){\n                    setShowSpinner(false)\n                    openNotificationWithIcon(\"error\", \"Error\", res.message)\n                }\n            }\n        }else{\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"Info\", \"For your security, we need your password to be a minimum of 6 characters, a number, and a special character.\")\n        }\n\t};\n    \n    /**\n     * Following function is to handle value change.\n     * @author : Vinit\n     */\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setUserInfo(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n    console.log(\"setUserInfo\",userInfo)\n\n    const regularExpressionTesting = (fieldName) => {\n        if(!reValidationObject[fieldName].test(String(userInfo[fieldName]))){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"info\", \"info\", `${validationMessages[fieldName]} ${nameForValidationMessage[fieldName]}`)\n            return false\n        }else{\n            return true\n        }\n    }\n    \n    /**\n     * Following useEffect will act as validation for the create your account form.\n     * @author : Vinit\n     */\n    useEffect(()=>{\n        if(userInfo.firstName !== \"\") setDisableLastName(false)\n        regularExpressionTesting(\"firstName\")\n\n        if(userInfo.lastName !== \"\") setDisablePhoneNumber(false)\n        regularExpressionTesting(\"lastName\")\n\n        if(userInfo.email!==\"\"){\n            setDisablePassword(false)\n        }\n\n        if(((phoneNumber.length - dialCode.length) -1 ) === 10){ \n            setDisableEmail(false)\n        }else{\n            setDisableEmail(true)\n            setDisablePassword(true)\n        }\n\n        if(userInfo.firstName === \"\") {\n            setDisableLastName(true)\n            setDisablePhoneNumber(true)\n            setDisableEmail(true)\n            setDisablePassword(true)\n        }\n\n        if(userInfo.lastName === \"\") {\n            setDisablePhoneNumber(true)\n            setDisableEmail(true)\n            setDisablePassword(true)\n        }\n\n        if(userInfo.email===\"\") {\n            setDisablePassword(true)\n        }\n    },[userInfo, phoneNumber])\n\n\n\n    return(<>\n        <Row>\n            <Col className=\"pr-25 pr-15-max-width-600\" sm={12} md={6} lg={6}>\n                <Row className=\"mb-10\"><span className=\"formLabel\">First Name</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <NewInput type={\"text\"} name={\"firstName\"} onChange={handleChange} />\n                </Row>\n            </Col>\n            <Col className=\"pl-25 pl-15-max-width-600\" sm={12} md={6} lg={6}>\n                <Row className={\"mb-10 \" + (disableLastName ? \"opacity-point-5\" : \"\" )}><span className=\"formLabel\">Last Name</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <NewInput type={\"text\"} name={\"lastName\"} onChange={handleChange} disable={disableLastName} />\n                </Row>\n            </Col>\n        </Row>\n        <Row className=\"mb-25\">\n            <Col>\n                <Row className={\"mb-10 \" + (disablePhoneNumber ? \"opacity-point-5\" : \"\" )}><span className=\"formLabel\">Mobile number</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <PhoneInput countryCodeEditable={false} name={'phoneNumber'} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca','gb']} className={\"p-0 \" + (disablePhoneNumber ? \"opacity-point-5\" : \"\")} containerClass=\"\" dropdownClass=\"phoneInputDropdownClass\" inputClass=\"newInput\" value={phoneNumber} onChange={handlePhoneNumber} disabled={disablePhoneNumber} />\n                </Row>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Row className={\"mb-10 \" + (disableEmail ? \"opacity-point-5\" : \"\")}><span className=\"formLabel\">Email</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <NewInput type={\"email\"} name={\"email\"} onChange={handleChange} disable={disableEmail} />\n                </Row>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Row className={\"mb-10 \" + (disablePassword ? \"opacity-point-5\" : \"\")}><span className=\"formLabel\">Create Password</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <PasswordInput style={{height:\"75px\",marginBottom:\"32px\" ,opacity: disablePassword ? \"0.5\" : \"1\",cursor: disablePassword ? \"not-allowed\" : \"alias\"}} name={\"password\"} onChange={handleChange} disable={disablePassword}  onFocus={() => setPwModelVisible(true)} onBlur={() => setPwModelVisible(false)}/>\n                    <ValidatorModel visible={pwModelVisible}>\n                        <PasswordValidator inputText={userInfo.password} setAlertMessagePassword={setAlertMessagePassword} />\n                    </ValidatorModel>\n                </Row>\n            </Col>\n        </Row>\n        <Row>\n            <div className=\"d-flex flex-row d-inline-flex align-items-center\">\n                <div className=\"checkbox1\">\n                    <input className=\"mb-2\" id=\"businessName\" type=\"checkbox\" name=\"receiveEmails\"  onChange={handleIsBusinessAccountType} defaultChecked={isBusinessTypeAccount} /> \n                </div>            \n                <label className=\"ml-1\" htmlFor=\"businessName\" >I\u2019m using this account for business use.</label>\n            </div>\n            <Col className={\"pl-25 pl-15-max-width-600 \" + (isBusinessTypeAccount ? \"\" : \" disableElement \")} sm={12} md={12} lg={12}>\n                <Row>\n                    <NewInput type={\"text\"} name={\"businessName\"} placeHolder=\"Business Name *\" onChange={handleChange} />\n                </Row>\n            </Col>\n        </Row>\n        <Row  className=\"mb-10\">\n        \n            <div className=\"d-flex flex-row d-inline-flex align-items-center\">\n            <div className=\"checkbox1\">\n    \t\t\t<input className=\"mb-2\" id=\"receiveEmails\" type=\"checkbox\" name=\"receiveEmails\" onChange={handleCheckBox}  defaultChecked={checkBox}/> \n            </div>            \n    \t\t \t<label className=\"ml-1\" htmlFor=\"receiveEmails\" >Check this box to receive emails about our latest deals, discounts and promotions.</label>\n            </div>\n\t     \n\t     </Row>\n        <Row className=\"justify-content-end\">\n            <BasicButton onClick={handleNextButtonClick} btnTitle={\"Next\"} height={\"60px\"} width={\"158px\"} background={\"#01D4D5\"} color={\"#fff\"} disable={disableLastName || disablePhoneNumber || disableEmail || disablePassword || userInfo.password === \"\"} showSpinner={showSpinner} />\n        </Row>\n    </>)\n}\n\nexport default CreateYourAccount\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\CreateYourAccount\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "EditJobModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React, { useEffect, useState } from \"react\"\nimport {Modal} from 'antd';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport SignUpHeading from \"../../../../../components/common/SignUpHeading\";\nimport SoftwareDropDown from 'components/common/SoftwareDropDown';\nimport { useAuth } from '../../../../../context/authContext';\nimport { useJob } from '../../../../../context/jobContext';\nimport { SECRET_KEY } from '../../../../../constants';\nimport * as JobApi from '../../../../../api/job.api';\nimport { openNotificationWithIcon } from \"../../../../../utils\";\n\nconst EditJobModal = ({softwareList, jobData,showEditJobModal,setIsJobSummaryUpdate, setShowEditJobModal, user}) => {\n\n    const [softwareId, setSoftwareId] = useState(jobData?.software?.id)\n    const [subSoftwareName, setSubSoftwareName] = useState(jobData?.subOption)\n    const [textarea, setTextarea] = useState(jobData.issueDescription);\n    const [currentSoftware, setCurrentSoftware] = useState()\n    const [showSpinner, setShowSpinner] = useState(false)\n    const { getGuestUser } = useAuth();\n    const { updateJobAsGuest } = useJob();\n    const [count,setCount] = useState(500);\n\tconst [characterCount,setCharacterCount] = useState(textarea.length);\n\n    useEffect(()=>{\n        console.log(\"Job data from edit job modal\", jobData)\n    },[])\n\n    /**\n     * Following function will handle change of software dropdown menu\n     * @params = softwareId\n     * @response : update few state var\n     * @author : Vinit\n     */\n    const onSoftwareSelection = (softwareId) => {\n        console.log(\"My conosle for softwareId\", softwareId)\n        setSoftwareId(softwareId)\n        const currSoftware = softwareList.find(item => item.id === softwareId)\n        setCurrentSoftware(currSoftware)\n        setSubSoftwareName(\"Select\")\n        setTextarea(\"\")\n    }\n    \n    /**\n     * Following function will handle change of sub-software dropdown menu\n     * @params = value : name of the selected option\n     * @response : update subSoftwareName state var\n     * @author : Vinit\n     */\n    const onSubSoftwareSelection = (value) => {\n        setSubSoftwareName(value)\n    }\n\n    /**\n     * Following function will handle change of issue description / more details textbox\n     * @params = e\n     * @response : update textarea state var\n     * @author : Vinit\n     */\n    // const handleTextareaChange = (e) => {\n    //     setTextarea(e.target.value)\n    //} // \n    \n    useEffect(() => {\n\t  setCharacterCount(textarea.length);\n\t}, [textarea]);\n\t\n    const handleTextareaChange = (e) => {\n        const data = e.target.value.trim();\n\t   if (data === \"\") {\n\t          setTextarea(\"\");\n\t          setCharacterCount(0);\n\t        } else if (data.length > 500) {\n\t          e.preventDefault();\n\t          return;\n\t   } else {\n\t          setTextarea(e.target.value);\n\t          setCharacterCount(e.target.value.length);\n\t        }\n      }\n\n    /**\n     * Following function will check if user made any changes  in the existing job data\n     * @params = none\n     * @response : Boolean\n     * @author : Vinit\n     */\n    const checkIfDataChanged = () => {\n        if (softwareId === jobData.software.id && \n            subSoftwareName === jobData.subOption &&\n            textarea === jobData.issueDescription){\n                return false\n        }else{\n            return true\n        }\n    }\n\n    /**\n     * Following function will update the job object with the new information.\n     * @params = none\n     * @response : none\n     * @author : Vinit\n     */\n    const updateBtnHandler = async () => {\n        try {\n            console.log(\"Data to be updated update click\", {softwareId, subSoftwareName, textarea})\n            const dataChanged = checkIfDataChanged()\n            if(dataChanged){\n                console.log(\"My console to check textarea\", textarea.length)\n                \n                if(subSoftwareName === \"Select\"){\n                    openNotificationWithIcon('info', 'Info', \"Please select sub option\")\n                    return\n                }\n                if(textarea.length < 1 ){\n                    openNotificationWithIcon('info', 'Info', \"Please provide more details.\")\n                    return\n                }\n                \n                console.log(\"The data is changed\")\n                setShowSpinner(true)\n                if(!user){\n                    console.log(\"No user found at edit job modal\")\n                    const guestUserRes = await getGuestUser();\n                    console.log(\"guest user at edit job modal\", guestUserRes)\n                    localStorage.setItem(SECRET_KEY, guestUserRes.token.accessToken)\n                    const updateJobRes = await updateJobAsGuest(jobData.id,{software:softwareId, subOption:subSoftwareName, issueDescription:textarea})\n                    console.log(\"update job response at edit job modal\", updateJobRes)\n                    if(updateJobRes){\n                            console.log(\"tetch token removed from EditJobModal/index\")\n                            localStorage.removeItem(SECRET_KEY)\n                            // window.location.reload()\n                            setIsJobSummaryUpdate(true);\n                            setShowSpinner(false);\n                            setShowEditJobModal(false);  \n                    }else{\n                        setShowSpinner(false)\n                        openNotificationWithIcon('error', 'Error', \"Please try again.\")\n                    }\n                }else{\n                    console.log(\"user found at edit job modal\")\n                    const updateJobRes = await JobApi.updateJob(jobData.id,{software:softwareId, subOption:subSoftwareName, issueDescription:textarea})\n                    if(updateJobRes){\n                        // window.location.reload()\n                        setIsJobSummaryUpdate(true);\n                        setShowSpinner(false)\n                        setShowEditJobModal(false)  \n                    }else{\n                        setShowSpinner(false)\n                        openNotificationWithIcon('error', 'Error', \"Please try again.\")\n                    }\n                }\n            }else{\n                console.log(\"The data is not changed\")\n                setShowEditJobModal(false)    \n            }\n        } catch (error) {\n            console.log(\"Error occured in updateBtnHandler function\", error)\n        }\n    }\n\n    /**\n     * Following function will handle click on cancel button\n     * @params = none\n     * @response : none\n     * @author : Vinit\n     */\n    const cancelBtnHandler = () => {\n        setShowEditJobModal(false)\n        setSoftwareId(jobData.software.id)\n        setSubSoftwareName(jobData.subOption)\n        setTextarea(jobData.issueDescription)\n    }\n\n    return (<div className=\"edit-job-modal-outer-div\">\n        <Modal\n            className=\"\"\n            footer={null}\n            closable={false}\n            visible={showEditJobModal} \n            maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n            maskClosable={true}\n        >\n            <div className=\"edit-job-modal-inner-div\">\n                <div className=\"d-flex justify-content-center\">\n                    <SignUpHeading heading={\"Edit Job Summary\"} fontSize={\"20px\"} color={\"#01D4D5\"} boldText={true} />\n                </div>\n                <span className='softare-label' >I'm using:</span>\n                <SoftwareDropDown\n                    dropDownOptions={softwareList}\n                    onSoftwareSelection={onSoftwareSelection}\n                    value={ jobData.software.id }\n                    name={'softwares'}\n                    job={jobData}\n                    softwareId={softwareId}\n                />\n                <span className='softare-label' >and I need help with :</span>\n                <SoftwareDropDown \n                    dropDownOptions={currentSoftware?.sub_option ?  currentSoftware.sub_option : jobData?.software?.sub_option }\n                    onSubSoftwareSelection={onSubSoftwareSelection}\n                    name={`subsoftwares`}\n                    value ={ jobData.subOption }\n                    job={jobData}\n                    subSoftwareName={subSoftwareName}\n                />\n                <span className='softare-label' >More details :</span>\n                <textarea \n                   maxLength='500'\n                    type=\"text\"\n                    className=\"software-more-details-input\"\n                    value={textarea} \n                    onChange={handleTextareaChange}\n                />\n                <div style={{ width: \"100%\", maxWidth: \"600px\",textAlign:'end' }}>\n\t\t\t\t\t<span style={(`${count - characterCount}` == 0)  ? {color:\"red\"} : {color:\"\"}}> ({`${count - characterCount} character left`}) </span>\n\t\t\t\t</div>\n                <div className=\"edit-job-btn-div\">\n                    <BasicButton onClick={cancelBtnHandler} btnTitle={\"Cancel\"} height={\"60px\"} width={\"158px\"} background={\"#92A9B8\"} color={\"#fff\"} disable={showSpinner} />\n                    <BasicButton onClick={updateBtnHandler} btnTitle={\"Update\"} height={\"60px\"} width={\"158px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} disable={showSpinner} marginLeft={\"10px\"} />\n                </div>\n            </div>\n        </Modal>\n    </div>)\n}\n\nexport default EditJobModal",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\EditJobModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "JobSummary",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React, { useEffect, useState } from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\nimport SignUpHeading from \"../../../../../components/common/SignUpHeading\";\nimport { useJob } from '../../../../../context/jobContext';\nimport { useLocation } from 'react-router';\nimport * as JobApi from '../../../../../api/job.api';\nimport { useAuth } from '../../../../../context/authContext';\nimport { SECRET_KEY } from '../../../../../constants';\nimport Loader from '../../../../../components/Loader';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport EditJobModal from \"../EditJobModal\"\nimport * as SoftwareApi from '../../../../../api/software.api';\nimport { decideEstimatesToShowUsingLD } from \"utils\";\n\nconst JobSummary = ({jobInfo, user, showCCForm, currentTab}) => {\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const { getGuestUser } = useAuth();\n    const { fetchJobAsGuest,setJob } = useJob();\n    const [showLoader, setShowLoader] = useState(true)\n    const [jobData, setJobData] = useState(true)\n    const [calculatedPrices, setCalculatedPrices] = useState({})\n    const [softwareList, setSoftwareList] = useState([]);\n    const [showEditJobModal, setShowEditJobModal] = useState(false);\n    const [isEstimatesVisible , setIsEstimatesVisible] = useState(false)\n    const [isJobSummaryUpdate,setIsJobSummaryUpdate] = useState(false);\n    useEffect(()=>{\n        (async () => {\n            if(!user){\n                //Login temporarily as guest user to make backend requests\n\t\t\t\tconst guestUserRes = await getGuestUser();\n\t\t\t\tconsole.log(\"My console to check guest user\", guestUserRes)\n                //Fetch job data as guest user.\n\t\t\t\tconst fetchUserRes = await fetchJobAsGuest(jobIdFromUrl, guestUserRes.token.accessToken)\n\t\t\t\tconsole.log(\"My console to fetch job as guest user\", fetchUserRes)\n                setJob(fetchUserRes)\n                setCalculatedPrices(calculatePrice(fetchUserRes.software))\n                setJobData(fetchUserRes)\n                if(fetchUserRes?.guestJob){\n                    console.log(\"tetch token removed from component jobSummary index\")\n                    localStorage.removeItem(SECRET_KEY);\n                }\n                console.log(\"My con from job summary component if\", showCCForm)\n                setShowLoader(false)\n                const featureResponse = await decideEstimatesToShowUsingLD(guestUserRes?.user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n\t\t\t}else{\n                const jobRes = await JobApi.retrieveJob(jobIdFromUrl)\n                setJobData(jobRes)\n                setCalculatedPrices(calculatePrice(jobRes.software))\n                console.log(\"My con from job summary component else\", jobRes)\n                setShowLoader(false)\n            }\n            const res = await SoftwareApi.getSoftwareList();\n            if(res) {\n                console.log(\"software api response from job summary component\", res)\n                setSoftwareList(res.data)\n            }\n            if(user){\n                const featureResponse = await decideEstimatesToShowUsingLD(user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n            }\n\t\t})();\n    },[isJobSummaryUpdate])\n\n\n\n    const calculatePrice = (softwareData,hire_expert=false,forfreeMinutes=false)=>{\n\t\tlet initPriceToShow = 0;\n\t\tlet finalPriceToShow = 0;\n\t\ttry{\n\t\t\tlet price_per_six_min = softwareData.rate\n\t\t\tlet time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n\t\t\tlet time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\t\t\tlet main_price = ''\n\t\t\tif (hire_expert) {\n\t\t\t\tmain_price = softwareData.twoTierEstimatePrice\n\t\t\t} else {\n\t\t\t\tmain_price = softwareData.estimatedPrice\n\t\t\t}\n\t\t\tconsole.log(\"> main price >>>>>>>>> \",main_price)\n\t\t\tlet price1 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[0]) : 0)\n\t\t\tlet price2 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[1]) : 0)\n\n\t\t\tprice1 = (price1 ? price1 : price_per_six_min)\n\t\t\tprice2 = (price2 ? price2 : price_per_six_min)\n\t\t\tinitPriceToShow = forfreeMinutes ?(Math.ceil(time1 / 6)-1) * parseInt(price1) :Math.ceil(time1 / 6) * parseInt(price1)\n\t\t\tfinalPriceToShow = forfreeMinutes ? (Math.ceil(time2 / 6) - 1) * parseInt(price2) : Math.ceil(time2 / 6) * parseInt(price2)\n\n\t\t\tinitPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 0)\n\t\t\tfinalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 0)\n\t\t\t\n\t\t\tconsole.log(\"initPriceToShow >>>>>>>>>> \",initPriceToShow)\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"issue in calculating price :::: \",err)\n\t\t}\n\t\treturn {initPriceToShow:initPriceToShow,finalPriceToShow:finalPriceToShow}\n\t}\n\n    // const calculatedPrices = calculatePrice(job?.software)\n\n    const handleJobEdit = () => {\n        console.log(\"My console for job edit\")\n        setShowEditJobModal(true)\n        setIsJobSummaryUpdate(false);\n    }\n\n    if (showLoader) return <Loader height=\"100%\" />;\n\nreturn(<React.Fragment>\n        <div className=\"jobSummaryDiv\">\n            <Row className=\"mb-30\">\n                <Col className=\"d-flex align-items-center justify-content-between\">\n                    <SignUpHeading heading={\"Job Summary\"} fontSize={\"20px\"} color={\"#01D4D5\"} boldText={true} />\n                    <div className=\"edit-icon-div\" title=\"Update job summary\" onClick={handleJobEdit}>\n                        <FontAwesomeIcon className=\"editJobSummary\" icon={faPencilAlt} />\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Software:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    <span className=\"jobSummaryInfo\">{jobData?.software?.name}</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Area:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    <span className=\"jobSummaryInfo\">{jobData?.subOption}</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Details:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    <span className=\"jobSummaryInfo\">{jobData?.issueDescription}</span>\n                </Col>\n            </Row>\n            {isEstimatesVisible ? \n            <>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Estimated Wait Time:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    <span className=\"jobSummaryInfo\">{`${jobData?.software?.estimatedWait} min`}</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Most jobs like yours take between:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    <span className=\"jobSummaryInfo\">{`${jobData?.software?.estimatedTime} min`}</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-7\">\n                <Col>\n                    <span className=\"jobSummaryLabel\">Most jobs like yours cost between:</span>\n                </Col>\n            </Row>\n            <Row className=\"mb-30\">\n                <Col>\n                    {showCCForm ? \n                        <React.Fragment key=\"card\">\n                            <span className=\"strike-through\">\n                                {\"$\"+calculatedPrices.initPriceToShow+\"-$\"+calculatedPrices.finalPriceToShow + \" \"}\n                            </span>&nbsp;\n                            <span className=\"jobSummaryInfo\">\n                                {\"$\"+(Number(calculatedPrices.initPriceToShow - jobData?.software?.rate) + \"-$\"+(Number(calculatedPrices.finalPriceToShow)-jobData?.software?.rate) ) }\n                            </span>\n                        </React.Fragment>\n                        :\n                        <React.Fragment key=\"price\">\n                            <span className=\"jobSummaryInfo\">\n                                {user && \"$\"+calculatedPrices.initPriceToShow+\"-$\"+calculatedPrices.finalPriceToShow }\n                            </span>\n                            <span className=\"strike-through\">\n                                {!user && \"$\"+calculatedPrices.initPriceToShow+\"-$\"+calculatedPrices.finalPriceToShow + \" \"}\n                            </span>&nbsp;\n                            <span className=\"jobSummaryInfo\">\n                                {!user && \"$\"+(Number(calculatedPrices.initPriceToShow - jobData?.software?.rate) + \"-$\"+(Number(calculatedPrices.finalPriceToShow)-jobData?.software?.rate) ) }\n                            </span>\n                        </React.Fragment>\n                    }\n\n                </Col>\n            </Row> \n            </>\n            : null }\n\n        </div>\n    {jobIdFromUrl &&\n        <EditJobModal softwareList={softwareList} jobData={jobData} showEditJobModal={showEditJobModal} setShowEditJobModal={setShowEditJobModal} user={user} setIsJobSummaryUpdate={setIsJobSummaryUpdate}/>\n    }     \n   </React.Fragment>)\n}\n\nexport default JobSummary",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\JobSummary\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "KeepSearchingModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React, { useState, useEffect } from \"react\"\nimport { Modal } from 'antd';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { ReactSVG } from \"react-svg\";\nimport TimeDropDown from \"../TimeDropDown\";\nimport { useJob } from '../../../../../context/jobContext';\nimport { useSocket } from '../../../../../context/socketContext';\nimport * as TwilioApi from '../../../../../api/twilioChat.api';\nimport { AiOutlineMinus } from \"react-icons/ai\";\nconst KeepSearchingModal = ({ showKeepSearchingModal, setShowKeepSearchingModal, setShowScheduleForLaterModal, jobInfo, setKeepSearchingFor, keepSearchingFor, useTimer, setUseTimer, job, setSearchTimesUp ,setSameTechIdAvailable,sameTechIdAvailable,sameTechIdAvailableSched, showModalFooterOffPeak}) => {\n\n    // let smiley = require(\"../../../../../assets/images/frown.svg\")\n    const { updateJob } = useJob();\n    const { socket } = useSocket();\n\n    const handleScheduleForLaterClick = () => {\n        setShowScheduleForLaterModal(true);\n        setShowKeepSearchingModal(false);\n        localStorage.removeItem('postAgainJobModal')\n    }\n\n    const hrArray = [\"1 hours\", \"2 hours\", \"3 hours\", \"4 hours\", \"5 hours\", \"6 hours\"];\n\n    const handleGoButtonClick = async () => {\n        if(job){\n        // await TwilioApi.updateTwilioConversation(job?.twilio_chat_service?.sid)\n        updateJob(job.id, { tech_search_time: Number(keepSearchingFor.substring(0, 2)) * 3600000, tech_search_start_at: new Date(), 'post_again_reference_technician':'',twilio_chat_service:undefined})\n        setUseTimer(Number(keepSearchingFor.substring(0, 2)) * 3600000)\n        setShowKeepSearchingModal(false)\n        setSearchTimesUp(false)\n        socket.emit('search-for-tech', {\n            jobData: job,\n            searchSameTech: false,\n            technicianId: false,\n            keepSearching: true\n            // posted: true,\n            // status: \"Pending\",\n            // postedTime: new Date(),\n            // useTimer: useTimer\n        });\n    }\n    }\n    return (<div className=\"keep-searching-modal-outer-div\" >\n        <Modal\n            className=\"\"\n            footer={null}\n            closable={false}\n            visible={showKeepSearchingModal}\n            maskStyle={{ backgroundColor: \"#DCE6EDCF\" }}\n            maskClosable={true}\n            width={615}\n        >\n            <div className=\"d-flex justify-content-center align-items-center flex-column keep-searching-modal\">\n            {sameTechIdAvailable ? (\n                <span className=\"findSameTech\">\n                Previous technician you are trying to reach is currently not available.\n                Either create schedule job with him for later or choose keep searching for another technicians.\n                </span>\n            ) : sameTechIdAvailableSched ? (\n                <span className=\"findSameTech\">\n                Please schedule a call or search for another technician using following option.\n                </span>\n            ) :   (\n                <>\n                {/* <ReactSVG src={smiley} />\n                <div className=\"keep-searching-modal-heading mt-27\">\n                    Sorry, we\u2019re currently experiencing\n                </div>\n                <div className=\"keep-searching-modal-heading\">\n                    a higher-than-average demand\n                </div>\n                <div className=\"keep-searching-modal-heading-2 mt-27\">\n                    Looks like you\u2019re not the only one\n                </div>\n                <div className=\"keep-searching-modal-heading-2 mb-50\">\n                    struggling with {job?.software?.name}.\n                </div> */}\n                <div style={{fontSize:'48px'}}>\ud83d\ude0a</div>\n                <div className=\"keep-searching-modal-heading mt-2 text-center\">\n                    We're happy  to keep searching for you!\n                </div>\n                <div className=\"keep-searching-modal-heading-1 my-4\">\n                    <div>We can keep searching if you need help now.</div>\n                   <div> Otherwise,please schedule a time during normal working hours.</div>\n                </div>\n                <div className=\"keep-searching-modal-heading-2 my-3\">\n                    What would you like to do? \n                </div>\n                </>\n            )}\n\n                <div className=\"mb-32\">\n                    <BasicButton onClick={handleScheduleForLaterClick} btnTitle={\"Schedule for later\"} height={\"60px\"} width={\"277px\"} background={\"#01D4D5\"} color={\"#fff\"} btnIcon={\"schedule\"} faFontSize={\"16px\"} />\n                </div>\n                <div className=\"text-fr-or mb-30\">OR</div>\n                \n                <>\n                {/* <div className=\"keep-searching-for-text\">Keep Searching for:</div> */}\n                <div className=\"keep-searching-modal-heading-2 my-3\">\n                Keep Searching for:\n                </div>\n                <div className=\"d-flex justify-content-center align-items-center\">\n                    <div className=\"keep-searching-drop-down d-flex justify-content-around align-items-center\">\n                        <TimeDropDown\n                            dropdownValues={hrArray}\n                            name={\"hrArray\"}\n                            setKeepSearchingFor={setKeepSearchingFor}\n                            keepSearchingFor={keepSearchingFor}\n                        />\n                    </div>\n                    <BasicButton onClick={handleGoButtonClick} btnTitle={\"Go\"} height={\"60px\"} width={\"67px\"} color={\"#293742\"} background={\"#fff\"} border={\"solid 1px #01D4D5\"} />\n                </div>\n                \n                    <div className=\"keep-searching-modal-heading-1 my-4\">\n                        {showModalFooterOffPeak &&\n                            <>\n                            <div className=\"d-flex justify-content-center flex-row align-items-center\">\n                            <div style={{fontSize:'30px'}}>\ud83e\udd17</div>\n                                <span className=\"ml-2\"> FYI <AiOutlineMinus/> Our Geeks often come to rescue</span>\n                            </div>\n                            <div className=\"\">\n                                customers during their time off.<span className=\"font-weight-bolder\">But please remain </span>\n                            </div>\n                            <div className=\"\">\n                            <span className=\"font-weight-bolder\">near your computer</span>. There's an automatic\n                            </div>\n                            <div className=\"\">\n                            \"no-show\" charge of $24.99\n                            </div>\n                            </>\n                        }\n                    </div>\n                </> \n\n            </div>\n        </Modal>\n    </div>)\n}\n\nexport default KeepSearchingModal\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\KeepSearchingModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "PendingJobStatusModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from \"react\"\nimport {Modal} from 'antd';\nimport { Button } from 'react-bootstrap';\n\nconst PendingJobStatusModal = ({showPendingJobModal,setShowPendingJobModal,viewPendingJob,findTechnician,lastPendingSoftware}) => {\n    const handleCancel = () => {\n        setShowPendingJobModal(false);\n      };\n    return<Modal\n    style={{ top: 40 }}\n    closable={true}\n    onCancel={handleCancel}\n    visible={showPendingJobModal} \n    maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n    maskClosable={true}\n    width={800}\n    bodyStyle={{height: 130}}\n    footer={\n        [\n          <Button\n            className=\"btn app-btn app-btn-light-blue modal-footer-btn\"\n            onClick={findTechnician}\n          >\n            <span></span>Create New Job\n          </Button>,\n\n          <Button\n              className=\"btn app-btn job-accept-btn modal-footer-btn\"\n              onClick={viewPendingJob}\n          >\n            <span></span>View Pending Job\n          </Button>,\n\n        ]}\n>\n   <div className=\"\">\n      <span className=\"divsize\">We are still looking for technician of your existing job of <b>{lastPendingSoftware}</b>. Are you sure you want to create new job post?</span>\n    </div> \n</Modal>\n}\n\nexport default PendingJobStatusModal;",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\PendingJobStatusModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "ProgressBar",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import NumberInRounddiv from \"components/common/NumberInRoundDiv\";\nimport React from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\n\nconst ProgessBar = () => {\n    return(<React.Fragment key=\"progress\">\n        <Row className=\"mt-15\">\n            <Col className=\"d-flex pl-0 pr-0\">\n                <div className=\"progressBarLoaded\"></div>\n                <div className=\"progressBarComplete\"></div>\n            </Col>\n        </Row>\n        <Row>\n            <Col className=\"pl-0 pr-0 pt-10 d-flex justify-content-between align-items-center\">\n                <NumberInRounddiv title={\"1\"} fontSize={\"12px\"} showCheck={true} height={\"28px\"} width={\"28px\"} backgroundColor={\"#01D4D5\"} borderColor={\"#01D4D5\"} faColor={\"#fff\"} />\n                <NumberInRounddiv title={\"2\"} fontSize={\"12px\"} showCheck={false} height={\"28px\"} width={\"28px\"} borderColor={\"#01D4D5\"} color={\"#293742\"} fontWeight={\"600\"} />\n                <NumberInRounddiv title={\"3\"} fontSize={\"12px\"} showCheck={false} height={\"28px\"} width={\"28px\"} borderColor={\"#DCE6ED\"} color={\"#708390\"} fontWeight={\"300\"} />\n                <NumberInRounddiv title={\"4\"} fontSize={\"12px\"} showCheck={false} height={\"28px\"} width={\"28px\"} borderColor={\"#DCE6ED\"} color={\"#708390\"} fontWeight={\"300\"} />\n            </Col>\n        </Row>\n        <Row>\n            <Col className=\"pl-0 pr-0 pt-10 d-flex justify-content-between align-items-start\">\n                <div className=\"progressBarText\">\n                    <div><span>Job</span></div>\n                    <div><span>confirmed</span></div>\n                </div>\n                <div className=\"progressBarText\">\n                    <div><span>Searching for</span></div>\n                    <div className=\"text-center\"><span>Technician</span></div>\n                </div>\n                <div className=\"progressBarText\">\n                    <div><span>Technician</span></div>\n                    <div className=\"text-center\"><span>Found</span></div>\n                </div>\n                <div className=\"progressBarText\">\n                    <span>Connected!</span>\n                </div>\n            </Col>\n        </Row>\n    </React.Fragment>)\n}\n\nexport default ProgessBar",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\ProgressBar\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "ScheduleForLater",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React,{useEffect,useState} from \"react\";\nimport Calendar from 'react-calendar';\nimport CheckBox from \"../CheckBox\";\nimport TimeDropDown from \"../TimeDropDown\";\nimport { useDetectClickOutside } from 'react-detect-click-outside';\nconst ScheduleForLater = ({scheduleJobTime, setScheduleJobTime, showSpinner}) =>{\n    const [value, setValue] = useState(scheduleJobTime.date);\n    const [compareValue, setCompareValue] = useState();\n    const [calendarValue, setCalendarValue] = useState();\n    const [showCalendar,setShowCalendar] = useState(false)\n\n    const handelCalender = (e)=>{\n        setValue(e)\n        setScheduleJobTime((prevState => ({...prevState, date:e  })))\n    }\n\n    const ref = useDetectClickOutside({onTriggered: () => {if(showCalendar) setShowCalendar(false)}}); \n    \n    let todayDate = new Date();\n    let todaydd = `${todayDate.getFullYear()}${todayDate.getMonth()}${todayDate.getDate()}`;\n\n    useEffect(() => {       \n        let todayCalenderValue = `${todayDate.getFullYear()}${value.getMonth()}${value.getDate()}`;\n        setCompareValue(todayCalenderValue)\n        setCalendarValue(`${value.toString().split(\" \")[1]} ${value.toString().split(\" \")[2]}`)\n    }, [value])\n\n    let  minArray = [\"00\",\"15\",\"30\",\"45\"];\n\n    let hourArray = [];\n\n    for(let i=1; i<=12;i++){\n\n        hourArray.push(String(i));\n    } \n\n    return (<>\n        \n        <div className='d-flex justify-content-center'>\n            <div className='flex-wrap' style={{width:\"100%\",maxWidth:\"600px\"}}>\n                <div className='d-flex justify-content-start flex-wrap mb-20'>\n                    <div>\n                        <div>\n                            <label className='date-label-div '>Date:</label>\n                        </div>\n                        <div>\n                            <div className={`${!showCalendar === false ? 'today-div-true d-flex justify-content-start align-items-center' : 'today-div d-flex justify-content-start align-items-center' }`}   onClick={()=>{setShowCalendar(!showCalendar)}}>\n                                    <span className=\"date-value \">\n                                        {compareValue === todaydd ? \"Today\" : calendarValue}\n                                    </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-flex mt-10-max-width-600 mb-30-max-width-600\">\n                        <div>\n                            <div>\n                                <label className='date-label-div '>Time:</label>\n                            </div>\n                            <div className=\"time-div d-flex justify-content-center align-items-center\">\n                                <TimeDropDown \n                                    dropdownValues={hourArray}\n                                    name={\"hour\"}\n                                    scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    showSpinner = {showSpinner} \n                                    />\n                                <span className=\"colon-dropdown\"> :</span>\n                                <TimeDropDown\n                                    dropdownValues={minArray}\n                                    name={\"minutes\"}\n                                    scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    showSpinner = {showSpinner} \n                                    />\n                            </div>\n                        </div>\n                        <div className=\"check-box\">\n                            <CheckBox scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    showSpinner = {showSpinner} \n                            />\n                        </div>\n                    </div>\n\n                </div>  \n                 \n                    {showCalendar && \n\n\n                        <div className=\"calendar-container\" ref={ref}>\n                            <Calendar\n                                tileDisabled={({date}) => [0, 6].includes(date.getDay())}\n                                tileClassName={({date, view}) => {\n                                    if (view === 'month' && ![0, 6].includes(date.getDay())) {\n                                      return 'allowed-date';\n                                    }\n                                    return 'disabled-date';\n                                  }}\n                                onChange={(e)=>{handelCalender(e)}}\n                                value={value}\n                                maxDate={new Date(new Date().setMonth(new Date().getMonth()+2))}\n                                minDate={new Date()}\n                                />\n                         </div>\n                    }\n                </div>\n        </div>\n    </>)\n\n}\n\nexport default ScheduleForLater",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\ScheduleForLater\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "ScheduleForLaterModal",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React, { useState} from \"react\"\nimport {Modal} from 'antd';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport ScheduleForLater from \"../ScheduleForLater\";\nimport { useJob } from '../../../../../context/jobContext';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport { klaviyoTrack } from '../../../../../api/typeService.api';\nimport mixpanel from 'mixpanel-browser';\nimport { useNotifications } from '../../../../../context/notificationContext';\nimport { useSocket } from '../../../../../context/socketContext';  \nimport * as JobApi from '../../../../../api/job.api';\nimport { getPrimaryTime,isWorkingHours} from \"../../../../../utils/index\";\nconst ScheduleForLaterModal = ({showScheduleForLaterModal, setShowScheduleForLaterModal,scheduleJobTime,setScheduleJobTime ,keepForSearching,setKeepForSearching, user, jobInfo, job, isDashboardSide,setShowKeepSearchingModal, searchTimesUp}) => {\n\n    const { updateJob } = useJob();\n    const { createNotification, fetchNotifications } = useNotifications();\n    const { socket } = useSocket();\n\tconst [showSpinner, setShowSpinner] = useState(false)\n\tconst [disableButtonClick , setDisableButtonClick] = useState(false)\n    // const handleConfirmButton = () => {\n    //     setShowScheduleForLaterModal(false)\n    // }\n\n\t/**\n\t * emit send-schedule-alerts socket and create / fetch notification customer notifications\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\t const emitSocketCreateFetchNotification = async (jobStats) =>{\n\t\ttry{\n\n\t\t\tlet timeToSend = getPrimaryTime(scheduleJobTime)\n\t\t\tconsole.log(\"send-schedule-alerts :::::::::::\")\n\t\t\t//Notification for customer\n\t\t\tconst notificationData = {\n\t\t\t\tuser: user.id,\n\t\t\t\tjob: jobStats.id,\n\t\t\t\tread: false,\n\t\t\t\tactionable: false,\n\t\t\t\ttitle: 'We are finding a technician for you. We will inform you when we find the technician',\n\t\t\t\ttype: 'Scheduled Job',\n\t\t\t};\n\t\t\tconsole.log(\"notificationData ::::::::\", notificationData)\n\t\t\tawait createNotification(notificationData);\n\t\t\tawait fetchNotifications({ user: user.id });\n\n\t\t\t// call send-schedule-alerts socket from backend.\n\t\t\t// It will find available techs and send alerts by sms/email/notification\n\t\t\tsocket.emit('search-for-tech', {\n\t\t\t\tjobId: jobStats.id,\n\t\t\t\tcustomerTimezone: user.timezone,\n\t\t\t\tjobData: jobStats,\n\t\t\t\tprimaryTime: timeToSend,\n\t\t\t\tphoneNumber:user.customer.phoneNumber,\n\t\t\t\tcustomerName:user.firstName,\n\t\t\t\tcustomerEmail:user.email,\n\t\t\t\ttechnicianId:(job && job?.post_again_reference_technician ? job.post_again_reference_technician : false)\n\t\t\t});\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n\t\t\tconsole.log('There is catch error while create/fetch notification  :::: '+ err.message)\n\t\t}\n\t}\n\tconst scheduleForLater = async (e) => {\n\t\te.preventDefault()\n\t\tconst isWithinWorkingHours = isWorkingHours(scheduleJobTime);\n\t\tif (!isWithinWorkingHours) {\n\t\t\topenNotificationWithIcon('error', 'Error', \"Our techs are mostly available between 9am-9pm EST Mon-Fri. Please schedule a good time during these business hours. \");\n\t\t\treturn;\n\t\t}\n\t\tsetDisableButtonClick(true)\n\t\tsetShowSpinner(true)\n\t    const scheduleJobData = {};\n\t\tlet scheduleDetails = {\n\t\t\t'primaryTimeAvailable':true,\n\t\t\t'primaryTimeExpiredAt':null,\n\t\t\t'secondaryTimeAvailable':false,\n\t\t\t'secondaryTimeExpiredAt':null,\n\t\t\t'scheduleExpired':false,\n\t\t\t'scheduleExpiredAt':null\n\t\t}\n        const klaviyoData = {\n            email: user.email,\n            event: 'Scheduled Job Created from tech searching page',\n            properties: {\n                $first_name: user.firstName,\n                $last_name: user.lastName,\n            },\n        };\n        await klaviyoTrack(klaviyoData);\n\n        console.log('job changed to schedule>>>>>>>>>>>>>>>>>>>>>>>>', job.id);\n        \n\t\tlet scheduleTimeNew = getPrimaryTime(scheduleJobTime);\n\t\tconsole.log(\"time please\",scheduleTimeNew)\n\t\tconst hourDifferenceFromNow = scheduleTimeNew - new Date().getTime()\n\t\tif(hourDifferenceFromNow < 3600000){\n\t\t\topenNotificationWithIcon(\"error\", \"Error\", \"Please select time atleast 1 hour from now!\")\n\t\t\tsetShowSpinner(false)\n\t\t\tsetDisableButtonClick(false)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tsetScheduleJobTime((prevState => ({...prevState, date:scheduleTimeNew  })))\n\n\t\tscheduleJobData.primarySchedule = scheduleTimeNew;\n\t\tscheduleJobData.status = \"Scheduled\";\n\t\tscheduleJobData.scheduleDetails = scheduleDetails;\n        scheduleJobData.scheduleDetails.scheduleExpiredAt = new Date(scheduleTimeNew - 1200000)\n\t\t// updateJob(job.id, {status:\"Scheduled\", primarySchedule:scheduleTimeNew})\n\t\t// updateJob(job.id, scheduleJobData)\n\t\tconst updatedJob = await JobApi.updateJob(job.id,scheduleJobData)\n\n        await emitSocketCreateFetchNotification(updatedJob)\n        setShowScheduleForLaterModal(false)\n\t\tsetTimeout(() => {\n\t\t\twindow.location.href = isDashboardSide ? '/dashboard' :'/dashboard?&scheduleJobId='+job.id;\n\t\t}, 2000);\n\t}\n\t\n    const handleClickNo =()=>{\n    \tsetShowScheduleForLaterModal(false) \n    \tif(searchTimesUp) setShowKeepSearchingModal(true)\n    }\n\n    return(<div className=\"schedule-for-later-modal-outer-div\">\n        <Modal\n            className=\"schedule-modal\"\n            footer={null}\n            closable={false}\n            visible={showScheduleForLaterModal} \n            maskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n            maskClosable={false}\n            width={766}\n\t\t\tonCancel={()=>{setShowScheduleForLaterModal(false)\n\t\t\t\t\t\t  if(searchTimesUp) setShowKeepSearchingModal(true) //open up keep searching modal if times up\n\t\t\t\t\t  }}\n\t\t\twrapClassName=\"vertical-center-modal\"\n        >\n           <div className=\"d-flex flex-column justify-content-center align-items-center schedule-for-later-modal\">\n\t\t\t\t<div className=\"mt-3 text-center  text-wrap\" style={{ fontSize: \"16px\" }}>\n\t\t\t\t\tPlease note, if you don't show up to the call on scheduled time after a Geek accepted the call\n\t\t\t\t</div>\n\t\t\t\t<div className=\"mb-3 text-center text-wrap\" style={{ fontSize: \"16px\" }}>\n\t\t\t\t\ta fee of $24.99 will be applied. Are you sure you want to continue?\n\t\t\t\t</div>\n\t\t\t\t<div className=\"schedule-for-later-modal-heading mt-3\">Schedule for later</div>\n\t\t\t\t<ScheduleForLater\n\t\t\t\t\tsetScheduleJobTime={setScheduleJobTime}\n\t\t\t\t\tscheduleJobTime={scheduleJobTime}\n\t\t\t\t\tsetKeepForSearching={setKeepForSearching}\n\t\t\t\t\tkeepForSearching={keepForSearching}\n\t\t\t\t/>\n\t\t\t</div>\n\n                <div className=\"mb-75 mt-45 d-flex justify-content-around\">\n\t\t\t\t\t<BasicButton  onClick={handleClickNo} btnTitle={\"No\"} height={\"60px\"} width={\"138px\"} background={\"rgb(151 171 182)\"} color={\"#fff\"} />\n                    <BasicButton disable={disableButtonClick} onClick={scheduleForLater} btnTitle={\"Yes\"} height={\"60px\"} width={\"138px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} />\n                </div>\n        </Modal>\n    </div>)\n}\n\nexport default ScheduleForLaterModal",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\ScheduleForLaterModal\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "SignIn",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import NewInput from \"components/common/Input/NewInput\";\nimport React, { useEffect, useState } from \"react\"\nimport {Row, Col} from \"react-bootstrap\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { openNotificationWithIcon } from \"utils\";\nimport * as AuthApi from '../../../../../api/auth.api';\nimport * as CustomerApi from '../../../../../api/customers.api';\nimport { isLiveUser,authorizeCard } from '../../../../../utils';\nimport mixpanel from 'mixpanel-browser';\nimport { useJob } from '../../../../../context/jobContext';\nimport PasswordInput from \"../../../../../components/AuthComponents/PasswordInput\";\nimport { useNotifications } from '../../../../../context/notificationContext';\nimport { useSocket } from '../../../../../context/socketContext';\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { Modal } from 'antd';\nimport { useHistory, useLocation } from 'react-router';\nimport * as JobApi from '../../../../../api/job.api';\nimport * as UserApi from '../../../../../api/users.api';\n// import { faSleigh } from \"@fortawesome/free-solid-svg-icons\";\nimport  {INACTIVE_ACCOUNT_STATUS_MSG} from '../../../../../constants';\nconst SignIn = ({setUserSignedIn, setShowCCForm, setUser, setToken, user, setJobFlowStepNumber, jobFlowStepsArray, job, isScheduleJob, guestJobId, setSignUpTabDisabled}) => {\n    const [loginCred, setLoginCred] = useState({email:\"\", password:\"\"})\n    // const emailRegularExp = /^[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    const [showSpinner, setShowSpinner] = useState(false)\n    let liveUser = isLiveUser(user)\n    const { updateJob,fetchJob } = useJob();\n    const { createNotification, fetchNotifications } = useNotifications();\n    const { socket } = useSocket();\n    const history = useHistory();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    useEffect(()=>{\n        (async () => {\n            if(jobIdFromUrl){\n\t\t\t\tconsole.log(\"My console from job summary\", technicianId)\n\t\t\t\t// fetchJob(jobIdFromUrl)\n\t\t\t}\n        })();\n    },[])\n\n    const onInputChange = (e) => {\n        const {name, value} = e.target\n        setLoginCred(prevState => ({...prevState,[name]:value.trim()}) )\n    }\n\n    /**\n\t* mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n\t* @author : Ridhima Dhir\n\t*/\n\tconst confirmModaloFMobileTabletJobPosting = async (message = '') => {\n\t\tif(user && user.email){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Job created from mobile or tablet')\n\t\t}\n\t\tModal.confirm({\n\t\t\ttitle: \"To better assist you please join from your computer.\",\n\t\t\tcontent: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n\t\t\tokText: 'Ok',\n\t\t\tcancelButtonProps : { style: { display: 'none' } },\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\thistory.push(\"/\")\n\t\t\t},\n\t\t});\n\t}\n\n    /**\n\t* send email with job link for desktop\n\t* @params : job\n\t* @author : Ridhima Dhir\n\t*/\n\tconst emailOFMobileTabletJobPosting = async (jobData) => {\n\t\tsocket.emit('mobile_tablet_job_post_email', jobData);\n\t}\n\n    const checkCustomerHaveCard = async (user, customerTypeValid) => {\n        try {\n\n            if (user && !user?.activeStatus) {\n                openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_STATUS_MSG);\n                const timer = setTimeout(() => { history.push('/dashboard') }, 2000);\n                return () => clearTimeout(timer);\n            }\n            if (user && user.customer) {\n                mixpanel.identify(user.email);\n                const ownerId = user?.ownerId;\n                console.log('owner iiddddd :::::::', ownerId)\n                let ownerStripeId = '';\n                if (ownerId) {\n                    const ownerUserDetails = await UserApi.getUserById(ownerId)\n                    console.log('ownerUserDetails ::::', ownerUserDetails)\n                    if (ownerUserDetails?.customer?.stripe_id) {\n                        ownerStripeId = ownerUserDetails?.customer?.stripe_id\n                    } else {\n                        openNotificationWithIcon(\"info\", \"Info\", `Please contact your organization owner to add card to proceed with this job!`)\n                        history.push(\"/\")\n                        return\n                    }\n                    console.log('ownerStripeId:::::::::::::::', ownerStripeId)\n\n                }\n\n                let customer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n                    user: user,\n                    liveUser: liveUser\n                });\n                if (customer_info.has_card_or_subscription === false && customerTypeValid) {\n                    // mixpanel code//\t\t\t\t\t\n                    mixpanel.track('Customer - Ask Credit Card');\n                    mixpanel.people.set({\n                        $first_name: user.firstName,\n                        $last_name: user.lastName,\n                    });\n                    // mixpanel code//\n                    // setShowCCForm(true)\n                    window.location.href = `/customer/profile-setup?page=add-card&jobId=${jobIdFromUrl}`\n\n                } else {\n                    /*<<<<<<< StripeHoldImplementation-GKF-123\n                                        if(isMobile || isTablet){\n                                            await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                                            await emailOFMobileTabletJobPosting(job)\n                                        }else{   \n                                            // let preauthorize = await authorizeCard(user,job)\n                                            let preauthorize =  await CustomerApi.holdChargeFromCustomer({ 'stripe_id': user?.customer?.stripe_id, \n                                            'liveUser':(user?.customer?.customerType && user?.customer?.customerType === 'live' ? true : false), \"jobId\" : job?.id })\n                                            console.log(\"My console for preaut\", preauthorize)\n                                            if(preauthorize.status === \"Successful\"){\n                                                mixpanel.track('Customer - Preauthorize successfully',{jobId:job.id});\n                                                if(localStorage.getItem(\"isScheduleJob\")){\n                                                    localStorage.removeItem(\"isScheduleJob\")\n                                                    console.log(\"inside preauthorize schedule if\")\n                                                    await updateJob(jobIdFromUrl, {status:\"Scheduled\", customer:user.customer.id, guestJob:false,cardPreAuthorization: true })\n                                                    // createUpdateJob(\"Scheduled\")\n                                                    await emitSocketCreateFetchNotification(job, user)\n                                                    \n                                                    setTimeout(() => {\n                                                        window.location.href = '/dashboard?&scheduleJobId='+jobIdFromUrl;\n                                                    }, 500);\n                                                    setShowSpinner(false)\n                                                }else{\n                    =======*/\n                    //let preauthorize = await authorizeCard(user,job)\n                    // This condition will first check whether a user join from mobile or tablet. If so then don't hold any money.\n                    // if ((isMobile || isTablet) && localStorage.getItem(\"isScheduleJob\") !== 'true') {\n                    //     let paidJobs = await JobApi.getTotalJobs({ \"customer\": user?.customer?.id })\n                    //     if (paidJobs >= 1) {\n                    //         await JobApi.updateJob(jobIdFromUrl, { isReturningCustomer: true })\n                    //     }\n                    //     await JobApi.updateJob(jobIdFromUrl, {\n                    //         customer: user.customer.id,\n                    //         guestJob: false,\n                    //         cardPreAuthorization: false,\n                    //     }).then(async () => {\n                    //         await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                    //         await emailOFMobileTabletJobPosting(job)\n                    //     });\n                    // } else {\n                        let paidJobs = await JobApi.getTotalJobs({ \"customer\": user?.customer?.id })\n                        if (paidJobs >= 1) {\n                            await JobApi.updateJob(jobIdFromUrl, { isReturningCustomer: true })\n                        }\n                        const stripeId = user?.ownerId ? ownerStripeId : user?.customer?.stripe_id;\n                        let preauthorize = await CustomerApi.holdChargeFromCustomer({\n                            'stripe_id': stripeId,\n                            'liveUser': (user?.customer?.customerType && user?.customer?.customerType === 'live' ? true : false), \"jobId\": jobIdFromUrl\n                        })\n                        console.log(\"My console for preaut\", preauthorize)\n                        if (preauthorize.status === \"Successful\") {\n                            mixpanel.track('Customer - Preauthorize successfully', { jobId: jobIdFromUrl });\n                            if (localStorage.getItem(\"isScheduleJob\")) {\n                                localStorage.removeItem(\"isScheduleJob\")\n                                console.log(\"inside preauthorize schedule if\")\n                                const updatedJob = await JobApi.updateJob(jobIdFromUrl, {\n                                    status: \"Scheduled\",\n                                    customer: user.customer.id,\n                                    guestJob: false,\n                                    cardPreAuthorization: true,\n                                })\n                                // createUpdateJob(\"Scheduled\")\n                                await emitSocketCreateFetchNotification(updatedJob, user)\n\n                                setTimeout(() => {\n                                    window.location.href = '/dashboard?&scheduleJobId=' + jobIdFromUrl;\n                                }, 500);\n                                setShowSpinner(false)\n                            } else {\n\n                                // if (isMobile || isTablet) {\n\n                                //     await JobApi.updateJob(jobIdFromUrl, {\n                                //         customer: user.customer.id,\n                                //         guestJob: false,\n                                //         cardPreAuthorization: true,\n                                //     }).then(async () => {\n                                //         await confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n                                //         await emailOFMobileTabletJobPosting(job)\n                                //     })\n                                // } else {\n                                    if (technicianId) {\n                                        await JobApi.updateJob(jobIdFromUrl, {\n                                            status: \"Pending\", customer: user.customer.id,\n                                            guestJob: false,\n                                            cardPreAuthorization: true,\n                                            tech_search_time: 300000,\n                                            tech_search_start_at: new Date()\n                                        }).then((testingRes) => {\n                                            console.log(\"window.location.href from SignIn\", testingRes)\n                                            window.location.href = `/customer/profile-setup?page=tech-search&jobId=${jobIdFromUrl}`\n                                        })\n                                    } else {\n                                        console.log(\"inside preauthorize ASAP else\")\n                                        await JobApi.updateJob(jobIdFromUrl, {\n                                            status: \"Pending\",\n                                            customer: user.customer.id,\n                                            guestJob: false,\n                                            cardPreAuthorization: true,\n                                            tech_search_start_at: new Date(),\n                                        }).then((testingRes) => {\n                                            console.log(\"window.location.href from SignIn\", testingRes)\n                                            window.location.href = `/customer/profile-setup?page=tech-search&jobId=${jobIdFromUrl}`\n                                        })\n                                    }\n                                // }\n                                //await updateJob(job.id, {status:\"Pending\", customer:user.customer.id, guestJob:false,cardPreAuthorization: true })\n                                // createUpdateJob(\"Pending\")\n                                // setJobFlowStepNumber(jobFlowStepsArray[\"helpIsOnTheWay\"])\n                                //window.location.href= `/customer/profile-setup?id=${job.id}`\n                                //setShowSpinner(false)\n                            }\n                        } else {\n                            let mixpanelData = {}\n                            if (job && job.id) {\n                                mixpanelData = { jobId: job.id }\n                            }\n                            mixpanel.track('Customer - Preauthorize Failed', mixpanelData);\n                            if (job && job.id && job.guestJob && user && user.customer) {\n                                await updateJob(job.id, { customer: user.customer.id, guestJob: false })\n                            }\n                            let timeOutDuration = 2000;\n                            if (preauthorize?.response?.decline_code === \"invalid_account\" || preauthorize?.message.includes('Invalid account')) {\n                                timeOutDuration = 4000;\n                                openNotificationWithIcon('error', 'Error', 'Unable to authorize your existing credit card. Please add new credit card from Settings -> Card Details.')\n                            } else {\n                                openNotificationWithIcon('error', 'Error', preauthorize.message)\n                            }\n\n                            setTimeout(() => {\n                                window.location.href = '/dashboard'\n                            }, timeOutDuration);\n                        }\n                    // }\n                }\n            }\n        } catch (err) {\n            console.log(\"error in checkForCard\", err)\n        }\n    }\n\n\n  \n    \n    /**\n\t * Following function is to login user.\n\t * @author : Vinit Verma\n     * @date : 02-01-2023\n\t */\n\n    const handleNextButton = async () => {\n        setShowSpinner(true)\n        // if(!emailRegularExp.test(String(loginCred.email))){\n        //     setShowSpinner(false)\n        //     openNotificationWithIcon(\"error\", \"Info\", \"Invalid Email Format!\" )\n        //     return\n        // }\n\n        const loginResponse = await AuthApi.login(loginCred)\n        console.log(\"My console loginResponse\", loginResponse)\n        if(loginResponse && loginResponse.success){\n            openNotificationWithIcon(\"success\", \"Success\", \"User logged in successfully!\")\n            setSignUpTabDisabled(true)\n            setToken(loginResponse.token.accessToken)\n            setUser(loginResponse.user)\n            setUserSignedIn(true)\n            if(loginResponse?.user?.userType === 'customer'){\n                const customerTypeValid = (loginResponse.user.customer.customerType ? loginResponse.user.customer.customerType !== 'test' : true);\n                checkCustomerHaveCard(loginResponse.user, customerTypeValid)\n                console.log(\"My console to test in if\")\n            }else{\n                console.log(\"My console to test in else\")\n                window.location.href='/dashboard'   \n            }\n        }\n        if(loginResponse && !loginResponse.success){\n            //Display err if loginResponse.inputError is false - when a field is empty\n            if(loginResponse.error){\n                openNotificationWithIcon(\"error\", \"Error\", loginResponse.error)\n                setShowSpinner(false)\n                return\n            }\n            //Display err if loginResponse.inputError is true - with invalid / unauthorized input\n            else if(loginResponse.inputError){\n                if(loginResponse.userError || loginResponse.passwordError){\n                    openNotificationWithIcon(\"error\", \"Error\", \"Invalid email or password!\")\n                    setShowSpinner(false)\n                    return\n                }\n                openNotificationWithIcon(\"error\", \"Error\", loginResponse.data.inputError)\n                setShowSpinner(false)\n            }\n        }\n\n    }\n\n    /**\n\t * Following function is to create and update job after discussion with sahil nagpal as this is a old code. Just status is now dynamic\n\t * @author : Ridhima Dhir\n     * @date : 09-12-2022\n\t */\n    //  const createUpdateJob= async(status)=>{\n    //     let jobId = \"\";\n    //     if (guestJobId) {\n    //         jobId = guestJobId\n    //         updateJob(guestJobId, { \"customer\": user.customer.id, \"status\": status })\n    //     } else {\n    //         let temp = { ...job }\n    //         temp.software = job.software.id\n    //         temp.status = status\n    //         if(temp.id){\n    //             updateJob(temp.id, {\"status\": status })\n    //             jobId = guestJobId\n    //         }else{\n    //             if (job.subSoftware && job.subSoftware.id) {\n    //                 temp.subSoftware = job.subSoftware.id\n    //             }\n    //             const jobData = await createJob(temp)\n    //             setJob(jobData)\n    //             jobId = jobData.id\n    //         }\n    //     }\n    //     return jobId\n    // }\n\n    /**\n\t * emit send-schedule-alerts socket and create / fetch notification customer notifications\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\t const emitSocketCreateFetchNotification = async (jobStats, user) =>{\n\t\ttry{\n\t\t\tconsole.log(\"send-schedule-alerts :::::::::::\")\n\t\t\t//Notification for customer\n\t\t\tconst notificationData = {\n                user: user.id,\n\t\t\t\tjob: jobStats.id,\n\t\t\t\tread: false,\n\t\t\t\tactionable: false,\n\t\t\t\ttitle: 'We are finding a technician for you. We will inform you when we find the technician',\n\t\t\t\ttype: 'Scheduled Job',\n\t\t\t};\n\t\t\tconsole.log(\"notificationData ::::::::\", notificationData)\n\t\t\tawait createNotification(notificationData);\n\t\t\tawait fetchNotifications({ user: user.id });\n\n\t\t\t// call send-schedule-alerts socket from backend.\n\t\t\t// It will find available techs and send alerts by sms/email/notification\n\t\t\tsocket.emit('search-for-tech', {\n\t\t\t\tjobId: jobStats.id,\n\t\t\t\tcustomerTimezone: user.timezone,\n\t\t\t\tjobData: jobStats,\n\t\t\t\tprimaryTime: jobStats.primarySchedule,\n\t\t\t\tphoneNumber:user.customer.phoneNumber,\n\t\t\t\tcustomerName:user.firstName,\n\t\t\t\tcustomerEmail:user.email,\n\t\t\t});\n\t\t}catch(err){\n\t\t\tconsole.log('There is catch error while create/fetch notification  :::: '+ err.message)\n            mixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n\t\t}\n\t}\n    \n    return(<React.Fragment key=\"Sign\">\n        <Row>\n            <Col>\n                <Row className=\"mb-10\"><span className=\"formLabel\">Email</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row><NewInput tyep={\"email\"} name={\"email\"} onChange={onInputChange} /></Row>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Row className=\"mb-10\"><span className=\"formLabel\">Password</span>&nbsp;<span className=\"formAterisk\">*</span></Row>\n                <Row>\n                    <PasswordInput style={{height:\"75px\",marginBottom:\"32px\"}}  name={\"password\"} onChange={onInputChange} />\n                </Row>\n            </Col>     \n        </Row>\n        <Row className=\"justify-content-end\">\n            <BasicButton btnTitle={\"Get Help Now\"} height={\"60px\"} width={\"158px\"} background={\"#01D4D5\"} color={\"#fff\"} onClick={handleNextButton} disable={showSpinner} showSpinner={showSpinner} />\n        </Row>\n    </React.Fragment>)\n}\n\nexport default SignIn\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\SignIn\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "TimeDropDown",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from \"react\"\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nconst TimeDropDown = (props) =>{\n    let defaultOption = props.dropdownValues[0]\n    if(props.name === \"hour\") defaultOption = props.scheduleJobTime.hours ? props.scheduleJobTime.hours : new Date(Number(props.scheduleJobTime)).getHours()\n    if(props.name === \"minutes\") defaultOption = props.scheduleJobTime.minutes ? props.scheduleJobTime.minutes : new Date(Number(props.scheduleJobTime)).getMinutes()\n\n    const handleChange = (e) =>{\n        props.name === \"hour\" ? props.setScheduleJobTime(prevState => ({...prevState,hours:e.value})) : props.name === \"minutes\" ?  props.setScheduleJobTime(prevState => ({...prevState,minutes:e.value})) : props.setKeepSearchingFor(e.value) \n    }\n                         \n        return(\n            <>\n                <Dropdown \n                value={  `${defaultOption}`} \n                placeholder=\"Select an option\"\n                className={`${props.name===\"hrArray\" ? \"new-drop-hr\" : \"new-drop\"}`} \n                options={props.dropdownValues}\n                onChange={handleChange}\n                disabled={props.showSpinner}\n                />\n            </>\n        )\n}\n\nexport default TimeDropDown",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\Components\\TimeDropDown\\index.js"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useMemo, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHistory, useLocation } from 'react-router';\nimport * as SoftwareApi from '../../../api/software.api';\nimport { convertToRaw } from 'draft-js';\nimport { Helmet } from 'react-helmet';\n// import ScreenSteps from '../../../components/ScreenSteps';\nimport SelectSupport from './steps/SelectSupport';\nimport IssueDescription from './steps/IssueDescription';\n// import BillingInfo from './steps/BillingInfo';\nimport * as CustomerApi from '../../../api/customers.api';\nimport { useUser } from '../../../context/useContext';\nimport { useJob } from '../../../context/jobContext';\nimport { useTools } from '../../../context/toolContext';\nimport { platform } from '../../../constants/index.js';\nimport JobCreate from '../JobCreate'\nimport CustomerSignUp from './steps/CustomerSignUp';\nimport LogoWithHeading from 'components/common/LogoWithHeading';\nimport SelectSoftware from './steps/SelectSoftware';\nimport HelpIsOnTheWay from './steps/HelpIsOnTheWay';\nimport JobSummary from './steps/JobSummary';\nimport Loader from \"../../../components/Loader\";\nimport {useResizeObserver } from '../../../utils';\n\n\nconst CustomerProfileSetup = () => {\n  console.log(\"?>>>>>>>>>>>>>>>>>>>>>>>>>> Customer profile setup rendered  >>>>>>>>>>>>>>?>>>>>>>>>>>>>>\")\n  const { jobId } = useParams();\n  const location = useLocation();\n  let searchParams = useMemo(() => { return new URLSearchParams(window.location.search) }, [location])\n  const repostJob = searchParams.get('repost') ? searchParams.get('repost') : false;\n  const transferredJob = searchParams.get('transferredJob') ? searchParams.get('transferredJob') : false;\n  const [showDirectly, setShowDirectly] = useState(false)\n  const [softwareId, setSoftwareId] = useState(searchParams.get('softwareId'))\n  const [currentStep, setCurrentStep] = useState((jobId ? 1 : 0));\n  const [software, setSoftware] = useState();\n  const [subSoftware, setSubSoftware] = useState();\n  const [jobData, setJobData] = useState(null);\n  const [expertise, setExpertise] = useState();\n  const [subOption, setSubOption] = useState();\n  const [selectedVal, setSelectedVal] = useState();\n  const [issueDescription, setIssueDescription] = useState('');\n  const [audio, setAudio] = useState(true);\n  const { jobFlowStep, setJobFlowStep, jobFlowsDescriptions} = useTools()\n  const [estimatedPrice, setEstimatedPrice] = useState('NA');\n  const [intialPrice, setInitialPrice] = useState('NA');\n  const [finalPrice, setFinalPrice] = useState('NA');\n  const [estimatedTime, setEstimatedTime] = useState('NA');\n  const [estimatedDuration, setDurationTime] = useState('NA');\n  const [estimatedWait, setEstimatedWait] = useState('NA');\n  const [accountUsers, setAccountUsers] = useState([\n    {\n      name: '',\n      email: '',\n      role: '',\n    },\n  ]);\n  const [isScheduleJob, setIsScheduleJob] = useState(false)\n  const formHeading = [\"What do you need help with?\",\n                       \"Job Summary\",\n                       \"Please complete your order to connect to an expert\", \n                       \"Help is on the way!\"]\n\n  const [jobFlowStepNumber, setJobFlowStepNumber] = useState(0);\n  const jobFlowStepsArray = {\n      \"selectSoftware\": 0,\n      \"jobSummary\": 1,\n      \"signUp\": 2,\n      \"helpIsOnTheWay\": 3,\n    }\n  const [userInfo, setUserInfo] = useState({firstName:\"\", lastName:\"\", email:\"\", password:\"\", businessName:\"\"})\n  const [jobInfo, setJobInfo] = useState({currentSoftware:{}, currentSubSoftware:\"Select\",needThisDone:\"\",moreDetails:\"\"})\n  let defaultHour = new Date().getMinutes() >= 53 ? new Date().getHours() + 1  : new Date().getHours()\n  let defaultHourValue = `${defaultHour > 12 ? defaultHour - 12 : defaultHour}`\n  let defaultMinutes = new Date().getMinutes()\n  let defaultMinutesValue = defaultMinutes >=53 || defaultMinutes < 8 ? \"00\" : defaultMinutes >= 8 && defaultMinutes < 23 ? \"15\" : defaultMinutes >= 23 && defaultMinutes < 38 ? \"30\" : \"45\"\n  let defaultDurationType = defaultHour < 12 ? \"AM\" : \"PM\"\n  const [givenEmail, setGivenEmail] = useState();\n  const [scheduleJobTime, setScheduleJobTime] = useState({\n                                                          date: new Date(), \n                                                          hours:defaultHourValue, \n                                                          minutes:defaultMinutesValue, \n                                                          durationType: defaultDurationType\n                                                        })\n  const [guestJobId, setGuestJobId] = useState()\n  const [selectedTechnician, setSelectedTechnician] = useState({})\n  const [isFirsJob, setIsFirsJob] = useState(false);\n  const [showLoader, setShowLoader] = useState(true);\n  const [currentTab, setCurrentTab] = useState(\"createYourAccount\")\n\n  useEffect(() => {\n     console.log(\"<jobInfo <><><><><><<>\",jobInfo)\n  }, [jobInfo])\n  useEffect(() => {\n     console.log(\"<scheduleJobTime <><><><><><<>\",scheduleJobTime)\n  }, [scheduleJobTime])\n   \n  \n\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> searchParams\", searchParams) }, [searchParams])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> location\", location) }, [location])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> showDirectly\", showDirectly) }, [showDirectly])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> currentStep\", currentStep) }, [currentStep])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> software\", software) }, [software])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> subSoftware\", subSoftware) }, [subSoftware])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> jobData\", jobData) }, [jobData])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> expertise\", expertise) }, [expertise])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> subOption\", subOption) }, [subOption])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> selectedVal\", selectedVal) }, [selectedVal])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> issueDescription\", issueDescription) }, [issueDescription])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> jobFlowStep\", jobFlowStep) }, [jobFlowStep])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> estimatedPrice\", estimatedPrice) }, [estimatedPrice])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> estimatedDuration\", estimatedDuration) }, [estimatedDuration])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> estimatedWait\", estimatedWait) }, [estimatedWait])\n  useEffect(() => { console.log(\" rerendering  >>>>>>>>>>>>>>>>>>>>>>>>>>> accountUsers\", accountUsers) }, [accountUsers])\n  // useEffect(() => { console.log(\"My console from index\", userInfo) }, [userInfo])\n\n\n\n  const [themeColor, setThemeColor] = useState(\"#fff\")\n  const [phoneNumber, setPhoneNumber] = useState('');\n  // const [extension, setExtension] = useState('');\n  // const [cardNumber, setCardNumber] = useState('');\n  // const [expiryDate, setExpiryDate] = useState('');\n  // const [nameOnCard, setNameOnCard] = useState('');\n  // const [address, setAddress] = useState('');\n  // const [cvv, setCvv] = useState('');\n  const cardNumber = '';\n  const expiryDate = '';\n  const nameOnCard = '';\n  const address = '';\n  const cvv = '';\n  const { user, refetch, setUser, setToken } = useUser();\n  const { job, fetchJob, setJob } = useJob();\n\n  const issueDescriptionValue = useMemo(() => {\n\n    let value = '';\n    if (issueDescription && typeof (issueDescription) != 'string') {\n      const { blocks } = convertToRaw(issueDescription.getCurrentContent());\n      value = (blocks && blocks.length) && blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\n      value = value === '\\n' ? '' : value;\n    }\n    if (typeof (issueDescription) == 'string') {\n      value = issueDescription;\n    }\n    return value\n  }, [issueDescription]);\n\n  const history = useHistory();\n\n  // console.log(\"Selected duration \"+selectedValdur);\n\n  // useEffect(()=>{\n  //     if(job)\n  // },[jobFlowStep])\n\n  // useEffect(()=>{\n  //   if(currentStep === 0  || currentStep === 1){\n  //     if(document.getElementById(\"ThemeDark\")){\n  //       document.getElementById(\"ThemeDark\").style.backgroundColor  = \"#2F3F4C\"\n  //       setThemeColor(\"#2F3F4C\")\n  //     }\n\n  //     if(document.getElementById(\"ThemeLight\")){\n  //       document.getElementById(\"ThemeLight\").style.backgroundColor  = \"#EDF4FA\"\n  //       setThemeColor(\"#EDF4FA\")\n  //     }\n  //   }\n  // },[currentStep]);\n\n  useEffect(() => {\n    if (showDirectly) {\n      setJobFlowStep(jobFlowsDescriptions['issueDescription'])\n    }\n  }, [showDirectly])\n  useEffect(() => {\n    (async () => {\n      if (softwareId) {\n        // retrieving software data\n        let software_response = await SoftwareApi.retrievesoftware(softwareId)\n        setJobInfo({...jobInfo, currentSoftware:software_response})\n        // setSoftware(software_response)\n        // setShowDirectly(true)\n      }\n    })()\n  }, [softwareId])\n\n  useEffect(() => {\n    (async () => {\n      if (jobId) {\n        console.log(\"jobIdParam in profile setup ::\", jobId)\n        fetchJob(jobId);\n      }\n    })();\n  }, [])\n  useEffect(() => {\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n  }, [currentStep])\n\n  // This code is replaced by below code : Jagroop 17 April 2023\n  // useEffect(() => {\n  //   searchParams.get('page') !== null && searchParams.get('page') === \"select-software\" ? setJobFlowStepNumber(jobFlowStepsArray[\"selectSoftware\"])  : console.log(\"\")\n  //   searchParams.get('page') !== null && searchParams.get('page') === \"job-summary\" ? setJobFlowStepNumber(jobFlowStepsArray[\"jobSummary\"])  : console.log(\"\")\n  //   searchParams.get('page') !== null && searchParams.get('page') === \"registration\" ? setJobFlowStepNumber(jobFlowStepsArray[\"signUp\"])  : console.log(\"\")\n  //   searchParams.get('page') !== null && searchParams.get('page') === \"add-card\" ? setJobFlowStepNumber(jobFlowStepsArray[\"signUp\"])  : console.log(\"\")\n  //   searchParams.get('page') !== null && searchParams.get('page') === \"tech-search\" ? setJobFlowStepNumber(jobFlowStepsArray[\"helpIsOnTheWay\"])  : console.log(\"\")\n  // }, [])\n\n  useEffect(()=>{\n    if( searchParams.get('page') !== null){\n      const parameter ={\n        'select-software': 'selectSoftware',\n        'job-summary' :'jobSummary',\n        'registration':'signUp',\n        'add-card' :'signUp',\n        'tech-search': 'helpIsOnTheWay'\n      }\n      setJobFlowStepNumber(jobFlowStepsArray[parameter[searchParams.get('page')]])\n\n    }\n  },[])\n\n\n  useEffect(() => {\n    if (repostJob && job) {\n      setSubSoftware((job.subSoftware ? job.subSoftware : undefined));\n      setIssueDescription(job.issueDescription);\n    }\n    if (job && job.status === 'Pending') {\n      setSoftware(job.software);\n      setSubSoftware((job.subSoftware ? job.subSoftware : undefined));\n      setExpertise(job.expertise);\n      setSubOption(job.subOption);\n      setIssueDescription(job.issueDescription);\n\n    }\n  }, [job])\n\n  useEffect(() => {\n    console.log(\"jobFlowStep >>>>>>>>>>>>> profile setup\", jobFlowStep)\n  }, [jobFlowStep])\n  const onBack = async () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n  const sizeRef = useResizeObserver(({ width, height }) => {\n    console.log(`Inside selectSoftware Element width: ${width}, height: ${height}`);\n  });\n  const onNext = async () => {\n    // console.log(currentStep,\">>>>>>>>>>>>>>\")\n    /*if(currentStep === 0 ){\n      \n      console.log(document.getElementById(\"ThemeDark\"),\">>>>>>>@@#@#@\")\n    }*/\n    if (currentStep < 2) {\n      if (document.getElementById(\"ThemeDark\")) {\n        document.getElementById(\"ThemeDark\").style.backgroundColor = \"#fff\"\n        setThemeColor(\"#fff\")\n      }\n      console.log(document.getElementById(\"ThemeDark\"), \">>>>>>>@@#@#@1\")\n      setCurrentStep(currentStep + 1);\n      return;\n    }\n   \n  // updating customer data by user id to db\n    await CustomerApi.updateCustomer(user.customer.id, {\n      audio,\n      alternatives: accountUsers,\n      phoneNumber,\n      // extension,\n      billing: {\n        cardNumber,\n        expiryDate,\n        nameOnCard,\n        address,\n        cvv,\n      },\n      status: 'completed',\n    });\n\n    await refetch();\n    history.push('/customer/create-job', { jobId: job?.id });\n  };\n\n  const steps = [\n\n    {\n      title: 'Supports Need',\n      content: (\n        <SelectSupport\n          jobFlowsDescriptions={jobFlowsDescriptions}\n          software={software}\n          onChange={setSoftware}\n          user={user}\n          setJobFlowStep={setJobFlowStep}\n        />\n      ),\n    },\n    {\n      title: 'Issue',\n      content: (\n        <IssueDescription\n          intialPrice={intialPrice}\n          setInitialPrice={setInitialPrice}\n          jobData={jobData}\n          setJobData={setJobData}\n          finalPrice={finalPrice}\n          setFinalPrice={setFinalPrice}\n          estimatedPrice={estimatedPrice}\n          setEstimatedPrice={setEstimatedPrice}\n          estimatedTime={estimatedTime}\n          setEstimatedTime={setEstimatedTime}\n          estimatedDuration={estimatedDuration}\n          setDurationTime={setDurationTime}\n          estimatedWait={estimatedWait}\n          setEstimatedWait={setEstimatedWait}\n          jobFlowsDescriptions={jobFlowsDescriptions}\n          software={software}\n          softwareId={softwareId}\n          subSoftware={subSoftware}\n          expertise={expertise}\n          setExpertise={setExpertise}\n          subOption={subOption}\n          setSubOption={setSubOption}\n          audio={audio}\n          setAudio={setAudio}\n          issueDescription={issueDescription}\n          issueDescriptionValue={issueDescriptionValue}\n          setIssueDescription={setIssueDescription}\n          selectedVal={selectedVal}\n          setSelectedVal={setSelectedVal}\n          setStep={setCurrentStep}\n          jobId={jobId}\n          onBack={onBack}\n          setJobFlowStep={setJobFlowStep}\n          setSoftware={setSoftware}\n          setSubSoftware={setSubSoftware}\n          onNext={onNext}\n        />\n      ),\n    },\n    {\n      title: 'Job create component',\n      content: (\n        <JobCreate jobData={jobData} />\n      ),\n    },\n\n  ];\n\n  if(false) return (<Loader />) \n\n  return (\n    <div className=\"w-85\" reg={sizeRef}>\n      {\n        platform == 'production' && <Helmet\n          script={[{\n            innerHTML: \"gtag('event', 'conversion', {'send_to': 'AW-10817392225/m6wHCM37gM4DEOGckaYo'});\"\n          }]}>\n        </Helmet>\n      }\n      {/* <div className=\"box-container mx-auto\" style={{ boxShadow: '2px 2px 10px #cfcccc', background: useTimer === 0 ? \"#DCE6ED\" : \"\" }}> */}\n      <div className={\"jobFloMainDiv margin-auto jobFloMainDivResponsive \" + (jobFlowStepNumber === 0 ? \n                                                                                                        \"w-55p\" \n                                                                                                      : \n                                                                                                        jobFlowStepNumber === 2 ? \n                                                                                                          \"w-80p\"\n                                                                                                        :\n                                                                                                          \"w-65p\"\n                                                                              )} >\n        {/* <ScreenSteps\n          stepsContent={jobFlowStep <= 2 ? steps[jobFlowStep].content : steps[2].content}\n          current={jobFlowStep}\n          steps={steps}\n        /> */}\n        {!transferredJob && jobFlowStepNumber !== 2 && <LogoWithHeading heading={formHeading[jobFlowStepNumber]} user={user} jobFlowStepNumber={jobFlowStepNumber} />}\n\n        { jobFlowStepNumber === 0 && <SelectSoftware \n                                    setJobFlowStepNumber={setJobFlowStepNumber} \n                                    jobFlowStepsArray={jobFlowStepsArray}\n                                    setJobInfo={setJobInfo}\n                                    jobInfo={jobInfo}\n                                    scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    user={user}\n                                    job={job}\n                                    setJob={setJob}\n                                    setGuestJobId={setGuestJobId}\n                                    isScheduleJob = {isScheduleJob} \n                                    setIsScheduleJob={setIsScheduleJob}\n                                    setIsFirsJob={setIsFirsJob}\n                                    isFirsJob={isFirsJob}\n                                    setShowLoader={setShowLoader}\n                                    setToken={setToken}\n                                    setUser={setUser}\n                                    />\n                                  }\n        { jobFlowStepNumber === 1 && <JobSummary\n                                    jobInfo={jobInfo}\n                                    scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    user={user}\n                                    job={job}\n                                    setGuestJobId={setGuestJobId}\n                                    guestJobId={guestJobId}\n                                    setJobFlowStepNumber={setJobFlowStepNumber} \n                                    jobFlowStepsArray={jobFlowStepsArray}\n                                    setIsScheduleJob={setIsScheduleJob}\n                                    selectedTechnician={selectedTechnician} \n                                    setSelectedTechnician={setSelectedTechnician}\n                                    isFirsJob={isFirsJob}\n                                    />\n        }\n        { jobFlowStepNumber === 2 && <CustomerSignUp\n                                   givenEmail={givenEmail} \n                                   setGivenEmail={setGivenEmail}\n                                    jobInfo={jobInfo}\n                                    userInfo={userInfo} \n                                    setUserInfo={setUserInfo} \n                                    setToken={setToken}\n                                    user={user}\n                                    setUser={setUser}\n                                    setJobFlowStepNumber={setJobFlowStepNumber} \n                                    jobFlowStepNumber={jobFlowStepNumber} \n                                    jobFlowStepsArray={jobFlowStepsArray}\n                                    isScheduleJob = {isScheduleJob} \n                                    job={job}\n                                    guestJobId={guestJobId}\n                                    scheduleJobTime={scheduleJobTime}\n                                    isFirsJob={isFirsJob}\n                                    setShowLoader={setShowLoader}\n                                    showLoader={showLoader}\n                                    currentTab={currentTab}\n                                    setCurrentTab={setCurrentTab}\n                                    />\n        }\n        { jobFlowStepNumber === 3 && <HelpIsOnTheWay\n                                    jobFlowStepNumber={jobFlowStepNumber}\n                                    user={user}\n                                    job={job}\n                                    jobInfo={jobInfo}\n                                    scheduleJobTime={scheduleJobTime}\n                                    setScheduleJobTime={setScheduleJobTime}\n                                    selectedTechnician={selectedTechnician} \n                                    setShowLoader={setShowLoader}\n                                    />\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(CustomerProfileSetup);\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "BillingInfo.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport { Row, Col, Typography } from 'antd';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  StepActionContainer,\n  StepTitle,\n  BodyContainer,\n  // WarningText,\n} from './style';\n// import ItemLabel from '../../../../components/ItemLabel';\n// import AuthInput from '../../../../components/AuthLayout/Input';\n// import StepButton from '../../../../components/StepButton';\n\nconst { Text } = Typography;\n\nconst BillingInfo = ({\n  onNext,\n  cardNumber,\n  setCardNumber,\n  expiryDate,\n  setExpiryDate,\n  nameOnCard,\n  setNameOnCard,\n  address,\n  setAddress,\n  cvv,\n  setCvv\n}) => {\n  const [error, setError] = useState({});\n\n  /*const handleCardNumber = e => {\n    setCardNumber(e.target.value);\n    if (!e.target.value) {\n      setError({ ...error, cardNumber: 'Please fill out Card Number field.' });\n    } else {\n      setError({ ...error, cardNumber: null });\n    }\n  };*/\n\n  /*const handleExpiryDate = e => {\n    setExpiryDate(e.target.value);\n    if (!e.target.value) {\n      setError({ ...error, expiryDate: 'Please fill out Expiry Date field.' });\n    } else {\n      setError({ ...error, expiryDate: null });\n    }\n  };*/\n\n  /*const handleCvv = e => {\n    setCvv(e.target.value);\n    if (e.target.value === '') {\n      setError({ ...error, cvv: 'Please fill out CVV field.' });\n    } else {\n      setError({ ...error, cvv: null });\n    }\n  };*/\n\n  /*const handleAddress = e => {\n    setAddress(e.target.value);\n    if (e.target.value === '') {\n      setError({ ...error, address: 'Please fill out Address field.' });\n    } else {\n      setError({ ...error, address: null });\n    }\n  };*/\n\n  /*const handleNameOnCard = e => {\n    setNameOnCard(e.target.value);\n    if (e.target.value === '') {\n      setError({ ...error, nameOnCard: 'Please fill out Name on Card field.' });\n    } else {\n      setError({ ...error, nameOnCard: null });\n    }\n  };*/\n\n  const handleSubmit = () => {\n    if (!cardNumber && !expiryDate && !cvv && !nameOnCard && !address) {\n      setError({\n        ...error,\n        cardNumber: 'Please fill out Card Number field.',\n        expiryDate: 'Please fill out Expiry Date field.',\n        cvv: 'Please fill out CVV field.',\n        nameOnCard: 'Please fill out Name on Card field.',\n        address: 'Please fill out Address field.',\n      });\n    } else if (!expiryDate && !cvv && !nameOnCard && !address) {\n      setError({\n        ...error,\n        expiryDate: 'Please fill out Expiry Date field.',\n        cvv: 'Please fill out CVV field.',\n        nameOnCard: 'Please fill out Name on Card field.',\n        address: 'Please fill out Address field.',\n      });\n    } else if (!cvv && !nameOnCard && !address) {\n      setError({\n        ...error,\n        cvv: 'Please fill out CVV field.',\n        nameOnCard: 'Please fill out Name on Card field.',\n        address: 'Please fill out Address field.',\n      });\n    } else if (!nameOnCard && !address) {\n      setError({\n        ...error,\n        nameOnCard: 'Please fill out Name on Card field.',\n        address: 'Please fill out Address field.',\n      });\n    } else if (!address) {\n      setError({ ...error, address: 'Please fill out Address field.' });\n    } else {\n      onNext({\n        billing: {\n          cardNumber,\n          expiryDate,\n          nameOnCard,\n          cvv,\n          address,\n        },\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Row>\n        <Container span={24}>\n          <StepTitle>Billing Info</StepTitle>\n          <BodyContainer span={24}>\n            \n          </BodyContainer>\n          <StepActionContainer className=\"steps-action\">\n            <Button type=\"primary\" onClick={handleSubmit} className=\"btn app-btn\">\n              <span></span>\n              Create My Account\n            </Button>\n          </StepActionContainer>\n        </Container>\n      </Row>\n    </div>\n  );\n};\n\nconst Container = styled(Col)`\n  display: flex;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n`;\n\n/*const AccountUser = styled.div`\n  display: flex;\n`;*/\n\n/*const InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  margin-right: 30px;\n  margin-bottom: 50px;\n  position: relative;\n  &.expiry-date {\n    .warning {\n      bottom: -40px;\n    }\n  }\n  &.cvv {\n    .warning {\n      bottom: -40px;\n    }\n  }\n  &.card-number {\n    min-width: 500px;\n  }\n  &.address {\n    min-width: 700px;\n  }\n  &:last-child {\n    margin-right: 0px;\n  }\n`;*/\n\n/*const WarnningText = styled(Text)`\n  font-weight: bold;\n  font-style: italic;\n`;*/\n\nBillingInfo.propTypes = {\n  onNext: PropTypes.func.isRequired,\n};\n\nexport default BillingInfo;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\BillingInfo.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "CustomerSignUp.js",
                                                                    "fileData": "import RoundDivWithNumber from \"components/common/RoundDivWithNumber\";\nimport SignUpHeading from \"components/common/SignUpHeading\";\nimport React, { useEffect, useState,useMemo } from \"react\";\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport AddCard from \"../Components/AddCard\";\nimport CreateYourAccount from \"../Components/CreateYourAccount\";\nimport SignIn from \"../../BusinessPlan/steps/SignIn\";\nimport ChooseYourPassWord from \"../../BusinessPlan/steps/ChooseYourPassword\";\nimport CompleteYourPurchase from \"../../BusinessPlan/steps/CompleteYourPurchase\";\nimport LogIn from \"../../BusinessPlan/steps/LogIn\";\nimport ResetPasswordLink from \"../../BusinessPlan/steps/ResetPasswordLink\";\nimport JobSummary from \"../Components/JobSummary\";\nimport AccountSummary from \"../Components/AccountSummary\";\nimport {Elements} from \"@stripe/react-stripe-js\";\n// import { isLiveUser} from '../../../../utils'\nimport { isGuestLiveUser } from \"../../../../utils\";\nimport {STRIPE_KEY,STRIPE_TEST_KEY,SECRET_KEY} from '../../../../constants';\nimport { loadStripe } from '@stripe/stripe-js';\nimport Header from \"../../BusinessPlan/Components/Header\";\nimport { useHistory, useLocation } from 'react-router';\nimport Loader from '../../../../components/Loader';\nimport stripeSecureLogo from \"../../../../assets/images/stripe-secure-logo.png\"\nconst CustomerSignUp = ({setJobFlowStepNumber, jobFlowStepsArray, jobFlowStepNumber, userInfo, setUserInfo, setUser, setToken, user,jobInfo, isScheduleJob, job, guestJobId, scheduleJobTime,givenEmail,setGivenEmail,isFirsJob,showLoader,setShowLoader}) =>{\n    let searchParams = useMemo(() => { return new URLSearchParams(window.location.search) }, [location])\n    let stripePromise =  loadStripe(isGuestLiveUser(user) ? STRIPE_KEY : STRIPE_TEST_KEY)\n    const location = useLocation();\n    const [currentTab, setCurrentTab] = useState(\"createYourAccount\")\n\n\n\n\n    const [showCCForm, setShowCCForm] = useState(false)\n    const [userSignedUp, setUserSignedUp] = useState(false)\n    const [userSignedIn, setUserSignedIn] = useState(false)\n    const [signUpTabDisabled, setSignUpTabDisabled] = useState(false)\n    const [signInTabDisabled, setSignInTabDisabled] = useState(false)\n    const [isGuestJob, setIsGuestJob] = useState(false)\n    const [userObject, setUserObject] = useState()\n    // const [givenEmail, setGivenEmail] = useState()\n    const [businessPlanStepNumber, setbusinessPlanStepNumber] = useState();\n    const [userLoggedIn, setUserLoggedIn] = useState(false)\n\n    const jobFlowStepsObj = {\n        \"SignIn\": 0,\n        \"ChooseYourPassWord\": 1,\n        \"CompleteYourPurchase\": 2,\n        \"GotOurGeeks\": 3,\n        \"LogIn\": 4,\n        \"ResetPasswordLink\": 5,\n    }\n \n    const handleCreateYourAccountClick = () => {\n        setCurrentTab(\"createYourAccount\")\n    }\n    useEffect(() => {\n        if (job) {\n            console.log(\"job>>>>>>>>>>>>.....\",job)\n            if(user && user.email === \"guest@geeker.co\"){\n                if(job?.guestJob) localStorage.removeItem(SECRET_KEY);\n            }\n        }\n    }, [job])\n    useEffect(()=>{\n        (async () => {  \n            if(user){\n                stripePromise =  await loadStripe(isGuestLiveUser(user) ? STRIPE_KEY : STRIPE_TEST_KEY)\n                console.log(\"stripePromise<><><><>\",stripePromise)\n            };\n        })();       \n    },[user]);\n\n    useEffect(()=>{\n        if( searchParams.get('page') === 'registration'){\n            setShowLoader(false)\n        }\n        if( searchParams.get('page') === 'registration' && !user){\n            setbusinessPlanStepNumber(jobFlowStepsObj['SignIn'])\n        }\n      },[])\n\n\n    useEffect(() => {\n        if (user) {\n            setShowCCForm(true)\n        };\n    }, []);\n\n    useEffect(()=>{\n        if(showCCForm){\n            setbusinessPlanStepNumber(jobFlowStepsObj[\"CompleteYourPurchase\"])\n            setShowLoader(false)\n        }\n    },[showCCForm])\n\n\n    const handleSignInClick = () => {\n        setCurrentTab(\"signIn\")\n    }\n\n    if (showLoader) return <Loader height=\"100%\" />;\n\n    return (<>\n        \n            <Header/>\n        \n            {\n                businessPlanStepNumber === 0 && <SignIn \n                                                    user={user}\n                                                    setUser={setUser}\n                                                    setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                    jobFlowStepsObj={jobFlowStepsObj}\n                                                    setUserInfo={setUserInfo}\n                                                    setGivenEmail={setGivenEmail}\n                                                    setShowLoader={setShowLoader}\n                                                />\n            }\n            {\n                businessPlanStepNumber === 1 && <ChooseYourPassWord \n                                                    user={user} \n                                                    givenEmail={givenEmail}\n                                                    setUser={setUser}\n                                                    setToken={setToken}\n                                                    setShowLoader={setShowLoader}\n                                                />\n            }\n            {\n                businessPlanStepNumber === 2 && <Elements stripe={stripePromise} > \n                                                    <CompleteYourPurchase\n                                                        user={user}\n                                                        setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                        jobFlowStepsObj={jobFlowStepsObj}\n                                                        setUserLoggedIn={setUserLoggedIn}\n                                                        job={job}\n                                                        isScheduleJob={isScheduleJob}\n                                                        isFirsJob={isFirsJob}\n                                                        setShowLoader={setShowLoader}\n                                                    />\n                                                </Elements>\n            }\n            {\n\n                businessPlanStepNumber === 4 && <LogIn\n                                                userInfo={userInfo}\n                                                setUser={setUser}\n                                                setToken={setToken}\n                                                setbusinessPlanStepNumber={setbusinessPlanStepNumber}\n                                                jobFlowStepsObj={jobFlowStepsObj}\n                                                user={user}\n                                                job={job}\n                                                setShowLoader={setShowLoader}\n                                            />\n            }\n            {\n                businessPlanStepNumber === 5 && <ResetPasswordLink\n                                                    userInfo={userInfo}\n                                                    setbusinessPlanStepNumber={setbusinessPlanStepNumber} \n                                                    jobFlowStepsObj={jobFlowStepsObj}\n                                                    />\n            }\n\n        \n    </>)\n\n    // return(<React.Fragment key=\"cardinfo\">\n    //     <Container>\n    //         <Row>\n    //             <Col md={8} className=\"pr-50 pr-15-max-width-600 tablet-res pr-2\">\n    //                 <Row className=\"align-items-center p-0\">\n    //                     <Col md={1} xs={1} lg={1} className=\"p-0\">\n    //                         <RoundDivWithNumber \n    //                             number={\"1\"} \n    //                             showCheck={showCCForm} \n    //                             backgroundColor={showCCForm ? \"#01D4D5\" : \"#01D4D51A\"} \n    //                             color={\"#01D4D5\"}\n    //                         />\n    //                     </Col>\n    //                     <Col md={11} xs={11} lg={11} className=\"p-0 pl-30-imp-max-width-600\">\n    //                         {!showCCForm ? <SignUpHeading \n    //                                         heading={\"Account Details\"} \n    //                                         fontSize={\"18px\"} \n    //                                         color={\"#01D4D5\"} \n    //                                         // marginLeft={\"15px\"} \n    //                                         boldText={true} \n    //                                         />\n    //                                     : <AccountSummary userInfo={userInfo} setJobFlowStepNumber={setJobFlowStepNumber} jobFlowStepsArray={jobFlowStepsArray} user={user} />\n    //                         }\n    //                     </Col>\n    //                 </Row>\n\n    //                 {!showCCForm && <Row className=\"align-items-center mt-30 mb-30\">\n    //                     <Col className={\"border-bottom \"}>\n    //                         <div className={\"tabHeading \" + (currentTab === \"createYourAccount\" ? \" activeTabHeading \" : \"\") + ( signUpTabDisabled ? \" pointer-events-none \" : \"\")} onClick={handleCreateYourAccountClick}>Create your account</div>\n    //                     </Col>\n    //                     <Col className=\"border-bottom\">\n    //                         <div className={\"tabHeading \"  + (currentTab === \"signIn\" ? \"activeTabHeading\" : \"\") + ( signInTabDisabled ? \" pointer-events-none \" : \"\")} onClick={handleSignInClick}>Sign In</div>\n    //                     </Col>\n    //                 </Row>}\n\n    //                 {currentTab === \"createYourAccount\" ? \n    //                     !showCCForm && <CreateYourAccount setShowCCForm={setShowCCForm} userInfo={userInfo} setUserInfo={setUserInfo} setUserSignedUp={setUserSignedUp} setUser={setUser} setToken={setToken} guestJobId={guestJobId} setSignInTabDisabled={setSignInTabDisabled} />\n    //                 :\n    //                 !showCCForm && <SignIn setUserSignedIn={setUserSignedIn} setShowCCForm={setShowCCForm} setUser={setUser} user={user} setToken={setToken} setJobFlowStepNumber={setJobFlowStepNumber} jobFlowStepsArray={jobFlowStepsArray} job={job} isScheduleJob={isScheduleJob} guestJobId={guestJobId} setSignUpTabDisabled={setSignUpTabDisabled} />\n    //                 }\n\n    //                 {currentTab ===\"createYourAccount\" && !showCCForm ? (<hr className={\"d-none d-md-block d-lg-block mb-25 \" + (showCCForm ? \"mt-25\" : \"mt-50\")}/>) : (<hr className={\"mb-25 \" + (showCCForm ? \"mt-25\" : \"mt-50\")}/>)}\n\n    //            <Row className={currentTab === \"createYourAccount\" ? `${showCCForm ? \"align-items-center mb-25 mb-20-max-width-600\" : \"align-items-center mb-25 mb-20-max-width-600 d-none d-md-block d-lg-block\"}` : \"\"}>\n    //                     <Col className=\"d-flex align-items-center p-0\">\n    //                         <RoundDivWithNumber \n    //                             number={\"2\"} \n    //                             showCheck={false} \n    //                             backgroundColor={showCCForm ? \"#01D4D51A\" : \"\"} \n    //                             color={showCCForm ? \"#01D4D5\" : \"#293742\"} \n    //                         />\n    //                         <SignUpHeading \n    //                             heading={\"Add payment details\"} \n    //                             fontSize={\"18px\"} \n    //                             color={showCCForm ? \"#01D4D5\" : \"#293742\"} \n    //                             marginLeft={\"15px\"} \n    //                             boldText={showCCForm}\n    //                         />\n    //                     </Col>\n    //                 </Row>\n    //                 {showCCForm && <Elements stripe={stripePromise} > \n    //                     <AddCard user={user} setJobFlowStepNumber={setJobFlowStepNumber} jobFlowStepsArray={jobFlowStepsArray} isScheduleJob={isScheduleJob} jobInfo={jobInfo} job={job} guestJobId={guestJobId} scheduleJobTime={scheduleJobTime} isGuestJob={isGuestJob} />\n    //                 </Elements>}\n    //             </Col>\n    //             <Col md={4} className=\"mt-20-max-width-600\">\n    //                 <JobSummary currentTab={currentTab} jobInfo={jobInfo} user={user} showCCForm={showCCForm} />\n    //             </Col>\n    //             {currentTab === \"createYourAccount\" && !showCCForm ? (<div className=\"mt-3 d-block d-sm-none d-none d-sm-block d-md-none hr1\"></div>) :(null)}\n    //             {currentTab === \"createYourAccount\" && !showCCForm ? (\n    //               <Row className=\"align-items-center mt-3 mb-20-max-width-600 d-block d-sm-none d-none d-sm-block d-md-none\">\n    //                 <Col className=\"d-flex align-items-center p-0\">\n    //                   <RoundDivWithNumber\n    //                     number={\"2\"}\n    //                     showCheck={false}\n    //                     backgroundColor={showCCForm ? \"#01D4D51A\" : \"\"}\n    //                     color={showCCForm ? \"#01D4D5\" : \"#293742\"}\n    //                   />\n    //                   <SignUpHeading\n    //                     heading={\"Add payment details\"}\n    //                     fontSize={\"18px\"}\n    //                     color={showCCForm ? \"#01D4D5\" : \"#293742\"}\n    //                     marginLeft={\"15px\"}\n    //                     boldText={showCCForm}\n    //                   />\n    //                 </Col>\n    //               </Row>\n    //             ) : null}\n\n    //         </Row>\n    //     </Container>\n    // </React.Fragment>)\n                   \n           /* {showCCForm && <Row>\n                <Col className=\"d-flex justify-content-center\">\n                    <img className=\"w-55p min-width-300\" src={stripeSecureLogo} />\n                </Col>\n            </Row>}\n        </Container>\n    </React.Fragment>)*/\n}\n\nexport default CustomerSignUp",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\CustomerSignUp.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "HelpIsOnTheWay.js",
                                                                    "fileData": "import React, { useEffect, useState ,useMemo,useRef } from \"react\"\nimport jsonAnimation from \"../../../../assets/animations/animation.json\"\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport KeepSearchingModal from \"../Components/KeepSearchingModal\";\nimport ScheduleForLaterModal from \"../Components/ScheduleForLaterModal\";\nimport { useSocket } from '../../../../context/socketContext';\nimport { useTools } from '../../../../context/toolContext';\nimport mixpanel from 'mixpanel-browser';\nimport Countdown, { zeroPad, } from 'react-countdown';\nimport * as UserApi from \"api/users.api\";\nimport { useHistory, useLocation } from 'react-router';\nimport CancelJobConfirmationModal from \"../Components/CancelJobConfirmationModal\";\n// import { getTalkChatUser } from \"api/chat.api\";\n// import { useChatEngineTools } from \"context/chatContext\";\n// import { createOrGetUserChat } from \"../../../../utils/index\";\n// import { retrieveJob } from '../../../../api/job.api';\nimport { useJob } from '../../../../context/jobContext';\nimport { calculateTimeDifference, defaultContactNumber } from \"constants/expandableJobContants\";\nimport { authorizeCard, openNotificationWithIcon, checkCustomerHaveSubscriptionMinutes, PushUserDataToGtm } from '../../../../utils/index';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as JobNotificationHistory from '../../../../api/jobNotificationHistory.api';\nimport AfterBusinessHrsPopUpModal from '../Components/AfterBusinessHrsPopUpModal';\nimport styled from 'styled-components';\nimport Badge from '@mui/material/Badge';\n// import ChatPanelAccpetJob from 'components/ChatPanelAccpetJob';\nimport * as JobApi from '../../../../api/job.api';\nimport moment from 'moment';\nimport  notifySound from '../../../../assets/sounds/notification.mp3'\nimport ChatPanelTwilio from \"components/ChatPanelTwilio\";\nimport * as TwilioApi from '../../../../api/twilioChat.api';\nimport '../../../../style.css'\n\nlet checkGeekerAvailabilityTimeVariable = false;\nconst CountDown = ({useTimer, renderer, timesUp}) => useMemo(() =>\n    <Countdown\n        date ={Date.now() + useTimer}\n        renderer={renderer}\n        key={useTimer}\n        onComplete={timesUp}/>,\n    [useTimer]);\n\nconst HelpIsOnTheWay = ({jobFlowStepNumber, user, job, jobInfo, scheduleJobTime ,setScheduleJobTime, selectedTechnician}) => {\n    const [showKeepSearchingModal, setShowKeepSearchingModal] = useState(false)\n    const [showScheduleForLaterModal, setShowScheduleForLaterModal] = useState(false)\n    const [showCancelJobModal, setShowCancelJobModal] = useState(false)\n    const [keepSearchingFor,setKeepSearchingFor] = useState(\"1 hours\");\n    const { useTimer, setUseTimer } = useTools();\n    const { socket } = useSocket();\n    const location = useLocation();\n    const { fetchJob,updateJob } = useJob();\n    const queryParams = new URLSearchParams(location.search)\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\")\n                                                         : selectedTechnician.value ? selectedTechnician.value : false\n    const jobIdParams = queryParams.get(\"jobId\")\n    const history = useHistory();\n    const [newJobAlertCalled, setNewJobAlertCalled] = useState(false)\n    const [searchTimesUp, setSearchTimesUp] = useState(false)\n    const [sameTechIdAvailable, setSameTechIdAvailable] = useState(false)\n    const [sameTechIdAvailableSched, setSameTechIdAvailableSched] = useState(false)\n    const [showRendererMint,setShowRendererMint] = useState('');\n    const [searchForTechs, setSearchForTechs] = useState(false)\n    const [showAfterBusinessHrs,setShowAfterBusinessHrs] = useState(false);\n    // const { createChatUsers,createGroupChatUsers, createTalkUserSession, joinTalkChatConversation, createOrGetTalkChatConversation,joinTalkChatConversationGroup,createOrGetTalkChatConversationGroup,handleTalkChatUser } = useChatEngineTools()\n\tconst [chatPanelHasOpen,setChatPanelHasOpen] = useState(true)\n\tconst [socketHits, setSocketHits] = useState(0);\n\tconst [buttonKeyForChatPanel,setButtonKeyForChatPanel] = useState(false)\n\tconst [showNotificationBell,setShowNotificationBell] = useState(false)\n\tconst [refetchChat,setRefetchChat] = useState(false)\n\tconst inboxRef = useRef();\n\tconst [showLoaderForChat, setShowLoaderForChat] = useState(null)\n\tconst [duration, setDuration] = useState('')\n\tconst now_time = moment();\n\tconst [showLoader,setShowLoader] = useState(false)\n\tconst [showChat, setShowChat] = useState(false)\n    const [showModalFooterOffPeak, setShowModalFooterOffPeak] = useState(false)\n    let audio = new Audio(notifySound)\n\n    useEffect(() => {\n        if(localStorage.getItem('postAgainJobModal')){\n            setSameTechIdAvailableSched(true)\n        }\n        (async () => {\n            localStorage.removeItem('authorizationInfo');\n            if (jobIdParams && job === undefined) {\n                if(process.env.REACT_APP_URL){\n                  const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n                  PushUserDataToGtm('job_posted', user, appUrl);\n                }\n                console.log(\"jobIdParam in profile setup ::\", jobIdParams)\n                await fetchJob(jobIdParams);\n                setNewJobAlertCalled(true)\n                // const notifiedTechs = await JobNotificationHistory.getJobNotificationHistory(jobIdParams)\n                // console.log(\"notifiedTechs res \", notifiedTechs)\n                // if(notifiedTechs.totalCount === 0){\n                //     console.log(\"inside if totalCount\",searchForTechs,notifiedTechs.totalCount)\n                //     setSearchForTechs(true)\n\n                // }\n            }\n        })();\n    }, [])\n\n    // const handleSendMessage = (message) => {\n\t// \tsocket.emit(\"talk-js-notification\",jobIdParams)\n\t//   };\n\n\n\tconst handelCallBackPanel = (e) => {\n\t\te.length === 2 ? setRefetchChat(true) : setRefetchChat(false)\n\t\tsetSocketHits(0)\n\t\t// setChatPanelHasOpen(!chatPanelHasOpen)\n\t}\n\n    const StyledBadge = styled(Badge)(({ theme }) => ({\n\t\t'& .MuiBadge-badge': {\n\t\t  right: -3,\n\t\t  top: 13,\n\t\t  backgroundColor:'red',\n\t\t  padding: '0 4px',\n\t\t},\n\t  }));\n\n      const handelShowChat = () =>{\n\t\tsetButtonKeyForChatPanel(true)\n\t\tsetShowNotificationBell(false)\n\t\tsetChatPanelHasOpen(false)\n\t\tsetSocketHits(0)\n    // fetchPostAgainJobForChat()\n\t}\n\n    useEffect(() => {\n        if (job && job?.post_again_reference_technician) {\n            setSameTechIdAvailable(true)\n        }\n\n        if(job?.status =='Completed' || job?.status =='Inprogress' || job?.status =='Accepted') {\n            window.location.href='/dashboard';\n        }\n    \n    }, [job])\n\n    useEffect(()=>{\n\n        socket.on(\"open-chat-panel-talkjs-for-customer\",(data)=>{\n            if(data === jobIdParams){\n                setSocketHits((prevHits) => prevHits + 1);\n\t\t        audio.play()\n            }\n        })\n\n        socket.on('decline-post-again', async (data) => {\n            if(data === jobIdParams){\n                openNotificationWithIcon('error', 'Error', \"Previous geek you are trying to reach declined your job.\")\n                updateJob(jobIdParams,{tech_search_time:0,post_again_reference_technician:''})\n                await TwilioApi.updateTwilioConversation(job?.twilio_chat_service?.sid)\n                setSameTechIdAvailable(false)\n                setShowKeepSearchingModal(true)\n                setSameTechIdAvailableSched(true)\n                localStorage.setItem('postAgainJobModal',true)\n            }\n        });\n\n    },[socket])\n\n\n    useEffect(\n        () => {\n            (async ()=>{\n                console.log(\"My console inside/outside job 1\", job, newJobAlertCalled)\n                if(job && newJobAlertCalled){\n                    console.log(\"My console inside/outside job 2\", job)\n                    if (job && user && user.customer && job.customer.id !== user.customer.id) {\n                        console.log(\"window.location.href from helponway\", user.customer.id)\n                        window.location.href = `/dashboard`\n                        window.localStorage.setItem('CurrentStep',7)\n\n                    }\n                    else{\n                        if (job && user) {\n                                console.log(\"My console 1 - inside useEffect if\", job.customer.subscription)\n                            socket.emit(\"join\", job.id)\n                            if ((job.id && job.cardPreAuthorization) || job.customer.subscription){\n                                newJobAlert(job,user, technicianId )\n                            }\n                            // This condition will check in case of transfer case that if customer or it's owner have subscription minutes , if so then we will not hold any payment\n                            else if(job?.customer?.subscription || user?.ownerId){\n                                const checkHaveSubscription = await checkCustomerHaveSubscriptionMinutes(job?.customer);\n                                if(!checkHaveSubscription){\n                                    updateJob(job.id,{cardPreAuthorization:true,payment_type : \"subscription_only\"})\n                                    newJobAlert(job, user,technicianId);\n                                }else{\n                                    // Firstly it will hold the amount from customer if it is holded succedfully then it will redirect to tech search page\n                                const holdChargeResponse  = await checkAuthorizationByHoldingAmount();\n                                console.log(\"holdChargeResponse 2: \",holdChargeResponse)\n\n                                if(holdChargeResponse?.status === \"Successful\"){\n                                    updateJob(job.id,{cardPreAuthorization:true})\n                                    newJobAlert(job, user,technicianId)\n                                }else{\n                                    const holdChargeResponse  = await checkAuthorizationByHoldingAmount();\n                                    if(holdChargeResponse?.status === \"Successful\"){\n                                        updateJob(job.id,{cardPreAuthorization:true})\n                                        newJobAlert(job, user,technicianId)\n                                    }else{\n                                        // This will toast out error and redirect to dashboard\n                                        openNotificationWithIcon('error', 'Error', holdChargeResponse?.message);\n                                        setTimeout(() => {\n                                            window.location.href = \"/dashboard\"\n                                            window.localStorage.setItem('CurrentStep', 7)\n                                        }, 2000);\n                                    }\n                                }\n                                }\n                            }\n                            else{\n                                // let preauth = await authorizeCard(user,job)\n                                // Firstly it will hold the amount from customer if it is holded succedfully then it will redirect to tech search page\n                                const holdChargeResponse  = await checkAuthorizationByHoldingAmount();\n                                console.log(\"holdChargeResponse 1 : \",holdChargeResponse)\n\n                                if(holdChargeResponse?.status === \"Successful\"){\n                                    updateJob(job.id,{cardPreAuthorization:true})\n                                    newJobAlert(job, user,technicianId)\n                                }else{\n                                    const holdChargeResponse  = await checkAuthorizationByHoldingAmount();\n                                    console.log(\"holdChargeResponse 2: \",holdChargeResponse)\n\n                                    if(holdChargeResponse?.status === \"Successful\"){\n                                        updateJob(job.id,{cardPreAuthorization:true})\n                                        newJobAlert(job, user,technicianId)\n                                    }else{\n                                        // This will toast out error and redirect to dashboard\n                                        openNotificationWithIcon('error', 'Error', holdChargeResponse?.message);\n                                        setTimeout(() => {\n                                            window.location.href = \"/dashboard\"\n                                            window.localStorage.setItem('CurrentStep', 7)\n                                        }, 2000);\n                                    }\n                                }\n                            };\n                        }\n                    }\n                }\n            })()\n\t}, [newJobAlertCalled, searchForTechs]);\n\n    /**\n\t* This function is responsible for Pending job chat\n\t* @params :\n\t* @response : Returns chat pannel\n\t* @author : kartar singh\n\t*/\n\t// const fetchPostAgainJobForChat = async()=>{\n\t// \ttry{\n    //             let response = await JobApi.retrieveJob(jobIdParams)\n    //             let techUserId = response.post_again_reference_technician;\n    //             let techUserData = await UserApi.getUserById(techUserId)\n    //             console.log('techUserData ::::',techUserData)\n    //             setDuration(moment.duration(moment(response.primarySchedule).diff(now_time)))\n    //             if(response.post_again && response.post_again_reference_job &&  response.post_again_reference_technician){\n    //                 setShowLoader(true)\n    //                 setShowLoaderForChat(true)\n\n    //                 let customerDataObject = {...response.customer.user}\n    //                 let technicianDataObject = { ...techUserData }\n\n    //                 let customerChatUser = await handleTalkChatUser(customerDataObject)\n    //                 let technicianChatUser = await handleTalkChatUser(technicianDataObject)\n\n    //                 if (user.userType == 'technician') {\n    //                     createTalkUserSession(technicianChatUser)\n    //                 }\n    //                 else {\n    //                     createTalkUserSession(customerChatUser)\n    //                 }\n    //                 let conversationData = await createOrGetUserChat([JSON.stringify(customerDataObject.id), JSON.stringify(technicianDataObject.id)], response.id, response.software.name, response)\n    //                 let conversation = await createOrGetTalkChatConversation(conversationData)\n    //                 let userInbox = await joinTalkChatConversation({ \"customer\": customerChatUser, \"technician\": technicianChatUser, \"conversationId\": response.chatRoomId ? response.chatRoomId : conversationData.jobId })\n    //                 setTimeout(() => {\n    //                     if (userInbox) {\n    //                         setShowLoader(false)\n    //                         setShowLoaderForChat(false);\n    //                         setTimeout(() => {\n    //                             if (inboxRef.current != undefined) {\n    //                                 userInbox.mount(inboxRef.current)\n    //                                 userInbox.onSendMessage(handleSendMessage);\n    //                             }\n    //                             if (user.userType === 'technician') {\n    //                                 setShowChat(true)\n    //                             }\n    //                         }, 2000)\n    //                     }\n    //                 }, 4000)\n    //             }\n\t// \t    }catch (err) {\n    //             console.log(\"error in fetchSingleJob >>\")\n    //         }\n\t// }\n\n\n\n    const checkOwnerStripeId = async (user) =>{\n\t\tif(user && user?.ownerId){\n\n\t\t\t\tconst ownerUserDetails = await UserApi.getUserById(user?.ownerId)\n\t\t\t\tconsole.log('ownerUserDetails ::::',ownerUserDetails)\n\t\t\t\tif(ownerUserDetails?.customer?.stripe_id){\n\t\t\t\t\tconst ownerStripeId = ownerUserDetails?.customer?.stripe_id\n\t\t\t\t\treturn ownerStripeId\n\t\t\t\t}else{\n\t\t\t\t\topenNotificationWithIcon(\"info\", \"Info\", `Please contact your owner to add card to proceed the current job!`)\n\t\t\t\t\thistory.push(\"/\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t}\n\t}\n\n\n    // This function hold the $100 amount from customer and if it is holded succedfully then it will return Successful status otherwise Not Successful\n    const checkAuthorizationByHoldingAmount = async () => {\n        const ownerStripeStatus = await checkOwnerStripeId(user)\n        const stripeId = user?.ownerId ? ownerStripeStatus : user?.customer?.stripe_id\n        const holdChargeResponse = await CustomerApi.holdChargeFromCustomer({\n            'stripe_id': stripeId,\n            'liveUser': (user?.customer?.customerType && user?.customer?.customerType === 'live' ? true : false), \"jobId\": job?.id\n        });\n        return holdChargeResponse;\n\n    }\n\n    const newJobAlert = async(jobInfo, userInfo, technicianId = false)=>{\n        mixpanel.identify(userInfo?.email);\n        mixpanel.track('Customer - keep Searching technician ');\n        mixpanel.people.set({\n            $first_name: userInfo?.firstName,\n            $last_name: userInfo?.lastName,\n        });\n        if( jobInfo.status === \"Pending\" || jobInfo.status ===\"Waiting\" ){\n            console.log(\"inside the status job\", searchForTechs)\n            const notifiedTechs = await JobNotificationHistory.getJobNotificationHistory(jobIdParams);\n            console.log(\"notified techs\", notifiedTechs);\n            if ( notifiedTechs?.totalCount === 0) {\n                console.log(\"No notifiedtech available, so going to call search-for-tech socket\")\n                socket.emit('search-for-tech', {\n                    jobData: jobInfo,\n                    // posted: true,\n                    // status: \"Pending\",\n                    // postedTime: new Date(),\n                    // EstimatedWait: mainEstimatedWait,\n                    searchSameTech: job.post_again_reference_technician ? true : false,\n                    technicianId: job.post_again_reference_technician ? job.post_again_reference_technician : false\n                });\n            }\n\n        }else if(jobInfo.status === \"Scheduled\"){\n            console.log(\"Nothing to do for schedule job here\")\n        }else{\n            console.log(\"window.location.href from helponway\", jobInfo)\n            window.location.href = \"/\"\n        }\n        socket.on(\"meeting:join-button\", (props) => {\n            window.location.href = `/customer/accept-job/${props.res}`\n        })\n    }\n\n    useEffect(() => {\n\t\tif (job) {\n            const timeDiff = calculateTimeDifference(job.tech_search_start_at,job.notifiedTechs,job.tech_search_time)\n            setUseTimer(timeDiff)\n        }\n\t}, [job]);\n\n    useEffect(()=>{\n        if(job && job?.post_again_reference_technician && showKeepSearchingModal){\n            openNotificationWithIcon('info', 'Info', 'Your selected tech is busy somewhere please continue search for other techs.');\n        }\n    },[showKeepSearchingModal])\n\n    useEffect(()=>{\n       if(job){\n            if(job?.post_again_reference_technician && showRendererMint < 4 && showRendererMint > 0){\n                checkGeekerAvailabilityTime(job);\n            }else{\n                if(showRendererMint < 13 && showRendererMint > 4){\n                    checkGeekerAvailabilityTime(job);\n                };\n            };\n       };\n    },[showRendererMint]);\n\n\n\n    const handleScheduleForLaterClick = () => {\n        localStorage.removeItem('postAgainJobModal')\n        setShowScheduleForLaterModal(true)\n    }\n\n    const handleCancelBtn = () => {\n        setShowCancelJobModal(true)\n    }\n\n    /**\n\t * Checking Geeker Availability of time\n\t * @params = ''\n\t * @response : Will check if the job post time is between 9pm to 9am(EDT) and days are Saturday & Sunday then returns boolean value.\n\t * @author : Mritunjay\n\t */\n\n\tfunction checkGeekerAvailabilityTime(job) {\n\t\tconst nonWorkingDays = ['Sat','Sun'];\n\t\tconst usTime = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));\n\t\t//const usDay = usTime.getDay();\n\t\tconst usDay = new Date().toLocaleString('en-US', { timeZone: 'America/New_York',weekday: 'short'});\n\t\tconst workingHours = usTime.getHours();\n\t\t// const customerTypeValid = (user && user?.customer?.customerType ? user?.customer?.customerType !== 'test' : true);\n\t\tconsole.log(\"workingHours :::: >>>>>>\",workingHours, ' / usDay',usDay,' / is weekend',nonWorkingDays.includes(usDay))\n\t\tif ((workingHours >= 21 || workingHours < 9) || (nonWorkingDays.includes(usDay))) {\n            const storedValue = localStorage.getItem('showAfterBusinessHrs');\n            if (storedValue) {\n                // setShowAfterBusinessHrs(storedValue === 'true');\n                setShowModalFooterOffPeak(storedValue === 'true')\n            }else{\n                // setShowAfterBusinessHrs(true)\n                setShowModalFooterOffPeak(true)\n            }\n\t\t\t// mixpanel code\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('Customer - Before or after hours job', { 'usTime': usTime, 'issue': job.id });\n\t\t\tmixpanel.people.set({\n\t\t\t\t$first_name: user?.firstName,\n\t\t\t\t$last_name: user?.lastName,\n\t\t\t});\n\t\t}\n\n        if (workingHours >= 9 && workingHours < 21) {\n            const storedValue = localStorage.getItem('showAfterBusinessHrs');\n            if (storedValue) {\n                setShowAfterBusinessHrs(storedValue === 'true');\n            }else{\n                setShowAfterBusinessHrs(true)\n            }\n\t\t}\n\t};\n\n const renderer = useMemo(() => ({ hours, minutes, seconds }) => {\n        console.log(\"countdown minutes\", minutes);\n        setShowRendererMint(minutes)\n        return <span>{zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}</span>;\n    }, []);\n\n\n    const timesUp = async () => {\n        JobApi.retrieveJob(job?.id).then((job) => {\n            TwilioApi.updateTwilioConversation(job?.twilio_chat_service?.sid).then(() => {\n                setShowKeepSearchingModal(true)\n                setShowScheduleForLaterModal(false)\n                setSearchTimesUp(true)\n            })\n        })\n    }\n\n    return(<>\n        <div className=\"d-flex justify-content-center align-items-center flex-column mt-40-neg mb-50\">\n            <span className=\"job-alive-page-sub-heading mb-1 \">We are matching a Geek to your request...</span>\n            <span className=\"job-alive-page-sub-heading mb-12\">Typical wait time is usually less than {job && job?.post_again_reference_technician ? \"5\" : \"15\"} mins</span>\n            <span className=\"job-alive-page-timer\">\n               <CountDown\n                useTimer={useTimer}\n                renderer={renderer}\n                timesUp={timesUp}\n                />\n            </span>\n            <div className=\"job-alive-page-json-animation\">\n                <Player\n                    autoplay\n                    keepLastFrame={true}\n                    src={jsonAnimation}\n                    className='job-alive-page-json-animation-player'\n                    loop={true}\n                    >\n                </Player>\n            </div>\n            <span className=\"job-alive-page-dont-wait mb-2\">Don't want to wait?</span>\n            <div className=\"d-flex align-items-end flex-column\">\n                <div className=\"scd-and-cancel-btn \">\n                    <BasicButton onClick={handleScheduleForLaterClick} btnTitle={\"Schedule for later\"} height={\"60px\"} width={\"277px\"} background={\"#01D4D5\"} color={\"#fff\"} btnIcon={\"schedule\"} faFontSize={\"16px\"} />&nbsp;&nbsp;&nbsp;&nbsp;\n                    <BasicButton onClick={handleCancelBtn} btnTitle={\"Cancel job\"} height={\"60px\"} width={\"200px\"} background={\"#97abb6\"} color={\"#fff\"} faFontSize={\"16px\"} />\n                </div>\n\n                {job?.post_again && job?.post_again_reference_job && job?.post_again_reference_technician   &&\n                    <div display=\"flex\" style={{marginRight:'-11px'}} justifyContent=\"right\" marginTop={20} marginLeft={10} className=\"float-right invite-tech-btn\">\n                            {chatPanelHasOpen && job?.post_again && job?.post_again_reference_job && job?.post_again_reference_technician ? (\n                                <StyledBadge badgeContent={socketHits} color=\"secondary\">\n                                    <span style={{ display:  \"flex\", justifyContent: \"center\", fontWeight: \"bold\", color: \"#97abb6\", cursor: \"pointer\", pointerEvents: chatPanelHasOpen ? \" \" : \"none\", border:'none', textDecoration:'underline' }} className='bell-icon-class' onClick={handelShowChat}>Having trouble to start call?</span>\n                                </StyledBadge>\n                                ) : (\n                                <span></span>\n                            )}\n                    </div>\n                }\n            </div>\n        </div>\n\n        { buttonKeyForChatPanel && job?.post_again && job?.post_again_reference_job && job?.post_again_reference_technician &&\n           <div className='d-flex justify-content-center mb-5'>\n             <ChatPanelTwilio job={job} width={'700px'} height={'500px'} />\n           </div>\n       //  <ChatPanelAccpetJob socketHits={socketHits} handelCallBackPanel={handelCallBackPanel} refetchChat ={refetchChat} setRefetchChat={setRefetchChat} inboxRef={inboxRef} showLoaderForChat={showLoaderForChat} />\n        }\n\n        <div className=\"job-alive-page-info-div\">\n            <span className=\"job-alive-page-info-div-sub-heading\">What happens next:</span>\n            <div className=\"d-flex justify-content-around align-items-start flex-wrap\">\n                <div className=\"d-flex justify-content-start align-items-start flex-column\">\n                    <span className=\"job-alive-page-info-div-content wrap-content\">When your Geek is ready to connect.</span>\n                    <span className=\"job-alive-page-info-div-content mb-20 wrap-content\">we'll attempt to contact you at:</span>\n                    <span className=\"job-alive-page-info-div-content-bold wrap-content\">{user.email}</span>\n                    <span className=\"job-alive-page-info-div-content-bold wrap-content\">{user.customer.phoneNumber}</span>\n                </div>\n                <div className=\"vertical-line-div\"></div>\n                <div className=\"d-flex justify-content-start align-items-start flex-column\">\n                    <span className=\"job-alive-page-info-div-content wrap-content\">If you chose phone audio, your Geek will</span>\n                    <span className=\"job-alive-page-info-div-content mb-20 wrap-content\">be calling you on following number:</span>\n                    <span className=\"job-alive-page-info-div-content-bold wrap-content\">{defaultContactNumber}</span>\n                </div>\n            </div>\n        </div>\n        {/* all Modal */}\n        { job &&\n        <ChatPanelTwilio style={{visibility:'hidden'}} height={'0px'}  job={job} />\n        }\n        <KeepSearchingModal showKeepSearchingModal={showKeepSearchingModal} setShowKeepSearchingModal={setShowKeepSearchingModal} setShowScheduleForLaterModal={setShowScheduleForLaterModal} jobInfo={jobInfo}  setKeepSearchingFor={setKeepSearchingFor} keepSearchingFor={keepSearchingFor} useTimer={useTimer} setUseTimer={setUseTimer} job={job}  setSearchTimesUp={setSearchTimesUp} sameTechIdAvailable={sameTechIdAvailable} setSameTechIdAvailable={setSameTechIdAvailable} sameTechIdAvailableSched={sameTechIdAvailableSched} showModalFooterOffPeak={showModalFooterOffPeak}/>\n        <ScheduleForLaterModal showScheduleForLaterModal={showScheduleForLaterModal} setShowScheduleForLaterModal={setShowScheduleForLaterModal} scheduleJobTime={scheduleJobTime} setScheduleJobTime={setScheduleJobTime} user={user} jobInfo={jobInfo} job={job} isDashboardSide={false} setShowKeepSearchingModal={setShowKeepSearchingModal} searchTimesUp={searchTimesUp} />\n        <CancelJobConfirmationModal showCancelJobModal={showCancelJobModal} setShowCancelJobModal={setShowCancelJobModal} job={job}/>\n        <AfterBusinessHrsPopUpModal showAfterBusinessHrs = {showAfterBusinessHrs} setShowAfterBusinessHrs = {setShowAfterBusinessHrs} />\n    </ >)\n}\n\nexport default HelpIsOnTheWay\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\HelpIsOnTheWay.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "HelpIsOnTheWayOld.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\"\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport JobSummary from \"../Components/JobSummary\";\nimport {FaClock} from \"react-icons/fa\";\nimport ProgressBar from \"../Components/ProgressBar\"\nimport NumberInRounddiv from \"components/common/NumberInRoundDiv\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport KeepSearchingModal from \"../Components/KeepSearchingModal\";\nimport ScheduleForLaterModal from \"../Components/ScheduleForLaterModal\";\nimport { useSocket } from '../../../../context/socketContext';\nimport { useTools } from '../../../../context/toolContext';\nimport mixpanel from 'mixpanel-browser';\nimport { useLocation } from 'react-router';\nimport Countdown, { zeroPad, } from 'react-countdown';\n\nconst HelpIsOnTheWay = ({jobFlowStepNumber, user, job, jobInfo, scheduleJobTime ,setScheduleJobTime}) => {\n\n    const [showKeepSearchingModal, setShowKeepSearchingModal] = useState(false)\n    const [showScheduleForLaterModal, setShowScheduleForLaterModal] = useState(false)\n    const { socket } = useSocket();\n    const location = useLocation();\n\t  const queryParams = new URLSearchParams(location.search)\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const { openMobileDialogBox, useTimer, setUseTimer } = useTools()\n    const [keepSearchingFor,setKeepSearchingFor] = useState(\"1 hours\");\n\n    useEffect(() => {\n\t\tif (job) {\n\t\t\tsocket.emit(\"join\", job.id)\n\t\t\tif (job.id) {\n\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\tmixpanel.track('Customer - Connecting techinician progress bar');\n\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t});\n\n\t\t\t\tsocket.emit('new-job-alert', {\n\t\t\t\t\tjobData: job,\n\t\t\t\t\tposted: true,\n\t\t\t\t\tstatus: \"Pending\",\n\t\t\t\t\tpostedTime: new Date(),\n\t\t\t\t\t// EstimatedWait: mainEstimatedWait,\n\t\t\t\t\tsearchSameTech: technicianId ? true : false,\n\t\t\t\t\ttechnicianId: technicianId\n\t\t\t\t});\n\n\t\t\t\tsocket.on(\"meeting:join-button\", (props) => {\n\t\t\t\t\twindow.location.href = `/customer/accept-job/${props.res}`\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\t}, [job, useTimer]);\n\n    const handleScheduleForLaterClick = () => {\n        setShowScheduleForLaterModal(true)\n    }\n\n    const timesUp = () => {\n        setShowKeepSearchingModal(true)\n        // setUseTimer(100000)\n    }\n\n    /**\n     * Following function is used to searching technician.\n     * @author : Mritunjay\n     */\n\tconst renderer = ({ hours, minutes, seconds }) => {\n\t\treturn <span>{zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}</span>;\n\t};\n\n    return(<>\n        <Container>\n            <Row>\n                <Col md={7} className=\"pr-70\">\n                    <Row className=\"align-items-end\">\n                        <Col md={8}>\n                            <Row><span className=\"job-alive-heading\">Help is on the way!</span></Row>\n                            <Row><span className=\"job-alive-sub-heading\">We are matchng a Geek to your request...</span></Row>\n                        </Col>\n                        <Col md={4} className=\"pr-0\">\n                            <div className=\"d-flex justify-content-end\">\n                                <div className=\"timer-div\">\n                                    <FaClock className=\"fa-clock\" />\n                                    <div className=\"timer-clock\" >\n                                        <Countdown\n                                            date={Date.now() + useTimer}\n                                            renderer={renderer}\n                                            key={useTimer}\n                                            onComplete={timesUp}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n                    <ProgressBar />\n                    <Row>\n                        <Col className=\"pl-0 pr-0\">\n                            <hr className=\"mt-50 mb-50\" />\n                        </Col>\n                    </Row>\n                    <Row className=\"mb-28\" >\n                        <span className=\"cust-summary-heading\">In order to begin your session:</span>\n                    </Row>\n                    <Row>\n                        <Col md={1} className=\"pl-0 pr-0\" >\n                            <NumberInRounddiv title={\"1\"} fontSize={\"20px\"} color={\"#fff\"} height={\"44px\"} width={\"44px\"} backgroundColor={\"#01D4D5\"} borderColor={\"#01D4D5\"}  />\n                        </Col>\n                        <Col md={11}>\n                            <div className=\"cust-summary-sub-heading\">When your expert is ready to connect, we'll attempt</div>\n                            <div className=\"cust-summary-sub-heading mb-20\">to contact you at:</div>\n                            <div className=\"cust-summary-email\">xxxx@gmail.com</div>\n                            <div className=\"cust-summary-phone-number mb-30\">xxx-xxx-xxxx</div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={1} className=\"pl-0 pr-0\" >\n                            <NumberInRounddiv title={\"2\"} fontSize={\"20px\"} color={\"#fff\"} height={\"44px\"} width={\"44px\"} backgroundColor={\"#01D4D5\"} borderColor={\"#01D4D5\"}  />\n                        </Col>\n                        <Col md={11}>\n                            <div className=\"cust-summary-sub-heading\">Be at your computer with internet access in order to</div>\n                            <div className=\"cust-summary-sub-heading\">start a screen share session.</div>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={5}>\n                    <JobSummary jobFlowStepNumber={jobFlowStepNumber} jobInfo={jobInfo}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col className=\"pl-0 pr-0\">\n                    <hr className=\"mt-50 mb-50\" />\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n                <Col>\n                    <div className=\"text-center dont-wait-text\">Don't want to wait?</div>\n                    <div className=\"d-flex justify-content-center align-items-center mt-20 mb-50\">\n                        <BasicButton onClick={handleScheduleForLaterClick} btnTitle={\"Schedule for later\"} height={\"60px\"} width={\"277px\"} background={\"#01D4D5\"} color={\"#fff\"} btnIcon={\"schedule\"} faFontSize={\"16px\"} />\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n\n        {/* all Modal */}\n        <KeepSearchingModal showKeepSearchingModal={showKeepSearchingModal} setShowKeepSearchingModal={setShowKeepSearchingModal} setShowScheduleForLaterModal={setShowScheduleForLaterModal} jobInfo={jobInfo}  setKeepSearchingFor={setKeepSearchingFor} keepSearchingFor={keepSearchingFor} setUseTimer={setUseTimer} />\n        <ScheduleForLaterModal showScheduleForLaterModal={showScheduleForLaterModal} setShowScheduleForLaterModal={setShowScheduleForLaterModal} scheduleJobTime={scheduleJobTime} setScheduleJobTime={setScheduleJobTime} user={user} jobInfo={jobInfo} job={job} isDashboardSide={false} />\n    </>)\n}\n\nexport default HelpIsOnTheWay",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\HelpIsOnTheWayOld.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "IssueDescription.js",
                                                                    "fileData": "import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  Row, Col, Select, Modal\n} from 'antd';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n// import { ConsoleSqlOutlined } from '@ant-design/icons';\nimport mixpanel from 'mixpanel-browser';\nimport {\n  // StepActionContainer,\n  StepTitle,\n  IssueSelect,\n  BodyContainer,\n  // SectionTitle,\n  WarningText,\n  TitleContainer,\n} from './style';\n\nimport ItemLabel from '../../../../components/ItemLabel';\nimport TextEditor from '../../../../components/TextEditor';\nimport Box from '../../../../components/common/Box';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faArrowRight,faArrowLeft} from '@fortawesome/free-solid-svg-icons';\nimport {JOB_CHARACTERS_ALLOWED,JobTags} from '../../../../constants'\nimport RoundSelectors from '../../../../components/Selectors';\nimport { useUser } from '../../../../context/useContext';\nimport { useJob } from '../../../../context/jobContext';\nimport {useNotifications} from '../../../../context/notificationContext';\nimport { useSocket } from '../../../../context/socketContext';\nimport * as JobService from \"../../../../api/job.api\";\nimport * as JobCycleApi from \"../../../../api/jobCycle.api\";\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { useLocation } from 'react-router';\nimport { EditorState,ContentState } from 'draft-js';\nimport Logo from 'components/common/Logo';\nimport { GAevent, PushUserDataToGtm } from '../../../../utils';\nconst { Option } = Select;\n\nconst IssueDescription = ({\n  onNext,\n  onBack,\n  software,\n  subSoftware,\n  expertise,\n  setExpertise,\n  subOption,\n  setSubOption,\n  issueDescription,\n  issueDescriptionValue,\n  setIssueDescription,\n  setStep,\n  audio,\n  selectedVal,\n  setSelectedVal,\n  setAudio,\n  jobId,\n  setJobFlowStep,\n  setComponentToRenderIssue,\n  guestJobValue,\n  jobFlowsDescriptions,\n  intialPrice,\n  finalPrice,\n  estimatedPrice,\n  setInitialPrice,\n  estimatedDuration,\n  setEstimatedPrice,\n  estimatedTime,\n  setFinalPrice,\n  setDurationTime,\n  setEstimatedWait,\n  setEstimatedTime,\n  jobData,\n  softwareId,\n  setJobData,\n  setSoftware,\n  setSubSoftware\n}) => {\n    const [errors, setErrors] = useState({});\n    // const showSubSoftwareList = useMemo(() => (software && software.subSoftware && software.subSoftware.length && !software.sub_option.length), [software]);\n    const { socket } = useSocket();\n    const { user } = useUser();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const repostJob = queryParams.get('repost') ? queryParams.get('repost') : false;\n    const [showSubSoftwareList, setShowSubSoftwareList] = useState(false);\n    const [check, setCheck] = useState(subSoftware)\n    const { job, fetchJob,updateJob,setJob } = useJob();\n    const [changeStep,setChangeStep] = useState(false);\n    const [newIssueDescription,setNewIssueDescription] = useState()\n    // const [componentToRender, setComponentToRender] = useState((jobId ? '' : 'issueDescription'));\n    const {fetchNotifications} = useNotifications()\n    const [jobCharacter,setJobCharacter] = useState(JOB_CHARACTERS_ALLOWED)\n    const [currentStep, setCurrentStep] = useState(0);\n    const [priceLoaded,setPriceLoaded]  = useState(false);\n    const [disableArea,setDisabledArea] = useState(false)\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\n    const [subSoftwareSelected, setSubSoftwareSelected] = useState(false)\n  //state to value of duration\n  const [selectedValdur,setSelectedValdur]= useState(jobData && jobData.selectedValdur !== \"None\" ? jobData.selectedValdur : \"less than 2 hours\");\n    const expertiseList = useMemo(() => {\n        if(software && ((software.subSoftware === undefined) || (software?.subSoftware.length === 0))){\n            setSubSoftware(undefined)\n        }\n        if (subSoftware && software?.subSoftware) {\n            let subSoftId = (subSoftware.id ? subSoftware.id : subSoftware)\n            return software.subSoftware.find(item => item.id === subSoftId) ?\n                                                                            software.subSoftware.find(item => item.id === subSoftId).sub_option\n                                                                            : \"\";\n        }\n        return (software ? software.sub_option : []);\n        // return [];\n    }, [software, showSubSoftwareList, subSoftware]);\n\n    useEffect(()=>{\n        // setSubOption('')\n        // setSubSoftware('')\n        // let tempData = JSON.parse(JSON.stringify(jobData))\n        // tempData.subOption = ''\n        // setJobData(tempData)\n        //GA3 tag commented by Vinit on 24/04/2023.\n        GAevent('Job Initiate','job_initiated','job_initiated',user ? (user?.customer ? user.customer?.id : user.id) : 'guest_user')\n        if(issueDescriptionValue){\n            setIssueDescription(issueDescriptionValue)\n            setEditorState(EditorState.createWithContent(ContentState.createFromText(issueDescriptionValue)))\n        }\n        if(process.env.REACT_APP_URL){\n          const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n          //PushUserDataToGtm('job_initiated', user, appUrl);\n          PushUserDataToGtm('job_initiated', user, 'IssueDescription');\n        }\n    },[])\n\n\n    useEffect(()=>{\n        if(changeStep && jobData){\n            console.log(\"step changed >>>>>>>>>>>>>>>>>>\",changeStep)\n            console.log(\"jobData changed >>>>>>>>>>>>>>>>> \",jobData)\n            setJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n        }\n    },[changeStep,jobData])\n\n    useEffect(() => {\n         setJobCharacter(JOB_CHARACTERS_ALLOWED - issueDescriptionValue.length)\n         if(issueDescriptionValue.length === 0){\n            setJobCharacter(JOB_CHARACTERS_ALLOWED)\n         }\n         if(issueDescriptionValue.length  > JOB_CHARACTERS_ALLOWED){\n            setJobCharacter(0)\n         }\n        setErrors({\n            issueDescription: '',\n        });\n    }, [issueDescriptionValue]);\n\n    const onChangeIssue = (newState )=> {\n        setNewIssueDescription(newState.getCurrentContent().getPlainText(''))\n        setEditorState(newState);\n        setIssueDescription(newState)\n    }\n\n    useEffect(() => {\n        console.log(\"software >>>>>>>> \",software)\n        if(software?.name == \"MS Office\"){\n            setDisabledArea(true)\n        }\n        if (software && software?.subSoftware && software?.subSoftware.length > 0 ) {\n            setShowSubSoftwareList(true);\n            setDisabledArea(true)\n        }\n        if(check){\n            setDisabledArea(false)\n        }\n    }, [software]);\n\n    useEffect(()=>{\n        if(!job && jobId){\n            fetchJob(jobId)\n        }\n    },[])\n\n    useEffect(()=>{\n        if(user){\n            mixpanel.track('Customer - On IssueDescription Page', { 'Email': user.email });\n        }\n    },[user])\n    useEffect(()=>{\n       if( repostJob && job){\n        setSubSoftware(job.subSoftware)\n        setSoftware(job.software)\n       }\n        if(job && job.status === 'Pending'  ){\n\n            // console.log(\"job in issueDescription ::\",job);\n            setJobData(job)\n\n            // let customerId = (user && user.customer ? user.customer.id : '');\n            let softwareData = (job.subSoftware && job.subSoftware.id ? job.subSoftware : job.software);\n            updateStateForJob(softwareData)\n\n            // setComponentToRender('jobDetailView');\n        }\n    },[job])\n\n    const HandleSubSoftwareChange = (value) => {\n        setSubSoftwareSelected(true)\n        // setSubSoftware(value);\n        console.log(\"hyyy1\",value)\n        setDisabledArea(false)\n        let software_li = software.subSoftware;\n        for (const l in software.subSoftware) {\n            // console.log(software.subSoftware[l].id,\">>my id\")\n            if (software.subSoftware[l].id === value) {\n                software_li = software.subSoftware[l].sub_option;\n            }\n        }\n        let id_to_set = '';\n        for (const k in software_li) {\n            // console.log(\"condtion >>>>>>>>>>>>>>\",sub_li[b].name === 'I am not sure')\n            if (software_li[k].name === 'I am not sure') {\n                id_to_set = software_li[k].id;\n            }\n        }\n        if(value && software.subSoftware){\n            let selectedSubSoftware = software.subSoftware.find(item => item.id === value);\n            // console.log(\"selectedSubSoftware\",selectedSubSoftware)\n            // console.log(\"selectedSubSoftware.id\",selectedSubSoftware.id)\n            if(selectedSubSoftware){\n                console.log('heree>>>>>>>>>>>>>>>>>>>>>>',selectedSubSoftware)\n                setSubSoftware(selectedSubSoftware);\n            }\n        }\n\n        setSelectedVal(id_to_set);\n        // setShowselect(true);\n    };\n\n    // const handlePastedText = (text)=>{\n    //     let currentContentLength = text.length\n    //     let lengthOfJob = editorState.getCurrentContent().getPlainText('').length\n    //     if(currentContentLength >JOB_CHARACTERS_ALLOWED){\n    //         let orignalContent = text.substring(0,JOB_CHARACTERS_ALLOWED)\n\n    //         setJobCharacter(0)\n    //         setErrors({\n    //             issueDescription: `Only ${JOB_CHARACTERS_ALLOWED} characters are allowed`,\n    //         });\n    //         setEditorState(EditorState.createWithContent(ContentState.createFromText(orignalContent)))\n    //         return 'handled'\n    //     }\n    //     if (lengthOfJob > JOB_CHARACTERS_ALLOWED){\n    //         return 'handled'\n    //     }\n    // }\n\n    /**\n *\n * @params :\n * @return :\n * @author : kartar\n **/\n\n    const handlePastedText = (text)=>{\n\n        let prev_issueDescriptionValue = issueDescriptionValue.length\n        let currentContentLength = text.length\n        let combinedlength = prev_issueDescriptionValue + currentContentLength\n        let value = issueDescriptionValue + text\n        let lengthOfJob = editorState.getCurrentContent().getPlainText('').length\n\n\n        if(combinedlength > JOB_CHARACTERS_ALLOWED){\n            let orignalContent = value.substring(0,JOB_CHARACTERS_ALLOWED)\n            setJobCharacter(0)\n            setErrors({\n                issueDescription: `Only ${JOB_CHARACTERS_ALLOWED} characters are allowed`,\n            });\n            setEditorState(EditorState.createWithContent(ContentState.createFromText(orignalContent)))\n            return 'handled'\n        }\n        if (lengthOfJob > JOB_CHARACTERS_ALLOWED){\n            return 'handled'\n        }\n\n    }\n\n    const handleNext = async () => {\n        if (!issueDescriptionValue) {\n            setErrors({\n                issueDescription: 'You should fill out the description field!',\n            });\n            return;\n        }\n        if(issueDescriptionValue.length > JOB_CHARACTERS_ALLOWED){\n            setErrors({\n                issueDescription: `Only ${JOB_CHARACTERS_ALLOWED} characters are allowed`,\n            });\n            return;\n        }\n        // if(!selectedValdur){\n        //     setErrors({\n        //         issueDuration: 'Select a value for duration',\n        //     });\n        //     return;\n        // }\n        /*;\n        let customer = user?.customer;\n        if (user && !user.customer) {\n            customer = await CustomerApi.createCustomer({\n                user: user.id,\n            });\n            customerId = customer.id;\n            await refetch();\n        }\n\n        console.log(\"softwareData ::\",softwareData)*/\n        /*const job = await createJob({\n          software: software.id,\n          subSoftware,\n          expertise,\n          subOption,\n          customer: customerId,\n          issueDescription: issueDescriptionValue,\n          level: 'advanced',\n          estimatedTime: (softwareData ? softwareData.estimatedTime : '0-0'),\n          estimatedPrice: (softwareData ? softwareData.estimatedPrice : '0-0'),\n        });*/\n        // console.log(\"job ::\",job)\n        // console.log(\"customer\",customer)\n        // console.log(\"customer?.status\",customer?.status)\n        // if (customer?.status === 'completed') {\n        //   console.log(\"Inside if part....\")\n          // mixpanel code//\n          if(user){\n\n              mixpanel.identify(user?.email);\n              mixpanel.track('Customer - Job description added');\n              mixpanel.people.set({\n                  $first_name: user?.firstName,\n                  $last_name: user?.lastName,\n              });\n          }\n          // mixpanel code//\n\n          //history.push('/customer/create-job', { jobId: job.id });\n        // } else {\n          // onNext();\n        // }\n\n        let customerId = (user && user.customer ? user.customer.id : '');\n        let softwareData = (subSoftware && subSoftware.id ? subSoftware : software);\n        console.log(\"job after next >>>>>>>>>>>>>>>>>>>> \",newIssueDescription)\n        if(repostJob && job && job.issueDescription !== newIssueDescription){\n            await updateJob(job.id,{issueDescription:newIssueDescription})\n        }\n        if(  softwareData ){\n            updateStateForJob(softwareData)\n            let software_object = software ? software : softwareData\n            console.log(\"software_object >>>>>>>>>\",software_object)\n            let jobDataTemp = {\n              software: (software ? software : softwareData),\n              subSoftware:subSoftware,\n              expertise,\n              subOption,\n              customer: customerId,\n              issueDescription: issueDescriptionValue,\n              selectedValdur:software_object.askForDuration ?selectedValdur:\"None\",\n              level: 'advanced',\n              estimatedTime: (softwareData ? softwareData.estimatedTime : '0-0'),\n              estimatedPrice: (softwareData ? softwareData.estimatedPrice : '0-0'),\n            }\n            if (job === undefined || job.id === undefined){\n                setJobData(jobDataTemp)\n            }\n            else{\n                setJobData(job)\n            }\n            // console.log(\">>>>>>> job >>>>>>>> \",job)\n            // let newUrlIS =  window.location.origin + `/${job.id}`;\n            // window.history.pushState({}, null, newUrlIS);\n            // onNext();\n            // setChangeStep(true)\n            setJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n            // setComponentToRender('jobDetailView')\n\n\n\n\n        }else{\n            setErrors({\n                issueDescription: 'Unable to get software info. Please reload your page and try again!',\n            });\n            return;\n        }\n\n    };\n\n\n    // const handleNext = async () => {\n    //     if (!issueDescriptionValue) {\n    //         setErrors({\n    //             issueDescription: 'You should fill out the description field!',\n    //         });\n    //         return;\n    //     }\n    //     if(issueDescriptionValue.length > JOB_CHARACTERS_ALLOWED){\n    //         setErrors({\n    //             issueDescription: `Only ${JOB_CHARACTERS_ALLOWED} characters are allowed`,\n    //         });\n    //         return;\n    //     }\n    //     // if(!selectedValdur){\n    //     //     setErrors({\n    //     //         issueDuration: 'Select a value for duration',\n    //     //     });\n    //     //     return;\n    //     // }\n    //     /*;\n\n    //     let customer = user?.customer;\n\n    //     if (user && !user.customer) {\n    //         customer = await CustomerApi.createCustomer({\n    //             user: user.id,\n    //         });\n    //         customerId = customer.id;\n    //         await refetch();\n    //     }\n\n\n    //     console.log(\"softwareData ::\",softwareData)*/\n    //     const job = await createJob({\n    //       software: software.id,\n    //       subSoftware,\n    //       expertise,\n    //       subOption,\n    //       customer: customerId,\n    //       issueDescription: issueDescriptionValue,\n    //       level: 'advanced',\n    //       estimatedTime: (softwareData ? softwareData.estimatedTime : '0-0'),\n    //       estimatedPrice: (softwareData ? softwareData.estimatedPrice : '0-0'),\n    //     });\n    //     console.log(\"job ::\",job)\n    //     console.log(\"customer\",customer)\n    //     console.log(\"customer?.status\",customer?.status)\n    //     if (customer?.status === 'completed') {\n    //       console.log(\"Inside if part....\")\n    //       // mixpanel code//\n    //       if(user){\n\n    //           mixpanel.identify(user.customer.user.email);\n    //           mixpanel.track('Customer - Job description added');\n    //           mixpanel.people.set({\n    //               $first_name: user.customer.user.firstName,\n    //               $last_name: user.customer.user.lastName,\n    //           });\n    //       }\n    //       // mixpanel code//\n\n    //       history.push('/customer/create-job', { jobId: job.id });\n    //     } else {\n    //       onNext();\n    //     }\n\n    //     let customerId = (user && user.customer ? user.customer.id : '');\n    //     let softwareData = (subSoftware && subSoftware.id ? subSoftware : software);\n    //     if(  softwareData ){\n    //         updateStateForJob(softwareData)\n    //         let software_object = software ? software : softwareData\n    //         console.log(\"software_object >>>>>>>>>\",software_object)\n    //         let jobDataTemp = {\n    //           software: (software ? software : softwareData),\n    //           subSoftware:subSoftware,\n    //           expertise,\n    //           subOption,\n    //           customer: customerId,\n    //           issueDescription: issueDescriptionValue,\n    //           selectedValdur:software_object.askForDuration ?selectedValdur:\"None\",\n    //           level: 'advanced',\n    //           estimatedTime: (softwareData ? softwareData.estimatedTime : '0-0'),\n    //           estimatedPrice: (softwareData ? softwareData.estimatedPrice : '0-0'),\n    //         }\n    //         if (job === undefined || job.id === undefined){\n    //             setJobData(jobDataTemp)\n    //         }\n    //         else{\n    //             setJobData(job)\n    //         }\n    //         setComponentToRender('jobDetailView')\n    //     }else{\n    //         setErrors({\n    //             issueDescription: 'Unable to get software info. Please reload your page and try again!',\n    //         });\n    //         return;\n    //     }\n\n    // };\n\n\n    function handleDecline(updateJobVar=false,userId=false,jobId=false,tag=false){\n        // updateJobVar variable value comes as target event when this function is called without arguments.\n        // The actual value this variable should receive is job.\n        // Thats why the following of condition is there\n        Modal.confirm({\n            title: 'Are you sure you want to decline this job?',\n            okText :\"Yes\",\n            cancelText:\"No\",\n            className:'app-confirm-modal',\n            onOk :async (data)=>{\n                let lifeCycleTag = ''\n                if(job!==false){\n                await JobCycleApi.create(JobTags.DECLINED_AFTER_SEARCH, jobId);\n                }\n                if(userId!= false){\n                    if(job && job.is_transferred && job.is_transferred == true ){\n                        lifeCycleTag = JobTags.DECLINED_AFTER_TRANSFER;\n                    }else{\n                        lifeCycleTag = JobTags.DECLINED;\n                    }\n                    await JobCycleApi.create(lifeCycleTag, false, userId);\n                }\n                if(updateJobVar.customer != undefined){\n                    updateJob(updateJobVar.id,{\"status\":\"Declined\"})\n                    fetchNotifications({\"user\":updateJobVar.customer.user.id})\n                    socket.emit(\"job-declined-by-customer\")\n                    window.location.href =  \"/\"\n                }else{\n                    window.location.href =  \"/\"\n                }\n\n            }\n        })\n    }\n\n    const handleAreaChange = async (value)=>{\n        try{\n            console.log(\"value >>>>>>>>>>>>>>>>>>>>>>> \",value)\n            setErrors({ ...errors, expertise: '' });\n            setExpertise(value);\n            setSubOption(value);\n            setSelectedVal(value);\n        }\n        catch(err){\n            console.log(\"error in handleAreaChange ::: \",)\n        }\n    }\n\n    const fetchEstimatedWaitAccordingToLiveUser = async ()=>{\n        let get_all_status = []\n        const data = await JobService.getAllLiveTechnicians()\n\n        if(data.length > 0){\n            for(let i=0; i <= data.length -1 ; i++){\n                if(data[i]['experiences'].includes(software.id)){\n                    if(data[i]&&data[i].user&&data[i].user.technician){\n                        get_all_status.push(data[i].user.technician.status)\n                    }\n                }\n            }\n            let unique_status = [...new Set(get_all_status)]\n\n            if(unique_status.includes('Available')){\n                setEstimatedWait('10-15 mins')\n                // setMainEstimatedWait(\"5\")\n            }\n            else if(unique_status.includes('Busy')){\n                setEstimatedWait('10-15 mins')\n                 // setMainEstimatedWait(\"15\")\n            }\n            else{\n                findAllSoftRelatedTech()\n            }\n\n            // setRunOnce(true)\n        }\n        else{\n            findAllSoftRelatedTech()\n            // setRunOnce(true)\n        }\n    }\n\n\n    const findAllSoftRelatedTech =()=>{\n        let retrieve_tech = TechnicianApi.getTechnicians({})\n        let got_match = false\n        retrieve_tech.then(function(result) {\n             // console.log('result>>>>>>>>>>>>',result)\n             let all_tech = result.data\n             for(let i=0; i <= all_tech.length -1 ; i++){\n                let experiences = all_tech[i]['expertise']\n\n                for(let i=0; i <= experiences.length -1 ; i++){\n                    // console.log('job>>>>>>>>>>>>>',job)\n                     if(experiences[i]['software_id'] === software.id){\n                         // console.log('founddddddddddd>>>>>',got_match)\n                        got_match = true\n                        break\n                    }\n                }\n            }\n            // console.log('got_match>>>>>',got_match)\n            if(got_match){\n                let softwareData = (software.subSoftware && software.subSoftware.id ? software.subSoftware : software)\n                setEstimatedWait((softwareData ? softwareData.estimatedWait +' mins': 'NA'))\n\n            }else{\n                setEstimatedWait('No tech found')\n            }\n        })\n    }\n\n\n    const handleBack = ()=>{\n        console.log(\">>>>>>>>>>>>>>>>>>CCCCCC\",)\n        try{\n            if(softwareId){\n                window.history.back()\n            }\n            setJobFlowStep(0)\n\n        }\n        catch(err){\n            console.log(\"error in handleBack >>>>\",err)\n            setCurrentStep(0)\n        }\n    }\n\n    const updateStateForJob = (softwareData) => {\n\n\n        setEstimatedTime((softwareData ? softwareData.estimatedTime : 'NA'))\n        setDurationTime((softwareData ? softwareData.estimatedTime : 'NA'))\n        setEstimatedPrice((softwareData ? softwareData.estimatedPrice : 'NA'))\n        fetchEstimatedWaitAccordingToLiveUser()\n        set_price_value(softwareData)\n        setEstimatedWait((softwareData ? softwareData.estimatedWait +' mins': 'NA'));\n    }\n\n\n    const set_price_value = (softwareData,hire_expert=false) =>{\n        console.log('set_price_value>>>>>>>>>>>>>>>>>>>>>>',hire_expert)\n        let price_per_six_min = softwareData.rate\n        let time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n        let time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1  ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n        let main_price = ''\n        if(hire_expert){\n            main_price = softwareData.twoTierEstimatePrice\n        }else{\n            main_price = softwareData.estimatedPrice\n        }\n        let price1 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[0]) : 0)\n        let price2 = (softwareData && String(main_price).indexOf('-') !== -1  ? parseInt(String(main_price).split(\"-\")[1]) : 0)\n\n        price1 = (price1 ? price1 : price_per_six_min )\n        price2 = (price2 ? price2 : price_per_six_min )\n        let initPriceToShow = (time1/6)*parseInt(price1)\n        initPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 'NA')\n        let finalPriceToShow = (time2/6)*parseInt(price2)\n        finalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 'NA')\n        setInitialPrice(initPriceToShow)\n        setFinalPrice(finalPriceToShow)\n        setPriceLoaded(true)\n    }\n\n    return (\n        <React.Fragment key=\"issuedecription\">\n            <Row>\n                <Container span={24} className=\"\">\n                    <Logo user={user} />\n                    <StepTitle className=\"font-nova mb-2 mt-30\">You need technical support</StepTitle>\n                    <div className=\"select-box-labels font-nova mx-auto text-centre\">\n                        <span className='font-size-17'></span>\n                    </div>\n                    <BodyContainer span={24}>\n                        {/*\n                            <TitleContainer className=\"ant-row\">\n                            <SectionTitle>\n                                Is your issue limited to any of these areas?\n                            </SectionTitle>\n                            </TitleContainer>\n                        */}\n                        <Row>\n                            <ItemLabel className=\"text-left text-label\">\n                                Software: <span className=\" text-value\"> { job && job.software ? job.software.name : software?.name}</span>\n                             </ItemLabel>\n                        </Row>\n\n                        { (showSubSoftwareList) ? (\n                                <Row className=\"display-flex flex-column\" >\n                                    <Col>\n                                        <ItemLabel className=\"text-label text-left\">\n                                               Select Sub Software\n                                        </ItemLabel>\n                                    </Col>\n                                    <Col>\n                                        {   software?.subSoftware != undefined &&\n                                             <>\n                                                {\n                                                    software?.subSoftware.map(item => {\n                                                    return <RoundSelectors key={item.id} software={item} isActive={subSoftware && subSoftware.id === item.id}  onClick={()=>HandleSubSoftwareChange(item.id)} />\n                                                    })\n                                                }\n                                            </>\n                                        }\n                                    </Col>\n                                        {\n                                            errors.subSoftware && (\n                                                <WarningText>\n                                                    {errors.subSoftware}\n                                                </WarningText>\n                                            )\n                                        }\n\n                                </Row>\n                            ) : <></>\n                        }\n                         <Row className=\"display-flex flex-column mb-2\">\n                            {expertiseList && expertiseList.length > 0 && (((software.subSoftware) && (software?.subSoftware.length > 0) ) ? subSoftwareSelected || ( jobData && jobData.subOption && jobData?.subOption.length)>0 : true) && <>\n                                <Col>\n                                    <ItemLabel className=\"text-left text-label\">\n                                    Select area\n                                    </ItemLabel>\n                                </Col>\n                                {/* <Col className=\"max-height-100 overflow-hidden\"> */}\n                                <Col className=\"d-flex flex-wrap\">\n                                {\n                                    expertiseList.map((item, index) => {\n                                        let obj = {\"name\":item}\n                                      return <RoundSelectors key={index}  software={obj} isActive={subOption && subOption === item}  onClick={()=>handleAreaChange(item)} />\n                                    //   <div>test</div>\n                                    })\n                                }\n                                </Col>\n                                </>\n                            }\n                        </Row>\n                        { software?.askForDuration &&\n                            <TitleContainer >\n                                <Box display=\"flex\" direction=\"column\" alignItems=\"flex-start\"  position=\"relative\">\n\n                                    <ItemLabel className=\"text-left text-label\">Please select the amount of time you think it might take </ItemLabel>\n                                       <div className=\"shadow-select-box-wrapper w-full\">\n                                            <IssueSelect className=\"shadow-select-box w-full\"\n                                                value={selectedValdur}\n                                                onChange={(value) => {\n                                                    setErrors({ ...errors, issueDuration: '' });\n                                                    setSelectedValdur(value);\n                                                }}\n                                            >\n                                                <Option key=\"dura_1\" value=\"less than 2 hours\" className=\"font-nova\" selected> I'm looking for a fast and quick service</Option>\n                                                <Option key=\"dura_2\" value=\"more than 2 hours\" className=\"font-nova\">I need more time for a complex Project</Option>\n                                            </IssueSelect>\n                                        </div>\n\n                                </Box>\n                            </TitleContainer>}\n\n                        <Row className=\"mt-3\">\n                            <Col className='col-8 mx-0 px-0'>\n                                <ItemLabel className=\"text-left text-label\">\n                                    Describe your issue\n                                    <span className=\"colorred\">*</span>\n                                </ItemLabel>\n                            </Col>\n\n                            {/* <Col className=''>\n                                <infoText className=\"infoText\">\n                                    {jobCharacter} characters allowed\n                                </infoText>\n                            </Col> */}\n\n                            <IssueDescriptionSection>\n                                <TextEditor value={repostJob && job && job?.issueDescription ? job.issueDescription : issueDescription}   editorState={editorState} handlePastedText={handlePastedText}  onChange={onChangeIssue} className=\"issue-description font-nova\" />\n                                {\n                                    errors.issueDescription && (\n                                        <WarningText>\n                                            {errors.issueDescription}\n                                        </WarningText>\n                                    )\n                                }\n                            </IssueDescriptionSection>\n\n\n                                <div className='charsAllowed'>\n                                    {jobCharacter} characters remaining\n                                </div>\n\n                         </Row>\n\n                    </BodyContainer>\n                    <BodyContainer>\n                        <Row>\n                            <Col className=\"col-6 \">\n                                {!repostJob && <Button onClick={handleBack} className=\"btn sm-btn-back hw-60 float-left\"><span> </span><FontAwesomeIcon className='arr-size' icon={faArrowLeft} /></Button>}\n                            </Col>\n\n                            <Col className=\"col-6\">\n                                <Button onClick={handleNext} className=\"btn sm-btn-color hw-60 float-right\"><span> </span><FontAwesomeIcon className='arr-size' icon={faArrowRight} /></Button>\n                            </Col>\n                        </Row>\n                    </BodyContainer>\n\n\n                </Container>\n            </Row>\n        </React.Fragment>\n\n  );\n};\n\nconst Container = styled(Col)`\n  display: flex !important;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n\n`;\nconst IssueDescriptionSection = styled(Col)`\n  justify-content: revert;\n  display: flex;\n  flex-direction: column;\n  align-items: baseline;\n  margin-bottom: 5px;\n  width: 100%;\n  span {\n    text-align: left;\n  }\n  position: relative;\n`;\n\nexport default IssueDescription;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\IssueDescription.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "JobSummary.js",
                                                                    "fileData": "import React, {useState, useCallback, useEffect} from \"react\"\nimport CheckInCircle from 'components/CheckInCircle';\nimport ScheduleForLater from '../Components/ScheduleForLater';\nimport BasicButton from 'components/common/Button/BasicButton';\nimport mixpanel from 'mixpanel-browser';\nimport { useAuth } from '../../../../context/authContext';\nimport { useJob } from '../../../../context/jobContext';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\nimport { JobTags, INACTIVE_ACCOUNT_MESSAGE, SECRET_KEY, INACTIVE_ACCOUNT_STATUS_MSG,LAUNCHDARKLY_JAAS_INTEGRATION } from '../../../../constants';\nimport { useSocket } from '../../../../context/socketContext';\nimport * as CustomerApi from '../../../../api/customers.api';\nimport * as PromocodeApi from '../../../../api/promoCode.api';\nimport * as JobApi from '../../../../api/job.api';\n// import * as TechnicianApi from '../../../../api/technician.api';\nimport {  openNotificationWithIcon, GAevent,openNotificationWithHtml,isWorkingHours, decideEstimatesToShowUsingLD, checkCustomerHaveSubscriptionMinutes } from '../../../../utils/index.js';\nimport { useHistory, useLocation } from 'react-router';\nimport { isMobile, isTablet } from 'react-device-detect';\nimport { Modal, Spin } from 'antd';\nimport { klaviyoTrack } from '../../../../api/typeService.api';\nimport { useNotifications } from '../../../../context/notificationContext';\nimport { getPrimaryTime } from \"../../../../utils/index\";\nimport * as UserApi from \"api/users.api\";\n//import Select from 'react-select';\n// import PendingJobStatusModal from \"../Components/PendingJobStatusModal\";\nimport { Button } from \"react-bootstrap\";\nimport Loader from '../../../../components/Loader';\nimport NewSquareBtn from \"../../../../components/NewSquareBtn\";\nimport LDClient from 'launchdarkly-js-client-sdk'\n\nconst MESSAGES = [ \"Promo Code is Already Expired !!\" , \"Promo Code is already used !!\",\n                   \"Promo Code Successfully Applied !!\" , \"Please Enter a Promo Code !!\" , \"Something Went Wrong !!\"];\n\n\nconst JobSummary = ({jobInfo, isScheduleJob, setIsScheduleJob, scheduleJobTime, setScheduleJobTime, job, user, setGuestJobId, setJobFlowStepNumber, jobFlowStepsArray, newPost, jobId, selectedTechnician, setSelectedTechnician, isFirsJob, guestJobId}) => {\n\n    const { getGuestUser } = useAuth();\n    const { fetchJobAsGuest, createJob, updateJob, getTotalJobs, setJob, fetchJob,updateJobAsGuest} = useJob();\n    const [needThisDone,setNeedThisDone] = useState(jobInfo.needThisDone)\n    const [nextButton,setNextButton] = useState(true)\n    const [showSpinner, setShowSpinner] = useState(false);\n    // const [hireValue, setHireValue] = useState(false);\n    // Promocode States \n    const [promoCodeInput , setPromoCodeInput] = useState('');\n    const [promoCodeApplied , setIsPromocodeApplied] = useState({});\n\tconst [searchTechType , setSearchTechType] = useState('');\n    const { socket } = useSocket();\n    // let liveUser = isLiveUser(user)\n    const location = useLocation();\n    const history = useHistory();\n\tconst [showPendingJobModal, setShowPendingJobModal] = useState(false)\n\t\n    const queryParams = new URLSearchParams(location.search);\n    let repostJob = queryParams.get('repost') ? queryParams.get('repost') : false;\n    const technicianId = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t : selectedTechnician.value ? selectedTechnician.value : false\n    const jobIdFromUrl = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const hireExpertTransferJob = queryParams.get('hireExpertTransferJob') ? queryParams.get('hireExpertTransferJob') : false;\n    let newPostJob = newPost != undefined ? newPost : queryParams.get(\"newpost\")\n\tconst uniqueTechScheduleJob = queryParams.get('applyJobFor') ? queryParams.get('applyJobFor') : false; \n    const [cardsInfo, setCardsInfo] = useState(false);\n    // const [isFirsJob, setIsFirsJob] = useState(false);\n\t  const [havePromoCode , setHavePromoCode] = useState(false)\n    const { createNotification, fetchNotifications } = useNotifications();\n\t  const postAgainOptions = [\n\t\t\t\t\t\t\t\t{value:\"All\", label:\"All\"}, \n\t\t\t\t\t\t\t\t{value:\"Selected\", label:\"Selected\"}\n\t\t\t\t\t\t\t]\n\t// const [selectedTechs, setSelectedTechs] = useState(false)\n\t// const [techniciansList, setTechniciansList] = useState([])\n\t// const [showDropDown, setShowDropDown] = useState(false) // unused state var @author:Vinit, Date:13/03/2023\n\tconst [showLoader, setShowLoader] = useState(true)\n\tconst [calculatedPrices, setCalculatedPrices] = useState({})\n  \tconst [openModalForScheduleMessgae,setOpenModalForScheduleMessgae] = useState(false);\n    const [isEstimatesVisible , setIsEstimatesVisible] = useState(false)\n    const [haveSubscription , setHaveSubscription] = useState(false)\n\tconst [userIsOwner,setUserIsOwner] = useState(true)\n\tconst [ownerHaveSubscription,setOwnerHaveSubscription] = useState(false)\n\tconst [ownerInfo,setOwnerInfo] = useState()\n\n\t// This Hook will check if Customer or their Owner have Subscription if so then don't show Customer the option\n\t// to apply promocode\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\t//Here checking customer have subscion or have owner id\n\t\t\tconst haveSubscription = user?.customer?.subscription && user?.customer.subscription?.invoice_id \n\t\t\tconst useAllSubScriptionTime = user?.customer?.subscription?.time_used == user?.customer?.subscription?.total_seconds\n\t\t\tconst haveOwnerAccountId = user?.ownerId\n\t\t\tif (haveSubscription && !useAllSubScriptionTime) {\n\t\t\t\tsetHaveSubscription(true)\n\t\t\t}\n\t\t\t// If owner id is available then extract details of that owner and check is subscription available\n\t\t\tif (haveOwnerAccountId) {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst ownerCustomerResponse = await UserApi.getUserById(haveOwnerAccountId);\n\t\t\t\t\tconst isOwnerHaveSubscription = ownerCustomerResponse?.customer?.subscription && ownerCustomerResponse?.customer.subscription?.invoice_id\n\t\t\t\t\tconst useAllSubScriptionTime = ownerCustomerResponse?.customer?.subscription?.time_used == ownerCustomerResponse?.customer?.subscription?.total_seconds\n\t\t\t\t\tif (isOwnerHaveSubscription && !useAllSubScriptionTime) {\n\t\t\t\t\t\tsetHaveSubscription(true)\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t}, [])\n\n\tuseEffect(()=>{\n\t\t(async () => {\n\t\t\tif(!user){\n\t\t\t\tconst guestUserRes = await getGuestUser();\n\t\t\t\tconsole.log(\"My console to check guest user\", guestUserRes)\n\t\t\t\tconst fetchUserRes = await fetchJobAsGuest(jobIdFromUrl, guestUserRes.token.accessToken)\n\t\t\t\tconsole.log(\"My console to fetch job as guest user\", fetchUserRes)\n\t\t\t\tconst featureResponse = await decideEstimatesToShowUsingLD(guestUserRes?.user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n\t\t\t}\n\t\t\tif(jobIdFromUrl){\n\t\t\t\tconsole.log(\"My console from job summary\", jobIdFromUrl)\n\t\t\t\tfetchJob(jobIdFromUrl)\n\t\t\t}\n\t\t\tif(user){\n\t\t\t\tif(user.ownerId && user.ownerId !== null){\n\t\t\t\t\tsetUserIsOwner(false)\n\t\t\t\t\tconst ownerInfoObject = await UserApi.getUserById(user.ownerId)\n\t\t\t\t\tif(ownerInfoObject){\n\t\t\t\t\t\tsetOwnerInfo(ownerInfoObject)\n\t\t\t\t\t\tif(ownerInfoObject.customer && ownerInfoObject.customer.subscription){\n\t\t\t\t\t\t\tsetOwnerHaveSubscription(true)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst featureResponse = await decideEstimatesToShowUsingLD(user, jobIdFromUrl);\n                setIsEstimatesVisible(featureResponse)\n\t\t\t}\n\t\t})();\n\t},[])\n\n    useEffect(()=>{\n\t\tif(job){\n\t\t\tconsole.log(\"My console for job var\", job)\n\t\t\tif(user){\n\t\t\t\t  console.log(\"window.location.href from jobSummery\", user)\n\t\t\t\tif(job.status !== \"Draft\") window.location.href = \"/\"\n\t\t\t}\n\t\t\tsetCalculatedPrices(calculatePrice(job && job.software))\n\t\t\tif(job?.software?.name){\n\t\t\t\tsetShowLoader(false)\n\t\t\t}\n\t\t}\n    },[job])\n\n\t// This function is used to set the  Meeting Platform [ winkitAway or Jaas8x8] in Job Database\n\tconst decideMeetingServiceViaLaunchdarkly = async () => {\n\t\tconsole.log(\"Add a console check by Karun.\")\n\t\ttry {\n\t\t\tconst JobId = job?.id\n\t\t\tconst email = user?.email\n\t\t\tconst name  = user?.firstName + \" \" + user?.lastName\n\t\t\tconst newUser = {\n\t\t\t\tkind: 'customer',\n\t\t\t\tkey: JobId,\n\t\t\t\tname: name,\n\t\t\t\temail: email,\n\t\t\t}\n\t\t\tconst ldclient = await LDClient.initialize(process.env.REACT_APP_LAUNCHDARKLY_KEY, newUser)\n\t\t\tldclient.on('ready', async () => {\n\t\t\t\tconst flagData = ldclient.allFlags()\n\t\t\t\tconst jaas8x8InegrationFlag = flagData[LAUNCHDARKLY_JAAS_INTEGRATION]\n\t\t\t\tconsole.log(\"Launchdarkly jaas8x8InegrationFlag\",{flagData ,jaas8x8InegrationFlag})\n\t\t\n\t\t\t\tif (jaas8x8InegrationFlag ==\"jaas8x8\") {\n\t\t\t\t\tawait updateJob(JobId, { meeting_service: 'jaas8x8' });\n\t\t\t\t\treturn \"jaas8x8\";\n\t\t\t\t}\n\t\t\t\tif(jaas8x8InegrationFlag  == \"winkitaway\") {\n\t\t\t\t\tawait updateJob(JobId, { meeting_service: 'winkitaway' });\n\t\t\t\t\treturn \"winkitaway\";\n\t\t\t\t}\n\t\t\t\tif(jaas8x8InegrationFlag == \"getgeeker\"){\n\t\t\t\t\tawait updateJob(JobId, { meeting_service: 'getgeeker' });\n\t\t\t\t\treturn 'getgeeker';\n\t\t\t\t}\n\t\t\t})\n\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Launchdarkly error while  Updating Meeting Service\", error);\n\t\t\treturn \"winkitaway\"\n\t\t}\n\t}\n\n\t/**\n\t * This useEffect is responsible to fetch all the relevant techs when customer wish to select a specific tech from past.\n\t * @params : selectedTechs : Boolean\n\t * @return : returns a list of relevant techs(whether online/offline)\n\t * @author : Vinit\n\t * code has been moved to selectsoftwares\n\t **/\n    // useEffect(()=>{\n\t// \t(async ()=> {\n\t// \t\tif(selectedTechs && user) {\n\t// \t\t\tconsole.log(\"My console for selected software id\", job.software.id)\n\t// \t\t\t// getting all online technician data from DB\n\t// \t\t\tconst allActiveTechnicians = await TechnicianApi.getOnlineTechnicians({\"softwares\":job.software.id})\n\t// \t\t\tconsole.log(\"My console for active techs\", allActiveTechnicians.data)\n\t// \t\t\t// getting all customers job response from DB by there customer.id\n\t// \t\t\tconst allCustomerJobsRes = await JobApi.findAllJobsByParams({customer: user.customer.id})\n\t// \t\t\tlet temp =[{techId:\"Any\",value:\"Any\",label:\"Any Geek\"}]\n\t// \t\t\tconst allTechniciansId = allCustomerJobsRes.jobs.data.map((item) => {\n\t// \t\t\t\tif(item?.technician?.id !== undefined && item?.technician?.id !== \"\"){\n\t// \t\t\t\t\tlet techId = item?.technician?.id \n\t// \t\t\t\t\tlet value = item?.technician?.user?.id\n\t// \t\t\t\t\tlet label = `${item?.technician?.user?.firstName} ${item?.technician?.user?.lastName}`\n\t// \t\t\t\t\tlet status = item?.technician?.status\n\t// \t\t\t\t\ttemp.push({techId, value, label,status})\n\t// \t\t\t\t}\n\t// \t\t\t})\n\t// \t\t\tconsole.log(\"My console to check temp\", temp)\n\t// \t\t\tlet filteredArr = temp.filter((ele,index,arr)=>arr.findIndex(ele2=>(ele2.value===ele.value))===index)\n\t// \t\t\tconsole.log(\"My console to check filteredArr\", filteredArr)\n\t\t\t\t\n\t// \t\t\tlet finalArr = filteredArr.map((ele)=>{\n\t// \t\t\t\tconsole.log(\"My console to check ele\", ele.techId, allActiveTechnicians.data)\n\t// \t\t\t\tallActiveTechnicians.data.forEach((item)=>{\n\t// \t\t\t\t\tconsole.log(\"My console to look for ele\", ele)\n\t// \t\t\t\t\tif(!ele.online){\n\t// \t\t\t\t\t\tconsole.log(\"My console to check for condition\", ele.techId === item.id)\n\t// \t\t\t\t\t\tif(ele.techId === item.id){\n\t// \t\t\t\t\t\t\tele['online'] = true\n\t// \t\t\t\t\t\t}else{\n\t// \t\t\t\t\t\t\tele['online'] = false\n\t// \t\t\t\t\t\t}\n\t// \t\t\t\t\t}\n\t// \t\t\t\t})\n\t// \t\t\t\treturn ele\n\t// \t\t\t})\n\t// \t\t\tconsole.log(\"My console to check ele 2\", finalArr)\n\t// \t\t\tsetTechniciansList(finalArr)\n\t// \t\t}\n\t// \t})()\n    // },[selectedTechs])\n\n\t/**\n\t * This useEffect is responsible to set later for schedule when customer click at schedule btn from technician profile page.\n\t * @author : Mritunjay\n\t **/\n\tuseEffect(()=>{\n\t\tif(uniqueTechScheduleJob) laterHandler();\n\t\telse return;\n\t},[uniqueTechScheduleJob])\n\n\tconst logoutGuestAccount = () => {\n\t\tconsole.log(\"tetch token removed from page job summary\")\n\t\tconsole.log(\"Removing SECRET_KEY\")\n\t\tlocalStorage.removeItem(SECRET_KEY);\n\t}\n\n    const asapHandler = () =>{\n\t\t// if(job?.guestJob) logoutGuestAccount()\n        console.log(\"My console ASAP\")\n        setNeedThisDone(\"asap\")\n        setNextButton(false)\n        setIsScheduleJob(false)\n    }\n    \n    const laterHandler = () =>{\n\t\t// if(job?.guestJob) logoutGuestAccount()\n        console.log(\"My console later\")\n        setNeedThisDone(\"later\")\n        setNextButton(false)\n        setIsScheduleJob(true)\n    }\n\n    const calculatePrice = (softwareData,hire_expert=false,forfreeMinutes=false)=>{\n\t\tlet initPriceToShow = 0;\n\t\tlet finalPriceToShow = 0;\n\t\ttry{\n\t\t\tlet price_per_six_min = softwareData.rate\n\t\t\tlet time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n\t\t\tlet time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\t\t\tlet main_price = ''\n\t\t\tif (hire_expert) {\n\t\t\t\tmain_price = softwareData.twoTierEstimatePrice\n\t\t\t} else {\n\t\t\t\tmain_price = softwareData.estimatedPrice\n\t\t\t}\n\t\t\tconsole.log(\"> main price >>>>>>>>> \",main_price)\n\t\t\tlet price1 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[0]) : 0)\n\t\t\tlet price2 = (softwareData && String(main_price).indexOf('-') !== -1 ? parseInt(String(main_price).split(\"-\")[1]) : 0)\n\n\t\t\tprice1 = (price1 ? price1 : price_per_six_min)\n\t\t\tprice2 = (price2 ? price2 : price_per_six_min)\n\t\t\tinitPriceToShow = forfreeMinutes ?(Math.ceil(time1 / 6)-1) * parseInt(price1) :Math.ceil(time1 / 6) * parseInt(price1)\n\t\t\tfinalPriceToShow = forfreeMinutes ? (Math.ceil(time2 / 6) - 1) * parseInt(price2) : Math.ceil(time2 / 6) * parseInt(price2)\n\n\t\t\tinitPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 0)\n\t\t\tfinalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 0)\n\t\t\t\n\t\t\tconsole.log(\"initPriceToShow >>>>>>>>>> \",initPriceToShow)\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"issue in calculating price :::: \",err)\n\t\t}\n\t\treturn {initPriceToShow:initPriceToShow,finalPriceToShow:finalPriceToShow}\n\t}\n\n    /**\n\t* send email with job link for desktop\n\t* @params : job\n\t* @author : Ridhima Dhir\n\t*/\n\tconst emailOFMobileTabletJobPosting = async (jobData) => {\n\t\tsocket.emit('mobile_tablet_job_post_email', jobData);\n\t}\n\n    /**\n\t* mixpanel track and show modal that you need to switch to desktop for technician redirect to dashboard\n\t* @author : Ridhima Dhir\n\t*/\n\tconst confirmModaloFMobileTabletJobPosting = async (message = '') => {\n\t\tif(user && user.email){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Job created from mobile or tablet')\n\t\t}\n\t\tModal.confirm({\n\t\t\ttitle: \"To better assist you please join from your computer.\",\n\t\t\tcontent: 'Thanks for submitting a job, we saved your job. To proceed further kindly login from a computer.',\n\t\t\tokText: 'Ok',\n\t\t\tcancelButtonProps : { style: { display: 'none' } },\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\thistory.push(\"/\")\n\t\t\t},\n\t\t});\n\t}\n\n\n\n\n\t/**\n\t* Function will check card authorization before any job except first job, if successful then make the job live.\n\t* @params = job (Type:job Object)\n\t* @response : Will call findTechnician function so the job gets live\n\t* @author : Kartik\n\t*/\n\tconst cardPreAuthorization = async (updateJobData, card_info=false) => {\n\t\tsetShowSpinner(true)\n\t\t// Here we are checking is jobid is available in url then we are using that jobid otherwise we are using job.id\n\t\tconst JobId = jobIdFromUrl ? jobIdFromUrl : job?.id;\n\t\tconsole.log(\"console to check client_id, session_id and _fbp\", updateJobData, JobId)\n\n\t\tif(promoCodeInput && promoCodeApplied){\n\t\t\tawait updatePromoCodeDetails(updateJobData);\n\t\t}\n\t\t//Following code is commented as card pre auth is only done for the user's first job @author:Vinit\n\t\t// const totalJobsCount = await getTotalJobs({ customer: job?.customer?.id ? job?.customer?.id : job?.customer });\n\t\tconsole.log(!job.cardPreAuthorization, \"OrganizationTesting :: Check job OBJ>>>>>>>>>>>>>>>>\", {job, updateJobData})\n\t\tconsole.log(!job.cardPreAuthorization, \"OrganizationTesting :: Check job OBJ>>>>>>>>>>>>>>>> 2\", !job.customer.subscription)\n    \t\tlocalStorage.removeItem('authorizationInfo');\n\t\t//Following code is commented as card pre auth is only done for the user's first job @author:Vinit\n\t\t// if (totalJobsCount >= 1 && !job.cardPreAuthorization) {\n\n\t\t// holdPaymentWhileSubscription variable check if there is any subscription purchased by customer owner and have subscription minutes to zero then we will charge to customer\n\t\tlet holdPaymentWhileSubscription = false;\n\t\tif (job?.customer) {\n\t\t\tholdPaymentWhileSubscription = await checkCustomerHaveSubscriptionMinutes(job?.customer)\n\t\t}\n\t\t// If customer have owner then we will update job with that id otherwise that's customer's user id will be set to that field\n\t\tconst ownerId = user?.ownerId ? user?.ownerId : user?.id\n        console.log(\"holdPaymentWhileSubscription\",holdPaymentWhileSubscription)\n\t\tif (!job.cardPreAuthorization && holdPaymentWhileSubscription) {\n\n\t\t\t// check if it is parent or if child check for parent's card\n\t\t\t// let parentuser = {isItParent: false, user: user};\n\t\t\t// if(user.parentId && user.parentId !== \"\") {\n\t\t\t// \tparentuser.user = await UserApi.getUserById(user.parentId);\n\t\t\t// \tparentuser.isItParent = true;\n\t\t\t// }\n\t\t\tconst ownerStripeStatus = await checkOwnerStripeId(user);\n\t\t\t\n\t\t\tconst stripeId = user?.ownerId && ownerStripeStatus.success ? ownerStripeStatus.stripeId : user?.customer?.stripe_id \n\t\t\tconst preAuthorization = await CustomerApi.holdChargeFromCustomer({ 'stripe_id': stripeId, \n\t\t\t'liveUser':(user?.customer?.customerType === 'live' ? true : false), \"jobId\" : job?.id })\n\n\t\t\tconsole.log(\"OrganizationTesting :: cardPreAuthorization logs to check 1\", job)\n\t\t\t/*let customerStripeId = user.customer.stripe_id;\n\t\t\tif(customerStripeId === '' || customerStripeId === undefined || customerStripeId === null){\n\t\t\t\tif(card_info && card_info.stripe_id && card_info.stripe_id != null){\n\t\t\t\t\tcustomerStripeId = card_info.stripe_id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst preAuthorization = await CustomerApi.holdChargeFromCustomer({ 'stripe_id': customerStripeId, \n\t\t\t'liveUser':(user.customer.customerType && user.customer.customerType === 'live' ? true : false), \"jobId\" : job?.id })*/\n\n\t\t\tif (preAuthorization.status === \"Successful\") {\n\t\t\t\tconsole.log(\"cardPreAuthorization logs to check 2\")\n\t\t\t\tupdateJobData.cardPreAuthorization = true\n\t\t\t\tupdateJobData.payment_type = \"card_only\"\n\t\t\t\tupdateJobData.ownerId = ownerId\n\t\t\t\tconst updatedJob = await JobApi.updateJob(JobId, updateJobData );\n\t\t\t\tif (needThisDone === \"later\") {\n\t\t\t\t\tconsole.log(\"cardPreAuthorization logs to check 3\", updatedJob)\n\t\t\t\t\t// let jobData = await saveScheduleJob(job)\n\t\t\t\t\tawait emitSocketCreateFetchNotification(updatedJob)\n\t\t\t\t\twindow.localStorage.setItem('CurrentStep',7)\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetShowSpinner(false)\n\t\t\t\t\t\twindow.location.href = '/dashboard?&scheduleJobId='+JobId;\n\t\t\t\t\t}, 4500);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"OrganizationTesting :: cardPreAuthorization logs to check 4\")\n\t\t\t\t\tsetShowSpinner(false)\n\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=tech-search&jobId=${JobId}`\n\t\t\t\t\t// callFindTechnician(job)\n\t\t\t\t}\n\t\t\t\treturn job\n\t\t\t}else{\n\t\t\t\tsetShowSpinner(false)\n\t\t\t\t// openNotificationWithIcon('error', 'Error', \"Card authorization failed. Please check the card and try again\")\n\t\t\t\tlet localstorageData = {isCardAuthorized:false,job:job}\n\t\t\t\t// console.log(\"authorizationInfo: going to set localstorge \",localstorageData)\n\t\t\t\tlocalStorage.setItem('authorizationInfo', JSON.stringify(localstorageData));\n\t\t\t\t//openNotificationWithIcon(\"error\", \"Error\", \"Card authorization failed\")\n\t\t\t\tlet message = preAuthorization?.message  ?  preAuthorization?.message : \"Card authorization failed.\"\n\t\t\t\t// openNotificationWithHtml(message)\n\t\t\t\topenNotificationWithIcon(\"error\", \"Error\", message)\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"OrganizationTesting :: cardPreAuthorization logs to check 5\")\n\t\t\tupdateJobData.cardPreAuthorization = true\n\t\t\tupdateJobData.payment_type = \"subscription_only\"\n\t\t\tupdateJobData.ownerId = ownerId\n\t\t\tlet jobData = await JobApi.updateJob(JobId, updateJobData );\n\t\t\tif (needThisDone === \"later\") {\n\t\t\t\tawait emitSocketCreateFetchNotification(jobData)\n\t\t\t\twindow.location.href = '/dashboard?&scheduleJobId='+JobId;\n\t\t\t\twindow.localStorage.setItem('CurrentStep',7)\n\t\t\t}else{\n\t\t\t\twindow.location.href = `/customer/profile-setup?page=tech-search&jobId=${JobId}`\n\t\t\t}\n\t\t\treturn jobData\n\t\t\t\n\t\t}\n\t}\n\n    async function callFindTechnician(jobData) {\n\t\tconsole.log('callFindTechnician CALLED.........................', jobData);\n\t\t// checkGeekerAvailabilityTime(jobData);\n\t\tconsole.log('Call function for checking time tech availability')\n\t\tif (user.activeStatus === false) {\n\t\t\treturn openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_MESSAGE);\n\t\t}\n\t\tif (jobData) {\n\t\t\tif (user && jobData.GA_conversion_event_called === undefined) {\n\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\tGAevent('Conversion', 'new_job', 'Conversion', jobData.customer.id ? jobData.customer.id : jobData.customer)\n\t\t\t\tJobApi.updateJob(jobData.id, { GA_conversion_event_called: 'yes' });\n\t\t\t}\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Find Technician');\n\t\t\tmixpanel.people.set({\n\t\t\t\t$first_name: user.firstName,\n\t\t\t\t$last_name: user.lastName,\n\t\t\t});\n\t\t\t// mixpanel code//\n\t\t\tlet lifeCycleTag = ''\n\t\t\tif (jobData && jobData.is_transferred && jobData.is_transferred == true) {\n\t\t\t\tlifeCycleTag = JobTags.FINDTECH_AFTER_TRANSFER;\n\t\t\t} else {\n\t\t\t\tlifeCycleTag = JobTags.FINDTECH;\n\t\t\t}\n\t\t\tawait JobCycleApi.create(lifeCycleTag, jobData.id);\n\t\t\tawait JobCycleApi.update({ \"UserId\": user.id, \"JobId\": jobData.id })\n\t\t\tawait fetchJob(jobData.id)\n\t\t\tawait updateJob(jobData.id,{tech_search_start_at:new Date()})\n\t\t\tconsole.log(\"window.location.href from jobSummary\", jobData)\n\t\t\twindow.location.href= `/customer/profile-setup?id=${jobData.id}${technicianId && technicianId.length > 0 ? `&technicianId=${technicianId}` : ''}`\n            // setJobFlowStepNumber(jobFlowStepsArray[\"helpIsOnTheWay\"])\n\t\t\t// setJobFlowStep(jobFlowsDescriptions['jobAlivePage'])\n\t\t}\n\t}\n\n    /**\n\t * Function will create a new job if not already posted and make the job live.\n\t * @params =  dataToSave (Type:Object), totalJobsCount (Type:Number),firstjob(Type:Boolean)\n\t * @response : Will call callFindTechnician function so the job gets live\n\t * @author : Manibha\n\t */\n\tconst checkAndCreateNewJob = async (dataToSave, totalJobsCount, firstjob = false,sendTofindTechnician=true) => {\n\n\t\t// Here we are checking is jobid is available in url then we are using that jobid otherwise we are using job.id\n\t\tconst JobId = jobIdFromUrl ? jobIdFromUrl : job?.id;\n\t\tif (newPostJob !== 'yes') {\n\t\t\tlet authorizationInfo = JSON.parse(localStorage.getItem('authorizationInfo'));\n\t\t\tconsole.log('authorizationInfo:inside checkAndCreateNewJob function localstorage info >>>',authorizationInfo);\n\t\t\t// console.log(\"Inside if part of checkAndCreateNewJob ... *-*-*-*\")\n\t\t\tif(authorizationInfo === undefined || authorizationInfo === null){\n\t\t\t\tconsole.log('authorizationInfo:inside card authorization validateAndCreateJob',authorizationInfo)\n\n\t\t\t\tvalidateAndCreateJob(dataToSave,totalJobsCount, firstjob,sendTofindTechnician)\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tif(authorizationInfo != undefined && authorizationInfo != null && !authorizationInfo.isCardAuthorized){\n\t\t\t\t\tconsole.log('authorizationInfo:inside card authorization',authorizationInfo)\n\t\t\t\t\tconsole.log('authorizationInfo:inside card authorization job data',authorizationInfo.job)\n\t\t\t\t\tcardPreAuthorization(authorizationInfo.job);\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log('authorizationInfo:inside card authorization else',authorizationInfo)\n\t\t\t\t\tvalidateAndCreateJob(dataToSave,totalJobsCount, firstjob,sendTofindTechnician)\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tconsole.log(\"Inside else part of checkAndCreateNewJob ... *-*-*-*\")\n\t\t\tconsole.log(\"inside usefeffect 8 >>>>>>>>>\")\n\t\t\t\n\t\t\t// if(isMobile || isTablet){\n\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 6\")\n        \t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t// }else{\n\t\t\t\tconsole.log(\" job.status: before :: \", job.status)\n\t\t\t\tif( job.status == \"Accepted\" && newPostJob == 'yes'){\n\t\t\t\t\tconsole.log(\" job.status: after :: \", job.status)\n\t\t\t\t\treturn window.location.href = \"/dashboard?mobileJobId=\"+JobId;\n\t\t\t\t}\n\t\t\t\tconsole.log(\"inside usefeffect 8 >>>>>>>>>\")\n\t\t\t\tif(sendTofindTechnician){\n\n\t\t\t\t\t//Call Klaviyo api\n\t\t\t\t\tcallKlaviyoAPI(job, totalJobsCount, firstjob)\n\t\t\t\t\t\n\t\t\t\t\tcardPreAuthorization(job);\n\t\t\t\t}\n\t\t\t// }\n\t\t}\n\t}\n\tconst validateAndCreateJob = async(dataToSave,totalJobsCount, firstjob,sendTofindTechnician)=>{\n\t\tif(isMobile || isTablet){\n\t\t\tdataToSave.status = 'Draft'\n\t\t}\n\t\tconsole.log(\"=== checkAndCreateNewJob before create job \",dataToSave)\n\t\tconst jobData = await createJob(dataToSave);\n\t\tconsole.log(\"=== checkAndCreateNewJob after create job \",jobData);\n\t\tif(promoCodeInput && promoCodeApplied){\n\t\t\tawait updatePromoCodeDetails(jobData);\n\t\t}\n\t\tsetJob(jobData)\n\t\tif(jobData?.customer?.id){\n\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\tGAevent('Conversion','new_job','Conversion',jobData.customer.id)\n\t\t}\n\t\t//Call Klaviyo api\n\t\tcallKlaviyoAPI(jobData, totalJobsCount, firstjob)\n\n\t\t// setUpdatedJobData(jobData);\n\t\tconsole.log(\"inside usefeffect 7 >>>>>>>>>\")\n\t\t// if(isMobile || isTablet){\n\t\t// \tawait csonfirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n\t\t// \tawait emailOFMobileTabletJobPosting(jobData)\n\t\t// }else{\n\t\t\tif(sendTofindTechnician){\n\t\t\t\tcardPreAuthorization(jobData);\n\t\t\t}\n\t\t// }\n\t}\n\n    /**\n\t * Function will send the data to Klaviyo when added new job\n\t * @params =  jobData (Type:Object), totalJobsCount (Type:Int), firstjob (Type:Bool)\n\t * @response : no response\n\t * @author : Karan\n\t */\n\tconst callKlaviyoAPI = async(jobData, totalJobsCount, firstjob) => {\n\t\ttry{\n\t\t\tconsole.log(\"User data ::\", user)\n\t\t\tconsole.log(\"jobData data ::\", jobData)\n\t\t\tif(user && jobData){\n\t\t\t\tconsole.log(\"Inside if part of callKlaviyoAPI \")\n\t\t\t\tconst klaviyoData = {\n\t\t\t\t\temail: user.email,\n\t\t\t\t\tevent: 'Job Created',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t\t$job: jobData.id,\n\t\t\t\t\t\t$total_jobs: totalJobsCount,\n\t\t\t\t\t\t$software_name: jobData?.software?.name,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (firstjob) {\n\t\t\t\t\tklaviyoData['properties']['$first_job'] = true\n\t\t\t\t}\n\t\t\t\tconsole.log(\"klaviyoData ::\",klaviyoData)\n\t\t\t\tawait klaviyoTrack(klaviyoData);\n\t\t\t}\t\t\t\n\t\t}\n\t\tcatch (err) {\n\t\t\tmixpanel.identify(user?.email);\n\t\t\tmixpanel.track('There is catch error while creating job (callKlaviyaAPI) ::::', { scheduleJobData: jobData, errMessage: err.message });\n\t\t\tconsole.log('There is catch error while creating job (callKlaviyaAPI)  :::: '+ err.message)\n\t\t}\n\t}\n\n    const getJobVar = useCallback(() => {\n\t\tconsole.log(\"Setting up data for job \", job);\n\t\tconst isHireExpert = job?.is_transferred_hire_expert !=undefined && job?.is_transferred_hire_expert ?true : false;\n\t\tconst dataToSave = {};\n\t\tdataToSave.software = jobInfo?.currentSoftware?.id;\n\t\tdataToSave.expertise = jobInfo?.currentSoftware?.expertise;\n\t\tdataToSave.subOption = jobInfo?.currentSubSoftware;\n\t\tdataToSave.issueDescription = jobInfo?.moreDetails;\n\t\tdataToSave.level = 'advanced';\n\t\tdataToSave.estimatedTime = (jobInfo?.currentSoftware ? jobInfo?.currentSoftware.estimatedTime : '0-0');\n\t\tif (isHireExpert) {\n\t\t\tdataToSave.estimatedPrice = (jobInfo?.currentSoftware ? jobInfo?.currentSoftware.twoTierEstimatePrice : '0-0');\n\t\t} else {\n\t\t\tdataToSave.estimatedPrice = (jobInfo?.currentSoftware ? jobInfo?.currentSoftware.estimatedPrice : '0-0');\n\t\t}\n\t\tdataToSave.status = 'Pending';\n\t\tdataToSave.hire_expert = isHireExpert;\n\t\t// If this is true then we will not send any notification to that particular tech who declined the job\n\t\tdataToSave.is_transferred_notification_sent = job?.is_transferred;\n\t\tdataToSave['tech_declined_ids'] = job?.tech_declined_ids\n\t\tdataToSave['reasons'] = job?.reasons\n\t\treturn dataToSave;\n\t});\n\t\n\t\n\tasync function checkCustomerSubscription(user){\n\t\tlet customerInfo;\n\t\t\tif (user && user.customer) {\n\t\t\t\tcustomerInfo = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\t\tuser: user,\n\t\t\t\t\tliveUser: user.customer.customerType === \"live\" ? true : false\n\t\t\t\t});\n\t\t\t}\n\t\t return customerInfo;\n\t}\n\n\tconst checkOwnerStripeId = async (user) =>{\n\t\ttry {\n\t\t\tif(user && user?.ownerId){\n\t\t\t\tconst ownerUserDetails = await UserApi.getUserById(user?.ownerId)\n\t\t\t\tconsole.log('ownerUserDetails ::::',ownerUserDetails)\n\t\t\t\tif(ownerUserDetails?.customer?.stripe_id){\n\t\t\t\t\tconst ownerStripeId = ownerUserDetails?.customer?.stripe_id \n\t\t\t\t\treturn {'success':true,'stripeId':ownerStripeId}\n\t\t\t\t}else{\n\t\t\t\t\treturn {'success':false,'stripeId':''}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn {'success':true,'stripeId':''}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('error while getting the owner stripeId',error)\n\t\t\treturn {'success':false,'stripeId':''}\n\t\t}\n\t\n\t}\n\t\n\n    const findTechnician = async (e) => {\n        e.preventDefault();\t\n\t\tsetShowPendingJobModal(false)\n\t\tlocalStorage.removeItem(\"showAfterBusinessHrs\");\n\t\t// Function  decideMeetingServiceViaLaunchdarkly decides with which meetingService this job would continue\n\t\tawait decideMeetingServiceViaLaunchdarkly();\n\t\t// Here we are checking is jobid is available in url then we are using that jobid otherwise we are using job.id\n\t\tconst JobId = jobIdFromUrl ? jobIdFromUrl : job?.id;\n\t\tconsole.log(\"OrganizationTesting :: checking jobId while checking finding technician\", JobId)\n\n\t\t// if(user && user.blocked) return openNotificationWithIcon('error', 'Error', 'You\\'re blocked by the admin.');\n\t\t// if(user && !user.activeStatus) return openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_STATUS_MSG);\n\t\tsetShowSpinner(true)\n\t\tif(searchTechType===\"other\"){\n\t\t\tif(!selectedTechnician.value){\n\t\t\t\tconsole.log(\"OrganizationTesting :: My console for selectedTechnician\", selectedTechnician)\n\t\t\t\tsetShowSpinner(false)\n\t\t\t\topenNotificationWithIcon(\"info\", \"Info\", `Please either select a technicain or choose \"Any\" technicians to proceed further!`)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconst isStripeAvilable =  await checkOwnerStripeId(user)\n\t\tconsole.log('isStripeAvilable ::::',isStripeAvilable)\n\t\tif(isStripeAvilable.success){\n\t\t\t\n\t\t\tconsole.log(\"OrganizationTesting :: Find technician function called\", isScheduleJob)\n\t\t\tlet card_info = { has_card_or_subscription: false }\n\t\t\t// const dataToSave = await getJobVar()\n\t\t\tlet updateJobObject = {}\n\t\t\tif (user) {\n\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\tmixpanel.track('Customer - Click on Get help Now');\n\t\t\t}\n\t\t\tif (!user || user.email === \"guest@geeker.co\") {\n\t\t\t\tconsole.log(\"OrganizationTesting :: My console - no user found!!\")\n\t\t\t\t\n\t\t\t\t// if(promoCodeInput && promoCodeApplied){\n\t\t\t\t// \tawait updatePromoCodeDetails(res)\n\t\t\t\t// }\n\t\t\t\t// setJobFlowStepNumber(jobFlowStepsArray['signUp'])\n\t\t\t\tconsole.log(\"OrganizationTesting :: window.location.href from jobSummary\", job)\n\t\t\t\t// window.location.href = `/customer/start-profile-setup?page=registration&jobId=${JobId}`; \n\t\t\t\tif (technicianId) {\n\t\t\t\t\tupdateJobObject['post_again'] = true\n\t\t\t\t\tupdateJobObject['post_again_reference_job'] = jobIdFromUrl\n\t\t\t\t\tupdateJobObject['post_again_reference_technician'] = technicianId\n\t\t\t\t\tupdateJobObject['tech_search_time'] = '300000'\n\t\t\t\t\tawait updateJobAsGuest(jobIdFromUrl, updateJobObject)\n\t\t\t\t\twindow.location.href = `/customer/start-profile-setup?page=registration&jobId=${JobId}&technicianId=${technicianId}`;\n\t\t\t\t}\n\t\t\t\t else {\n\t\t\t\t\twindow.location.href = `/customer/start-profile-setup?page=registration&jobId=${JobId}`; \n\t\t\t\t}\n\t\t\t\tif(job?.guestJob) logoutGuestAccount()\n\t\t\t}else {\n\t\t\t\tif(job?.guestJob) logoutGuestAccount()\n\t\t\t\tupdateJobObject.status = \"Pending\"\n\t\t\t\tupdateJobObject.tech_search_start_at = new Date()\n\t\t\t\tconsole.log(\"OrganizationTesting :: My console - user exists\")\n\t\t\t\tlet lifeCycleTag = ''\n\t\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\t\tlifeCycleTag = JobTags.GET_HELP_NOW_AFTER_TRANSFER;\n\t\t\t\t} else {\n\t\t\t\t\tlifeCycleTag = JobTags.GET_HELP_NOW;\n\t\t\t\t}\n\t\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\t\tconst totalJobsCount = await getTotalJobs({ customer: user.customer.id ? user.customer.id : user.customer });\n\t\t\t\tconsole.log('OrganizationTesting :: totalJobsCount>>>>>>>>>>>>>>', totalJobsCount);\n\t\t\t\t// if (totalJobsCount >= 1) {\n\t\t\t\t// const customerTypeValid = (user.customer.customerType ? user.customer.customerType !== 'test' : true);\n\t\t\t\tconst customerTypeValid = true\n\t\t\t\tlet customer_info = await checkCustomerSubscription(user);\n\t\t\t\tconsole.log(\"OrganizationTesting :: cardsInfo >>>>>>>>> in schedule later1\", card_info)\n\t\t\t\tif (user && user.customer) {\n\t\t\t\t\tconsole.log(\"My console - checking if have card or subscription!\")\n\t\t\t\t\tcustomer_info = await CustomerApi.checkIfOrganisationHasSubscription({\n\t\t\t\t\t\t\tuser: user,\n\t\t\t\t\t\t\tliveUser: user.customer.customerType === \"live\" ? true : false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (customer_info.has_card_or_subscription == false && customerTypeValid && user && !user.roles.includes('user') && !user.roles.includes('admin')) {\n\t\n\t\t\t\t\t// if(promoCodeInput && promoCodeApplied){\n\t\t\t\t\t// const requiredData = {\n\t\t\t\t\t// \t\"promoCodeId\" : promoCodeApplied.id,\n\t\t\t\t\t// \t\"promoCode\" : promoCodeApplied.promo_code,\n\t\t\t\t\t// \t\"discountType\" : promoCodeApplied.discount_type,\n\t\t\t\t\t// \t\"couponcodeDiscount\" : promoCodeApplied.discount_value\n\t\t\t\t\t// }\n\t\t\t\t\t// console.log(\"Promocode Discount Details\", requiredData)\n\t\t\t\t\t// await window.sessionStorage.setItem(\"promo-code-details\", JSON.stringify(requiredData))\n\t\t\t\t\t// }\n\t\n\t\t\t\t\tconsole.log(\"My console - customer have no card - ask for card\")\n\t\t\t\t\t// mixpanel code//\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Customer - Ask Credit Card');\n\t\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t});\n\t\t\t\t\tlet proceedAfterPromoCode = true\n\t\t\t\t\tif(promoCodeInput && promoCodeApplied){\n\t\t\t\t\t\tproceedAfterPromoCode = false\n\t\t\t\t\t\tproceedAfterPromoCode = await updatePromoCodeDetails(job);\n\t\t\t\t\t}\n\t\t\t\t\tif(proceedAfterPromoCode){\n\t\t\t\t\t\tif (technicianId) {\n\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=registration&haveCC=false&jobId=${JobId}&technicianId=${technicianId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=registration&haveCC=false&jobId=${JobId}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\topenNotificationWithIcon(\"error\", \"Error\", \"Please try again!\")\n\t\t\t\t\t\tsetShowSpinner(false)\n\t\t\t\t\t}\n\t\t\t\t\t// setJobFlowStepNumber(jobFlowStepsArray['signUp'])\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"OrganizationTesting :: My console - have card\")\n\t\t\t\t\tlet lifeCycleTag = ''\n\t\t\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\t\t\tlifeCycleTag = JobTags.HAVE_CARD_AFTER_TRANSFER;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlifeCycleTag = JobTags.HAVE_CARD;\n\t\t\t\t\t}\n\t\t\t\t\tif (job && JobId && !repostJob) {\n\t\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, JobId, user.id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n\t\t\t\t\t}\n\t\t\t\t\tif (technicianId || selectedTechnician?.value) {\n\t\t\t\t\t\tupdateJobObject['post_again'] = true\n\t\t\t\t\t\tupdateJobObject['post_again_reference_job'] = jobIdFromUrl\n\t\t\t\t\t\tupdateJobObject['post_again_reference_technician'] = technicianId ? technicianId : selectedTechnician?.value\n\t\t\t\t\t\tupdateJobObject['tech_search_time'] = '300000'\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (repostJob) {\n\t\t\t\t\t\t//added by nafees for check job posted by mobile or Tablet\n\t\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 4\")\n\t\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t\t// }else{\n\t\t\t\t\t\t\tcheckAndCreateNewJob(updateJobObject)\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// await fetchJob(job.id)\n\t\t\t\t\t} else if (hireExpertTransferJob) {\n\t\t\t\t\t\tconsole.log(\"inside usefeffect 5 >>>>>>>>>\")\n\t\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 4\")\n\t\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t\t// }else{\n\t\t\t\t\t\t\tcheckAndCreateNewJob(updateJobObject)\n\t\t\t\t\t\t// }\n\t\t\t\t\t} else if (jobId !== '' && job && JobId && jobId === JobId && newPostJob != 'yes') {\n\t\t\t\t\t\tconsole.log(\"inside usefeffect 5 >>>>>>>>>\")\n\t\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 5\")\n\t\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t\t// }else{\n\t\t\t\t\t\t\tcardPreAuthorization(job)\n\t\t\t\t\t\t// }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"OrganizationTesting :: My console - finally posting job\", {job, updateJobObject})\n\t\t\t\t\t\t//mixpanel code\n\t\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\t\tmixpanel.track('Customer - ASAP job posted')\n\t\t\t\t\t\t//added by nafees for check job posted by mobile or Tablet\n\t\t\t\t\t\t// if(isMobile || isTablet){\n\t\t\t\t\t\t// \tawait confirmModaloFMobileTabletJobPosting(\"newPostJob 4\")\n\t\t\t\t\t\t// \tawait emailOFMobileTabletJobPosting(job)\n\t\t\t\t\t\t// }else{\n\t\t\t\t\t\t\tconst updatedJob = cardPreAuthorization(updateJobObject, card_info)\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// setTimeout(() => {\n\t\t\t\t\t\t// \tconsole.log(\"My console to check updated job\", updatedJob)\n\t\t\t\t\t\t// \twindow.location.href = `/customer/profile-setup?page=tech-search&jobId=${job.id}`;    \n\t\t\t\t\t\t// }, 2000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"OrganizationTesting :: My console from btn click\", updateJobObject)\n\t\t\t// setJobInfo({currentSoftware,\n\t\t\t//             currentSubSoftware,\n\t\t\t//             needThisDone,\n\t\t\t//             moreDetails:textarea})\n\t\t}else{\n\t\t\topenNotificationWithIcon(\"info\", \"Info\", `Please contact your owner to add credit card`)\n\t\t\thistory.push(\"/\")\n\t\t}\n    }\n\n\n    const saveScheduleJob = async (scheduleJobData) =>{\n\t\ttry {\n\t\t\t//create job by hitting api\n\t\t\tconst newSecheduleJob = await createJob(scheduleJobData);\n    \t\tif (user && newSecheduleJob.GA_conversion_event_called === undefined) {\n\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\tGAevent('Conversion','scheduled_job','Conversion',scheduleJobData.customer)\n\t\t\t\tJobApi.updateJob(newSecheduleJob.id, { GA_conversion_event_called: 'yes' });\n\t\t\t}\n\t\t\tconsole.log(\"after save :::: \", newSecheduleJob);\n\t\t\tif(promoCodeInput && promoCodeApplied){\n\t\t\t\tawait updatePromoCodeDetails(newSecheduleJob)\n\t\t\t}\n\t\t\tconst totalJobs = await getTotalJobs({ customer: user.customer.id ? user.customer.id : user.customer });\n\n\t\t\t//prepare klaviyoStat object for klaviyo track api;\n\t\t\tconst klaviyoStat = {\n\t\t\t\temail: user.email,\n\t\t\t\tevent: 'Scheduled Jobs',\n\t\t\t\tproperties: {\n\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t$job: newSecheduleJob.id,\n\t\t\t\t\t$total_jobs: totalJobs,\n\t\t\t\t\t$first_job: false,\n\t\t\t\t\t$software_name: newSecheduleJob.software.name,\n\t\t\t\t\t$primary_schedule: scheduleJobData.primarySchedule,\n\t\t\t\t\t$secondry_schedule: scheduleJobData.secondrySchedule,\n\t\t\t\t},\n\t\t\t};\n\t\t\t//save record in klaviyo for tracking.\n\t\t\tawait klaviyoTrack(klaviyoStat);\n\t\t\t//return newly created job details\n\t\t\treturn newSecheduleJob\n\t\t\t\n\t\t} catch (error) {\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while creating schedule job', { scheduleJobData: scheduleJobData, errMessage: error.message });\n\t\t\tconsole.log('There is catch error while creating schedule job  :::: '+ error.message)\n\t\t}\n\t}\n\n    /**\n\t * emit send-schedule-alerts socket and create / fetch notification customer notifications\n\t * @params : jobStats(Type:Object): Have job details\n\t * @returns : null\n\t * @author : Ridhima Dhir\n\t */\n\t const emitSocketCreateFetchNotification = async (jobStats) =>{\n\t\ttry{\n\t\t\tconsole.log(\"send-schedule-alerts :::::::::::\", jobStats)\n\t\t\t//Notification for customer\n\t\t\tconst notificationData = {\n\t\t\t\tuser: user.id,\n\t\t\t\tjob: jobStats.id,\n\t\t\t\tread: false,\n\t\t\t\tactionable: false,\n\t\t\t\ttitle: 'We are finding a technician for you. We will inform you when we find the technician',\n\t\t\t\ttype: 'Scheduled Job',\n\t\t\t};\n\t\t\tconsole.log(\"notificationData ::::::::\", notificationData)\n\t\t\tawait createNotification(notificationData);\n\t\t\tawait fetchNotifications({ user: user.id });\n\t\t\n\t\t\t// call send-schedule-alerts socket from backend.\n\t\t\t// It will find available techs and send alerts by sms/email/notification\n\t\t\tlet scheduleTimeNew = getPrimaryTime(scheduleJobTime);\n\t\t\tsocket.emit('search-for-tech', {\n\t\t\t\tjobId: jobStats.id,\n\t\t\t\tcustomerTimezone: user.timezone,\n\t\t\t\tjobData: jobStats,\n\t\t\t\tprimaryTime: scheduleTimeNew,\n\t\t\t\tphoneNumber:user.customer.phoneNumber,\n\t\t\t\tcustomerName:user.firstName,\n\t\t\t\tcustomerEmail:user.email,\n\t\t\t\ttechnicianId:technicianId ? technicianId : selectedTechnician.value,\n\t\t\t});\n\t\t}catch(err){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('There is catch error while create/fetch notification', { jobStats: jobStats, errMessage: err.message });\n\t\t\tconsole.log('There is catch error while create/fetch notification  :::: '+ err.message)\n\t\t}\n\t}\n\n\tconst openScheduleForLaterModal = () =>{\n\t\tconst isWithinWorkingHours = isWorkingHours(scheduleJobTime);\n\t\tif (!isWithinWorkingHours) {\n\t\t\topenNotificationWithIcon('error', 'Error', \"Our techs are mostly available between 9am-9pm EST Mon-Fri. Please schedule a good time during these business hours.\");\n\t\t\treturn;\n\t\t}\n\t\tsetOpenModalForScheduleMessgae(true)\n\t};\n\n    const scheduleForLater = async (e) => {\n\t\tsetOpenModalForScheduleMessgae(false);\n\t\te.preventDefault()\n\t\t// Function  decideMeetingServiceViaLaunchdarkly decides with which meetingService this job would continue\n\t\tawait decideMeetingServiceViaLaunchdarkly();\n\t\t// Here we are checking is jobid is available in url then we are using that jobid otherwise we are using job.id\n\t\tconst JobId = jobIdFromUrl ? jobIdFromUrl : job?.id;\n\t\tconsole.log(\"verify jobId for schedule job\", JobId)\n\t\tif(searchTechType===\"other\"){\n\t\t\tif(!selectedTechnician.value){\n\t\t\t\tconsole.log(\"My console for selectedTechnician\", selectedTechnician)\n\t\t\t\tsetShowSpinner(false)\n\t\t\t\topenNotificationWithIcon(\"info\", \"Info\", `Please either select a technicain or choose \"Any\" technicians to proceed further!`)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// if(user && user.parentId){\n\t\t// \tconst getParentUserInfo = await UserApi.getUserById(user.parentId)\n\t\t// \tconsole.log('getParentUserInfo ::::::::',getParentUserInfo)\n\t\t// \tlet userParentHasCard = await checkCustomerSubscription(getParentUserInfo);\n\t\t// \tconsole.log('getParentUserInfo ::::::::',userParentHasCard)\n\n\t\t// \treturn\n\t\t// \tif(!userParentHasCard.has_card_or_subscription){\n\t\t// \t\tsetShowSpinner(false)\n\t\t// \t\topenNotificationWithIcon(\"info\", \"Info\", `Please contact your admin to add card to proceed the current job!`)\n\t\t// \t\treturn\n\t\t// \t}\n\t\t// }\n\t\tconst isStripeAvilable =  await checkOwnerStripeId(user)\n\t\tif(isStripeAvilable.success){\n\t\t\tlet scheduleTimeNew = getPrimaryTime(scheduleJobTime);\n\t\t\tconsole.log(scheduleTimeNew, \"My console 1\", scheduleTimeNew)\n\t\t\tconst hourDifferenceFromNow = scheduleTimeNew - new Date().getTime()\n\t\t\tif(hourDifferenceFromNow < 3600000){\n\t\t\t\topenNotificationWithIcon(\"error\", \"Error\", \"Please select time atleast 1 hour from now!\")\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlocalStorage.setItem(\"isScheduleJob\", true)\n\t\t\t\tsetShowSpinner(true)\n\t\t\t\tconsole.log(\"My console from schedule job\")\n\t\t\t\tlet card_info = { has_card_or_subscription: false }\n\t\t\t\tconst scheduleJobData = {};\n\t\t\t\tlet scheduleDetails = {\n\t\t\t\t\t'primaryTimeAvailable':true,\n\t\t\t\t\t'primaryTimeExpiredAt':null,\n\t\t\t\t\t'secondaryTimeAvailable':false,\n\t\t\t\t\t'secondaryTimeExpiredAt':null,\n\t\t\t\t\t'scheduleExpired':false,\n\t\t\t\t\t'scheduleExpiredAt':null\n\t\t\t\t}\n\t\t\t\tscheduleJobData.scheduleDetails = scheduleDetails\n\t\t\t\tscheduleJobData.scheduleDetails.scheduleExpiredAt = new Date(scheduleTimeNew - 1200000)\n\t\t\t\t\n\t\t\t\t// If this is true then we will not send any notification to that particular tech who declined the job\n\t\t\t\tscheduleJobData['is_transferred_notification_sent'] = job?.is_transferred \n\t\t\t\t\n\t\t\t\tif (user) {\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Customer - Click on Schedule for later button ');\n\t\t\t\t}\n\t\t\t\tif (!user || user.email === \"guest@geeker.co\" ) {\n\t\t\t\t\tconsole.log(\"My console - guest user!\")\n\t\t\t\t\tscheduleJobData.primarySchedule = scheduleTimeNew;\n\t\t\t\t\t\n\t\t\t\t\tsetScheduleJobTime(scheduleTimeNew)\n\n\t\t\t\t\tawait updateJobAsGuest(jobIdFromUrl,scheduleJobData)\n\t\t\t\t\t\t// if(promoCodeInput && promoCodeApplied){\n\t\t\t\t\t\t// \tawait updatePromoCodeDetails(res);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// setJobFlowStepNumber(jobFlowStepsArray['signUp'])\n\t\t\t\t\t\tsetShowSpinner(false)\n\t\t\t\t\tif (technicianId) {\n\t\t\t\t\t\tscheduleJobData['post_again_reference_job'] = jobIdFromUrl\n\t\t\t\t\t\tscheduleJobData['post_again_reference_technician'] = technicianId\n\t\t\t\t\t\tconst updateData = await updateJobAsGuest(jobIdFromUrl,scheduleJobData)\n\t\t\t\t\t\tif(job?.guestJob) logoutGuestAccount()\n\t\t\t\t\t\twindow.location.href = `/customer/start-profile-setup?page=registration&jobId=${JobId}&technicianId=${technicianId}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(job?.guestJob) logoutGuestAccount()\n\t\t\t\t\t\twindow.location.href = `/customer/start-profile-setup?page=registration&jobId=${JobId}`; \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n          \t\t\tif(job?.guestJob) logoutGuestAccount()\n\t\t\t\t\tconsole.log(\"My console - user logged in!\")\n          \t\t\tconsole.log(' Job data>>>schedule', job)\n          \t\t\tlet lifeCycleTag = ''\n\t\t\t\t\tif (job && job.is_transferred && job.is_transferred == true) {\n\t\t\t\t\t\tlifeCycleTag = JobTags.SCHEDULE_AFTER_TRANSFER;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlifeCycleTag = JobTags.SCHEDULE;\n\t\t\t\t\t}\n          \t\t\tawait JobCycleApi.create(lifeCycleTag, false, user.id);\n          \t\t\tconst klaviyoData = {\n\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\tevent: 'Scheduled Job Created',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n          \t\t\tawait klaviyoTrack(klaviyoData);\n          \t\t\tlocalStorage.removeItem(\"showAfterBusinessHrs\");\n\t\t\t\t\tlet customer_info = await checkCustomerSubscription(user);\n        \t\t\tconsole.log(\"cardsInfo >>>>>>>>> in schedule later \",customer_info)\n        \t\t\tsetCardsInfo(customer_info.has_card_or_subscription)\n\t\t\t\t\n\t\t\t\t\tif (customer_info.has_card_or_subscription == false && user && !user.roles.includes('user') && !user.roles.includes('admin')) {\n\t\t\t\t\t\t// setJobFlowStepNumber(jobFlowStepsArray['signUp'])\n\t\t\t\t\t\tJobApi.updateJob(jobIdFromUrl,{primarySchedule:scheduleTimeNew})\n\t\t\t\t\t\tsetShowSpinner(false)\n\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=registration&jobId=${JobId}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait JobCycleApi.create(JobTags.HAVE_CARD, JobId, user.id);\n\t\t\t\t\t\tscheduleJobData.primarySchedule = scheduleTimeNew;\n\t\t\t\t\t\tscheduleJobData.status = 'Scheduled'\n\t\t\t\t\t\tif(technicianId || selectedTechnician?.value){\n\t\t\t\t\t\t\tscheduleJobData['post_again_reference_job'] = jobIdFromUrl\n\t\t\t\t\t\t\tscheduleJobData['post_again_reference_technician'] = technicianId ? technicianId : selectedTechnician?.value\n\t\t\t\t\t\t}\n          \t\t\t\tsetScheduleJobTime(scheduleTimeNew)\n          \t\t\t\tlet jobStats = await cardPreAuthorization(scheduleJobData)\n          \t\t\t\tconsole.log(\"My console for jobStats\", jobStats)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\topenNotificationWithIcon(\"info\", \"Info\", `Please contact your owner to add credit card`)\n\t\t\thistory.push(\"/\")\n\t\t}\n\t}\n\t\n\t// /**\n\t// * Function will check if there are any pending jobs of the customer else it will call findTechnician function\n\t// * @author : Nafees\n\t// */\n\t// const checkPendingJob = async () => {\n\t// \tlet pendingJobs = await JobApi.latestpendingJobs({\"customer\":user.customer.id})\n\t// \tconsole.log('pendingsjobs data>>>>',pendingJobs);\n\t// \tif (pendingJobs.total_pending_jobs > 0) {\n\t// \t\tsetLastPendingSoftware(pendingJobs.last_pending_job.software.name)\n\t// \t\tsetPendingJobId(pendingJobs.last_pending_job.id)\n\t// \t\tsetShowPendingJobModal(true)\n\t// \t}\n\t// \telse{\n\t// \t\tfindTechnician()\n\t// \t}\n\t// }\n\n\t/**\n\t* Function will redirect customer to dashboard to view last pending job details\n\t* @author : Nafees\n\t*/\n\t// const viewPendingJob = () => {\n\t// \twindow.location.href=`/dashboard?checkJobId=${pendingJobId}&t=pnd`;\n\t// }\n\t// Promo Code Apply Function\n\tconst applyPromoCode= async()=>{\n        if(promoCodeInput) {\n\t\t\tsetIsPromocodeApplied({})\n        \tconst promocode = (promoCodeInput.trim())\n        \t// retrieving promocode data to db\n\t        const response  = await PromocodeApi.retrievePromoData(promocode);\n\t\t\tconsole.log(\"response- when coupon code is applied\",promocode )\n\t        if(response){\n\t            if(response && response.message){\n\t            \treturn openNotificationWithIcon(\"error\", \"Error\",  response.message);\n\t            }if(response && response.expiry_date && (new Date(response.expiry_date).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) ){\n\t                return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[0]);\n\t            }if(response && response.used_by){\n\t            \tif(user && user.id){ \n\t                const findUser  = response.used_by.find((item) => item.user_id === user.id);\n\t\t\t\t\tconsole.log(\"Check User is Existed\", findUser)\n\t                   if(findUser && !(JSON.stringify(findUser) === \"{}\")){\n\t                     return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[1]);\n\t                   }\n\t\t\t            else{\n\t\t\t            \tsetIsPromocodeApplied(response);\n\t\t\t            \tconst message = response.discount_type === \"fixed\" ? `Promocode of $${response.discount_value} is applied !!` :\n\t\t\t            \t                                              `Promocode of ${response.discount_value}% is applied !!`\n\t\t\t            \treturn openNotificationWithIcon(\"success\",\"Success\",message);\n\t\t\t            }\n\t            \t}\n\t            }\n            }else{\n        \t  return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[4]);\n             }\n\t    }else{\n\t    \t return openNotificationWithIcon(\"error\", \"Error\", MESSAGES[3]);\n\t    }\n      //openNotificationWithIcon('error', 'Invalid Promocode', \"Please check your promocode\");\n\t}\n\t\n\t// Update Details of User and JobID in Promocode Database\n\tconst updatePromoCodeDetails= async(jobData)=>{\n\t\tif(promoCodeApplied && promoCodeApplied.id){\n\t\t  const updateData ={\n                            user_id : user ?  user.id :'',\n                            job_id :  jobIdFromUrl,\n                            used_date : new Date()\n                    }\n                    console.log('updateData',updateData) \n                    console.log('response-promo', promoCodeApplied)\n                    // updating promo code to the DB\n                    const updateResponse = await PromocodeApi.updatePromoData(promoCodeApplied.id , updateData);\n\t\t\t\t\tconsole.log(\"My console to check 11111 updateResponse\", updateResponse)\n                    if(updateResponse){\n\t\t\t\t\t\tconst updateUser= {\n\t\t\t\t\t\t\t\"coupon_id\": promoCodeApplied.id,\n\t\t\t\t\t\t\t\"coupon_code\" : promoCodeApplied.promo_code,\n\t\t\t\t\t\t\t\"discount_type\": promoCodeApplied.discount_type,\n\t\t\t\t\t\t\t\"coupon_code_discount\" : promoCodeApplied.discount_value\n\t\t\t\t\t\t}\n\t\t\t\t\t\tupdateJob(jobIdFromUrl,updateUser)\n\t\t\t            return true\n                    }\n\t\t}else {\n\t\t\treturn false;\n\t\t}\n      \n\t}\n\n\t/**\n\t * Following function is to handle change for first dropdown i.e. \"All\", \"Selected\"\n\t * @params : data : {value: \"\", label: \"\"}\n\t * @return : Set a state var i.e. selectedTechs : Boolean\n\t * @author : Vinit\n\t **/\n\t// const handleAllOrSelectDropDown = (string) => {\n\n\t// \tif(string === \"All\"){\n\t// \t\t// setSelectedTechs(false)\n\t// \t\trepostJob = false\n\t// \t\tsetSelectedTechnician({})\n\t// \t}\n\t// \tif(string === \"Choose\"){\n\t// \t\tsetSelectedTechs(true)\n\t// \t\trepostJob = true\n\t// \t}\n\t// }\n\t\n\n\t/**\n\t * Following function is to handle back button click\n\t * @params : none\n\t * @return : none\n\t * @author : Vinit\n\t **/\n\tconst handleBackBtnClick = () => {\n\t\tconsole.log(\"My console for job id\", jobIdFromUrl)\n\t\tif(technicianId){\n\t\t\twindow.location.href = `/customer/start-profile-setup?page=select-software&jobId=${jobIdFromUrl}&edit=true&technicianId=${technicianId}`\n\t\t}else{\n\t\t\twindow.location.href = `/customer/start-profile-setup?page=select-software&jobId=${jobIdFromUrl}&edit=true`\n\t\t}\n\t}\n\n\t/**\n\t * Following function is to handle change for second dropdown i.e. technician list\n\t * @params : data : {value: \"\", label: \"\"}\n\t * @return : Set a state var i.e. selectedTechnician : Boolean\n\t * @author : Vinit\n\t **/\n\tconst handleTechniciansList = (data) => {\n\t\tconsole.log(\"My console to check selected technician\", data)\n\t\tif(data.value === \"Any\"){\n\t\t\tsetSearchTechType(\"any\")\n\t\t\t// setSelectedTechs(false)\n\t\t\trepostJob = false\n\t\t\tsetSelectedTechnician({})\n\t\t}else{\n\t\t\tsetSearchTechType(\"other\")\n\t\t\t// setSelectedTechs(true)\n\t\t\trepostJob = true\n\t\t\tsetSelectedTechnician(data)\n\t\t}\n\t}\n\n\t/**\n\t * Following function is to manipulate the UI for second dropdown options\n\t * @params : data : {value: \"\", label: \"\", online: Boolean}\n\t * @return : HTML for dropdown and options\n\t * @author : Vinit\n\t **/\n\t// const formatOptionLabel = ({ value, label, online,status }) => (\n\t// \t<div style={{ display: \"flex\", alignItems: \"center\" }}>\n\t// \t\t<div style={{ marginLeft: \"5px\", width: \"100%\" }}>\n\t// \t\t\t{(label === \"Any Geek\" ? label : \n\t// \t\t\t              status === \"Busy\" ? \n\t//                                                 <span>{label}<span style={{color: \"#ffc800\"}}>{' (In Session)'}</span></span>\n\t// \t\t\t                                                             :  online  ? <span>{label}<span style={{color: \"#7ed957\"}}>{' (Online)'}</span></span> : \n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                    <span>{label}<span style={{color: \"#a8a8a8\"}}>{' (Offline)'}</span></span>  )}\n\t\t\t\t\n\t// \t\t</div>\n\t// \t</div>\n\t// );\n\t\n\tif (showLoader) return <Loader height=\"100%\" />;\n\n    return(<>\n        <div className=\"d-flex justify-content-center align-items-start flex-wrap max-w-60p margin-auto\" >\n\t\t\t<div className=\"d-flex justify-content-center align-items-start w-100p flex-wrap\">\n\t\t\t\t<div className=\"d-flex flex-column justify-content-start w-50p p-0-30-10-30 media-max-width-500-width-100p media-max-width-500-padding-lr-0\">\n\t\t\t\t\t<span className=\"job-summary-heading\">Software:</span>\n\t\t\t\t\t<span className=\"job-summary-value\">{job?.software?.name ? job?.software?.name : \"NA\"}</span>\n\t\t\t\t\t<span className=\"job-summary-heading\">Area:</span>\n\t\t\t\t\t<span className=\"job-summary-value\">{job?.subOption ? job?.subOption : \"NA\"}</span>\n\t\t\t\t\t<span className=\"job-summary-heading\">Details:</span>\n\t\t\t\t\t<span className=\"job-summary-value\">{job?.issueDescription ? job?.issueDescription : \"NA\"}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"d-flex flex-column  justify-content-start w-50p p-0-30-10-30 media-max-width-500-width-100p media-max-width-500-padding-lr-0\">\n\t\t\t\t\t{isEstimatesVisible ? \n\t\t\t\t\t// {true ? \n\t\t\t\t\t<>\n\t\t\t\t\t<span className=\"job-summary-heading\">Estimated wait time is:</span>\n\t\t\t\t\t<span className=\"job-summary-value\">{job?.software?.estimatedWait ? job?.software?.estimatedWait + \" min\" : \"NA\"}</span>\n\t\t\t\t\t<span className=\"job-summary-heading\">Most jobs like yours take between:</span>\n\t\t\t\t\t<span className=\"job-summary-value\">{job?.software?.estimatedTime ? job?.software?.estimatedTime + \" min\" : \"NA\"}</span>\n\t\t\t\t\t{ userIsOwner || !ownerHaveSubscription ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className=\"job-summary-heading\">Most jobs like yours cost between:</span> \n\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{user && !isFirsJob && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"job-summary-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t${calculatedPrices.initPriceToShow}-${calculatedPrices.finalPriceToShow}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{(!user || isFirsJob) && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"strike-through\">\n\t\t\t\t\t\t\t\t\t\t\t\t${calculatedPrices.initPriceToShow}-${calculatedPrices.finalPriceToShow}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}{\" \"}\n\t\t\t\t\t\t\t\t\t\t{(!user || isFirsJob) && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"job-summary-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t${Number(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcalculatedPrices.initPriceToShow\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? calculatedPrices.initPriceToShow - job?.software?.rate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t)}-${Number(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcalculatedPrices.finalPriceToShow\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? calculatedPrices.finalPriceToShow - job?.software?.rate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\n\t\t\t\t\t): (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  {/* <span className=\"job-summary-heading\">Most jobs like yours cost between:</span>\n\t\t\t\t\t\t  <span className=\"job-summary-value\">NA</span> */}\n\t\t\t\t\t\t</>\n\t\t\t\t\t  )}\n\t\t\t\t\t</> : null}\n\t\t\t\t</div>\n\t\t\t</div>\n            <hr className=\"w-90p p-0-30 mt-0 mb-50\" />\n            <div className='p-0-30-10-30 media-max-width-500-padding-lr-0' style={{width:\"100%\",maxWidth:\"600px\"}}>\n                <div className={` softare-label-div margin-bottom-15`}>\n                    <label className='softare-label-n '>I need this done:</label>\n                </div>\n                <div className='d-flex justify-content-start '>\n                <div className={ `later-div d-flex align-items-center justify-content-center ${needThisDone === \"asap\" ? \"asap-div d-flex align-items-center justify-content-center\" : \"\"} ${showLoader ? \" disabledButton\" : \"\"}`} onClick={asapHandler} >\n                    <div className='inner-asap d-flex justify-content-start align-items-center'>\n                        { needThisDone === \"asap\" ? <CheckInCircle bgColor={\"cyan\"} style={{height:\"16px\",width:\"16px\", marginRight:\"10px\"}} /> : <div className='asap-circle'></div> }\n                        <span className={\"asap-span \" + (needThisDone === \"asap\" ? \"font-weight-600\" : \"\") }>ASAP</span>\n                    </div>\n                </div>\n                <div className={ `later-div d-flex align-items-center justify-content-center ${needThisDone === \"later\" ? \"asap-div d-flex align-items-center justify-content-center \" : \"\"} ${showLoader ? \" disabledButton\" : \"\"}`} onClick={laterHandler}>\n                    <div className='inner-asap d-flex justify-content-start align-items-center'>\n                    { needThisDone === \"later\" ? <CheckInCircle bgColor={\"cyan\"} style={{height:\"16px\",width:\"16px\", marginRight:\"10px\"}} /> : <div className='asap-circle'></div> }\n                        <span className={\"asap-span \" + (needThisDone === \"later\" ? \"font-weight-600\" : \"\") }>Later</span>\n                    </div>\n                </div>\n                </div>\n            </div>\n            <div className='sched-later-div d-flex w-100p p-0-30-10-30 mt-10 media-max-width-500-padding-lr-0'>\n                { needThisDone === \"later\" &&  <ScheduleForLater scheduleJobTime={scheduleJobTime} setScheduleJobTime={setScheduleJobTime} showSpinner={showSpinner} />  }\n            </div>\n        </div>\n\n\t\t{/* {user && <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-30 media-max-width-500-padding-lr-0\">\n\t\t\t\t<div className={` softare-label-div margin-bottom-15`}>\n\t\t\t\t\t{isFirsJob &&\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t\t{!isFirsJob &&\n\t\t\t\t\t\t<span onClick={()=>{setSelectedTechs(true)}}  className='softare-label-n2 '>\n\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t</span>\n\t\t\t\t\t}\n                </div>\n\t\t\t\t\n\t\t\t\t<div className=\"jobSummaryDropDownDiv\" style={isFirsJob === true ? {cursor:\"not-allowed\"} : {cursor:\"pointer\"}}>\n\t\t\t\t\t{selectedTechs && \t\t\t\t\t\n\t\t\t\t\t\t(techniciansList.length === 0 ? <Spin className=\"job-summary-spinner\" /> \n\t\t\t\t\t\t: <Select options={techniciansList} className= \"jobSummaryDropDown media-max-width-500-mt-20\" isSearchable={false} onChange={handleTechniciansList} formatOptionLabel={formatOptionLabel} defaultValue={techniciansList[0]} isDisabled={isFirsJob ? true : false}\n\t\t\t\t\t\t/>)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>} \n\n\t\t{!user && <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-30 media-max-width-500-padding-lr-0\">\n\t\t\t\t<div className=\"softare-label-div margin-bottom-15\">\n\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n                </div>\n\t\t\t</div>\n\t\t</div>} */}\n\n        <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-30 media-max-width-500-padding-lr-0\">\n\t\t\t{user && havePromoCode && <div>\n\t\t\t\t<div className=\"promoText\">Have a promo code? Enter here</div>\n\t\t\t\t\t<div className=\"promoInputGroup media-max-width-500-width-100p\">\n                        <input className=\"promoInput mr-10 media-max-width-500-width-70p\" type=\"text\" onChange={(e) => { setPromoCodeInput(e.target.value) }} />\n                        <a className=\"promoApplyText\" onClick={applyPromoCode}  >Apply</a>\n                    </div>\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t</div>\n\n        <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"d-flex justify-content-between align-items-start flex-wrap p-0-30-10-30 media-max-width-500-padding-lr-0 mt-15 w-100p\">\n\t\t\t\t<BasicButton disable={showSpinner}  onClick={handleBackBtnClick} height={\"70px\"} width={\"75px\"} background={\"#92A9B8\"} color={\"#fff\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"left\"} />\n\t\t\t\t<div className=\"media-max-width-355-mt-20\"  >\n\t\t\t\t{/* <div className=\"p-0-30-10-30\"> */}\n\t\t\t\t\t<BasicButton disable={nextButton || showSpinner}  onClick={needThisDone === \"later\" ? openScheduleForLaterModal : findTechnician} btnTitle={ needThisDone === \"later\" ? \"Schedule\" :\"Get Help Now\"} height={\"70px\"} width={\"175px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\tstyle={{top: 100}}\n\t\t\t\t\t\t\tclosable={false}\n\t\t\t\t\t\t\tonCancel={() => { setOpenModalForScheduleMessgae(false) }}\n\t\t\t\t\t\t\tvisible={openModalForScheduleMessgae}\n\t\t\t\t\t\t\tmaskStyle={{ backgroundColor: \"#DCE6EDCF\" }}\n\t\t\t\t\t\t\tmaskClosable={true}\n\t\t\t\t\t\t\twidth={615}\n\t\t\t\t\t\t\tfooter={\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"btn app-btn app-btn-light-blue modal-footer-btn\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetOpenModalForScheduleMessgae(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tkey=\"no\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span></span>No\n\t\t\t\t\t\t\t</Button>,\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"btn app-btn job-accept-btn modal-footer-btn\"\n\t\t\t\t\t\t\tdisabled={nextButton || showSpinner}\n\t\t\t\t\t\t\tshowSpinner={showSpinner}\n\t\t\t\t\t\t\tonClick={scheduleForLater}\n\t\t\t\t\t\t\tkey=\"yes\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span></span>Yes\n\t\t\t\t\t\t\t</Button>,\n\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t\t<span className=\"divsize\">Please note, if you don`t show up to the call on scheduled time after a Geek accepted the call a fee of $24.99 will be applied. Are you sure you want to continue?</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Modal>\n\t\t\t        </div>\n\n\t\t\t\t\t{user && !havePromoCode && !haveSubscription && \n\t\t\t\t\t<p onClick={() => setHavePromoCode(true)} className='softare-label-n mt-2 promo-hover-effect'>Promo Code? Click Here</p> }\n\t\t\t\t\t{/* <BasicButton disable={nextButton || showSpinner}  onClick={isScheduleJob ? scheduleForLater : findTechnician} btnTitle={\"Next\"} height={\"60px\"} width={\"158px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} /> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<p className=\"mt-4 text-center job-summary-heading\">You will be charged once the geek accepts the job</p> \n        </div>\n\n\t{/* <PendingJobStatusModal\tshowPendingJobModal={showPendingJobModal} setShowPendingJobModal={setShowPendingJobModal} viewPendingJob={viewPendingJob} findTechnician={findTechnician} lastPendingSoftware={lastPendingSoftware}/> */}\n\n    </>\n\t)\n}\n\nexport default JobSummary\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\JobSummary.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "RoleSelection.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport { Row, Col, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\nimport PhoneInput from 'react-phone-input-2';\nimport {\n  StepActionContainer,\n  StepTitle,\n  BodyContainer,\n  SectionTitle,\n  // WarningText,\n} from './style';\nimport ItemLabel from '../../../../components/ItemLabel';\nimport AuthInput from '../../../../components/AuthLayout/Input';\nimport StepButton from '../../../../components/StepButton';\nimport { openNotificationWithIcon } from '../../../../utils';\n\n// import 'react-phone-input-2/lib/style.css';\n\nconst { Text } = Typography;\n\nconst RoleSelection = ({\n  onNext,\n  accountUsers,\n  setAccountUsers,\n  phoneNumber,\n  setPhoneNumber,\n  // extension,\n  // setExtension,\n}) => {\n  const [error, setError] = useState({});\n  /*const sty = {\n    height: '50px',\n    borderRadius: '10px',\n    marginTop: '15px',\n    borderColor: '#e2e2e2',\n  };*/\n  /*const handleAccountUser = (e, index, pos) => {\n    const { value } = e.target;\n    const newArr = [...accountUsers];\n    newArr[index][pos] = value;\n    setAccountUsers(newArr);\n  };\n  const handleAddAccountUser = () => {\n    setAccountUsers(prev => [\n      ...prev,\n      {\n        name: '',\n        email: '',\n        role: '',\n      },\n    ]);\n  };*/\n\n  const handlePhoneNumber = (value) => {\n    setPhoneNumber(`+${value}`);\n\n    if (!value) {\n      setError({ ...error, phoneNumber: 'Please add your phone number.' });\n      return;\n    }\n    setError({ ...error, phoneNumber: null });\n  };\n// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n  // const handleExtension = e => {\n  //   setExtension(e.target.value);\n  // };\n\n  const handleSubmit = () => {\n\n    if (isPossiblePhoneNumber(phoneNumber) === false || isValidPhoneNumber(phoneNumber) === false){\n      return (openNotificationWithIcon('error', 'Error', 'Phone Number Not Valid'))\n\n    }\n\n    if (!phoneNumber) {\n      setError({ ...error, phoneNumber: 'Please add your phone number.' });\n      return;\n    }\n    const pattern = new RegExp(/^\\+\\d[0-9\\b]+$/);\n\n    if (!pattern.test(phoneNumber)) {\n      setError({ ...error, phoneNumber: 'Please provide valid phone number.' });\n      return;\n    }\n    onNext();\n  };\n\n  return (\n    <div>\n\n      <Row>\n        <Container span={24}>\n          <StepTitle>\n            Your job is almost ready to go live!\n            <br />\n            {' '}\n\n          </StepTitle>\n          <BodyContainer span={24}>\n            <SectionTitle>\n              Please provide a phone number for your account to use on job\n            </SectionTitle>\n            <SubTitle>\n              Other users you invite will be asked to provide thier own direct\n              number\n            </SubTitle>\n            <AccountUser>\n              <InputWithLabel>\n                <ItemLabel style={{ margin: 0 }}>Phone Number</ItemLabel>\n                <PhoneInput\n                  country=\"us\"\n                  countryCodeEditable={false}\n                  onlyCountries={['gr', 'fr', 'us', 'in', 'ca']}\n                  onChange={handlePhoneNumber}\n                />\n              </InputWithLabel>\n              {/*\n              // Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n              <InputWithLabel>\n                <ItemLabel style={{ margin: 0 }}>Extension</ItemLabel>\n                <AuthInput\n                  name=\"extension\"\n                  size=\"large\"\n                  style={{ marginTop: 15 }}\n                  placeholder=\"Extension\"\n                  value={extension}\n                  onChange={handleExtension}\n\n                />\n              </InputWithLabel> */}\n            </AccountUser>\n          </BodyContainer>\n          <StepActionContainer className=\"steps-action\">\n            <StepButton type=\"primary\" onClick={handleSubmit}>\n              Post Your Job\n            </StepButton>\n          </StepActionContainer>\n        </Container>\n      </Row>\n    </div>\n  );\n};\n\n// //  height: \"50px\";\n//     border-radius: \"10px\";\n//     margin-top: \"15px\";\n//     border-color: #e2e2e2;\nconst Container = styled(Col)`\n  display: flex;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n`;\n\nconst SubTitle = styled(Text)`\n  font-size: 14px;\n  font-weight: bold;\n  text-align: left;\n  margin-bottom: 30px;\n`;\n\n/*const AddProfile = styled(Text)`\n  font-size: 15px;\n  font-weight: bold;\n  color: #8c8989;\n  text-decoration: underline;\n  padding: 30px 0;\n  cursor: pointer;\n`;*/\n\nconst AccountUser = styled.div`\n  display: flex;\n`;\n\nconst InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  marginRight: 30px;\n  position: relative;\n  &:last-child {\n    marginRight: 0;\n  }\n  & input{\n    height:50px;\n    padding:10px;\n    border-radius: 10px;\n    border : 0px none;\n    margin-top:15px;\n    margin-left:20px;\n  }\n   & .react-tel-input{\n      margin-top:15px;\n   }\n  & .react-tel-input .form-control {\n    height:50px;   \n    border-radius: 10px;\n    border : 0px none;   \n    margin-left:20px;\n  }\n   \n \n`;\nexport default RoleSelection;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\RoleSelection.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SelectSoftware.js",
                                                                    "fileData": "import React , { useEffect, useState } from 'react'\nimport * as SoftwareApi from '../../../../api/software.api';\nimport BasicButton from 'components/common/Button/BasicButton';\nimport SoftwareDropDown from 'components/common/SoftwareDropDown';\nimport { useAuth } from '../../../../context/authContext';\nimport { useJob } from '../../../../context/jobContext';\nimport mixpanel from 'mixpanel-browser';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\nimport { JobTags, SECRET_KEY, JOB_STATUS, EmailOutlook } from '../../../../constants';\nimport * as JobApi from '../../../../api/job.api';\nimport { isLiveUser, GAevent, getCookie, PushUserDataToGtm, GetIPData } from '../../../../utils';\nimport { useLocation } from 'react-router';\n// import { useNotifications } from '../../../../context/notificationContext';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport {useResizeObserver } from '../../../../utils/index';\nimport Loader from '../../../../components/Loader';\nimport {INACTIVE_ACCOUNT_STATUS_MSG } from '../../../../constants';\nimport { useGTMDispatch } from '@elgorditosalsero/react-gtm-hook'\nimport { Spin } from 'antd';\nimport Select from 'react-select'\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport AfterSelectedSoftwareModal from '../Components/AfterSelectedSoftwareModal';\nimport axios from \"axios\";\n\nlet liveUser = true;\nlet isSoftwareEmailOrOutlook = false;\nfunction SelectSoftware({setJobFlowStepNumber, jobFlowStepsArray, setJobInfo, jobInfo, scheduleJobTime, setScheduleJobTime, user, job, setGuestJobId, jobId, newPost, isScheduleJob, setIsScheduleJob, setIsFirsJob, isFirsJob, setToken, setUser,setSelectedTechnician}) {\n    const [softwareList, setSoftwareList] = useState([]);\n    const [currentSoftware,setCurrentSoftware] = useState(jobInfo.currentSoftware ? [jobInfo.currentSoftware] : []);\n    const [currentSubSoftware,setCurrentSubSoftware] = useState(jobInfo.currentSubSoftware ? jobInfo.currentSubSoftware : \"\");\n    const [needThisDone,setNeedThisDone] = useState(jobInfo.needThisDone)\n    const [disable,setDisable] =useState(false)\n    const [disablePrevGeek,setDisablePrevGeek] =useState(false)\n    const [disableDetails,setDisableDetails] =useState(true)\n    const [textarea, setTextarea] = useState(jobInfo.moreDetails);\n    const [disabletextarea, setDisableTextarea] = useState(true);\n    const [disabletextareaCharac, setDisableTextareaCharac] = useState(true);\n    const [characterCount,setCharacterCount] = useState(textarea.length);\n    const [count,setCount] = useState(500);\n    const [charLeftColor,setCharLeftColor] = useState(false)\n    const [nextButton,setNextButton] = useState(true)\n    const [hireValue, setHireValue] = useState(false);\n    const { getGuestUser } = useAuth();\n    const { createJobAsGuest, createJob, fetchJob} = useJob();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const repostJob = queryParams.get('repost') ? queryParams.get('repost') : false;\n    let technicianIdParams = queryParams.get(\"technicianId\") ? queryParams.get(\"technicianId\") : false\n    const [technicianId, setTechnicianId] = useState(technicianIdParams)\n    const postAgainJobReference = queryParams.get(\"jobId\") ? queryParams.get(\"jobId\") : false\n    const hireExpertTransferJob = queryParams.get('hireExpertTransferJob') ? queryParams.get('hireExpertTransferJob') : false;\n    const transferredJob = queryParams.get('transferredJob') ? queryParams.get('transferredJob') : false;\n    const technicianProfile = queryParams.get('medium') ? queryParams.get('medium') : false; \n    const uniqueTechScheduleJob = queryParams.get('applyJobFor') ? queryParams.get('applyJobFor') : false; \n    const editJob = queryParams.get('edit') ? queryParams.get('edit') : false;\n    let newPostJob = newPost != undefined ? newPost : queryParams.get(\"newpost\")\n\tconst [showSpinner, setShowSpinner] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(true)\n\tconst [softwareId, setSoftwareId] = useState()\n    const [subSoftwareName, setSubSoftwareName] = useState()\n    const [transferJobData, setTransferJobData] = useState()\n    const sendDataToGTM = useGTMDispatch();\n    const [selectedTechs, setSelectedTechs] = useState(technicianId && postAgainJobReference ? true :false)\n    const [isSpecificSoftwareSelected , setIsSpecificSoftwareSelected] = useState(false);\n    const [goToJobSummaryPage,setGoToJobSummaryPage] = useState(false)\n    const [techniciansList, setTechniciansList] = useState([])\n    const [selectedPrevGeek, setSelectedPrevGeek] = useState()\n    const [ip, setIp] = useState(\"\")\n    const getMeasurementId = process.env.REACT_APP_GA_MEASUREMENT_ID\n\tconst mes_id = getMeasurementId ?  getMeasurementId.split(\"-\")[1] : false\n    const [uniqueTechSoftId,setUniqueTechSoftId] = useState([]);\n    const [isTechUniqueLink,setIsTechUniqueLink] = useState(false)\n    console.log('isFirsJob:::::',isFirsJob)\n\n\n    const [showSpinnerForFindTech, setShowSpinnerForFindTech] = useState(false);\n    const [lastPendingSoftware,setLastPendingSoftware] = useState('');\n    const [customerConfirmFindTech,setCustomerConfirmFindTech] = useState(false);\n\tconst [scheduleMsg,setScheduleMsg] = useState(false);\n    // const [showSpinnerScheduleForLater, setShowSpinnerScheduleForLater] = useState(false);\n\n\n    const message = scheduleMsg ? (\n\t\t<span className=\"div-font\" style={{ fontSize: 20, paddingTop: '40px' }}>\n\t\t\tOne of your previous job of <b style={{ fontWeight: 'bold' }}>{lastPendingSoftware}</b> is already scheduled with a technician. Are you sure you want to create a new job post? If yes, then your previous job will be <b style={{ fontWeight: 'bold' }}>Cancelled</b>\n\t\t</span>\n\t\t) : (\n\t\t<span className=\"div-font\" style={{ fontSize: 20, paddingTop: '40px' }}>\n\t\t\tWe are still looking for a technician for your existing job of <b style={{ fontWeight: 'bold' }}>{lastPendingSoftware}</b>. Are you sure you want to create a new job post? If yes, then your previous job will be <b style={{ fontWeight: 'bold' }}>Cancelled</b>\n\t\t</span>\n\t\t);\n    \n\n    useEffect(() => {\n        (async () => {\n            try {\n                if(user){\n                    console.log(\"My console to check user for tech\", user)\n                    if(user.userType === \"technician\") {\n                        console.log(\"tetch token removed from selectSoftware\")\n                        localStorage.removeItem(SECRET_KEY);\n                        console.log(\"window.location.href from selectSoftware\", user)\n                        window.location.href = \"/\"\n                    }\n                }\n                console.log(\"My console to check editJob\", editJob)\n                localStorage.removeItem('authorizationInfo');\n\t\t\t\tconst res = await SoftwareApi.getSoftwareList();\n\t\t\t\tconsole.log(\"My console to check\", res)\n                if (res && res.data) {\n\t\t\t\t\tsetSoftwareList(res.data);\n            \t\tsetIsLoading(false)\n                }\n\t\t\t\tif(postAgainJobReference){\n                    await fetchJob(postAgainJobReference)\n\t\t\t\t}\n                if(user){\n                    // getting total jobs of customer from DB\n                    const totalNumberOfJobsOfCustomer = await JobApi.getTotalJobs({customer: user.customer.id})\n                    if (totalNumberOfJobsOfCustomer === 0) setIsFirsJob(true)\n                }\n                if(hireExpertTransferJob){\n                    console.log(\"My console ------------- 1\", hireExpertTransferJob)\n                }\n            } catch (e) {\n\t\t\t\tconsole.log(\"Err while getting software list --------------\", e)\n            }\n            console.log(\"My console to check technicianId\", technicianId)\n        })();\n        //GA3 tag commented by Vinit on 24/04/2023.\n\t\tGAevent('Job Initiate','job_initiated','job_initiated',user ? (user?.customer ? user.customer?.id : user.id) : 'guest_user');\n        getIPData();\n        const jobIdParams = queryParams.get(\"jobId\");\n        // we need to make sure the event is triggered only once\n        if(process.env.REACT_APP_URL && !jobIdParams && job === undefined){\n            const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n            PushUserDataToGtm('job_initiated', user, appUrl);\n        }\n    },[]);\n\n    /**\n     * Following function is to get ip address of customer\n     * @params : none\n     * @return : none\n     * @author : Vinit\n     **/\n    const getIPData = async () => {\n        try {\n            const res = await axios.get(\" https://geolocation-db.com/json/\");\n            console.log(\"Customer's ip is \",res.data);\n            setIp(res.data.IPv4)\n        } catch (error) {\n            console.log(\"Err occured while getting ip\", {error})\n        }\n    };\n\n    /**\n\t * This useEffect is responsible to fetch techs when customer wish to select a specific tech from past.\n\t * @params : selectedTechs : Boolean\n\t * @return : returns a list of relevant techs(whether online/offline)\n\t * @author : Kartar Singh\n\t **/\n\n    useEffect(()=>{\n        (async ()=> {\n            if(technicianId && postAgainJobReference) {\n\n                const techData = await TechnicianApi.getTechnicianDetailesByUserId(technicianId)\n\n                const onlineTech = await TechnicianApi.getOnlineTechnicianById(technicianId)\n\n                let temp =[];\n                let techId = techData?.data[0].id\n                let value = techData?.data[0].user?.id\n                let label = `${techData?.data[0].user?.firstName} ${techData?.data[0].user?.lastName}`\n                let status = techData?.data[0].status\n\n                if(onlineTech.activeUserFound){\n                    temp.push({techId, value, label,status,online:true})\n                }else{\n                    temp.push({techId, value, label,status,online:false})\n                }\n                setTechniciansList(temp)\n                setSelectedPrevGeek(technicianId)\n\n            }\n        })()\n    },[])\n\n    const closePendingModal = () => {\n        setCustomerConfirmFindTech(false)\n        setShowSpinner(false)\n        setIsSpecificSoftwareSelected(false);\n        setNextButton(false);\n        setGoToJobSummaryPage(false)\n\t  };\n\n    \t/**\n\t * This useEffect is responsible to fetch all the relevant techs when customer wish to select a specific tech from past.\n\t * @params : selectedTechs : Boolean\n\t * @return : returns a list of relevant techs(whether online/offline)\n\t * @author : Vinit\n\t **/\n        useEffect(()=>{\n            (async ()=> {\n                console.log(\"My console for selected software id\", softwareId)\n                if(selectedTechs && user && softwareId) {\n                    console.log(\"My console for selected software id\", softwareId)\n                    // getting all online technician data from DB\n                    const allActiveTechnicians = await TechnicianApi.getOnlineTechnicians({\"softwares\":softwareId})\n                    console.log(\"My console for active techs\", allActiveTechnicians.data)\n                    // getting all customers job response from DB by there customer.id\n                    const allCustomerJobsRes = await JobApi.findAllJobsByParams({customer: user.customer.id})\n                    let temp =[{techId:\"Any\",value:\"Any\",label:\"Any Geek\"}]\n                    const allTechniciansId = allCustomerJobsRes.jobs.data.map((item) => {\n                        if(item?.technician?.id !== undefined && item?.technician?.id !== \"\"){\n                            let techId = item?.technician?.id\n                            let value = item?.technician?.user?.id\n                            let label = `${item?.technician?.user?.firstName} ${item?.technician?.user?.lastName}`\n                            let status = item?.technician?.status\n                            temp.push({techId, value, label,status})\n                        }\n                    })\n                    console.log(\"My console to check temp\", temp)\n                    let filteredArr = temp.filter((ele,index,arr)=>arr.findIndex(ele2=>(ele2.value===ele.value))===index)\n                    console.log(\"My console to check filteredArr\", filteredArr)\n\n                    let finalArr = filteredArr.map((ele)=>{\n                        console.log(\"My console to check ele\", ele.techId, allActiveTechnicians.data)\n                        allActiveTechnicians.data.forEach((item)=>{\n                            console.log(\"My console to look for ele\", ele)\n                            if(!ele.online){\n                                console.log(\"My console to check for condition\", ele.techId === item.id)\n                                if(ele.techId === item.id){\n                                    ele['online'] = true\n                                }else{\n                                    ele['online'] = false\n                                }\n                            }\n                        })\n                        return ele\n                    })\n                    console.log(\"My console to check ele 2\", finalArr)\n                    setTechniciansList(finalArr)\n                }\n            })()\n        },[selectedTechs,softwareId])\n    \t/**\n\t * This useEffect is responsible to fetch technician details  that unique link will be share.\n\t * @params : technician userId\n\t * @return : returns a relevant techs(whether online/offline)\n\t * @author : Mritunjay\n\t **/\n        useEffect(()=>{\n            (async ()=> {\n                if(technicianId && technicianProfile) {\n                    let temp =[];\n                    const techData = await TechnicianApi.getTechnicianDetailesByUserId(technicianId)\n                    setUniqueTechSoftId(techData.data[0].expertise)\n                    const onlineTech = await TechnicianApi.getOnlineTechnicianById(technicianId)\n                    let techId = techData?.data[0].id \n                    let value = techData?.data[0].user?.id\n                    let label = `${techData?.data[0].user?.firstName} ${techData?.data[0].user?.lastName}`\n                    let status = techData?.data[0].status\n                    if(onlineTech.activeUserFound){\n                        temp.push({techId, value, label,status,online:true})\n                    }else{\n                        temp.push({techId, value, label,status,online:false})\n                    }\n                    setTechniciansList(temp)\n                    setSelectedPrevGeek(technicianId)\n                }\n            })()\n        },[technicianId])\n    \n    useEffect(()=>{\n        if(technicianId && technicianProfile && softwareId) {\n            setIsTechUniqueLink(true)\n        }\n    },[technicianId,softwareId])\n    \n    useEffect(()=>{\n\t\tif(jobInfo && jobInfo.needThisDone.length > 0 ){\n\t\t\tsetNextButton(false)\n\t\tif(jobInfo.moreDetails.length > 0){\n\t\t\tsetDisableDetails(false)\n\t\t}\n\t\t}\n\t\tsetSoftwareId(jobInfo.currentSoftware.id)\n\t\tsetSubSoftwareName(jobInfo.currentSubSoftware)\n\t\tsetCurrentSoftware(jobInfo.currentSoftware)\n    },[jobInfo])\n\n\tuseEffect(()=>{\n\t\t(async () => {\n\t\t\tif(user){\n\t\t\t\tliveUser = await isLiveUser(user)\n\t\t\t}\n        })()\n\t},[user])\n\n    useEffect(()=>{\n\t\tif(job){\n\t\t\tconsole.log(\"My console updated job from URL\", job)\n\t\t\tsetSoftwareId(job.software.id)\n\t\t\tsetSubSoftwareName(job.subOption)\n\t\t\tsetCurrentSoftware(job.software)\n\t\t\tsetCurrentSubSoftware(job.subOption)\n\t\t\tsetTextarea(job.issueDescription)\n            if(transferredJob){\n                let updatedDescription = job.updatedIssueDescription[0].issueDescription\n                console.log(\"console for transfer job\", {hireExpertTransferJob ,newPostJob, job})\n                setTransferJobData(prepareDataForTransferJob(job,updatedDescription))\n            }\n\t\t}\n    },[job])\n\n    useEffect(()=>{\n        (async()=>{\n            if(transferJobData){\n                console.log(\"My console for transferJobData\", transferJobData)\n                // const newTransferJob = createJob(transferJobData)\n                await JobApi.createJob(transferJobData).then(async (res) => {\n                    console.log(\"My console for newTransferJob\", res)\n                    window.location.href = `/customer/profile-setup?page=tech-search&jobId=${res.id}`\n                })\n            }\n        })()\n    }, [transferJobData])\n\n    useEffect(() => {\n        console.log(\"Console in main useEffect 1\")\n        if(currentSoftware && currentSoftware.sub_option && currentSoftware.sub_option.length > 0){\n            console.log(\"Console in main useEffect 2\", currentSoftware)\n            setDisable(false)\n            setDisablePrevGeek(false)\n            // setNextButton(false)\n        }else{\n            console.log(\"Console in main useEffect 3\", currentSoftware)\n            setDisable(true)\n            setDisablePrevGeek(true)\n            // setNextButton(true)\n            }\n\n        // if(currentSubSoftware && currentSubSoftware.length > 0 ){\n        if(currentSubSoftware && currentSubSoftware !== \"Select\"  ){\n            console.log(\"Console in main useEffect 4\", currentSubSoftware)\n            setDisableDetails(false)\n            // setNextButton(false)\n        }else{\n            console.log(\"Console in main useEffect 5\", currentSubSoftware)\n            // setDisableDetails(true)\n            // setNextButton(true)\n        }\n\n        if(textarea && textarea.length > 0 ){\n            console.log(\"Console in main useEffect 6\", textarea)\n            setDisableTextarea(false)\n            // setNextButton(true)\n            setNextButton(false)\n        }else{\n            console.log(\"Console in main useEffect 7\", textarea)\n\t\t\tsetDisableTextarea(true)\n            setNextButton(true)\n            setNeedThisDone(\"\")\n        }\n\n        if(textarea && textarea.length > 450 ){\n            console.log(\"Console in main useEffect 8\", textarea, textarea.length)\n            setCharLeftColor(true)\n        }\n        else{\n            console.log(\"Console in main useEffect 9\", textarea, textarea.length)\n            setCharLeftColor(false)\n        }\n\n        if(textarea && textarea.length > 500){\n            console.log(\"Console in main useEffect 10\", textarea, textarea.length)\n            setDisableTextareaCharac(true)\n        }else{\n            console.log(\"Console in main useEffect 11\", textarea, textarea.length)\n            setDisableTextareaCharac(false)\n        }\n\n        if(textarea && textarea.length > 450 ){\n            console.log(\"Console in main useEffect 12\", textarea, textarea.length)\n            setCharLeftColor(true)\n        }\n        else{\n            console.log(\"Console in main useEffect 13\", textarea, textarea.length)\n            setCharLeftColor(false)\n        }\n\n    }, [currentSubSoftware,currentSoftware,textarea])\n\n    useEffect(()=>{\n        (async(e)=>{\n          if(goToJobSummaryPage){\n              await nextJobSummaryPageHandler(e)\n          }\n        })()\n    },[goToJobSummaryPage]);\n\n\n\n    const sizeRef = useResizeObserver(({ width, height }) => {\n        console.log(`Inside selectSoftware Element width: ${width}, height: ${height}`);\n      });\n\n    const prepareDataForTransferJob = (job,updatedDescription) => {\n        let jobDataToCreateNewTransferJob = {}\n        jobDataToCreateNewTransferJob.transfer_reference_job = job?.id\n        jobDataToCreateNewTransferJob.customer = user?.customer?.id ? user?.customer?.id : user?.customer\n        jobDataToCreateNewTransferJob.software = job?.software?.id\n        jobDataToCreateNewTransferJob.expertise = job?.software?.expertise;\n        jobDataToCreateNewTransferJob.subOption = job?.subOption;\n        jobDataToCreateNewTransferJob.issueDescription = updatedDescription ? updatedDescription : job?.issueDescription;\n        jobDataToCreateNewTransferJob.level = 'advanced';\n        jobDataToCreateNewTransferJob.estimatedTime = (job?.software ? job?.software.estimatedTime : '0-0');\n        if (hireExpertTransferJob) {\n            jobDataToCreateNewTransferJob.estimatedPrice = (job?.software ? job?.software.twoTierEstimatePrice : '0-0');\n        } else {\n            jobDataToCreateNewTransferJob.estimatedPrice = (job?.software ? job?.software.estimatedPrice : '0-0');\n        }\n        jobDataToCreateNewTransferJob.status = 'Pending';\n        jobDataToCreateNewTransferJob.is_transferred = true;\n        jobDataToCreateNewTransferJob.hire_expert = hireExpertTransferJob;\n        jobDataToCreateNewTransferJob.is_transferred_hire_expert = hireExpertTransferJob;\n        // If this is true then we will not send any notification to that particular tech who declined the job\n        jobDataToCreateNewTransferJob.is_transferred_notification_sent = true;\n        jobDataToCreateNewTransferJob.ownerId = job?.ownerId;\n        jobDataToCreateNewTransferJob['tech_declined_ids'] = job?.tech_declined_ids\n        jobDataToCreateNewTransferJob.reasons = job?.reasons\n        return jobDataToCreateNewTransferJob\n    }\n\n    /**\n\t * Following function is to handle change for second dropdown i.e. technician list\n\t * @params : data : {value: \"\", label: \"\"}\n\t * @return : Set a state var i.e. selectedTechnician : Boolean\n\t * @author : Vinit\n\t **/\n\tconst handleTechniciansList = (data) => {\n\t\tconsole.log(\"My console to check selected technician\", data.value)\n        setSelectedPrevGeek(data.value)\n        console.log('prev geek  :::',selectedPrevGeek)\n\t}\n\n    \t/**\n\t * Following function is to manipulate the UI for second dropdown options\n\t * @params : data : {value: \"\", label: \"\", online: Boolean}\n\t * @return : HTML for dropdown and options\n\t * @author : Vinit\n\t **/\n\tconst formatOptionLabel = ({ value, label, online,status }) => (\n\t\t<div style={{ display: \"flex\", alignItems: \"center\" }}>\n\t\t\t<div style={{ marginLeft: \"5px\", width: \"100%\" }}>\n\t\t\t\t{(label === \"Any Geek\" ? label :\n\t\t\t\t              status === \"Busy\" ?\n\t                                                <span>{label}<span style={{color: \"#ffc800\"}}>{' (In Session)'}</span></span>\n\t\t\t\t                                                             :  online  ? <span>{label}<span style={{color: \"#7ed957\"}}>{' (Online)'}</span></span> :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                    <span>{label}<span style={{color: \"#a8a8a8\"}}>{' (Offline)'}</span></span>  )}\n\n\t\t\t</div>\n\t\t</div>\n\t);\n\n    /**\n     * Following function will check if user made any changes  in the existing job data\n     * @params = none\n     * @response : Boolean\n     * @author : Vinit\n     */\n     const checkIfDataChanged = () => {\n        if (softwareId === job.software.id &&\n            subSoftwareName === job.subOption &&\n            textarea === job.issueDescription){\n                return false\n        }else{\n            return true\n        }\n    }\n\n\n\n\tconst nextBtnHandler = async (e) => {\n        setShowSpinner(true)\n        e.preventDefault()\n        let popupRequiredOptions = ['Local printer and scanner','Network printer and scanner']\n        if((popupRequiredOptions.indexOf(currentSubSoftware) != -1) || (currentSoftware?.id === EmailOutlook)){\n            setIsSpecificSoftwareSelected(true);\n            if(currentSoftware?.id === EmailOutlook){\n                isSoftwareEmailOrOutlook = true;\n            };\n        }else{\n             await nextJobSummaryPageHandler(e);\n        }\n\n\t};\n\n    const nextJobSummaryPageHandler = async(e) =>{\n        if (user && user.blocked) {\n            return openNotificationWithIcon('error', 'Error', 'You\\'re blocked by the admin.');\n        };\n        if (user && !user.activeStatus) {\n             setShowSpinner(false)\n            return openNotificationWithIcon('info', 'Info', INACTIVE_ACCOUNT_STATUS_MSG);\n        };\n        // setJobFlowStepNumber(jobFlowStepsArray[\"jobSummary\"])\n        if (editJob) { // var got from query string.\n            console.log(\"job to be edited\", { editJob, softwareId, subSoftwareName, textarea, job })\n            if (user) console.log(\"user at software selection\", user)\n            const dataChanged = checkIfDataChanged()\n            if (dataChanged) {\n                console.log(\"there is change in data\")\n                // updating changed or edited data\n                const updateJobRes = await JobApi.updateJob(postAgainJobReference, { software: softwareId, subOption: subSoftwareName, issueDescription: textarea })\n                if (updateJobRes) {\n                    setShowSpinner(false)\n                    if (selectedPrevGeek && selectedPrevGeek !== 'Any') {\n                        window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${postAgainJobReference}&technicianId=${selectedPrevGeek}`;\n                    } else {\n                        window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${postAgainJobReference}`;\n                    }\n                } else {\n                    setShowSpinner(false)\n                    openNotificationWithIcon('error', \"Error\", \"Please try again.\")\n                }\n            } else {\n                if ((selectedPrevGeek && selectedPrevGeek !== 'Any')) {\n                    window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${postAgainJobReference}&technicianId=${selectedPrevGeek}`;\n                } else {\n                    window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${postAgainJobReference}`;\n                }\n            }\n        } else {\n            const dataToSave = {};\n            dataToSave.software = currentSoftware?.id;\n            dataToSave.subOption = currentSubSoftware;\n            dataToSave.issueDescription = textarea;\n            dataToSave.level = 'advanced';\n            dataToSave.estimatedTime = (currentSoftware ? currentSoftware.estimatedTime : '0-0');\n            dataToSave.estimatedPrice = (currentSoftware ? currentSoftware.estimatedPrice : '0-0')\n            dataToSave.hire_expert = hireValue;\n            dataToSave.client_id = String(getCookie('_ga').split(\".\")[2] + \".\" + getCookie('_ga').split(\".\")[3]);\n            dataToSave.session_id = String(getCookie(`_ga_${mes_id}`).split(\".\")[2]);\n            dataToSave.facebook_fbp = String(getCookie(\"_fbp\"));\n            dataToSave.facebook_fbc = String(getCookie(\"_fbc\"));\n            dataToSave.status = 'Draft';\n            dataToSave.user_agent = navigator.userAgent;\n            dataToSave.customer_ip = ip;\n            dataToSave.ownerId = user?.ownerId ? user?.ownerId : user?.id;\n\n            if ((selectedPrevGeek && selectedPrevGeek !== 'Any')) {\n                dataToSave['post_again_reference_job'] = job?.id\n                dataToSave['post_again_reference_technician'] = selectedPrevGeek ? selectedPrevGeek : false;\n            }\n            let draftJobData;\n            if (!user || user.email === \"guest@geeker.co\") {\n                localStorage.removeItem(\"isScheduleJob\")\n                console.log(\"No user exists!\")\n                dataToSave.customer = `guest_${new Date().getTime()}`;\n                dataToSave.guestJob = true;\n                const res = await getGuestUser();\n                console.log(\"Guest user response\", res)\n                if (res && res.token) {\n                    console.log(\"My console - res & res.token\", res)\n                    // localStorage.setItem(\"SECRET_KEY\", res.token.accessToken)\n                    await createJobAsGuest(dataToSave, res.token.accessToken).then(async (res) => {\n                        mixpanel.track('Customer guest Job Created', { 'JobID': res.id })\n                        setGuestJobId(res.id);\n                        // creating jobCycle\n                        await JobCycleApi.create(JobTags.DRAFT_JOB_CREATED, res.id);\n                        console.log(\">>>>>>>>>>>>>>>>>>> 1  >>>>>>>>>>>>\", res)\n                        draftJobData = res\n                        // await emailOFMobileTabletJobPosting(res)\n                        console.log(\"window.location.href from Selectsoftwares with guest user\", res)\n                        // window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${res.id}`;\n                        // setTimeout(() => {\n                        //     window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${res.id}`);\n                        // }, 3000);\n                        if ((selectedPrevGeek && selectedPrevGeek !== 'Any')) {\n                            window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${res.id}&technicianId=${selectedPrevGeek}`;\n                            setTimeout(() => {\n                                window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${res.id}&technicianId=${selectedPrevGeek}`);\n                            }, 3000);\n\n                            if(uniqueTechScheduleJob){\n                                window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${res.id}&technicianId=${selectedPrevGeek}&applyJobFor=${uniqueTechScheduleJob}`;\n                                setTimeout(() => {\n                                    window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${res.id}&technicianId=${selectedPrevGeek}&applyJobFor=${uniqueTechScheduleJob}`);\n                                }, 3000);\n                            };\n                        } else {\n                            window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${res.id}`;\n                            setTimeout(() => {\n                                window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${res.id}`);\n                            }, 3000);\n        \n                        };\n                       \n                    });\n                }\n            } else {\n                localStorage.removeItem(\"isScheduleJob\")\n                console.log(\"user exists!\", user)\n                dataToSave.customer = user.customer.id ? user.customer.id : user.customer;\n                dataToSave.guestJob = false;\n                draftJobData = await createJob(dataToSave)\n                // console.log(\"My console for draftJobRes\", draftJobData)\n                console.log(\"window.location.href from selectsoftwares\", draftJobData)\n                // window.location.href = `/customer/profile-setup?page=job-summary&jobId=${draftJobData.id}`;\n                console.log('my selected geek ::: ', selectedPrevGeek)\n                if ((selectedPrevGeek && selectedPrevGeek !== 'Any')) {\n                    window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}&technicianId=${selectedPrevGeek}`;\n                    setTimeout(() => {\n                        window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}&technicianId=${selectedPrevGeek}`);\n                    }, 3000);\n                    if(uniqueTechScheduleJob){\n                        window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}&technicianId=${selectedPrevGeek}&applyJobFor=${uniqueTechScheduleJob}`;\n                        setTimeout(() => {\n                            window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}&technicianId=${selectedPrevGeek}&applyJobFor=${uniqueTechScheduleJob}`);\n                        }, 3000);\n                    };\n                } else {\n                    window.location.href = `/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}`;\n                    setTimeout(() => {\n                        window.location.replace(`/customer/start-profile-setup?page=job-summary&jobId=${draftJobData.id}`);\n                    }, 3000);\n                };\n            };\n\n            console.log(\"My console to check dataToSave\", dataToSave)\n            setJobInfo({\n                currentSoftware,\n                currentSubSoftware,\n                needThisDone,\n                moreDetails: textarea\n            })\n            console.log(\"testing console for draftJobRes\", draftJobData)\n        };\n    };\n\n\n    // const handleChange = (event) => {\n    //     if(event.target.value.length > 200){\n    //       return event.preventDefault()\n    //     }\n    //     setTextarea(event.target.value)\n    //     setCharacterCount(event.target.value.length)\n    // }\n\n    useEffect(() => {\n      setCharacterCount(textarea.length);\n    }, [textarea]);\n\n     const handleChange = (event) => {\n        const data = event.target.value.trim();\n        if (data === \"\") {\n          setTextarea(\"\");\n          setCharacterCount(0);\n        } else if (data.length > 500) {\n          event.preventDefault();\n          return;\n        } else {\n          setTextarea(event.target.value);\n          setCharacterCount(event.target.value.length);\n        }\n     }\n\n    const onSoftwareSelection = (softId) => {\n        const currSoftware = softwareList.find(item => item.id === softId)\n        setCurrentSoftware(currSoftware)\n        setSoftwareId(currSoftware.id)\n        console.log('this is current :::',softwareId)\n\t\tsetCurrentSubSoftware()\n        setSubSoftwareName(\"Select\")\n\t\tsetDisableDetails(true)\n\t\tsetTextarea(\"\")\n        setSelectedTechs(false)\n        setSelectedPrevGeek()\n        const selectedSoftwareId = uniqueTechSoftId.map(softId => { return softId.software_id; });\n        if(selectedSoftwareId.includes(softId)){\n            setTechnicianId(technicianIdParams)\n            setSelectedPrevGeek(technicianIdParams)\n            setIsTechUniqueLink(true);\n        }else{\n            setTechnicianId(false)\n            setIsTechUniqueLink(false);   \n            setTechniciansList([])\n        }\n    }\n\n    const onSubSoftwareSelection = (value) =>{\n        setCurrentSubSoftware(value)\n        setSubSoftwareName(value)\n    }\n    const backToDashboard = () => {\n        window.location.href = \"/\"\n    };\n\n\n\n    if (isLoading || transferredJob) return <Loader height=\"100%\" />;\n\n    return (<React.Fragment key=\"dropdown\">\n\n    <form>\n      <div ref={sizeRef}>\n        <div className='d-flex justify-content-center margin-bottom-25'>\n           <div  style={{width:\"100%\",maxWidth:\"600px\",height:\"106px\"}}>\n                <div className='softare-label-div'>\n                    <label className='softare-label' >I'm using:</label>\n                </div>\n                <div>\n                    <SoftwareDropDown\n                        dropDownOptions={softwareList}\n                        onSoftwareSelection={onSoftwareSelection}\n\t\t\t\t\t\tvalue={ jobInfo.currentSoftware.id }\n                        name={'softwares'}\n\t\t\t\t\t\tcurrentSoftware={currentSoftware}\n\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\tsubSoftwareName={subSoftwareName}\n\t\t\t\t\t\tsoftwareId={softwareId}\n                    />\n                </div>\n            </div>\n        </div>\n\n        <div  className='d-flex justify-content-center margin-bottom-25'>\n           <div  style={{width:\"100%\",maxWidth:\"600px\",height:\"106px\"}}>\n                <div className={`${disable ? 'opacity-point-5' : '' } softare-label-div`}>\n                    <label className='softare-label-n'>and I need help with:</label>\n                </div>\n                <div className={`${disable ? \"opacity-point-5\" : \" \"}`}>\n\t\t\t\t\t<SoftwareDropDown\n\t\t\t\t\t\tdisable={disable}\n\t\t\t\t\t\tdropDownOptions={currentSoftware.sub_option ?  currentSoftware.sub_option : [] }\n\t\t\t\t\t\tonSubSoftwareSelection={onSubSoftwareSelection}\n\t\t\t\t\t\tname={`subsoftwares`}\n\t\t\t\t\t\tvalue ={ jobInfo.currentSubSoftware }\n\t\t\t\t\t\tcurrentSubSoftware={currentSubSoftware}\n\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\tsubSoftwareName={subSoftwareName}\n\t\t\t\t\t/>\n                </div>\n            </div>\n        </div>\n\n\n        <div className='d-flex justify-content-center margin-bottom-15'>\n           <div  style={{width:\"100%\",maxWidth:\"600px\"}}>\n                <div className={`${disableDetails ? 'opacity-point-5' : '' } softare-label-div`}>\n                    <label className='softare-label-n'>More details:</label>\n                </div>\n                <div className={`${disableDetails ? \"opacity-point-5\" : \" \"}`} >\n                    <textarea \n\n                      maxLength=\"500\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n\n                        disabled={ disableDetails }\n                        type=\"text\"\n                        className=\"software-more-details-input\"\n                        value={textarea}\n                        onChange={handleChange}\n                        key={\"MyTextAreaKey\"}\n                    />\n                </div>\n            </div>\n        </div>\n\n        <div className={`d-flex justify-content-center margin-bottom-61 ${disableDetails ? 'opacity-point-5' : '' }`}>\n            <div  style={{width:\"100%\",maxWidth:\"600px\",}}>\n               <span className={`character ${charLeftColor ? \"red-character\" : \" \" }`}> ({`${count - characterCount} character left`}) </span>\n            </div>\n        </div>\n\n        { <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-25 media-max-width-500-padding-lr-0 mb-4\">\n\t\t\t\t<div className={` softare-label-div margin-bottom-15`}>\n                {!user && !(technicianProfile === 'technician-profile')  &&\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t\t{user && isFirsJob &&  !(technicianProfile === 'technician-profile')  &&\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t\t{user && !isFirsJob &&  !(technicianProfile === 'technician-profile')  && \n\t\t\t\t\t\t<span onClick={disablePrevGeek ? () => {} : () => setSelectedTechs(true)}  className='softare-label-n2 '>\n\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t</span> \n\t\t\t\t\t}\n                    {technicianProfile === 'technician-profile'  && \n                    <>\n                    <span className='softare-label-n2' style={isTechUniqueLink ?{cursor:\"pointer\"}  : {cursor:\"not-allowed\",'color':'#d9d9d9'}}>\n                        Find a previous geek\n                    </span>{\" \"}\n                    {isTechUniqueLink ? \"\" : <span className=\"no-prev-geeks\">(no previous geeks available)</span> }\n                   </>\n                    }\n\n\n                </div>\n                \n\t\t\t\t<div className=\"jobSummaryDropDownDiv\" style={isFirsJob === true ? {cursor:\"not-allowed\"} : {cursor:\"pointer\"}}>\n\t\t\t\t\t{selectedTechs && !(technicianProfile === 'technician-profile') && \t\t\t\t\t\n\t\t\t\t\t\t(techniciansList.length === 0 ? <Spin className=\"job-summary-spinner\" /> \n\t\t\t\t\t\t: <Select options={techniciansList} className= \"jobSummaryDropDown media-max-width-500-mt-20\" isSearchable={false} onChange={handleTechniciansList} formatOptionLabel={formatOptionLabel} defaultValue={techniciansList[0]} isDisabled={isFirsJob ? true : false}\n\t\t\t\t\t\t/>)\n\t\t\t\t\t}\n\t\t\t\t</div>\n                <div className=\"jobSummaryDropDownDiv\">\n\t\t\t\t\t{ (technicianProfile === 'technician-profile') && isTechUniqueLink && \t\t\t\t\t\n\t\t\t\t\t\t(techniciansList.length === 0 ? <Spin className=\"job-summary-spinner\" /> \n\t\t\t\t\t\t: <Select options={techniciansList} className= \"jobSummaryDropDown media-max-width-500-mt-20\" isSearchable={false} onChange={handleTechniciansList} formatOptionLabel={formatOptionLabel} defaultValue={techniciansList[0]}\n\t\t\t\t\t\t/>)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>}\n{/*\n        {!user && <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-30 media-max-width-500-padding-lr-0\">\n\t\t\t\t<div className={` softare-label-div margin-bottom-15`}>\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n\t\t\t\t\t\t</>\n\n                </div>\n\t\t\t</div>\n\t\t</div>} */}\n\n        {/* {user && <div className=\"max-w-60p margin-auto\">\n\t\t\t<div className=\"p-0-30-10-30 media-max-width-500-padding-lr-0\">\n\t\t\t\t<div className=\"softare-label-div margin-bottom-15\">\n\t\t\t\t\t<span className='softare-label-n2' style={{cursor:\"not-allowed\",'color':'#d9d9d9'}} title=\"No previous geeks available\">\n\t\t\t\t\t\tFind a previous geek\n\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t<span className=\"no-prev-geeks\">(no previous geeks available)</span>\n                </div>\n\t\t\t</div>\n\t\t</div>} */}\n\n        <div className='d-flex justify-content-center mb-50'>\n            <div className=\"d-flex justify-content-end\" style={{width:\"100%\",maxWidth:\"600px\"}}>\n                <BasicButton disable={nextButton || showSpinner}  onClick={nextBtnHandler} btnTitle={\"Next\"} height={\"60px\"} width={\"158px\"} background={\"#01D4D5\"} color={\"#fff\"} showSpinner={showSpinner} />\n            </div>\n        </div>\n      </div>\n    </form>\n     {/* show modal after specific software selected */}\n    <AfterSelectedSoftwareModal isSpecificSoftwareSelected = {isSpecificSoftwareSelected} setIsSpecificSoftwareSelected={setIsSpecificSoftwareSelected} setGoToJobSummaryPage={setGoToJobSummaryPage} isSoftwareEmailOrOutlook={isSoftwareEmailOrOutlook} setNextButton={setNextButton} setShowSpinner={setShowSpinner} />\n    </React.Fragment>\n    );\n};\n\n\n\nexport default SelectSoftware\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\SelectSoftware.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SelectSupport.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport {\n   Row, Col, Typography\n} from 'antd';\n\n\nimport { Button } from 'react-bootstrap';\n\n// import {Switch} from 'antd';\nimport styled from 'styled-components';\nimport {\n  StepTitle,\n  BodyContainer,\n  SectionTitle, TitleContainer\n} from './style';\n// import TechImages from '../../../../components/TechImages';\n// import StepButton from '../../../../components/StepButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faArrowRight} from '@fortawesome/free-solid-svg-icons';\nimport * as SoftwareApi from '../../../../api/software.api';\n// import CheckboxImage from '../../../../assets/images/checkbox.png';\nimport Loader from '../../../../components/Loader';\nimport {queryDecider,openNotificationWithIcon,useResizeObserver} from '../../../../utils';\nimport Box from '../../../../components/common/Box';\nimport { useJob } from '../../../../context/jobContext';\nimport RoundSelectors from '../../../../components/Selectors';\n// import $ from 'jquery';\nimport mixpanel from 'mixpanel-browser';\nimport Logo from 'components/common/Logo';\n\n\nconst { Text } = Typography;\nconst DATE_OPTIONS = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' ,hour: '2-digit', minute:'2-digit'};\n// const SoftwareCard = ({ software, isActive, onClick}) => {\n//     const gridStyle = active => ({\n//         'width': '156px',\n//          'maxHeight': '47px',\n//         /* UI Properties */\n//         'border': '2px solid #DCE6ED',\n//         'border-radius': '23px',\n//         'opacity': 1,\n//         'padding':'10px',\n//         'margin-right':'20px',\n\n\n//     });\n//     // console.log(\"software\",software)\n//     return (\n        \n//         <Col onClick={onClick}>\n//             <div position=\"relative\" className=\"border-box font-nova\"  >\n//                 <Card.Grid style={gridStyle(isActive)} className={\"software-card \" + (isActive ? \"active\" : \"not-active\")}>\n//                     <div className=\"card-text-css\"><span>{software.name}</span></div>\n//                 </Card.Grid>\n//             </div>\n//         </Col>\n//     );\n\n// };\n\nconst SelectSupport = ({ software, onChange,user ,jobFlowsDescriptions,setJobFlowStep}) => {\n    const [softwareList, setSoftwareList] = useState([]);\n    const [tableData,setTableData] = useState([])\n    const [showError, setShowError] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const {fetchJobByParams} = useJob()\n    const moment = require('moment');\n    const [columns,setColumns] = useState([{\n        title:\"Date\",\n        dataIndex: 'createdAt',\n        render: text => (\n            <span>\n                {' '}\n                { moment(text).format('YYYY-MM-DD')}\n            </span>)\n\n    },{\n        title:\"Tech\",\n        render: (text, record) => (\n        <>\n            { record && record.technician\n                ? `${record.technician.user?.firstName} ${record.technician.user?.lastName}` : 'NA'}\n        </>\n    ),\n        \n    },{\n        title:\"Issue\",\n        dataIndex: 'issueDescription',\n        width: '30%',\n        render: text => (\n            <p padding=\"10px 5px\" title={text} className=\"issue-description\">\n                {(text.length > 100 ? `${text.substring(0, 100)}...` : text)}\n            </p>\n        ),\n    },{\n        title :\"Cost\",\n        dataIndex:\"total_cost\"\n    }])\n\n    const handleBack = ()=>{\n        window.location.href = '/'\n    }\n    useEffect(()=>{\n        if(showError){\n            openNotificationWithIcon(\"error\",\"Error\",\"Please select one software\")\n        }\n    },[showError])\n    useEffect(() => {\n        (async () => {\n            try {\n                // setIsLoading(true);\n                const res = await SoftwareApi.getSoftwareList();\n                if (res && res.data) {\n                    setSoftwareList(res.data);\n                }\n                setTimeout(function(){\n                    setIsLoading(false);\n                },200)\n            } catch (e) {\n                setIsLoading(false);\n            }\n        })();\n    },[]);\n    \n    const call_fetch_jobs = async (filter,pagination={ page: 1,pageSize:10 }) => {\n        const res = await fetchJobByParams(filter,pagination)\n        setTimeout(function(){\n            setIsLoading(false)\n        },1500)\n\n        console.log(\"call_fetch_jobs response :::::: \",res)\n        if(res){\n            setTableData(res.jobs.data)\n            return res.jobs\n        }\n        else{\n            return []\n        }\n    }\n\n    useEffect(() => {\n        if(user){\n            let query = queryDecider(\"Completed Jobs\",user)\n            call_fetch_jobs(query)\n            mixpanel.track('Customer - On Select Program Page', { 'Email': user.email });\n        }\n    },[user]);\n\n    const handleCardClick = (value) => {\n        setShowError(false);\n        onChange(value);\n    };\n\n    const handleNext = () => {\n        if (!software) {\n            setShowError(true);\n            return;\n        }\n        if(user){\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Main software selected');\n            mixpanel.people.set({\n                $first_name: user.firstName,\n                $last_name: user.lastName,\n            });\n            // mixpanel code//\n        }\n        setJobFlowStep(jobFlowsDescriptions['issueDescription'])\n        // onNext();\n    };\n\n    const sizeRef = useResizeObserver(({ width, height }) => {\n        console.log(`Inside selectSoftware Element width: ${width}, height: ${height}`);\n      });\n\n    if (isLoading) return <Loader height=\"100%\" />;\n\n    return (<React.Fragment key=\"selectsoft\">\n      <div ref={sizeRef}>\n        <Row>\n            <Container span={24} className=\"select-job-container font-nova\">\n                <Logo user={user}/>\n                <StepTitle className=\"job-heading-text reg-heading-text font-nova\">Tell us about your support needs</StepTitle>\n                <BodyContainer span={24} className=\"\">\n                    <TitleContainer className=\"ant-row\">\n                        <SectionTitle className=\" software-question font-nova color--lightThemeFontColor\">\n                            Which software do you currently need help with?\n\n                        </SectionTitle>\n                    </TitleContainer>\n                    <Box position=\"relative\">\n                            {\n                                softwareList.map(item => {\n                                    if(item.parent === \"0\" || item.parent === 0){\n                                        return (\n                                            <RoundSelectors\n                                                key={item.id}\n                                                software={item}\n                                                onClick={() => handleCardClick(item)}\n                                                isActive={software && software.id === item.id}\n                                            />\n                                        )\n                                    }\n                                    return null;\n                                })\n                            }\n                    </Box>\n                </BodyContainer>\n                <BodyContainer className=\"d-flex flex-row\">\n                    <Box display=\"flex\" justifyContent=\"left\" width=\"50%\">\n                        {/* <Button onClick={handleBack} className=\"btn sm-btn-back hw-60\"><span> </span><FontAwesomeIcon className='arr-size' icon={faArrowLeft} /></Button> */}\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"right\" width=\"50%\">\n                        <Button onClick={handleNext} className=\"btn sm-btn-color hw-60\"><span> </span><FontAwesomeIcon className='arr-size' icon={faArrowRight} /></Button>\n                    </Box>\n                 </BodyContainer>\n            </Container>\n        </Row>\n    </div>\n    </React.Fragment>\n    );\n};\n\nconst Container = styled(Col)`\n  display: flex !important;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n\n\n`;\n\n// const CardText = styled(Text)`\n//     width:36px;\n//     text-align: center;\n//     font: normal normal 600 15px/19px Proxima Nova;\n//     letter-spacing: 0.07px;\n//     color: #01D4D5;\n//     font-size:15px;\n//     opacity: 1;\n// `;\n\n// const TechImage = styled.img`\n//   width: 40%;\n// `;\n\n// const CheckboxIcon = styled.img`\n//   width: 15px;\n//   position: absolute;\n//   left: 10px;\n//   top: 10px;\n//   z-index:1;\n// `;\n\n\nexport default SelectSupport;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\SelectSupport.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "style.js",
                                                                    "fileData": "import { Typography, Select } from 'antd';\nimport styled from 'styled-components';\n\nconst { Text } = Typography;\n\nconst BodyContainer = styled.div`\n  background: ${props => props.background};\n  margin-bottom:30px !important;\n  border-radius: 10px;\n  flex-direction: column;\n  justify-content:space-around;\n  align-items: center;\n  padding: 0px 50px;\n  @media screen and (max-width: 991px) {\n    padding:30px !important;\n  }\n  box-shadow :${props => props.boxshadow ? props.boxshadow :''}\n`;\n\nconst StepActionContainer = styled.div`\n  width: 100%;\n  margin-top: 24px !important;\n  display: flex;\n  justify-content: flex-end;\n\n`;\n\nconst IssueSelect = styled(Select)`\n\n@media screen and (max-width: 763px) {\n  width: 100% !important;\n}\n.ant-select-selection-item{\n  text-align:left;\n}\n.ant-select-arrow{\n    font-size: 12px;\n  padding-right: 19px;\n  color: black;\n}\n`;\n\nconst StepTitle = styled.h2`\n  margin-bottom: 50px;\n  color:${props => props.color ? props.color :\"black\" };\n  font-size: 32px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst StepHeader = styled.h3`\n  color:${props => props.color ? props.color :\"black\" };\n  font-size: 35.6364px;\n  font-weight: 700;\n  line-height: 43px;\n  text-align: center;\n  margin-bottom: 0; \n`;\n\nconst SectionTitle = styled(Text)`\n\n  text-align: left;\n  font: normal normal 600 18px/40px Proxima Nova;\n  letter-spacing: 0.09px;\n  color: #293742;\n  opacity: 1;\n  margin-bottom:20px;\n\n  // font-size: 25px;\n  // font-family:Arial !important;\n  // color:${props => props.color? props.color:\"black\"}  !important;\n  // font-weight : bold; \n  // // margin-left:${props => props.marginleft?props.marginleft:\"0px\"};\n  // padding-bottom: 28px;\n  // margin:auto;\n\n`;\n\nconst TitleContainer = styled.div`\n\n  width:100%\n\n`\n\n\nconst WarningText = styled(Text)`\n  color: #b12222 !important;\n  font-size: 15px;\n  font-family: Open-sans, serif;\n  // position: absolute;\n  top: calc(100% + 10px);\n  left: 0;\n  text-align: left !important;\n`;\n\nconst infoText = styled(Text)`\n  color: #b12222 !important;\n  font-size: 15px;\n  font-family: Open-sans, serif;\n  // position: absolute;\n  top: calc(100% + 10px);\n  left: 0;\n  text-align: right !important;\n`;\n\nexport {\n  StepActionContainer,\n  StepTitle,\n  StepHeader,\n  IssueSelect,\n  BodyContainer,\n  SectionTitle,\n  WarningText,\n  TitleContainer,\n  infoText\n};\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\ProfileSetup\\steps\\style.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Subscription",
                                                    "children": [
                                                        {
                                                            "type": "folder",
                                                            "name": "components",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "BuySubscriptionConfirmationModal.js",
                                                                    "fileData": "import React from 'react'\nimport { Modal, Checkbox } from 'antd';\nimport { Row, Col, Container} from 'react-bootstrap';\nimport BasicButton from \"../../../../components/common/Button/BasicButton\"\n\nconst BuySubscriptionConfirmationModal = ({showbuySubscriptionConfirmationModal, \n                                           setShowbuySubscriptionConfirmationModal,\n                                           productDetails,\n                                           buyPlanInit\n                                        }) => {\n    \n    const buySubscriptionPlan = () => {\n        if(productDetails){\n            buyPlanInit(productDetails.id, productDetails.name, productDetails.price.id, productDetails.metadata.total_minutes, productDetails.metadata.discount)\n            setShowbuySubscriptionConfirmationModal(false)\n        }\n    }\n\n    return(<>\n        <Modal  \n               closable={false} \n               visible={showbuySubscriptionConfirmationModal} \n               footer={null}\n               width={800}\n        >\n            <Container>\n                <Row>\n                    <Col md = \"1\" className='d-flex justify-content-end buy-subscription-confirmation-modal-checkbox-col p-4-0'>\n                        <Checkbox defaultChecked />\n                    </Col>\n                    <Col md = \"11\">\n                        <Row className='mb-3'>\n                            <Col>\n                                <span className='buy-subscription-confirmation-modal-text'>\n                                Thanks! Please note that our Premium {productDetails?.name} plan gives {productDetails?.metadata?.total_minutes} minutes for a month.\n                                    <b>After all your minutes are used, jobs will continue at our usual pricing.</b>\n                                     All jobs are billed in 6-minute increments.\n                                </span>\n                            </Col>\n                        </Row>\n                        <Row className='d-flex justify-content-end'>\n                            <Col className='d-flex justify-content-end'>\n                                <BasicButton btnTitle={\"Cancel\"} height={\"40px\"} width={\"80px\"} background={\"#DCE6ED\"} onClick={()=>setShowbuySubscriptionConfirmationModal(false)} />\n                                <BasicButton btnTitle={\"OK\"} height={\"40px\"} width={\"100px\"} background={\"#01D4D5\"} color={\"white\"} marginLeft={\"10px\"} onClick={buySubscriptionPlan} />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        </Modal>\n    </>)\n}\n\nexport default BuySubscriptionConfirmationModal",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Subscription\\components\\BuySubscriptionConfirmationModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "offers.js",
                                                                    "fileData": "import React, { useState, useEffect} from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport * as PromoApi from '../../../../api/promo.api';\nimport \"react-widgets/styles.css\";\nimport Combobox from \"react-widgets/Combobox\";\n\nconst Offers =  ({ productName ,productId,productPrice,user,promoId,setPromoId,couponId,setCouponId,promoAppliedFor, setPromoAppliedFor, liveUser}) => {\n    console.log(\"productName given\",productName)\n    const [offerCode, setOfferCode] = useState(\"\")\n    const [promoCodes, setPromoCodes] = useState([])\n    const [promoData, setPromoData] =useState([]);\n    const [validateMessage, setvalidateMessage] = useState(\"\")\n    const [inValidMessage, setInValidMessage] = useState(\"\")\n    const [isValidate, setIsValidate] = useState(false)\n    const [discountedPrice, setDiscountedPrice] = useState(0)\n\n    useEffect(()=>{\n        (async()=>{\n            if(user && user?.customer && user?.customer?.id){\n                let promolist = await PromoApi.retrieveCustomerPromoCodes({\"customer_id\":user.customer.id,\"redeemed\":true})\n                setPromoData(promolist)\n                console.log(\"promolist:::::\",promolist)\n                if(promolist.length>0){\n                    let data=await promolist.map(item=>item.promo_code)\n                    setPromoCodes(data)\n                }\n            }\n        })()        \n    },[user])\n\n    const handleTypePromoCode = async(e, name, productId)=>{\n        setvalidateMessage(\"\")\n        setInValidMessage(\"\")\n        setPromoId(\"\")\n        setCouponId(\"\")\n        if(e !== null && e !== undefined && e !== '' ){\n            setPromoAppliedFor(name)\n            setOfferCode(e)\n        }else{\n            setOfferCode(e)\n            setPromoAppliedFor('')\n        }\n    }\n\n    const handleCouponCode = async()=>{\n        console.log(\"couponId:::::>>>\",offerCode)\n        let coupon;\n        let offerCouponCode = offerCode.toLowerCase().trim()\n        let promoCodeData = promoData.find(o => o.promo_code === offerCouponCode);\n        if(promoCodeData){\n            setPromoId(promoCodeData.promo_id)\n            setvalidateMessage(\"Promo Applied Successfully\")\n            setIsValidate(true)\n        }else{  \n            coupon = await  PromoApi.validateCoupon({\"couponCode\":offerCouponCode,\"customerId\":user.customer.id,\"productId\":productId,\"liveUser\":liveUser})\n            if(coupon.isValid){\n                setCouponId(offerCouponCode)\n                setvalidateMessage(coupon.message) \n                setIsValidate(true)\n                setDiscountedPrice(coupon.discountedPrice)\n            }else{\n                setInValidMessage(coupon.message)  \n                offerCouponCode=''\n            }\n        }\n    }\n\n    const calculatePar= (price)=>{\n        let finalprice = parseFloat(price)-(0.05 * parseFloat(price))\n        return '$'+finalprice.toFixed(2);\n    }\n\n    return(\n        <React.Fragment key=\"subscription\">\n            <Col md ={12}>\n                <p className='flat-p'> Get flat 5% off on buy new subscription using promocode</p>\n            </Col>\n            {/* <Row className='col-12 px-2'>\n                <Col id={productName} className=\"mb-3\" lg={8} md={8}>\n                    <Combobox\n                        className={\"subscription-dropdown\"}\n                        placeholder=\"Select Promocode\"\n                        value={promoAppliedFor === productName ? offerCode : \"\"}\n                        name={productName}\n                        data={promoCodes}\n                        hideEmptyPopup={true}\n                        hideCaret={true}\n                        onChange={(e) => handleTypePromoCode(e, productName, productId)}>\n                    </Combobox>\n\n                </Col>\n\n                <Col lg={4} md={4}>\n                    <Button className=\"btn app-btn mb-1\"  style={{minWidth:\"unset\",lineHeight: 2.5}}  disabled={promoAppliedFor === productName ? false : true} onClick={handleCouponCode}>Apply</Button>\n                </Col>\n            </Row> */}\n            \n            {promoAppliedFor === productName &&\n                    <Col md ={12} className=\"ml-2\" style={{color: couponId || promoId ? \"green\" : \"red\", textAlign:\"left\"}}>\n                        {validateMessage!==\"\" ?  validateMessage : inValidMessage}\n                    </Col>\n            }\n\n            {promoAppliedFor === productName && (couponId || promoId) && isValidate &&\n                <React.Fragment key=\"promo\">\n                    <Row md={12}> \n                        <Col \n                            md ={12} \n                            className=\"o-cost\" \n                            style={divStyle}\n                        >\n                            <span>Subscription cost:  </span>\n                            <span style={{textDecoration: \"line-through\"}}>\n                                {productPrice.currency === 'usd' ? '$' : productPrice.currency}{(productPrice.unit_amount/100)}\n                            </span>\n                        </Col>\n                        <Col \n                            md ={12} \n                            className=\"n-cost mb-2\" \n                            style={divStyle}>\n                                <span>You pay:  </span>\n                                <span style={{color: \"green\"}}>{couponId ? discountedPrice : promoId ? calculatePar((productPrice.unit_amount/100),) : \" \" }</span>\n                        </Col>\n                    </Row>\n                </React.Fragment>\n            }\n               \n            \n       \n        </React.Fragment>\n    )\n}\n\nconst divStyle = {\n    fontSize: \"15px\",\n    marginLeft: \"15px\",\n    fontSize: \"15px\",\n  };\nexport default Offers;\n    ",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Subscription\\components\\offers.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "subscriptionhistory.js",
                                                                    "fileData": "import React, { useEffect} from 'react';\nimport { Card} from 'react-bootstrap';\nimport {Spin} from 'antd';\nimport moment from 'moment';\nimport {getSubscriptionHistory} from \"../../../../api/subscription.api\";\nimport \"react-widgets/styles.css\";\n\nconst SubscriptionHistory =  ({user, setNewSubscriptionHistory,newSubscriptionHistory,cancelPendingSubscriptionWithId,subscriptionHistorySignal}) => {\n    const fetchSubscriptionHistory = async () => {\n        let data = await getSubscriptionHistory(user.customer.id);\n        setNewSubscriptionHistory(data)\n    }\n\n    useEffect(()=>{\n        if(user && user.customer && user.customer.id){\n            fetchSubscriptionHistory()\n        }\n    },[subscriptionHistorySignal])\n\n    return(\n        <>\n            <Card className=\"text-left mt-4\">\n                <Card.Header className=\"\">\n                    <h5 className=\"m-0 font-weight-bold\">Subscription History</h5>\n                </Card.Header>\n                <Card.Body className=\"table-responsive\">\n                    \n                    <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Subscription ID</th>\n                                <th>Name</th>\n                                <th>Status</th>\n                                <th>Purchased Date</th>\n                                <th>Inactive Date</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                newSubscriptionHistory.reverse().map((s,i)=>{\n                                    return (\n                                        <tr key={i}>\n                                            <td>{s.subscription_id}</td>\n                                            <td className=\"text-success font-weight-bold\">{(s.plan_name ? s.plan_name : \"NA\")}</td>\n                                            <td className=\"text-capitalize\">{s.status} { s.status  == 'Pending' ?  <Spin/> :'' }</td>                                            \n                                            <td>{moment(s.plan_purchased_date).format('Do MMM, YYYY HH:mm')}</td>\n                                            <td>{moment(s.plan_inactive_date).format('Do MMM, YYYY HH:mm')}</td>\n                                            <td>{ s.status  == 'Pending' ? <button className=\"btn app-btn app-btn-super-small\" onClick={()=>cancelPendingSubscriptionWithId(user.customer.id,s.invoice_id)} >Cancel</button>:''} </td>\n                                        </tr>\n                                    )\n                                })\n                            }\n\n                        </tbody>\n                    </table>\n                </Card.Body>\n            </Card>\n        </>\n    )\n}\n\nexport default SubscriptionHistory;\n    ",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Subscription\\components\\subscriptionhistory.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SubscriptionPlansModal.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react'\nimport { Modal } from 'antd';\nimport { Row, Col, Container} from 'react-bootstrap';\nimport BasicButton from \"../../../../components/common/Button/BasicButton\"\nimport SubscriptionFlipCard from 'components/SubscriptionFlipCard';\nimport {getAllPlans} from \"../../../../api/subscription.api\";\nimport { isLiveUser } from '../../../../utils';\nimport Loader from '../../../../components/Loader';\nimport Close from '@mui/icons-material/Close';\nimport IconButton from '@mui/material/IconButton';\n\nconst SubscriptionPlansModal = ({buyPlanInit, user, showSubscriptionPlansModal, setShowSubscriptionPlansModal}) => {\n\n    const [allPlans, setAllPlans] = useState()\n\n    useEffect(()=>{\n        (async()=>{\n            let liveUser = await isLiveUser(user)\n            const allPlandata = await getAllPlans({\"liveUser\":liveUser});\n            console.log(\"My console for allPlanData in subscription modal\", allPlandata)\n            setAllPlans(allPlandata.data)\n        })()\n    },[])\n    \n    const buySubscriptionPlan = (singlePlanDetails) => {\n        console.log(\"My console for buying singlePlanDetails\", singlePlanDetails)\n        if(singlePlanDetails){\n            buyPlanInit(singlePlanDetails.id, singlePlanDetails.name, singlePlanDetails.price.id, singlePlanDetails.metadata.total_minutes, singlePlanDetails.metadata.discount)\n            setShowSubscriptionPlansModal(false)\n        }\n    }\n\n    return(<>\n        <Modal  \n               closable={false} \n               visible={showSubscriptionPlansModal} \n               footer={null}\n               width={1500}\n               className=\"subscription-plan-modal\"\n        >\n            <div className='position-absolute subscription-modal-close-btn-div'>\n                <IconButton className='subscription-modal-close-btn' onClick={()=>setShowSubscriptionPlansModal(false)}>\n                    <Close />\n                </IconButton>\n            </div>\n            {/* <Container className='position-relative'> */}\n            <Container>\n                <Row className='d-flex justify-content-center align-items-center'>\n                    \n                    {allPlans ? \n                        /* Show data when exist */\n                        allPlans.map((ele)=>{\n                            return  <Col>\n                                        <SubscriptionFlipCard planData={ele} user={user} onYes={buySubscriptionPlan} showSubscriptionPlansModal={showSubscriptionPlansModal} />\n                                    </Col>\n                        })\n\n                        /* Show loader untill data is available */\n                        :\n                        <Loader height=\"100%\" className=\"mt-5\" />\n                    }\n                </Row>\n            </Container>\n        </Modal>\n    </>)\n}\n\nexport default SubscriptionPlansModal",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Subscription\\components\\SubscriptionPlansModal.js"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useState, useEffect} from 'react';\nimport moment from 'moment';\n// import { LayoutMax } from '../../../components/Layout';\nimport { Row, Col, Button, Card, Container} from 'react-bootstrap';\nimport { Spin, Modal,Alert } from 'antd';\nimport {getAllPlans, buySubscription, cancelSubscription,cancelPendingSubscription,createSubscriptionHistory, getSubscriptionHistory} from \"../../../api/subscription.api\";\n// import { useUser } from '../../../context/useContext';\nimport { useAuth } from '../../../context/authContext';\nimport Loader from '../../../components/Loader';\nimport { openNotificationWithIcon,isLiveUser, getStripeObject, getCookie, PushUserDataToGtm } from '../../../utils';\nimport * as CustomerApi from '../../../api/customers.api';\n// import * as PromoApi from '../../../api/promo.api';\nimport Parser from 'html-react-parser';\nimport {Elements} from '@stripe/react-stripe-js';\n// import {loadStripe} from '@stripe/stripe-js';\nimport { popularSoftwareIdTest, popularSoftwareIdLive } from '../../../constants';\nimport AddCardForm from '../Profile/steps/addCardForm';\nimport mixpanel from 'mixpanel-browser';\n// import {retrieveTechnicianBysomeParams} from '../../../api/technician.api'\nimport \"react-widgets/styles.css\";\nimport Offers from './components/offers'\n// import SubscriptionHistory from './components/subscriptionhistory'\n// import { Select, Table, Pagination, DatePicker } from \"antd\";\n// const cardInfoFetched = false;\nimport BuySubscriptionConfirmationModal from \"./components/BuySubscriptionConfirmationModal\"\nimport SubscriptionPlansModal from \"./components/SubscriptionPlansModal\"\nimport SubscriptionFlipCard from 'components/SubscriptionFlipCard';\nimport TimerSharpIcon from '@mui/icons-material/TimerSharp';\nimport AvTimerSharpIcon from '@mui/icons-material/AvTimerSharp';\nimport { useSocket } from '../../../context/socketContext';\nimport axios from 'axios';\n\nlet stripePromise = '';\n// const { Option } = Select;\nlet liveUser;\nconst Subscription =  ({user, handleActiveTab}) => {\n    const {refetch} = useAuth();\n    const [plans, setPlans] = useState([]);\n    const [refinePlans, setRefinePlans] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [cardsInfo, setCardsInfo] = useState([]);\n    const [cardInfoUpdated, setCardInfoUpdated] = useState(cardsInfo);\n    const [startClicked, setStartClicked] = useState([]);\n    const [subscriptoinModalVisible, setSubscriptoinModalVisible] = useState(false);\n    const [isPlanAvailable, setIsPlanAvailable] = useState(false);\n    const [activeSubscription, setActiveSubscription] = useState({});\n    const [activePlanId, setActivePlanId] = useState(0);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [newCardAdded, setNewCardAdded] = useState(false);\n    const [subscriptionHistory,setSubscriptionHistory] = useState([]);\n\tconst [highestPlanRate, setHighestPlanRate] = useState(0);\n    const [showBuyMessage,setShowBuyMessage] = useState(false);\n    const [clickedPlan, setClickedPlan] = useState([]);\n    const [activePlanEmpty, setActivePlanEmpty] = useState(false);\n    const [newSubscriptionHistory, setNewSubscriptionHistory] = useState([])\n    const [subscriptionHistorySignal,setSubscriptionHistorySignal] = useState(false)\n    const [cancelSignal,setCancelSignal] = useState(true)\n    const [promoAppliedFor, setPromoAppliedFor] = useState()\n    const [promoId, setPromoId] = useState(\"\")\n    const [promoApplied,setpromoApplied]= useState(false);\n    const [couponId,setCouponId] = useState(\"\")\n    const [showbuySubscriptionConfirmationModal, setShowbuySubscriptionConfirmationModal] = useState(false)\n    const [productDetails, setProductDetails ] = useState({})\n    const [showSubscriptionPlansModal, setShowSubscriptionPlansModal ] = useState(false)\n    const [disableBtn, setDisableBtn ] = useState(false)\n    const { socket } = useSocket();\n    const getMeasurementId = process.env.REACT_APP_GA_MEASUREMENT_ID\n    const mes_id = getMeasurementId ?  getMeasurementId.split(\"-\")[1] : false\n    const [showSpinner, setShowSpinner] = useState(false)\n    const [popularSoftwareId, setPopularSoftwareId] = useState(user?.customer.customerType === 'live' ? popularSoftwareIdLive : popularSoftwareIdTest)\n\n    const sendSubscriptionGTMTag = async (buySubscriptionRes) => {\n        try {\n            const client_id = String(getCookie('_ga').split(\".\")[2] + \".\" + getCookie('_ga').split(\".\")[3]);\n            const session_id = String(getCookie(`_ga_${mes_id}`).split(\".\")[2]);\n            const facebook_fbp = String(getCookie(\"_fbp\"));\n            const facebook_fbc = String(getCookie(\"_fbc\"));\n            const ip = await getIPData();\n\n            let dataToSend = {}\n            dataToSend.tagName = \"subscriptionStarted\";\n            dataToSend.client_id = client_id;\n            dataToSend.eventObject = buySubscriptionRes;\n            dataToSend.facebook_fbp = facebook_fbp;\n            dataToSend.facebook_fbc = facebook_fbc;\n            dataToSend.customer_id = user.customer.id;\n            dataToSend.session_id = session_id;\n            dataToSend.value = buySubscriptionRes.paidPrice;\n            dataToSend.user_agent = navigator.userAgent;\n            dataToSend.customer_ip = ip;\n            dataToSend.customerUserInfo = user;\n\n            const updatedCustomer = await CustomerApi.retrieveCustomer(user.customer.id)\n            console.log(\"My console for updated subscription\", {updatedCustomer, user})\n\n            if(updatedCustomer){\n                dataToSend.customerInfo = updatedCustomer;\n                console.log(\"sendSubscriptionGTMTag sending updated customer\", dataToSend)\n            }else{\n                dataToSend.customerInfo = user.customer;\n                console.error(\"sendSubscriptionGTMTag sending old customer\", dataToSend)\n            }\n            socket.emit('send-GTM-data', {dataToSend});\n            if(process.env.REACT_APP_URL){\n                const appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n                PushUserDataToGtm('subscription_started', user, appUrl, dataToSend.value);\n            }\n        } catch (error) {\n            console.error(\"Some error occured in sendSubscriptionGTMTag\", {error:error})\n        }\n    }\n\n    /**\n     * Following function is to get ip address of customer\n     * @params : none\n     * @return : none\n     * @author : Vinit\n     **/\n    const getIPData = async () => {\n        try {\n            const res = await axios.get(\" https://geolocation-db.com/json/\");\n            console.log(\"Customer's ip is \",res.data);\n            return res.data.IPv4;\n        } catch (error) {\n            console.log(\"Err occured while getting ip\", {error})\n\t\t        return '';\n        }\n    };\n\n    /**\n\t * Following function is used to cancel the current subscription of user.\n\t * @author : Vinit\n\t */\n     const cancelUserSubscription = async () => {\n         if(user && user?.customer){\n\n            const data = {\n                plan_id: user?.customer?.subscription?.plan_id,\n                plan_name: user?.customer?.subscription?.plan_name,\n                total_minutes: user?.customer?.subscription?.total_minutes,\n                total_seconds: user?.customer?.subscription?.total_seconds,\n                time_used: user?.customer?.subscription?.time_used,\n                invoice_id: user?.customer?.subscription?.invoice_id,\n                subscription_id: user?.customer?.subscription?.subscription_id,\n                status: 'Canceled',\n                plan_purchased_date: user?.customer?.subscription?.plan_purchased_date,\n                plan_inactive_date: new Date(),\n            }\n\n            await createSubscriptionHistory({cust_id:user.customer.id,\"subscription_history\":data})\n            await CustomerApi.updateCustomer(user.customer.id,{$unset: {\"subscription\" :1}, cancelSignal});\n            await cancelSubscription({'subscription_id':user.customer.subscription.subscription_id,'liveUser':liveUser});\n\n            window.location.reload();\n\n        }\n    }\n\n    /**\n\t * Following function is used to fetch subscrition history of a specific user.\n     * @params =  customer id\n\t * @response : subscription history\n\t * @author : Vinit\n\t */\n    const fetchSubscriptionHistory = async () => {\n        let data = await getSubscriptionHistory(user.customer.id);\n        setNewSubscriptionHistory(data)\n    }\n\n    useEffect(() => {\n        (async () => {\n          if(user){\n            liveUser = await isLiveUser(user)\n            stripePromise = await getStripeObject(user)\n          }\n        })();\n    }, [user])\n\n    useEffect(()=>{\n        if(user && user.customer && user.customer.id){\n            fetchSubscriptionHistory()\n        }\n    },[subscriptionHistorySignal])\n\n    useEffect(()=>{\n        if(newCardAdded){\n            refetch();\n            console.log(\"::::::: checking User ::::::::::::::::\", user.customer);\n            if (user.customer && user.customer.stripe_id && user.customer.stripe_id !== '') {\n                buyPlanInit(clickedPlan['plan_id'],clickedPlan['plan_name'],clickedPlan['price_id'],clickedPlan['total_minutes'],clickedPlan['discount']);\n                setNewCardAdded(false);\n            }\n        }\n    }, [newCardAdded,user,refetch]);\n\n    useEffect(()=>{\n        (async()=>{\n            await refetch()\n        \tlet allPlans = await getAllPlans({\"liveUser\":liveUser});\n            setPlans(allPlans.data);\n            if(allPlans && allPlans.data && allPlans.data.length > 0){\n                let highestPlanPrice = Math.max.apply(Math, allPlans.data.map(function(o) { return o.price.unit_amount; }))\n                setHighestPlanRate(highestPlanPrice)\n                // console.log(\"highestPlanPrice\",highestPlanPrice)\n            }\n\n            for(let i=0;i<=allPlans.data.length - 1 ;i++){\n                if(typeof allPlans.data[i]['metadata']['key_features'] === 'string'){\n                    allPlans.data[i]['metadata']['key_features'] = JSON.parse(allPlans.data[i]['metadata']['key_features'])\n                }\n                if(typeof (allPlans.data[i]['metadata'])['key_features_submenu'] === 'string'){\n                    allPlans.data[i]['metadata']['key_features_submenu'] = JSON.parse(allPlans.data[i]['metadata']['key_features_submenu'])\n                }\n                let type = allPlans.data[i]['metadata']['product_type'].charAt(0).toUpperCase()+ allPlans.data[i]['metadata']['product_type'].slice(1);\n                if(!(type in refinePlans)){\n                    refinePlans[type] = [];\n                }\n                refinePlans[type].push(allPlans.data[i]);\n                refinePlans.Business.sort((p1, p2) => p1.price.unit_amount - p2.price.unit_amount);\n            }\n            setRefinePlans(refinePlans);\n            Object.keys(refinePlans).map(function (type) {\n                refinePlans[type].map((p, idx)=>{\n                    if(p.metadata.key_features_submenu){\n                        Object.keys(p.metadata.key_features_submenu).map(function (submenus_key) {\n                            console.log(\">>>>>>>> submenus_key\", submenus_key);\n                            p.metadata.key_features_submenu[submenus_key].map((psd, idx)=>{\n                                console.log(idx, psd);\n                            })\n                        })\n                    }\n                })\n            })\n\n            setTimeout(()=>{\n                setIsLoading(false);\n            },800)\n        })();\n\t},[])\n    // useEffect(()=>{\n    //   (async()=>{\n\n    // })()\n    // },)\n\n    useEffect(()=>{\n        (async()=>{\n\n            if(user && plans && plans.length > 0){\n                if(user.customer && user.customer.subscription && user.customer.subscription.plan_id){\n                    let activePlan = plans.find(o => o.id === user.customer.subscription.plan_id);\n                    console.log(\"activePlan in useEffect ::\",activePlan)\n                    if(activePlan){\n                        setActivePlanId(user.customer.subscription.plan_id);\n                        if(user.customer.subscription.time_used === user.customer.subscription.total_seconds){\n                            setActivePlanEmpty(true)\n                        }\n                        let activePlanData = {...activePlan}\n                        activePlanData['total_amount'] = parseFloat(activePlanData.price.unit_amount/100)-(0.05 * parseFloat(activePlanData.price.unit_amount/100)).toFixed(2)\n                        setActiveSubscription(activePlanData);\n                        setIsPlanAvailable(true);\n                    }else{\n                        openNotificationWithIcon(\"error\",\"Error\",\"Your active plan is no more available.\")\n                    }\n                }\n            }\n\n            if(user && user.customer && user.customer.subscription_history){\n                setSubscriptionHistory(user.customer.subscription_history)\n            }\n            if(user && plans && plans.length > 0){\n\n                for(let i=0;i<=plans.length - 1 ;i++){\n                    if(typeof plans[i]['metadata']['key_features'] === 'string'){\n                        plans[i]['metadata']['key_features'] = JSON.parse(plans[i]['metadata']['key_features'])\n                    }\n                    if(typeof plans[i]['metadata']['key_features_submenu'] === 'string'){\n                        plans[i]['metadata']['key_features_submenu'] = JSON.parse(plans[i]['metadata']['key_features_submenu'])\n                    }\n                }\n            }\n        })();\n    },[user, plans, refetch])\n\n    //Function will return the total save price\n    const getSavePrice = (price, regPrice) => {\n        regPrice = parseInt(regPrice);\n        price = parseInt(price/100);\n        let savePriceDiff = (regPrice-price);\n        let savePriceAdd = (regPrice+price)/2;\n        let savePrice = (savePriceDiff/savePriceAdd)*100;\n        return savePrice.toFixed(2);\n    }\n\n\n    const buyPlanInit = async(plan_id,plan_name,price_id,total_minutes,discount) => {\n        if(user){\n            let temp = [];\n            temp.push(plan_id);\n            setStartClicked(temp)\n\n            if (user.customer && user.customer.stripe_id && user.customer.stripe_id !== '') {\n                console.log(\"My console to chk step 1\")\n                let cardsInfo = await CustomerApi.getStripeCustomerCardsInfo({ stripe_id: user.customer.stripe_id,liveUser:liveUser });\n                cardsInfo = (cardsInfo.data ? cardsInfo.data : [])\n                console.log(\"cardsInfo>>>>>>>>>>>\",cardsInfo)\n                if(cardsInfo.length > 0){\n                    console.log(\"My console to chk step 2\")\n                    console.log(\"activeSubscription\",activeSubscription)\n                    if(user.customer.subscription && user.customer.subscription.subscription_id){\n                        if(Object.keys(activeSubscription).length !== 0 &&  activeSubscription.metadata.valid_for === \"one_month\"){\n                            let buyDate = new Date(user.customer.subscription.plan_purchased_date)\n                            let nowDate = new Date()\n                            let diffDays = getDifferenceInDays(buyDate,nowDate)\n                            if(diffDays > 30){\n                                cancelOldAndBuyNewOne(cardsInfo,price_id, plan_id, plan_name,total_minutes,discount)\n                            }\n                            else{\n                                askModalConfimation(cardsInfo,price_id, plan_id, plan_name,total_minutes,discount)\n                            }\n                        }\n\n                    }else{\n                        let subscriptionHistory = user.customer.subscription_history;\n                        buyPlan(cardsInfo, price_id, plan_id, plan_name, total_minutes,discount,subscriptionHistory,promoId,couponId)\n                    }\n                }else{\n                    console.log(\"My console to chk step 3\")\n                    let temp = [];\n                    setStartClicked(temp)\n                    setIsModalOpen(true)\n                    setClickedPlan({'plan_id':plan_id,'plan_name':plan_name,'price_id':price_id,'total_minutes':total_minutes,'discount':discount})\n                }\n            }else{\n                console.log(\"My console to chk step 4\")\n                let temp = [];\n                setStartClicked(temp)\n                setIsModalOpen(true)\n                setClickedPlan({'plan_id':plan_id,'plan_name':plan_name,'price_id':price_id,'total_minutes':total_minutes,'discount':discount})\n            }\n        }else{\n            openNotificationWithIcon(\"info\",\"Info\",\"Looking like your session is expired. Please reload your page and try again.\")\n        }\n    }\n\n    /**\n     * Function will ask confirmation from client while buying subscription. Since the old subscription is still active.\n     * @params =  cardsInfo(Type:Object),price_id(Type:String), plan_id(Type:String), plan_name(Type:String),total_minutes(Type:String),discount(Type:String)\n     * @response : no response\n     * @author : Manibha\n     */\n    const askModalConfimation = (cardsInfo,price_id, plan_id, plan_name,total_minutes,discount) => {\n        Modal.confirm({\n            title: 'Your previous subscription will get expired and we will add the remaining minutes to your new subsctiption. Are you sure you want to buy new subscription?',\n            okText: \"Yes\",\n            cancelText: \"No\",\n            className:'app-confirm-modal',\n            onOk() {\n                setShowSpinner(true)\n                cancelOldAndBuyNewOne(cardsInfo,price_id, plan_id, plan_name,total_minutes,discount)\n            },\n            onCancel(){\n                setStartClicked([])\n                setShowSpinner(false)\n            }\n        })\n    }\n\n    /**\n     * Function will ask confirmation from client while canceling subscription, since the current subscription is still active.\n     * @author : Vinit\n     */\n    const cancelAskModalConfirmation = () => {\n            // mixpanel code//\n                mixpanel.identify(user?.email);\n                mixpanel.track('Customer - cancel subscription.');\n            // mixpanel code//\n        Modal.confirm({\n            title: 'Are you sure you want to cancel your current subscription ?',\n            okText: \"Yes\",\n            cancelText: \"No\",\n            className:'app-confirm-modal',\n            onOk() {\n                cancelUserSubscription();\n                // mixpanel code//\n                    mixpanel.identify(user?.email);\n                    mixpanel.track('Customer - clicked yes in cancel confirmation.');\n                // mixpanel code//\n            },\n            onCancel(){\n                // mixpanel code//\n                    mixpanel.identify(user?.email);\n                    mixpanel.track('Customer - clicked no in cancel confirmation.');\n                // mixpanel code//\n            }\n\n        })\n    }\n\n     /**\n     * Function is used to calculate difference in days between two dates.\n     * @params =  date1(Type:DateObject),date2(Type:DateObject)\n     * @response : returns difference in days between two dates\n     * @author : Manibha\n     */\n    function getDifferenceInDays(date1, date2) {\n        const diffInMs = Math.abs(date2 - date1);\n        return diffInMs / (1000 * 60 * 60 * 24);\n    }\n\n    /**\n     * Function will new subscription and will keep the old active subscription in subscription history.\n     * @params =  cardsInfo(Type:Object),price_id(Type:String), plan_id(Type:String), plan_name(Type:String),total_minutes(Type:String),discount(Type:String)\n     * @response : no response\n     * @author : Manibha\n     */\n    const cancelOldAndBuyNewOne = async(cardsInfo,price_id, plan_id, plan_name,total_minutes,discount) =>{\n\n        let subscriptionHistory = user.customer.subscription_history;\n        const buySubscriptionResponse = await buyPlan(cardsInfo, price_id, plan_id, plan_name, total_minutes,discount, subscriptionHistory)\n        console.log(\"My console for buySubscriptionResponse\", buySubscriptionResponse)\n        if(buySubscriptionResponse && buySubscriptionResponse.success){\n            let cancelDataToSend = {\n                'subscription_id':user.customer.subscription.subscription_id,\n                'liveUser':liveUser\n            }\n            console.log(\"CANCELLLLLLL AND BUY NEW ONEEEE\")\n            let cRes = await cancelSubscription(cancelDataToSend);\n            console.log('cRes :::',cRes)\n            if(cRes && cRes.success){\n                // let subscriptionHistory = user.customer.subscription_history;\n                let oldPlanDetails = user.customer.subscription;\n                oldPlanDetails['status'] = cRes.data.status;\n                oldPlanDetails['plan_inactive_date'] = new Date()\n                console.log('look at old data', oldPlanDetails);\n                subscriptionHistory.push(oldPlanDetails);\n                await createSubscriptionHistory({cust_id:user.customer.id,\"subscription_history\":oldPlanDetails})\n            }else{\n                let temp = [];\n                setStartClicked(temp)\n                openNotificationWithIcon(\"error\",\"Error\",\"Failed to cancel old subscription and upgrade new subscription. Please reload your page and try again.\")\n            }\n        }\n\n\n        // let cancelDataToSend = {\n        //     'subscription_id':user.customer.subscription.subscription_id,\n        //     'liveUser':liveUser\n        // }\n        // console.log(\"CANCELLLLLLL AND BUY NEW ONEEEE\")\n        // let cRes = await cancelSubscription(cancelDataToSend);\n        // console.log('cRes :::',cRes)\n        // if(cRes && cRes.success){\n        //     let subscriptionHistory = user.customer.subscription_history;\n        //     let oldPlanDetails = user.customer.subscription;\n        //     oldPlanDetails['status'] = cRes.data.status;\n        //     oldPlanDetails['plan_inactive_date'] = new Date()\n        //     console.log('look at old data', oldPlanDetails);\n        //     subscriptionHistory.push(oldPlanDetails);\n        //     await createSubscriptionHistory({cust_id:user.customer.id,\"subscription_history\":oldPlanDetails})\n        //     buyPlan(cardsInfo, price_id, plan_id, plan_name, total_minutes,discount, subscriptionHistory)\n\n        // }else{\n        //     let temp = [];\n        //     setStartClicked(temp)\n        //     openNotificationWithIcon(\"error\",\"Error\",\"Failed to cancel old subscription and upgrade new subscription. Please reload your page and try again.\")\n        // }\n    }\n    const buyPlan = async(cardsInfo, price_id, plan_id, plan_name, total_minutes,discount, subscriptionHistory=[],promoId='',couponId='') => {\n        // console.log(\"promoId\",promoId)\n\n        openNotificationWithIcon(\"info\",\"Info\",'Buying subscription ....')\n        console.log(\"couponId to buy plan\",couponId)\n        setShowBuyMessage(true)\n        let cardObj = cardsInfo.find(o => o.default_card === \"yes\");\n        let purchaseDate  = moment().format('MM/DD/YYYY hh:mm a');\n        let subscribeDataToSend = {\n            'customer_id':cardObj['customer'],\n            'price_id':price_id,\n            'product_id':plan_id,\n            'email':user.email,\n            'name':user.firstName+' '+user.lastName,\n            \"liveUser\":liveUser,\n            'plan_purchased_date': moment(purchaseDate).format('MM-DD-YYYY'),\n\n        }\n        if((promoId !== \"\"  || couponId !== \"\") && plan_name === promoAppliedFor){\n            subscribeDataToSend.promoId = promoId\n            subscribeDataToSend.couponId = couponId\n        }\n        console.log(\"subscribeDataToSend>>>>>>>>>>\",subscribeDataToSend)\n        let sRes = await buySubscription(subscribeDataToSend);\n\n        console.log('Bought subscription response',sRes)\n        if(sRes && sRes.success){\n            console.log(\"My console to check res at if\")\n            sendSubscriptionGTMTag(sRes)\n\n            setSubscriptionHistorySignal(true);\n            let cust_id =user.customer.id;\n            let planDetails = {}\n            total_minutes = parseInt(total_minutes);\n            planDetails['plan_id'] = plan_id;\n            planDetails['plan_name'] = plan_name;\n            planDetails['plan_purchased_date'] = new Date();\n            planDetails['total_minutes'] = total_minutes;\n            planDetails['total_seconds'] = total_minutes*60;\n            planDetails['time_used'] = 0;\n            planDetails['invoice_id'] = sRes.data.latest_invoice;\n            planDetails['subscription_id'] = sRes.data.id;\n            planDetails['discount'] = discount;\n            planDetails['status'] = sRes.data.status;\n            planDetails['paidPrice'] = sRes.paidPrice\n            planDetails['priceOff'] = sRes.priceOff\n\n            if(user?.customer?.subscription){\n                console.log(\"My console to chk for subs 1\", {sub:user?.customer?.subscription})\n                if(user?.customer?.subscription?.time_from_previous_subscription){\n                    console.log(\"My console to chk for subs time_from_previous_subscription\", {sub:user?.customer?.subscription})\n                    planDetails['time_from_previous_subscription'] = user?.customer?.subscription?.time_from_previous_subscription  + (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used)\n                }else{\n                    console.log(\"My console to chk for subs time_from_previous_subscription not exists\", {sub:user?.customer?.subscription})\n                    planDetails['time_from_previous_subscription'] = user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used\n                }\n\n                console.log(\"My console to chk for subs 2\", {sub:user?.customer?.subscription})\n                if(user?.customer?.subscription?.time_from_previous_subscription){\n                    console.log(\"My console to chk for subs grand_total_seconds\", {sub:user?.customer?.subscription})\n                    planDetails['grand_total_seconds'] = user?.customer?.subscription?.time_from_previous_subscription  + (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used) + total_minutes*60\n                }else{\n                    console.log(\"My console to chk for subs grand_total_seconds 2\", {sub:user?.customer?.subscription})\n                    planDetails['grand_total_seconds'] = (user?.customer?.subscription?.total_seconds - user?.customer?.subscription?.time_used) + total_minutes*60\n                }\n            }else{\n                planDetails['grand_total_seconds'] = total_minutes*60\n            }\n\n            setpromoApplied(sRes.promo_code_applied)\n            if(subscriptionHistory && subscriptionHistory.length > 0){\n                await CustomerApi.updateCustomer(user.customer.id,{\"subscription\":planDetails})\n            }else{\n                await CustomerApi.updateCustomer(user.customer.id,{\"subscription\":planDetails})\n            }\n            await refetch()\n\n            // Sending GTM tag for buy subscription event\n            sendSubscriptionGTMTag(sRes)\n\n            openNotificationWithIcon(\"success\",\"Success\",sRes.messageToDisplay)\n            let temp = [];\n            setStartClicked(temp);\n\n            let activePlan = plans.find(o => o.id === plan_id);\n            // console.log(\"activePlan\",activePlan)\n\n            setActivePlanId(plan_id);\n            let activePlanData = {...activePlan}\n            activePlanData['total_amount'] = parseFloat(activePlanData.price.unit_amount/100)-(0.05 * parseFloat(activePlanData.price.unit_amount/100)).toFixed(2)\n            setActiveSubscription(activePlan);\n            setIsPlanAvailable(true);\n            setShowBuyMessage(false);\n            setSubscriptoinModalVisible(false);\n            setPlans([...plans]);\n            setShowSpinner(false)\n            return sRes\n\n        }else if(sRes && sRes.success == false){\n            console.log(\"My console to check res at else if\")\n            await refetch()\n            openNotificationWithIcon(\"error\",\"Error\",sRes.messageToDisplay)\n            let temp = [];\n            setStartClicked(temp)\n            setShowBuyMessage(false);\n            setDisableBtn(false)\n            setShowSpinner(false)\n            return sRes\n        }else{\n            console.log(\"My console to check res at else\")\n            openNotificationWithIcon(\"error\",\"Error\", \"Something went wrong, please try again.\")\n            let temp = [];\n            setStartClicked(temp)\n            setShowBuyMessage(false);\n            setDisableBtn(false)\n            setShowSpinner(false)\n        }\n        setPromoId('')\n        setCouponId('')\n    }\n\n\n    const cancelPendingSubscriptionWithId = async(customer_id,invoice_id) =>{\n        console.log('customer_id>>>>>>>>',customer_id,invoice_id)\n        let cancelResult = await cancelPendingSubscription({'customer_id':customer_id,'invoice_id':invoice_id,'liveUser':liveUser});\n        console.log('cancelResult>>>>>>',cancelResult)\n        openNotificationWithIcon(\"success\",\"Success\",\"Subscription successfully cancelled.\")\n        await refetch()\n    }\n\n    const openBuySubscriptionConfirmationModal = (plan) => {\n        console.log(\"My console for plan\", plan)\n        setSubscriptoinModalVisible(false)\n        setShowbuySubscriptionConfirmationModal(true)\n        setProductDetails(plan)\n    }\n\n    const handleBuySubscription = (planData) => {\n        console.log(\"Buy subscription initiated\", planData)\n        buyPlanInit(planData.id, planData.name, planData.price.id, planData.metadata.total_minutes, planData.metadata.discount)\n    }\n\n\n    if(isLoading){\n        return (<React.Fragment key=\"findTech\">\n                    <Col md=\"12\" className=\"px-4 pt-2 text-center\">\n                        <Loader height=\"100%\" className=\"mt-5\" />\n                    </Col>\n                    <Col md=\"12\" className=\"px-4 pb-5 pt-3 text-center\">\n                        <h3>Finding active subscription ...</h3>\n                    </Col>\n                </React.Fragment>\n                )\n    }\n\n\n    return (<div className='d-flex mt-5 col-12 w-100 justify-content-evenly flex-wrap'>\n                {!isPlanAvailable && refinePlans && refinePlans.Business && refinePlans.Business.map((ele)=>{\n                    console.log(\"My console for single plan data\", ele)\n                    return <SubscriptionFlipCard popular={ele.id === popularSoftwareId} planData={ele} onYes={handleBuySubscription} setDisableBtn={setDisableBtn} disableBtn={disableBtn} />\n                })}\n                {!isLoading && isPlanAvailable &&\n                        <Card className=\"text-left\">\n                            <Card.Header className=\"bg-light-blue max-width-991px-white-background\">\n                                <h5 className=\"m-0 font-weight-bold\">Active Subscription</h5>\n                            </Card.Header>\n                            <Card.Body>\n                                <Card.Title></Card.Title>\n                                <div className='d-flex align-items-start flex-wrap'>\n                                    <div className='mr-250p'>\n                                        <h1 className='font-weight-bold'>Subscription Details</h1>\n                                        <hr/>\n                                        <table cellPadding=\"10\" className=\"my-subscription-table\">\n                                            <tbody>\n                                                {/* <tr>\n                                                    <td><span>Subscription ID</span></td>\n                                                    <td width=\"20\" className=\"text-center\">:</td>\n                                                    <td>{user.customer.subscription.subscription_id}</td>\n                                                </tr> */}\n                                                <tr>\n                                                    <td>Subscription Name</td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td className=\"text-success font-weight-bold\">\n                                                        <div className='hignlighted-plan-name d-flex justify-content-center'>\n                                                            {activeSubscription.name}\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                                <tr className=\"\">\n                                                    <td>Subscription Cost</td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{activeSubscription.price.currency === 'usd' ? '$' : activeSubscription.price.currency}{activeSubscription.price.unit_amount/100}</td>\n                                                </tr>\n\n                                                {\n                                                    user?.customer?.subscription?.priceOff > 0 &&\n                                                    <tr className=\"\">\n                                                        <td>Coupon Applied</td>\n                                                        {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                        <td style={{color:\"green\"}}>{activeSubscription.price.currency === 'usd' ? '$' : activeSubscription.price.currency}<span>{user.customer.subscription.priceOff}</span></td>\n                                                    </tr>\n                                                }\n                                                <tr className=\"\">\n                                                    <td>You paid </td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{activeSubscription.price.currency === 'usd' ? '$' : activeSubscription.price.currency}<span>{user.customer.subscription.paidPrice}</span></td>\n                                                </tr>\n\n                                                <tr className=\"\">\n                                                    <td>Purchased date</td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{moment(user.customer.subscription.plan_purchased_date).format('ddd, MMM DD, YYYY, HH:mm')}</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>Status</td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td className={(user.customer.subscription.status === 'active' || user.customer.subscription.status === 'paid') ? 'text-success' : 'red-text'+\"  text-capitalize\"}>Active</td>\n                                                </tr>\n\n                                            </tbody>\n                                        </table>\n                                    </div>\n\n                                    <div>\n                                        <h1 className='font-weight-bold'>Timing Details</h1>\n                                        <hr/>\n                                        <table cellPadding=\"10\" className=\"my-subscription-table\">\n                                            <tbody>\n                                                <tr>\n                                                    <td className='d-flex justify-content-center align-items-center'>\n                                                        <TimerSharpIcon className='mr-10' />\n                                                        TimerTotal Subscription Time\n                                                    </td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{\n                                                            user.customer.subscription.grand_total_seconds ?\n                                                                                                            moment.utc((user.customer.subscription.grand_total_seconds)*1000).format('HH:mm')\n                                                                                                            :\n                                                                                                            moment.utc((user.customer.subscription.total_seconds)*1000).format('HH:mm')\n                                                        }</td>\n                                                </tr>\n                                                <tr>\n                                                    <td className='d-flex justify-content-start align-items-center'>\n                                                        <AvTimerSharpIcon className='mr-10' />\n                                                        Subscription Time used\n                                                    </td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{moment.utc(user.customer.subscription.time_used*1000).format('HH:mm')}</td>\n                                                </tr>\n                                                <tr>\n                                                    <td className='d-flex justify-content-start align-items-center'>\n                                                        <AvTimerSharpIcon className='mr-10' />\n                                                        Subscription Time left\n                                                    </td>\n                                                    {/* <td width=\"20\" className=\"text-center\">:</td> */}\n                                                    <td>{\n                                                        user.customer.subscription.grand_total_seconds ?\n                                                                                                        moment.utc((user.customer.subscription.grand_total_seconds - user.customer.subscription.time_used)*1000).format('HH:mm')\n                                                                                                        :\n                                                                                                        moment.utc((user.customer.subscription.total_seconds - user.customer.subscription.time_used)*1000).format('HH:mm')\n                                                        }\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                                <Button className=\"btn app-btn app-btn-light-blue mr-15\" onClick={()=>setShowSubscriptionPlansModal(true)} disabled={startClicked.length > 0}\n>\n                                    {showSpinner ? <Spin className='subscription-spinner' /> :\n                                    <>\n                                    <span/>\n                                    {activeSubscription.price.unit_amount === highestPlanRate &&\n                                        <>Change</>\n                                    }\n                                    {highestPlanRate < activeSubscription.price.unit_amount &&\n                                        <>Change</>\n                                    }\n                                    {highestPlanRate === 0 &&\n                                        <>Upgrade</>\n                                    }\n                                    {highestPlanRate > activeSubscription.price.unit_amount &&\n                                        <>Upgrade</>\n                                    }\n                                    </>\n                                    }\n                                </Button>\n                                <Button className=\"btn app-btn app-btn-light-blue ml-5\" onClick={()=>cancelAskModalConfirmation()} disabled={startClicked.length > 0}><>Cancel</></Button>\n                            </Card.Body>\n                        </Card>\n\n                }\n                <SubscriptionPlansModal buyPlanInit={ buyPlanInit } user={user} showSubscriptionPlansModal={showSubscriptionPlansModal} setShowSubscriptionPlansModal={setShowSubscriptionPlansModal} />\n                { stripePromise !== '' &&\n                    <Elements stripe={stripePromise}>\n                        <AddCardForm user={user} cardsInfo={cardInfoUpdated} setCardsInfo={setCardInfoUpdated} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} setNewCardAdded={setNewCardAdded} source={\"subscription\"} setDisableBtn={setDisableBtn} />\n                    </Elements>\n                }\n            </div>)\n};\n\nexport default Subscription;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Customer\\Subscription\\index.js"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "folder",
                                            "name": "Dashboard",
                                            "children": [
                                                {
                                                    "type": "folder",
                                                    "name": "components",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "jobCancelFrom.js",
                                                            "fileData": "import React, {useState} from 'react';\nimport { Input, Spin, Modal } from 'antd';\nimport { Row, Col, Button } from 'react-bootstrap';\n// import styled from 'styled-components';\nimport {updateJob, cancelScheduleJob } from '../../../api/job.api';\nimport mixpanel from 'mixpanel-browser';\nimport { openNotificationWithIcon } from '../../../utils';\nimport { useSocket } from '../../../context/socketContext';\nimport * as CustomerApi from '../../../api/customers.api';\nimport * as UserApi from '../../../api/users.api';\nimport * as TwilioApi from '../../../api/twilioChat.api';\n\nconst JobCancelFrom = (props) => {\n\tconst [isDisabled,setIsDisabled] = useState(false)\n\tconst [reason,setReason] = useState('')\n\tconst [isEmptyReason,setIsEmptyReason] = useState(false)\n\tconst { socket } = useSocket();\n\n\t/**\n\t * cancel job by tech and customer.\n\t * @params : we are using use state variables in this function\n\t * @returns: reload page after timeout\n\t * @author : Ridhima Dhir\n\t */\n\tconst handleCancel = async (event) => {\n\t\tif(reason){\n\t\t\tsetIsDisabled(true)\n\t\t\t// Block native form submission.\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log(\" cancelJobId:::: \",props.cancelJobId, ' ::: reason :::', reason)\n\t\t\t// check type is customer then emit socket scheduleCancelledByCustomer\n\t\t\t// updatejob status and schedule_accepted to false\n\t\t\tif(props.type == \"Customer\"){\n\t\t\t\tmixpanel.identify(props.user.email);\n\t\t\t\tmixpanel.track('Customer -  Cancelled the schedule job from dashboard',{'JobId':props.cancelJobId});\n\t\t\t\t // This will refund the hold money from customer account\n\t\t\t\tif (props?.job && props?.job?.customer_holded_payments && props?.job?.customer_holded_payments.length >0){\n\t\t\t\t\t\n\t\t\t\t\tlet ownerStripeId = '';\n\t\t\t\t\tconst ownerId =props?.job?.customer?.user?.ownerId;\n\t\t\t\t\tif(ownerId){\n\t\t\t\t\t   const ownerStripeRes = await UserApi.getUserById(ownerId)\n\t\t\t\t\t   if(ownerStripeRes?.customer?.stripe_id){\n\t\t\t\t\t\townerStripeId = ownerStripeRes?.customer?.stripe_id \n\t\t\t\t\t   } \n\t\t\t\t\t}\n\t\t\t\t\tconst stripeId = ownerId ? ownerStripeId : props?.job?.customer?.stripe_id\n\t\t\t\t\t// Here payment_hold_id is not-applicable-here because we want to send only when we are Adding card as in that case of card no payment_hold_id is stored somewhere  but in normal cases like this all the data is stored in the form of object and may have more than one stripe id\n\t\t\t\t\tconst obj = {\n\t\t\t\t\t\tpayment_hold_id: \"not-applicable-here\",\n\t\t\t\t\t\tisDeduct: false,\n\t\t\t\t\t\tjobId: props.job?.id,\n\t\t\t\t\t\tstripe_id: stripeId\n\t\t\t\t\t}\n\t\t\t\t\tawait CustomerApi.deductOrRefundHoldMoney(obj);\n\n\t\t\t\t}\n\t\t\t\tawait socket.emit(\"scheduleCancelledByCustomer\",{jobId:props.cancelJobId, reason:reason})\n\t\t\t\tawait updateJob(props.cancelJobId, { \"status\": \"Declined\",\"schedule_accepted\":false,\"tech_message_dashbord\":false})\n\t\t\t\tawait TwilioApi.updateTwilioConversation(props.job?.twilio_chat_service?.sid)\n\t\t\t\tsocket.emit(\"refresh-job-after-decline-by-user\",props.job)\n\t\t\t\topenNotificationWithIcon('success', 'Success', 'Job has been cancelled.');\n\t\t\t}\n\n\t\t\t// check type is Technician then call function decline_job_by_technician\n\t\t\tif(props.type == \"Technician\"){\n\t\t\t\tmixpanel.identify(props.user.email);\n\t\t\t\tmixpanel.track('Technician - Job declined from dashboard',{'JobId':props.cancelJobId});\n\t\t\t\tawait props.decline_job_by_technician(props.cancelJobId, true, reason)\n\t\t\t}\n\n\t\t\t// Update the custCancellation or techCancellation object of job as per cancellation type (customer or tech)\n\t\t\t//\tcustCancellation object update if type is Customer and push object in techCancellation field if type is tech\n\t\t\t// and update job\n\t\t\tawait cancelScheduleJob(props.cancelJobId, {'calcellationBy':props.type, 'reason':reason, 'user':props.user})\n\t\t\t\n\t\t\t//Modal close\n\t\t\tprops.setIsCancelModal(false)\n\t\t\t\n\t\t\t//Reload current location\n\t\t\tsetTimeout(function(){\n\t\t\t\twindow.location.reload()\n\t\t\t},1000)\n\t\t}else{\n\t\t\t// show error message if reason is empty\n\t\t\tevent.preventDefault();\n\t\t\tsetIsEmptyReason(true)\n\t\t}\n\t};\n\n\tconst changeReason = (e) =>{\n\t\tsetReason(e.target.value)\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle=\"Cancel Schedule Job\"\n\t\t\tvisible={props.isCancelModal}\n\t\t\tonOk={() => {}}\n\t\t\tonCancel={() => {props.setIsCancelModal(false); } }\n\t\t\tclosable={true}\n\t\t\tclassName=\"customCloseButton\"\n\t\t\tfooter={[\n\t\t\t\t<Button key=\"back\" onClick={() => {\n\t\t\t\t\tprops.setIsCancelModal(false);\n\t\t\t\t}} className=\"btn app-btn app-btn-light-blue modal-footer-btn\">\n\t\t\t\t\t<span></span>No\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\"\n\t\t\t\t\tclassName={\"btn app-btn modal-footer-btn \"+(isDisabled ? \"disabled-btn\" : \"\")}\n\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\tonClick={handleCancel}\n\t\t\t\t  >\n\t\t\t\t\t<span></span>\n\t\t\t\t\t{isDisabled \n\t\t\t\t\t? \n\t\t\t\t\t\t<Spin/>\n\t\t\t\t\t:\n\t\t\t\t\t\t<>Yes</>\n\t\t\t\t\t}\n\t\t\t\t</Button>,\n\t\t\t]}\n\t\t\t>\n\t\t\t\t{/* <Col md=\"12\" className=\"card-validation-message mb-5\">\n\t\t\t\t\tPlease provide reason for cancellation\n\t\t\t\t</Col> */}\n\t\t\t\t<Col md=\"12\" className=\"pb-4 m-auto add-card-form-outer text-left\">\n\t\t\t\t\t\n\t\t\t\t{props.user.userType === \"customer\" ? (\n\t\t\t\t\t<span>Please note, your job is accepted by one of our Geek, so if you cancel this job now then a fee of $24.99 will be applied. Are you sure you want to continue?</span>\n\t\t\t\t) : null}\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<h6><span className=\"red-text\">*</span>Please provide reason for cancellation.</h6>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col md=\"12\" className= \"card-element-outer mt-2 mb-4\">\n\t\t\t\t\t\t\t\t<Col xs=\"12\" className= \"card-element-inner pb-3 iframe-outer\" >\n\t\t\t\t\t\t\t\t\t<Input.TextArea \n\t\t\t\t\t\t\t\t\t\trows={3} \n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Please tell us reason for cancellation\" \n\t\t\t\t\t\t\t\t\t\tonChange={changeReason} \n\t\t\t\t\t\t\t\t\t\tclassName = {isEmptyReason?\"red-border\":\"\"}\n\t\t\t\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t\t\t</Col>                            \n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</form>            \n\t\t\t\t</Col>\n\t\t</Modal>\n\t);\n};\n\n\n// const InputWithLabel = styled.div`\n// \tdisplay: flex;\n// \tflex-direction: column;\n// \ttext-align: left;\n// \tmarginRight: 30px;\n// \tposition: relative;\n// \t&:last-child {\n// \t\tmarginRight: 0;\n// \t}\n// \t& input{\n// \t\theight:50px;\n// \t\tpadding:10px;\n// \t\tborder-radius: 10px;\n// \t\tmargin-top: 15px;\n// \t\tborder : 2px solid #F3F3F3;\n// \t\tmargin-top:15px;\n// \t\tmargin-left:20px;\n// \t}\n// `;\n\nexport default JobCancelFrom;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\components\\jobCancelFrom.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "JobsList.js",
                                                            "fileData": "import React, { useState } from 'react'\n\n\n/* \nconst ListHeaderText = styled.h5`\nflex: 1; font-size: 12px; margin-bottom: 0; font-weight: bold;\n`\n\n\nconst ListBodyText = styled.h4`\nflex:1;font-size:14px;font-weight:bold;margin-bottom: 0;\n`\n\nconst ListBodyParagraph =  */\n\nexport default function JobsList() {\n    return (\n        <div style={{\n            boxShadow: \"9px 9px 15px 1px rgb(170 170 170 / 75%)\", borderRadius: \"11px\", background: \"#fff\", padding: \"0.1rem\"\n        }}>\n            <JobListHeader />\n            <div style={{ marginTop: \"1rem\" }}>\n                <JobListBodyRow />\n\n                <JobListBodyRow />\n                <JobListBodyRow />\n            </div>\n        </div>\n    )\n}\n\n\nconst JobListHeader = () => {\n    const textStyle = {\n        flex: 1, fontSize: \"14px\", fontWeight: \"bold\", marginBottom: 0\n    }\n    return (\n        <div style={{ display: \"flex\", background: \"rgb(220, 231, 237)\", height: \"40px\", alignItems: \"center\", paddingLeft: \"60px\", paddingRight: \"60px\" }}>\n            <h5 style={textStyle}>Date</h5>\n            <h5 style={textStyle}>Time</h5>\n            <h5 style={{ ...textStyle, flex: 3 }}>Issue</h5>\n            <h5 style={textStyle}>Earnings</h5>\n\n        </div>\n    )\n}\n\nconst JobListBodyRow = () => {\n    const [hovered, setIsHOvered] = useState(false)\n    const textStyle = {\n        flex: 1, fontSize: \"16px\", fontWeight: \"bold\", marginBottom: 0, color: hovered ? \"#2a3740\" : \"#74828d\"\n    }\n    return (\n        <div onMouseEnter={() => setIsHOvered(true)}\n            onMouseLeave={() => setIsHOvered(false)}\n            style={{\n                height: \"100px\", marginLeft: \"35px\", marginRight: \"35px\", borderBottom: \"3px solid #e1eaef\",\n                display: \"flex\", alignItems: \"center\",\n                backgroundColor: hovered ? \"#dce7ed\" : \"#fff\",\n                paddingLeft: \"30px\", paddingRight: \"30px\", borderRadius: \"11px\"\n            }}>\n            <h5 style={textStyle}>01/01/2021</h5>\n            <h5 style={textStyle}>10:25 AM</h5>\n            <h5 style={{ ...textStyle, flex: 3, fontSize: \"14px\" }}>Need excel VBA script writer to combine 750 sheets that are in one single sheet</h5>\n            <h5 style={textStyle}>$55</h5>\n        </div>\n    )\n}",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\components\\JobsList.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "Tabs.js",
                                                            "fileData": "import React, { useEffect, useState } from 'react'\n\nexport const TabsHeader = ({ activeTab: _activeTab = 0, tabsArray = [] }) => {\n\n    const [activeTab, setActiveTab] = useState(1)\n\n    useEffect(() => {\n        setActiveTab(_activeTab)\n    }, [_activeTab])\n\n\n    return (\n        <div style={{ display: \"flex\", width: \"100%\", }}>\n            {tabsArray.map((tabName, index) => <TabItem\n                onClick={() => setActiveTab(index)}\n                text={tabName} isActive={activeTab === index} />)}\n\n\n\n            {/* \n            <TabItem text=\"Profile Settings\" isActive={false}\n\n\n            />\n            <TabItem text=\"Payment Settings\" isActive={false}\n\n\n            /> */}\n        </div>\n    )\n}\n\n\nconst TabItem = ({ text, isActive, onClick, }) => {\n\n    return (\n        <h4 onClick={onClick} style={{\n            cursor: \"pointer\",\n            color: isActive ? \"#475258\" : \"#1fc7c8\", flex: 1, fontSize: \"18px\", borderBottom: isActive ? \"4px solid #2cc\" : \"4px solid #e1eaef\",\n            paddingBottom: \"20px\", paddingLeft: \"20px\", marginBottom: 0,\n            fontWeight: \"bold\"\n        }}>{text}</h4>\n    )\n}",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\components\\Tabs.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "TopBar.js",
                                                            "fileData": "import React, { useState ,useEffect} from 'react';\n// import {useSocket} from '../../../context/socketContext';\nimport {useAuth} from '../../../context/authContext';\n// import * as settingsApi from '../../../api/settings.api';\nimport mixpanel from 'mixpanel-browser';\nexport default function TopBar({estimatedWaitTime}) {\n    \n    // const [twoTierJobs, setTwoTierJobs] = useState(false);\n    // const {socket} = useSocket()\n    const {user,updateUserInfo} = useAuth()\n    const [status, setStatus] = useState(user.availableForJob)\n    // const [estimatedTime, setEstimatedTime] = useState((estimatedWaitTime ? estimatedWaitTime : 'NA'));\n\n    useEffect(() => {\n        let main_software = [];\n        if (user.technician) {\n            const { expertise } = user.technician;\n            // console.log('expertise>>>>>>',expertise)\n            for (let i = 0; i <= expertise.length - 1; i++) {\n                if (expertise[i].software_id) {\n                    if (!expertise[i].parent || expertise[i].parent === \"\") {\n                        if (!main_software.includes(expertise[i].software_id)) {\n                            main_software.push(expertise[i].software_id);\n                        }\n                    } else {\n                        if (!main_software.includes(expertise[i].parent)) {\n                            main_software.push(expertise[i].parent);\n                        }\n                    }\n                }\n\n            }\n        }\n    },[])\n\n    // useEffect(() => {\n        // console.log('softwareList here...',softwareList)        \n    // },[softwareList])\n\n    /*useEffect(()=>{\n        if(estimatedWaitTime){\n            setEstimatedTime(estimatedWaitTime)\n        }\n    },[estimatedWaitTime])*/\n\n    const updateTechnicianStatus = () => {\n        if(status){\n        console.log(\"Going to set user as INACTIVE\")\n        //mixpanel code //\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Inactive',{user:user.email});\n        //mixpanel code //\n            updateUserInfo({\n                userId: user.id,\n                availableForJob:false,\n            });\n        }else{\n        //mixpanel code\n            mixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Active',{user:user.email});\n        //mixpanel code\n            updateUserInfo({\n                userId: user.id,\n                availableForJob:true,\n            });\n            console.log(\"Going to set user as ACTIVE\")\n        }\n        setStatus(!status)\n    }\n\n    return (\n        <div style={{\n            height: \"120px\", display: \"flex\", paddingTop: \"20px\", paddingBottom: \"10px\", marginTop: \"30px\", borderRadius: \"11px\",\n            boxShadow: \"9px 9px 15px 1px rgb(170 170 170 / 75%)\", backgroundColor:'#F6FBFF'\n        }}>\n            <CardItem onSwitchClick={updateTechnicianStatus} title=\"STATUS\" switchText={status ? \"Available\" : \"Not Available\"} isSwitchActive={status} />\n        </div>\n    )\n}\n\n\nconst CardItem = ({ switchText, title, style, showSwitch = true, isSwitchActive, onSwitchClick }) => {\n    return (\n        <div style={{ flex: 1, marginLeft: \"30px\", ...style }}>\n\n            <h5 style={{ fontSize: \"11px\", fontWeight: \"bold\", marginBottom: \"20px\", color: \"#475258\" }}>{title}</h5>\n            <Switch onSwitchClick={onSwitchClick} text={switchText} showSwitch={showSwitch} isSwitchActive={isSwitchActive} />\n        </div>\n    )\n}\n\n\nconst Switch = ({ text, showSwitch, isSwitchActive, onSwitchClick }) => {\n    return (\n        <div style={{ display: \"flex\", alignItems: \"center\", }}>\n            {showSwitch && <div\n                onClick={onSwitchClick}\n                style={{\n                    cursor: \"pointer\",\n                    background: isSwitchActive ? \"#1bd4d5\" : \"#dce7ed\",\n                    justifyContent: isSwitchActive ? \"flex-end\" : \"flex-start\",\n                    display: \"flex\",\n                    height: \"30px\", borderRadius: \"24px\", width: \"60px\", padding: \"0.2rem\"\n                }}>\n                <div style={{\n                    width: \"45%\", background: isSwitchActive ? \"#ffffff\" : \"#dce7ed\", borderRadius: \"50%\", height: \"100%\",\n                    boxShadow: !isSwitchActive && \"0px 0px 1px 2px rgb(170 170 170 / 75%)\"\n                }}></div>\n            </div>\n            }\n            <h5 style={{\n                fontSize: \"15px\", color: isSwitchActive ? \"#1fc7c8\" : \"#72838d\", fontWeight: \"bold\", marginLeft: showSwitch ? \"20px\" : 0, marginBottom: 0,\n\n                marginTop: showSwitch ? 0 : \"0.5rem\"\n            }}>{text}</h5>\n        </div>\n    )\n}\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\components\\TopBar.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "file",
                                                    "name": "index.css",
                                                    "fileData": ".mobile-header-outer {\n    padding: 20px 0;\n    align-items: center;\n    justify-content: center;\n    display: none;\n  }\n  @media screen and (max-width: 1194px) {\n    .mobile-header-outer {\n      display: flex;\n    }\n  }\n  .mobile-header-outer button {\n    position: absolute;\n    background: transparent;\n    color: #00a6a7;\n    border: none;\n    font-size: 25px;\n  }\n  .mobile-header-outer .menu-toggle-bar {\n    left: 20px;\n  }\n  .mobile-header-outer .profile-toggle-bar {\n    right: 20px;\n  }\n  @media screen and (max-width: 1194px) {\n    .sidebar-left-outer {\n      position: fixed;\n      left: 0;\n      top: 0;\n      background: #fff;\n      z-index: 999;\n      width: 100%;\n      height: 100%;\n      transition: 0.3s all;\n      transform: translateX(-2000px);\n      pointer-events: none;\n    }\n    .sidebar-left-outer.active {\n      transform: translateX(0);\n      pointer-events: all;\n    }\n    .sidebar-right-outer {\n      position: fixed;\n      left: 0;\n      top: 0;\n      background: #fff;\n      z-index: 999;\n      width: 100%;\n      height: 100%;\n      overflow-y: scroll;\n      transition: 0.3s all;\n      transform: translateX(2000px);\n      pointer-events: none;\n    }\n    .sidebar-right-outer.active {\n      transform: translateX(0);\n      pointer-events: all;\n    }\n  }\n  .create-acc{\n    background-color : #1bd4d5 ;\n    border : none;\n  }\n  .create-acc:hover {\n    background-color: #1bd4d5;\n  }\n  .chat-btn-cus{\n    border: none !important;\n    color: #1bd4d5 !important;\n    background-color: transparent !important;\n    text-decoration: underline;\n    padding: 0 !important;\n}\n\n#ThemeLight .unique-button {\n  padding: 0 !important;\n  font-size: 13px !important;\n}\n",
                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\index.css"
                                                },
                                                {
                                                    "type": "file",
                                                    "name": "index.js",
                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Modal, Radio } from 'antd';\nimport { useHistory, useLocation } from 'react-router';\n// import DashboardSteps from '../../components/DashboardSteps';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport style from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { useUser } from '../../context/useContext';\nimport RightSidebar from '../../components/Sidebar/RightSidebar';\nimport LeftSidebar from '../../components/Sidebar/LeftSidebar';\nimport DashboardData from '../../components/Dashboard/Content';\nimport { useServices } from '../../context/ServiceContext';\n// import  {addNewTalkChatUser,getTalkChatUser} from '../../api/chat.api'\n// import { useJob } from '../../context/jobContext';\nimport { useNotifications } from '../../context/notificationContext';\nimport * as SoftwareApi from '../../api/software.api';\n// import {Button} from 'react-bootstrap';\nimport { useSocket } from '../../context/socketContext';\n// import {useAuth} from '../../context/authContext';\nimport { useTools } from '../../context/toolContext';\n// import logo from '../../assets/images/logo.png';\nimport { VERSION, SECRET_KEY } from '../../constants';\nimport { retrieveJob } from 'api/job.api';\nimport {clearAllTimeOuts, handleRefModal, openNotificationWithIcon} from '../../utils';\nimport { Button } from 'react-bootstrap';\nimport * as customerSourceApi from '../../api/customerSource.api';\nimport './index.css';\n// import UserReviewModal from '../../components/UserReviewModal/index';\n// import * as CustomerApi from '../../api/customers.api';\nimport Loader from \"../../components/Loader\";\nimport mixpanel from 'mixpanel-browser';\nimport BusinessModal from './steps/BusinessModal';\nimport AskIfBusinessAccountModal from './steps/AskIfBusinessAccountModal';\nimport * as TwilioChatApi from '../../api/twilioChat.api';\nimport * as JobApi from '../../api/job.api';\n\nlet modal = null\nlet initialLoad = true;\nconst MainPage = () => {\n  const {\n    setJobId, jobId, typeForDetails, setOpenModal, openTechModal, setTypeForDetails, stepDeciderForDashboard, setStepDeciderDashboard, hideBadge, sethideBadge, hearAboutUsModal, setHearAboutUsModal,activeMenu, setActiveMenu\n  } = useTools();\n  // const [type,setType] = useState(typeForDetails)\n  const { socket } = useSocket();\n  // const [fromEmail,setFromEmail] = useState(false)\n  const fromEmail = false;\n  // const location = useLocation()\n  // const {fetchJob} = useJob()\n  \n \n  const { FetchDetails,getStripeAccountStatus} = useServices();\n  const { user } = useUser();\n  // const [currentStep,setcurrentStep] = useState(0)\n  const { fetchNotifications, allNotifications,updateReadStatus } = useNotifications();\n  const [openNotification, setOpenNotification] = useState(false);\n  const [notifyCount, setNotifyCount] = useState(0);\n  const [showNotificationBadge, setShowNotificationBadge] = useState(false);\n  const [softwareList, setSoftwareList] = useState([]);\n  \tconst [estimatedWaitTime, setEstimatedWaitTime] = useState('NA');\n  \t// const [userVerified, setUserVerified] = useState(true);\n  \tconst [scheduledBadge, setScheduledBadge] = useState(false);\n  \tconst [scheduledJob, setScheduledJob] = useState({});\n  // const {refetch,verificationEmailHandler} = useAuth();\n  const [notificationsArr, setNotificationsArr] = useState([]);\n  const history = useHistory();\n  const [menuSidebar, setmenuSidebar] = useState(false);\n  const [profileSidebar, setprofileSidebar] = useState(false);\n  const [readNotificationId,setReadNotificationId] = useState(false);\n  const [customerFeedWhereToCome, setCustomerFeedWhereToCome] = useState(false);\n  const [showWhereToFieldError, setShowWhereToFieldError] = useState(false);\n  const [otherComeFeedBack, setOtherComeFeedBack] = useState('');\n  const [whereHeComeFrom, setWhereHeComeFrom] = useState(false);\n  const [showBusinessModal, setShowBusinessModal] = useState(false);\n  const [showUpdateBusinessNameModal, setShowUpdateBusinessNameModal] = useState(false);\n  const location = useLocation();\n  const [showLoader, setShowLoader] = useState(true);\n  const urlParams = new URLSearchParams(location.search)\n  const [unreadMessagesTwilio, setUnreadMessagesTwilio] = useState(0)\n  const [newMessageAlert , setNewMessageAlert] = useState(false);\n  console.log(\"url parms >>>>>>> :::::::::::: \",urlParams.get(\"jobId\"), urlParams.get(\"schedule\"));\n  const slackId = urlParams.get(\"slackJobid\")\n  const queryParams = new URLSearchParams(location.search);\n \n\n  useEffect(() => {\n    socket.emit(\"calculate-unread-twiio-messages\",{user})\n  }, [])\n  \n  const menuSidebarHandle = () => {\n\t  setmenuSidebar(!menuSidebar);\n\t};\n\tconst profileSidebarHandle = () => {\n\t\tsetprofileSidebar(!profileSidebar);\n\t};\n  let getStripeNotification = true\n  let checkStripeAccountStatus = localStorage.getItem('checkStripeAccountStatus')\n  useEffect(()=>{\n    (async()=>{\n      if(urlParams.get(\"checkStripeAccountStatus\")|| checkStripeAccountStatus && getStripeNotification && user.userType === 'technician'){\n        let response = await getStripeAccountStatus(user.technician.accountId)\n        setStepDeciderDashboard(14)\n        setActiveMenu(\"technician_transactions\")\n        if(response){\n          getStripeNotification = false\n          openNotificationWithIcon('success', 'Success', 'Your stripe account detail submitted. Please check by Stripe Login');\n          localStorage.removeItem('checkStripeAccountStatus')\n        }else{\n          getStripeNotification = false\n          openNotificationWithIcon('info', 'Info', 'Your stripe account profile is incomplete.Please complete your profile');\n          localStorage.removeItem('checkStripeAccountStatus')\n        }\n        \n        let nextState = { additionalInformation: 'Updated the URL with JS' }\n        const nextTitle = document.title;\n        let nextURL = \"/dashboard\"\n        window.history.pushState(nextState, nextTitle, nextURL);\n      }\n    })()\n  },[user])\n  const handleLinkTransfer = async()=>{\n      try{\n        let updatedJob = await retrieveJob(urlParams.get(\"scheduleJobId\"))\n        if (updatedJob.customer.user.id === user.id){\n          setJobId(urlParams.get(\"scheduleJobId\"))\n          setTypeForDetails(\"apply\")\n          setStepDeciderDashboard(6)\n        }\n        if (user && user?.userType == 'technician' && updatedJob?.tech_declined_ids.includes(user?.technician.id) == false) {\n          setJobId(urlParams.get(\"scheduleJobId\"))\n          setTypeForDetails(\"apply\")\n          setStepDeciderDashboard(6)\n        }\n      }\n      catch(err){\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" ,urlParams.get(\"scheduleJobId\"))\n        console.log(\"error in handleLinkTransfer ::: \",err)\n      }\n  }\n\n    /**   this function is responsible to get url params and send the tech and customer to the job detail page\u00a0\u00a0\n    *     this function first retreve the updated job \n    *     @author : kartar singh\n    **/\n\n  // This function handles the transfer of a job link from Slack to the dashboard\n const handleLinkTransferSlack = async () => {\n  try {\n      let  slackJobidFromParams = urlParams.get(\"slackJobid\");\n      // Retrieve the job using the slackJobid from the URL params\n      let updatedJob = await retrieveJob(slackJobidFromParams)\n      \n      // If the user is the customer who created the job, set the job ID, type for details, and step decider dashboard\n      if(user && updatedJob){\n        if (updatedJob?.customer?.user?.id === user.id) {\n          setJobId(slackJobidFromParams)\n          setTypeForDetails(\"apply\")\n          setStepDeciderDashboard(6)\n        }\n      }\n      \n      // If the user is a technician who hasn't declined the job and the job has not been assigned to anyone, set the job ID, type for details, and step decider dashboard\n      if (user && user?.userType === 'technician' && updatedJob?.tech_declined_ids.includes(user?.technician.id) === false) {\n          setTypeForDetails(\"apply\")\n          setJobId(slackJobidFromParams)\n          setStepDeciderDashboard(6)\n      }\n      \n      // If the user is a technician, track their activity in Mixpanel\n      if(user){\n        if ( user?.userType === 'technician') {\n          mixpanel.identify(user.email);\n          mixpanel.track('Technician  - technician come from slack ', { 'userType': user.userType ,'JobId': slackJobidFromParams });\n        } \n        // If the user is a customer, track their activity in Mixpanel\n        else {\n          mixpanel.identify(user.email);\n          mixpanel.track('Customer -  customer come from slack', { 'userType': user.userType ,'JobId': slackJobidFromParams });\n        }\n      }\n\n  }\n  // If an error occurs, log it to the console\n  catch (err) {\n      console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", urlParams.get(\"scheduleJobId\"))\n      console.log(\"error in handleLinkTransfer ::: \", err)\n  }\n}\n\nconst handleLinkTransferMessage = async () => {\n  try {\n      let messageFromParams = urlParams.get(\"message\");\n          console.log('message :::::',messageFromParams)\n          setTimeout(() => {\n            setStepDeciderDashboard(15)\n            setActiveMenu('messages')\n          },1000);\n  }\n  // If an error occurs, log it to the console\n  catch (err) {\n      console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", urlParams.get(\"message\"))\n      console.log(\"error in handleLinkTransfer ::: \", err)\n  }\n}\n\n  useEffect(()=>{\n    \n    clearAllTimeOuts()\n    if(urlParams.get(\"mobileJobId\") || urlParams.get(\"invaildUser\")){\n      if(urlParams.get(\"invaildUser\")){\n        openNotificationWithIcon('error', 'Error', \"You are not authorized to access this Job.\");\n      }\n\n      if(urlParams.get(\"mobileJobId\")){\n        setJobId(urlParams.get(\"mobileJobId\"))\n        setTypeForDetails(\"details\")\n        setStepDeciderDashboard(6)\n      }\n\n      let nextState = { additionalInformation: 'Updated the URL with JS' }\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\"\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }\n    if(urlParams.get(\"scheduleJobId\")){\n      handleLinkTransfer()\n      console.log(\"before url parms >>>>>>> :::::::::::: \",urlParams.get(\"scheduleJobId\"));\n      \n      \n      let nextState = { additionalInformation: 'Updated the URL with JS' }\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\"\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }\n     /**   \n      *   this if will get slackJobid from params and call handleLinkTransferSlack and convert the link to dashboard\n      *   @author : kartar singh\n     **/\n\n    if (urlParams.get(\"slackJobid\")) {\n      handleLinkTransferSlack();\n      let nextState = { additionalInformation: 'Updated the URL with JS' };\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\";\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }  \n    if (urlParams.get(\"chatScreen\")) {\n      let nextState = { additionalInformation: 'Updated the URL with JS' };\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\";\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }    \n\n    if (urlParams.get(\"message\")) {\n      console.log('inside the message')\n      handleLinkTransferMessage();\n      let nextState = { additionalInformation: 'Updated the URL with JS' };\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\";\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }\n\n    if(urlParams.get(\"checkJobId\")){\n      console.log(\"before url parms >>>>>>> :::::::::::: \",urlParams.get(\"checkJobId\"));\n      const job_id = urlParams.get(\"checkJobId\")\n      handleLinkTransferToJobDetails(job_id)\n      // setJobId(urlParams.get(\"checkJobId\"))\n      // setTypeForDetails(\"apply\")\n      // setStepDeciderDashboard(6)\n      // setActiveMenu(\"job-reports\")\n\n      // if(urlParams.get(\"mobileJobId\")){\n      // console.log(\"before url parms >>>>>>> :::::::::::: \",urlParams.get(\"mobileJobId\"));\n      // setJobId(urlParams.get(\"mobileJobId\"))\n      // setStepDeciderDashboard(6)\n      let nextState = { additionalInformation: 'Updated the URL with JS' }\n      const nextTitle = document.title;\n      let nextURL = \"/dashboard\"\n      window.history.pushState(nextState, nextTitle, nextURL);\n    }\n\n     /**   \n      *  This function used for redirect the user to JobDetails Page \n      *  @param : jobId\n      *   @author : Mritunjay\n     **/\n    async function handleLinkTransferToJobDetails(job_id) {\n      try {\n        const jobResult = await retrieveJob(job_id);\n        if (jobResult.technician.user.id) {\n          if (jobResult.technician.user.id) {\n            setJobId(job_id)\n            setTypeForDetails(\"apply\")\n            setStepDeciderDashboard(6)\n            setActiveMenu(\"job-reports\")\n          } else {\n            window.location.href = '/dashboard'\n          };\n        } else {\n          if (jobResult.customer.user.id) {\n            setJobId(job_id)\n            setTypeForDetails(\"apply\")\n            setStepDeciderDashboard(6)\n            setActiveMenu(\"job-reports\")\n          } else {\n            window.location.href = '/dashboard'\n          };\n        };\n      }\n      catch (err) {\n        console.log(\"error in handleLinkTransferToJobDetails ::: \", err)\n      };\n    };\n\n    if(user && user.customer && user.customer.askedForBusiness === false && user.isBusinessTypeAccount && user.roles.includes(\"owner\")){\n      console.log(\"Asking user for business info\", user)\n      setShowBusinessModal(true)\n    }\n\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"update_technician\"){\n      window.location.href= \"/technician/register_steps?t=update_technician\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"select_softwares\"){\n      window.location.href= \"/technician/register_steps?t=select_softwares\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"level_of_expertise\"){\n      window.location.href= \"/technician/register_steps?t=level_of_expertise\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"availability\"){\n      window.location.href= \"/technician/register_steps?t=availability\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"demo_video\"){\n      window.location.href= \"/technician/register_steps?t=demo_video\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"instructions\"){\n      window.location.href= \"/technician/register_steps?t=instructions\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"exam\"){\n      window.location.href= \"/technician/register_steps?t=exam\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"exam_fail\"){\n      window.location.href= \"/technician/register_steps?t=exam_fail\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"finalize_profile\"){\n      window.location.href= \"/technician/register_steps?t=finalize_profile\";\n    }\n    if(user && user.userType === 'technician' && user.technician && user.technician.registrationStatus === \"schedule_interview\"){\n      window.location.href= \"/technician/register_steps?t=schedule_interview\";\n    }\n    if(user && user.userType === 'technician' && user.technician && (user.technician.registrationStatus === \"incomplete_profile\" || user.technician.registrationStatus === 'interview_result' || user.technician.registrationStatus === \"complete\")){\n      setShowLoader(false)\n    }\n    if(user && user.userType === 'customer'){\n      setShowLoader(false)\n    }\n    if(user && user.email === \"guest@geeker.co\"){\n      console.log(\"removing token from dashboard\", user, user.email)\n      setShowLoader(true)\n      localStorage.removeItem(SECRET_KEY)\n      window.location.href= \"/\";\n    }\n\n    if(user && \n      user.userType === 'customer' && \n      !user.isBusinessTypeAccount && \n      !user.businessName && \n      user.businessName !== \"\" && \n      (!user.ownerId || user.ownerId === null)){\n        console.log(\"My console to chk businessName conditions\", user.businessName === \"\", !user.businessName)\n        setShowUpdateBusinessNameModal(true)\n    }\n\n  },[])\n\n  const handleRegisterModal = (id)=>{\n    setOpenModal(false)\n    console.log(\"readNotificationId ::::::\",readNotificationId)\n    if(id){\n      updateReadStatus({\"status\":true,\"_id\":id})\n    }\n    \n  }\n  //Set LocalStorage Current Step \n\n  useEffect(() => {\n   window.localStorage.setItem('CurrentStep',stepDeciderForDashboard)\n   // console.log(\">>>>>>>>\",createChatUser)\n  },[stepDeciderForDashboard])\n\n\n\tuseEffect(()=>{\n\t\tconsole.log(\"openTechModal1 :::: \",openTechModal)\n\t},[openTechModal])\n\tconst firstRegisterModal = (title,id)=> { \n\t\tconsole.log(\"the open tech Modal ::: \",openTechModal)\n    if(modal == null){\n     \n      modal = Modal.info({\n        title: title,\n        className :\"app-confirm-modal\",\n        onOk() {handleRegisterModal(id)},\n\n      });\n    }\n     \n\t\t\t\n  };\n  const handleScheduledJob = () => {\n    \tif (scheduledJob !== {}) {\n    \t\tsetJobId(scheduledJob.id);\n    \t\t// setType(\"\")\n    \t\tsetStepDeciderDashboard(6);\n    \t}\n   };\n    const findReadable = (userNotifyArr)=>{\n    \tconst onLyReadableItems = userNotifyArr.filter(item => item.read === false)\n    \t// console.log(\"onLyReadableItems ::::::::::::::::\",onLyReadableItems)\n    \t// console.log(\"userNotifyArr :::: \",userNotifyArr)\n    \t//  console.log(\"readable notifications in pages/Dashboard :::: \",onLyReadableItems.length)\n        setNotifyCount(onLyReadableItems.length)\n    }\n   \t/*const uniqueList = (userNotifyArrTemp,jobs)=>{\n\n        // console.log(\"this code is running evertime\")\n        let userNotifyArr =  []\n        for(var k in userNotifyArrTemp ){\n            if(userNotifyArrTemp[k].job){\n                if(jobs.includes(userNotifyArrTemp[k].job.id)){\n                    userNotifyArr.push(userNotifyArrTemp[k])\n                    const index = jobs.indexOf(userNotifyArrTemp[k].job.id);\n                    if (index > -1) {\n                          jobs.splice(index, 1);\n                        }\n                }\n            }\n        }\n        const onLyReadableItems = userNotifyArr.filter(item => item.read === false)\n\n        setNotifyCount(onLyReadableItems.length)\n        console.log(notifyCount ,\"the notify count :::::::::::::\")\n        return userNotifyArr\n    } */\n\n \tuseEffect(() => {\n    // console.log(\"i am inside this function0-00-------000\")\n    // initalLoad = false\n    if (openNotification) {\n         \tsetNotifyCount(0);\n      setShowNotificationBadge(false);\n      // console.log(notifyCount)\n      sethideBadge(true);\n    }\n  }, [openNotification]);\n\n\t  useEffect(() => {\n    if (hideBadge) {\n      setNotifyCount(0);\n      setShowNotificationBadge(false);\n    }\n  }, [hideBadge]);\n\n\t  useEffect(() => {\n\n\t  \tsocket.on('scheduled-call-alert', (data) => {\n\t  \t\tif (user && user.customer && data.receiver === user.customer.id) {\n\t  \t\t\tsetScheduledBadge(true);\n\t  \t\t\tsetScheduledJob(data.job);\n\t  \t\t}\n\t  \t});\n\t  }, [socket, user]);\n\n  \tuseEffect(() => {\n  \t\tconsole.log('Notifications changed');\n    if (allNotifications && user) {\n        \tconst userNotifyArrTemp = allNotifications.filter(item => (item && user && item.user) && item.user.id === user.id).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n        \t// let jobIds = userNotifyArrTemp.map(item => (item.job && item.job.id ? item.job.id : 0))\n        \t// let otherNotifications = allNotifications.filter(item => item.job === '')\n        \t/* const unique = (value, index, self) => {\n\t              return self.indexOf(value) === index\n\t            } */\n        \t// const jobs = jobIds.filter(unique)\n\n\n    \t  \tconst userNotifyArr = allNotifications\n    \t  \tfindReadable(userNotifyArrTemp)\n    \t  \tfor(let i=0; i <= userNotifyArr.length-1;i++){\n\n                let old_time = new Date(userNotifyArr[i]['createdAt'])\n                let now_time = new Date();   \n                var diffMs = (now_time - old_time); // milliseconds between now & Christmas\n                var diffDays = Math.floor(diffMs / 86400000); // days\n                var diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours\n                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes\n\n                if(diffDays > 0){\n                     userNotifyArr[i]['time'] = diffDays.toString() +' days ago'\n                }else if(diffHrs > 0){\n                     userNotifyArr[i]['time'] = diffHrs.toString() +' hours ago'\n                }else if(diffMins > 0){\n                     userNotifyArr[i]['time'] = diffMins.toString() +' minutes ago'\n                }else{\n                     userNotifyArr[i]['time'] = 'Few seconds ago'\n                }                \n       \t\t} \n       \t\t// if(userNotifyArr.length === 1 && (userNotifyArr[0].user.userType === \"technician\" || userNotifyArr[0].user.userType === \"customer\")  &&userNotifyArr[0].type === \"from_admin\" && userNotifyArr[0].read===false ){\n          //   console.log(\"the notify id :::::\",userNotifyArr[0].id)\n          //   // setReadNotificationId(userNotifyArr[0].id)\n       \t\t// \t firstRegisterModal(userNotifyArr[0].title,userNotifyArr[0].id)\n       \t\t// }\n       \t\t\n        \tsetNotificationsArr(userNotifyArr)\n            initialLoad = false\n            setShowNotificationBadge(true)\n      \n    } else {\n      setNotifyCount(0);\n    }\n\n  }, [allNotifications]);\n\n  useEffect(()=>{\n    console.log(\"stepDeciderForDashboard ::::::: \",stepDeciderForDashboard)\n  },[stepDeciderForDashboard])\n  useEffect(() => {\n\t    (async () => {\n\t    \tif (user) {\n\t        \tconst res = await SoftwareApi.getSoftwareList();\n\t        \tif (res && res.data) {\n\t          \t\tsetSoftwareList(res.data);\n\n\t          \t\tif (res.data && res.data.length > 0) {\n\t\t\t            const sidArr = (user.technician && user.technician.expertise ? user.technician.expertise.map(a => a.software_id) : []);\n\t\t\t            let wTime = '';\n\n\t\t\t            if (sidArr.length === 1) {\n\t\t\t                const waitResult = res.data.filter(obj => obj.id === sidArr[0]);\n\t\t\t                if (waitResult.length > 0 && waitResult[0].estimatedWait) {\n\t\t\t                    wTime = waitResult[0].estimatedWait.split('-')[0];\n\t\t\t                    setEstimatedWaitTime(wTime);\n\t\t\t                }\n\t\t\t            } else if (sidArr.length > 1) {\n\t\t\t                let softwareWithMaxTime;\n\t\t\t                softwareWithMaxTime = res.data.reduce((max, x) => {\n\t\t\t                    if (sidArr.indexOf(x.id) !== -1) {\n\t\t\t                        // console.log(\">>>estimatedWait>>>>>\",x)\n\t\t\t                        const waitValX = (x && x.estimatedWait ? String(x.estimatedWait).split('-')[0] : 0);\n\t\t\t                        const waitValM = (max && max.estimatedWait ? String(max.estimatedWait).split('-')[0] : 0);\n\t\t\t                        return waitValX > waitValM ? x : max;\n\t\t\t                    }\n\t\t\t                    \treturn false;\n\t\t\t                });\n\n\t\t\t                if (softwareWithMaxTime && softwareWithMaxTime.estimatedWait) {\n\t\t\t                    wTime = String(softwareWithMaxTime.estimatedWait).split('-')[0];\n\t\t\t                    setEstimatedWaitTime(wTime);\n\t\t\t                }\n\t\t\t            }\n\t\t\t        }\n\t        \t}\n\t        } else {\n\t        \thistory.push('/login');\n\t        }\n    \t})();\n  \t}, [history, user]);\n\n  useEffect(() => {\n    if (user) {\n      // console.log(\"initialLoad ::: \",initialLoad)\n      if (initialLoad) {\n        console.log('Notifications working  refetch ::::');\n        fetchNotifications({ user: user.id });\n      }\n      /* if(!user.verified){\n\t\t\t\tsetUserVerified(false);\n\t\t\t} */\n\n      // CustomerApi.createCustomer({\n\t\t //        user:\"usr_ftkfxv4RrcepDsKcf\",\n\t\t //        phoneNumber:\"+19172020848\",\n\t\t //        extension:\"\",\n\t\t //        billing: {\n\t\t //            cardNumber:\"\",\n\t\t //            expiryDate:\"\",\n\t\t //            nameOnCard:\"\",\n\t\t //            address:\"\",\n\t\t //            cvv:\"\",\n\t\t //        },\n\t\t //        language:\"English\",\n\t\t //        additionalLanguage:\"\",\n\t\t //        status:\"completed\"\n\t\t //    });\n    }\n\n  }, [fetchNotifications, user]);\n\n\n  useEffect(() => {\n    const ele = document.querySelector('.fb_reset .fb_iframe_widget .fb_customer_chat_bounce_out_v2');\n    const openCss = 'width: 399px; padding: 0px; position: fixed; z-index: 2147483646; border-radius: 16px; top: auto; background: none; bottom: 84px; max-height: calc(100% - 84px); right: 4px; marginRight: 12px; visibility: visible; min-height: 300px; height: 438px;';\n    // let closeCss = `width: 399px; padding: 0px; position: fixed; z-index: 2147483646; border-radius: 16px; top: auto; background: none; bottom: 84px; max-height: 0px; right: 4px; margin-right: 12px; visibility: visible; min-height: 0px; height: 438px;`\n    if (user) {\n      // setFromEmail(true)\n\n      // if(user.customer  === undefined){\n      // \trefetch()\n      // }\n      // if(user.technician === undefined){\n      // \trefetch()\n      // }\n      if (user.userType === 'technician') {\n        FetchDetails({ to: user.id });\n      } else {\n        FetchDetails({ user: user.id });\n      }\n    }\n\n    if (stepDeciderForDashboard === 4 || stepDeciderForDashboard === 5) {\n      setActiveMenu('settings');\n    }\n    if (stepDeciderForDashboard === 2) {\n      setActiveMenu('job-reports');\n    }\n   \n    if (stepDeciderForDashboard === 7) {\n      // console.log(ele)\n      if (ele != null) {\n        ele.style = '';\n        // console.log(\"inside if ::: \",ele)\n        ele.style = openCss;\n      }\n    }\n  }, [stepDeciderForDashboard, user]);\n\n  /* const handleLogoClick = (e) => {\n\t\te.preventDefault();\n\t\tsetcurrentStep(0);\n\t\tsetActiveMenu('home');\n\t} */\n\n  useEffect(()=>{\n\t\t  setHearAboutUsModal(false);\n      handleNewCustomer();\n  },[]);\n\n  /**\n\t * This function handles the response of customer from modal of Hear About Us after new signup & saves it to database\n\t * @author : Kartik\n\t **/\n  const handleWhereToCome = async () => {\n\t\tlet theVar = '';\n\t\tif (customerFeedWhereToCome == false) {\n\t\t\topenNotificationWithIcon('error', 'Error', 'Please select an option');\n\t\t\treturn;\n\t\t}\n\t\tif (customerFeedWhereToCome == 'Others' && otherComeFeedBack == '') {\n\t\t\tsetShowWhereToFieldError(true);\n\t\t\tsetWhereHeComeFrom('');\n\t\t\treturn;\n\t\t}\n\t\tif (customerFeedWhereToCome == 'Others') {\n\t\t\ttheVar = otherComeFeedBack;\n\t\t\tsetWhereHeComeFrom(otherComeFeedBack);\n\t\t} else {\n\t\t\ttheVar = customerFeedWhereToCome;\n\t\t\tsetWhereHeComeFrom(customerFeedWhereToCome);\n\t\t}\n\t\tif (user && user.userType == 'customer') {\n\t\t\tconst dataToSaveinSource = {\n\t\t\t\tuser: user.id,\n\t\t\t\tsource: theVar,\n\t\t\t};\n\t\t\tconst apiCall = await customerSourceApi.createCustomerSource(dataToSaveinSource);\n\t\t}\n\n\t\tsetHearAboutUsModal(false);\n\t\thandleRefModal()\n\t};\n\n  const handleCustomerFeed = e => {\n\t\tsetOtherComeFeedBack('');\n\t\tsetShowWhereToFieldError(false);\n\t\tsetCustomerFeedWhereToCome(e.target.value);\n\t};\n\n  const handleNewCustomer = async () => {\n\t\tif (user && user.userType == 'customer') {\n      const response = await customerSourceApi.isCustomerExist({ user_id: user.id });\n\t\t\tconsole.log('response :::::', response);\n\t\t\tif (!response.sourceAlreadyGiven) {\n        setTimeout(setHearAboutUsModal(false),3000);\n\t\t\t}\n\t\t}\n\t};\n\tuseEffect(()=>{\n\t\tsocket.on('unread-messages-notification',(data)=>{\n      if(user && user?.userType == 'technician' && data){\n        if(data?.technician == user?.technician?.user){\n          console.log(\"unread-messages-notification technician\",{data : data ,user : user?.technician?.id })\n          setNewMessageAlert(true);\n        }\n\t\t\t}\n\t\t\tif(user && user?.userType == 'customer' && data){\n        if(data?.customer == user?.customer?.user){\n          console.log(\"unread-messages-notification customer\",{data : data ,user : user?.customer?.id })\n          setNewMessageAlert(true);\n        }\n\t\t\t}\n\t\t})\n\n    socket.on('refresh-twilio-unread-messages-frontend',({customerUserId,technicianUserId})=>{\n      console.log(\"customer's and technician's ids\", {customerUserId,technicianUserId})\n      // if(user.id === customerUserId || user.id === technicianUserId){\n      if(user.id === customerUserId || user.id === technicianUserId){\n        socket.emit(\"calculate-unread-twiio-messages\",{user})\n      }\n    })\n\t},[socket])\n\nif(showLoader) return (<Loader />) \nreturn (\n\n    <Container fluid>\n      <Row className=\"newJs\">\n\n        <Col md=\"12\" className=\"mobile-header-outer\">\n          <Link to=\"/\" >\n            <Image src=\"https://winkit-software-images.s3.amazonaws.com/geeker_logo.png\" alt=\"tetch\" />\n          </Link>\n          <button\n            className=\"menu-toggle-bar\"\n            onClick={() => {\n              menuSidebarHandle();\n            }}\n          >\n            <FontAwesomeIcon icon={faBars} />\n          </button>\n\n          { user && user.userType === 'technician' && (\n            <button\n              className=\"profile-toggle-bar\"\n              onClick={() => {\n\t\t\t profileSidebarHandle();\n              }}\n            >\n              <FontAwesomeIcon icon={faBars} />\n            </button>\n\t\t  )}\n        </Col>\n      {(sessionStorage.getItem(\"hideHearAboutUsModal\"))\n        ? <></>\n        : <Modal title=\"How did you hear about us ?\" visible={hearAboutUsModal} closable={false} destroyOnClose={false} className=\"change-feedback-modal title-bold\" footer={<Button className=\"btn app-btn\" key=\"submit\" onClick={handleWhereToCome}>Submit</Button>}>\n          <div className=\"section_three\">\n            <div className=\"section_sub_three\">\n              <Radio.Group onChange={handleCustomerFeed} className=\"radioBoxes\" value={customerFeedWhereToCome}>\n                <Radio value=\"Facebook\">\n                  Facebook\n                </Radio>\n                <br />\n                <Radio value=\"Twitter\">\n                  Twitter\n                </Radio>\n                <br />\n                <Radio value=\"LinkedIn\">\n                  LinkedIn\n                </Radio>\n                <br />\n                <Radio value=\"friend\">\n                  Friend\n                </Radio>\n                <br />\n                <Radio value=\"Others\">\n                  Others please specify\n                </Radio>\n              </Radio.Group>\n            </div>\n            {customerFeedWhereToCome == 'Others' && (\n              <div className=\"section_five\">\n                <div className=\"section_sub_five col-12 ml-0 p-0 mt-4 form-group\">\n                  <input spellCheck rows={4} className=\"form-control\" onChange={(e) => { setShowWhereToFieldError(false); setOtherComeFeedBack(e.target.value); }} id=\"textarea\" />\n                  {showWhereToFieldError && <p className=\"m-0 p-0\" style={{ color: 'red' }}> Required Field</p>}\n                </div>\n              </div>\n            )}\n          </div>\n        </Modal>\n      }\n      {/*<UserReviewModal user={user} />*/}\n        <Col\n          xl=\"2\"\n          className={\n            menuSidebar ? 'sidebar-left-outer active' : 'sidebar-left-outer'\n          }\n        >\n          <LeftSidebar\n            user={user}\n            toggle={menuSidebarHandle}\n            setcurrentStep={setStepDeciderDashboard}\n            activeMenu={activeMenu}\n            setActiveMenu={setActiveMenu}\n            newMessageAlert={newMessageAlert}\n            \n          />\n          <p className='my-app-version'> V{VERSION}</p>\n\n        </Col>\n\n        {user && user.userType === 'technician' && (\n          <Col xl=\"7\">\n            <DashboardData user={user} sethideBadge={sethideBadge} fromEmail={fromEmail} scheduledBadge={scheduledBadge} currentStep={stepDeciderForDashboard} setcurrentStep={setStepDeciderDashboard} allNotifications={allNotifications} softwareList={softwareList} setActiveMenu={setActiveMenu} initialLoad={initialLoad} scheduledJob={scheduledJob} handleScheduledJob={handleScheduledJob} showNotificationBadge={showNotificationBadge} setShowNotificationBadge={setShowNotificationBadge} notifyCount={notifyCount} setOpenNotification={setOpenNotification} hideBadge={hideBadge} setjobId={setJobId} openNotification={openNotification} estimatedWaitTime={estimatedWaitTime} setEstimatedWaitTime={setEstimatedWaitTime} jobId={jobId} type={typeForDetails} setType={setTypeForDetails} />\n          </Col>\n        )}\n        {user && user.userType === 'customer' && (\n          <Col xl=\"10\">\n            <DashboardData user={user} sethideBadge={sethideBadge} scheduledBadge={scheduledBadge} currentStep={stepDeciderForDashboard} setcurrentStep={setStepDeciderDashboard} allNotifications={notificationsArr} softwareList={softwareList} setActiveMenu={setActiveMenu} initialLoad={initialLoad} scheduledJob={scheduledJob} handleScheduledJob={handleScheduledJob} showNotificationBadge={showNotificationBadge} setShowNotificationBadge={setShowNotificationBadge} notifyCount={notifyCount} setOpenNotification={setOpenNotification} hideBadge={hideBadge} setjobId={setJobId} openNotification={openNotification} estimatedWaitTime={estimatedWaitTime} setEstimatedWaitTime={setEstimatedWaitTime} jobId={jobId} type={typeForDetails} setType={setTypeForDetails} />\n          </Col>\n        )}\n\n        { user && user.userType === 'technician' && (\n          <Col\n            xl=\"3\"\n            className={\n              profileSidebar\n                ? 'sidebar-right-outer pt-4 px-4 px-md-5 active'\n                : 'sidebar-right-outer pt-4 px-4 px-md-5'\n            }\n          >\n            <RightSidebar\n              user={user}\n              toggle={profileSidebarHandle}\n              sethideBadge={sethideBadge}\n              openNotification={openNotification}\n              setOpenNotification={setOpenNotification}\n              setcurrentStep={setStepDeciderDashboard}\n              setjobId={setJobId}\n              setType={setTypeForDetails}\n              setActiveMenu={setActiveMenu}\n            />\n          </Col>\n        )}\n\n      </Row>\n            <BusinessModal showBusinessModal={showBusinessModal} setShowBusinessModal={setShowBusinessModal} user={user} />\n            <AskIfBusinessAccountModal user={user} showUpdateBusinessNameModal={showUpdateBusinessNameModal} setShowUpdateBusinessNameModal={setShowUpdateBusinessNameModal} />\n    </Container>\n  );\n};\nconst Image = style.img`\n  \tdisplay: block;\n  \twidth: 120px;\n\tmargin:auto;\n`;\nexport default MainPage;\n",
                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\index.js"
                                                },
                                                {
                                                    "type": "file",
                                                    "name": "landingPage.js",
                                                    "fileData": "import React, { useEffect} from 'react';\nimport { LANDING_PAGE_URL } from '../../constants';\nconst LandingPage = ()=>{\n\n\tuseEffect(()=>{\n\t\twindow.location.href =  LANDING_PAGE_URL;\n\t},[])\n\n\treturn (\n\n\t\t<>\n\t\t\t{/*<iframe src={\"https://www.geeker.co/\"} style={{height:\"100%\", width:\"100%\"}} title=\"Geeker\"></iframe>*/}\n\t\t\t{/*<iframe src={\"http://137.184.20.103/?p=\"+PLATFORM} style={{height:\"100%\", width:\"100%\"}} width=\"900\" height=\"700\" allow=\"fullscreen\" title=\"Geeker\"></iframe>*/}\n\t\t\t\n\t\t</>\n\t)\n}\n\nexport default LandingPage;\n",
                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\landingPage.js"
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "steps",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "activeTechnicians.js",
                                                            "fileData": "import React,{useEffect, useState} from 'react';\nimport { Table } from 'antd';\nimport { Col} from 'react-bootstrap';\nimport {useServices} from '../../../context/ServiceContext';\nimport Loader from '../../../components/Loader';\nconst ActiveTechnicianTable = ({user})=>{\n\tconst [columns,setColumns] = useState([\n\t\t  {\n\t\t    title: 'Name',\n\t\t    dataIndex: 'name',\n\t\t    key: 'name',\n\t\t  },\n\t\t  {\n\t\t    title: 'Softwares',\n\t\t    dataIndex: 'software',\n\t\t    key: 'software',\n\t\t  },\n\t\t  {\n\t\t    title: 'Status',\n\t\t    dataIndex: 'status',\n\t\t    key: 'address',\n\t\t  }\n\t])\n\tconst [data,setData] = useState([])\n\tconst [showLoader, setShowLoader] = useState(true);\n\tconst {getOnlineTechnicians,onlineTechs} = useServices()\n\n\tuseEffect(()=>{\n\t\tsetData(onlineTechs)\n\t},[onlineTechs])\n\n\tconst fetchOnlineTechs=async ()=>{\n\t\tlet softwares = user?.technician?.expertise.map(ele => ele.software_id)\n\t\tlet techData  = await getOnlineTechnicians({\"softwares\":softwares,\"userId\":user.id})\n\t\tsetShowLoader(false)\n\t\tconsole.log(\"techData>>>>>>\",techData)\n\t}\n\n\tuseEffect(()=>{\n\t\tfetchOnlineTechs()\n\t},[])\n\n\treturn (\n       <>\n        \t<Col xs=\"12\" className=\"\">\n\t    \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\t        \t<Col xs=\"12\" className=\"pt-5 pb-3\">\n\t                <h1 className=\"large-heading\">Active Technicians</h1>\n\t            </Col>\n\t\t\t\t\t<Col xs=\"12\" className=\"ant-table-structure-outer table-responsive\"> \n\t                    <div className=\"highlight-background\"></div>\n\t                    <Table\n\t                        bordered={false}\n\t                        pagination={false}\n\t                        columns={columns}\n\t\t\t\t\t\t\tdataSource={data.map((item, index) => ({ ...item, key: index }))}\n\t                    />   \n\t\t            </Col>\n\t        </Col>\n    \t</>\t\t\n\n\t)\n};\nexport default ActiveTechnicianTable;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\activeTechnicians.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "AskIfBusinessAccountModal.js",
                                                            "fileData": "import React, { useEffect, useState } from \"react\"\nimport { Modal, Checkbox } from 'antd';\nimport HeadingText from \"pages/Customer/BusinessPlan/Components/HeadingText\";\nimport InputField from \"pages/Customer/BusinessPlan/Components/InputField\";\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport { openNotificationWithIcon } from \"utils\";\nimport * as CustomerApi from '../../../api/customers.api';\nimport * as UserApi from '../../../api/users.api';\n\nconst AskIfBusinessAccountModal = ({user, showUpdateBusinessNameModal, setShowUpdateBusinessNameModal}) => {\n\n    const [checkBoxValue, setCheckBoxValue] = useState(true)\n    const [businessName, setBusinessName] = useState(\"\")\n    const [showSpinner, setShowSpinner] = useState(false)\n\n    useEffect(()=>{\n        console.log(\"My conosle for user at AskIfBusinessAccountModal\")\n    },[])\n\n    const handleCheckboxChange = (e) => {\n        setCheckBoxValue(e.target.checked)\n    };\n\n    const handleBusinessNameOnChange = (e) => {\n        setBusinessName(e.target.value)\n    }\n\n    const handleSubmitForm = async () => {\n        setShowSpinner(true)\n        console.log(\"My console for \", checkBoxValue, businessName)\n        const businessNameInput = businessName.trim()\n\n        // Checking if checkbox is checked and business name is not provided.\n        if(checkBoxValue && businessNameInput === \"\"){\n            setShowSpinner(false)\n            openNotificationWithIcon(\"error\", \"Info\", \"Please either provide your business name or uncheck the checkbox to continue\")\n            return\n        }\n\n        let dataToUpdate = {}\n\n        // If checkbox is checked\n        if(checkBoxValue){\n            dataToUpdate = {\n                                userId:user.id,\n                                isBusinessTypeAccount:true,\n                                businessName: businessName\n                            }\n        }\n\n        // If checkbox is unchecked\n        if(!checkBoxValue){\n            dataToUpdate = {\n                                userId:user.id,\n                                isBusinessTypeAccount:false,\n                                businessName: \"\"\n                            }\n        }\n\n        const updateUserRes = await UserApi.updateUser(dataToUpdate)\n        if(updateUserRes){\n            openNotificationWithIcon(\"success\", \"Success\", \"Data saved successfuly!\")\n            setShowSpinner(false)\n        }\n        setShowUpdateBusinessNameModal(false)\n    }\n\n    return<div>\n        <Modal \n            visible={showUpdateBusinessNameModal} \n            closable={false} \n            destroyOnClose={false} \n            className=\"p-30-50 business-modal\" \n            footer={[]}\n            width={700}\n        >\n            <div className=\"d-flex justify-content-center flex-column align-items-center text-center\">\n\n                <div className=\"d-flex justify-content-center w-100p mb-5\">\n                    <HeadingText firstBlackText={\"Please add your business name\"} />\n                </div>\n\n                <Checkbox className=\"personalUseCheckbox mb-2\" onChange={handleCheckboxChange} checked={checkBoxValue}>\n                    <span>\n                        I\u2019m using this account for business use \n                    </span>\n                </Checkbox>\n\n                <InputField placeholder={\"Business Name\"} divPropClass={\"\"} onChange={handleBusinessNameOnChange} value={businessName} disable={!checkBoxValue} />\n                <span className=\"no-business-text color-red-imp mb-4\" >You can't undo once converted to business account</span>\n                <div className=\"ask-if-busines-account-modal-btn-div mb-15\">\n                    <BasicButton btnTitle={\"Submit\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} onClick={handleSubmitForm} disable={showSpinner} showSpinner={showSpinner} />    \n                </div>\n            </div>   \n        </Modal>\n    </div>\n}\n\nexport default AskIfBusinessAccountModal",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\AskIfBusinessAccountModal.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "billingReports.js",
                                                            "fileData": "import React, { useEffect, useState, useRef, createRef } from \"react\";\nimport { Select, Table, Pagination, DatePicker } from \"antd\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { useAuth } from \"../../../context/authContext\";\nimport { useJob } from \"../../../context/jobContext\";\nimport { useServices } from \"../../../context/ServiceContext\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPrint } from \"@fortawesome/free-solid-svg-icons\";\nimport moment from \"moment\";\nimport Loader from \"../../../components/Loader\";\nimport { useBillingDetails } from \"../../../context/billingDetailsContext\";\nimport mixpanel from \"mixpanel-browser\";\nimport ReactToPrint from \"react-to-print\";\nimport Invoice from \"../../../components/Result/invoice\";\nimport { isLiveUser } from \"../../../utils\";\nimport * as BillApi from '../../../api/billingDetails.api';\nimport * as UserApi from '../../../api/users.api';\n// const { Option } = Select;\n\nconst sortOptions = [\n  <Select.Option key={\"asc\"} value=\"asc\">\n    Withdrawals: Low to high\n  </Select.Option>,\n  <Select.Option key={\"desc\"} value=\"desc\">\n    Withdrawals: High to low\n  </Select.Option>,\n];\nlet initialLoad = true;\nlet DATE_OPTIONS = {\n  weekday: \"short\",\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n};\n\nconst BillingReportTech = ({ setcurrentStep, setjobId, setType }) => {\n  const { job, fetchJob } = useJob();\n  const { user } = useAuth();\n  let liveUser = isLiveUser(user);\n  const { totalTimeSeconds, totalEarnings } = useServices();\n  // let tech = user.technician;\n  const [allBillings, setAllBillings] = useState([]);\n  const [allBillingsWithoutFilters, setAllBillingsWithoutFilters] = useState(\n    []\n  );\n  const [showLoader, setShowLoader] = useState(true);\n  const { billingDetailsList } = useBillingDetails();\n  let invoiceRefs = useRef();\n  const [chargeData, setChargeData] = useState(\"\");\n  const [jobDataToPrint, setJobDataToPrint] = useState({});\n  const [transactionTypeOptions, setTransactionTypeOptions] = useState([]);\n  const [selectedTransactionType, setSelectedTransactionType] = useState(\"\");\n  const [selectedFilterDate, setSelectedFilterDate] = useState(\"\");\n  const [transactionSelected, settransactionSelected] = useState(\"All\");\n  const [selectedSort, setselectedSort] = useState(\"\");\n  const [totalData, setTotalCount] = useState(1);\n  const [fromDate, setFromDate] = useState(null);\n  const [toDate, setToDate] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [theDefDates, setMainDates] = useState([]);\n  const [subscriptionData, setSubscriptionData] = useState({});\n  const [userIsOwner,setUserIsOwner] = useState(true)\n\tconst [ownerHaveSubscription,setOwnerHaveSubscription] = useState(false)\n\tconst [ownerInfo,setOwnerInfo] = useState()\n  let dateFilterRef = useRef();\n  const { RangePicker } = DatePicker;\n  // console.log(totalTimeSeconds,\">>>>\")\n\n  if (user) {\n    DATE_OPTIONS[\"timeZone\"] = user.timezone;\n  }\n  const runFilters = async () => {\n    let filters = {};\n    if (fromDate !== null && toDate !== null) {\n      filters.createdAt = { $gte: fromDate, $lte: toDate };\n    }\n    if (transactionSelected !== \"\" && transactionSelected !== \"All\") {\n      filters.transaction_type = transactionSelected;\n    }\n\n    if (transactionSelected && transactionSelected == \"not set\") {\n      filters.transaction_type = \"\";\n    }\n    filters.customer_user_id = user.id;\n    filters.page = 1;\n    filters.pageSize = 10;\n    // console.log('filters.>>>>>',filters)\n    let detailsList = await billingDetailsList(filters);\n    setAllBillings(detailsList.data);\n    setTotalCount(detailsList.totalCount);\n  };\n\n  useEffect(() => {\n    // console.log(\"toDate :::: \",toDate)\n    if (initialLoad === false) {\n      // console.log(\"inside filter runnig funcs\")\n      runFilters();\n    }\n    initialLoad = false;\n  }, [transactionSelected, fromDate, toDate]);\n\n  useEffect(() => {\n    (async () => {\n      if(user && user.ownerId && user.ownerId !== null){\n\t\t\t\tsetUserIsOwner(false)\n\t\t\t\tconst ownerInfoObject = await UserApi.getUserById(user.ownerId)\n\t\t\t\tif(ownerInfoObject){\n\t\t\t\t\tsetOwnerInfo(ownerInfoObject)\n\t\t\t\t\tif(ownerInfoObject.customer && ownerInfoObject.customer.subscription){\n\t\t\t\t\t\tsetOwnerHaveSubscription(true)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n      let detailsList = await billingDetailsList({\n        customer_user_id: user.id,\n        page: 1,\n        pageSize: 10,\n      });\n      if (detailsList.data && detailsList.data) {\n        // console.log('detailsList for billing::: ',detailsList)\n        invoiceRefs = detailsList.data.map(() => createRef());\n        setAllBillings(detailsList.data);\n        setTotalCount(detailsList.totalCount);\n        setAllBillingsWithoutFilters(detailsList.data);\n\n        const unique_transaction_type = [\n          ...new Set(detailsList.data.map((item) => item.transaction_type)),\n        ];\n        // console.log(\"unique_transaction_type\",unique_transaction_type)\n        var filtered = unique_transaction_type.filter(function (el) {\n          return el != \"\";\n        });\n        filtered.push(\"not set\");\n        setTimeout(function () {\n          setTransactionTypeOptions(filtered);\n          setShowLoader(false);\n        }, 1000);\n      } else {\n        setShowLoader(false);\n      }\n    })();\n  }, []);\n\n  const handlePagination = async (page, pageSize) => {\n    setShowLoader(true);\n    // console.log(\"new issue \")\n    setCurrentPage(page);\n    let filters = {};\n    filters[\"customer_user_id\"] = user.id;\n    filters[\"page\"] = page;\n    filters[\"pageSize\"] = pageSize;\n\n    if (fromDate !== null && toDate !== null) {\n      filters.createdAt = { $gte: fromDate, $lte: toDate };\n    }\n    if (transactionSelected !== \"\" && transactionSelected !== \"All\") {\n      filters.transaction_type = transactionSelected;\n    }\n\n    if (transactionSelected && transactionSelected == \"not set\") {\n      filters.transaction_type = \"\";\n    }\n\n    let detailsList = await billingDetailsList(filters);\n    setAllBillings(detailsList.data);\n    setShowLoader(false);\n  };\n  const sortData = (val) => {\n    setselectedSort(val);\n    let tempArr = [...allBillings];\n    if (val === \"asc\") {\n      tempArr.sort(function (a, b) {\n        return a.total_amount - b.total_amount;\n      });\n    } else {\n      tempArr.sort(function (a, b) {\n        return b.total_amount - a.total_amount;\n      });\n    }\n    // console.log(\"tempArr ::: \",tempArr)\n    setAllBillings(tempArr);\n  };\n\n  const handleFilterClear = () => {\n    setMainDates([null, null]);\n\n    // dateFilterRef.current.value = \"\"\n\n    settransactionSelected(\"All\");\n    setselectedSort(\"\");\n    // console.log(\"setAllBillings :::::::::::\",setAllBillings)\n    setAllBillings(allBillingsWithoutFilters);\n    setFromDate(null);\n    setToDate(null);\n  };\n\n  const filterData = (val, type) => {\n    setShowLoader(true);\n    settransactionSelected(val);\n    let tempArr = [];\n    if (type === \"transaction_type\") {\n      let billingData = allBillingsWithoutFilters;\n\n      let filterDate = \"\";\n      if (selectedFilterDate !== \"\") {\n        filterDate = new Date(selectedFilterDate);\n        filterDate = filterDate.setHours(0, 0, 0, 0);\n      }\n\n      if (val === \"All\") {\n        setSelectedTransactionType(\"\");\n        if (filterDate) {\n          filterByDateInit(filterDate);\n        } else {\n          // setAllBillings([...allBillingsWithoutFilters])\n          setShowLoader(false);\n        }\n      } else {\n        setSelectedTransactionType(val);\n        billingData.map((b, i) => {\n          if (b.transaction_type === val) {\n            if (filterDate) {\n              let d = new Date(b.createdAt);\n              d = d.setHours(0, 0, 0, 0);\n              if (filterDate === d) {\n                tempArr.push(b);\n              }\n            } else {\n              tempArr.push(b);\n            }\n          }\n          if (i + 1 === billingData.length) {\n            setAllBillings(tempArr)\n            setShowLoader(false);\n          }\n          return true;\n        });\n      }\n    }\n    setShowLoader(false)\n  };\n\n  const filter_date = (dates) => {\n    setMainDates(dates);\n    if (dates != null) {\n      if (dates[0] != null && dates[1] != null) {\n        const start_date = moment(dates[0]).format(\"YYYY-MM-DD\");\n        const end_date = moment(dates[1]).format(\"YYYY-MM-DD\");\n        const from_dt = `${start_date} 00:00:00`;\n        const to_dt = `${end_date} 23:59:59`;\n        setFromDate(from_dt);\n        setToDate(to_dt);\n      }\n    } else {\n      setFromDate(null);\n      setToDate(null);\n    }\n  };\n\n  const hms_convert = (t) => {\n    if (t) {\n      let d = Number(t);\n      let h = Math.floor(d / 3600);\n      let m = Math.floor((d % 3600) / 60);\n      let s = Math.floor((d % 3600) % 60);\n      let hFormat = h <= 9 ? \"0\" + h : h;\n      let mFormat = m <= 9 ? \"0\" + m : m;\n      let sFormat = s <= 9 ? \"0\" + s : s;\n      let hDisplay = h > 0 ? hFormat + \":\" : \"00:\";\n      let mDisplay = m > 0 ? mFormat + \":\" : \"00:\";\n      let sDisplay = s > 0 ? sFormat : \"00\";\n      return hDisplay + mDisplay + sDisplay;\n    } else {\n      return \"00:00:00\";\n    }\n  };\n  const push_to_job_detail = (e) => {\n    // console.log(\"push_to_job_detail>>>>>>>>>\",e.currentTarget.name)\n    const jobId = e.currentTarget.name;\n    // fetchJob(jobId)\n    setjobId(jobId);\n    setType(\"details\");\n    mixpanel.identify(user.email);\n    if (user.userType === \"technician\") {\n      mixpanel.track(\"Technician  - Job details\", { JobId: jobId });\n    } else {\n      mixpanel.track(\"Customer - Job details\", { JobId: jobId });\n    }\n    setcurrentStep(6);\n  };\n\n  /**\n * This function is updated to get the billing report data for job to show total amount in invoice according to the billing report.\n * @params : d(Type:object)\n * @response: no response\n * @author : Manibha\n **/\n  const getDataToPrint = async (d) => {\n\tconst billData =  await BillApi.getBillingDetailsByJob(d.id) \n\tif(billData){\n\t\tsetChargeData(billData);\n\t}\n\tawait fetchJob(d.id);\n\tif (d && d.payment_id && d.payment_id.includes(\"prod_\")) {\n\t\tsetSubscriptionData(user.customer.subscription);\n\t} \n  };\n\n  useEffect(() => {\n    if (job) {\n      // console.log(\"jobData\",job)\n      setJobDataToPrint(job);\n    }\n  }, [job]);\n\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createdAt\",\n      // width: '20%',\n      render: (text) => (\n        <span>{new Date(text).toLocaleTimeString(\"en-US\", DATE_OPTIONS)}</span>\n      ),\n    },\n    {\n      title: \"Tech\",\n      dataIndex: \"technician_user_id\",\n      // width: '20%',\n      render: (text) => (\n        <span>\n          {text\n            ? (text.firstName ? text.firstName : \"\") +\n              \" \" +\n              (text.lastName ? text.lastName : \"\")\n            : \"\"}\n        </span>\n      ),\n    },\n\n    {\n      title: \"Trans. Type\",\n      dataIndex: \"transaction_type\",\n      // width: '15%'\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"transaction_status\",\n      // width: '30%',\n      render: (text) => (\n        <span>{text && text === \"Processing\" ? text + \"...\" : text}</span>\n      ),\n    },\n    {\n      title: \"Withdrawals\",\n      dataIndex: \"job_id\",\n      // width: '30%',\n      render: (text) => <span> {(userIsOwner || !ownerHaveSubscription) ? \n                                                                          text.is_free_job && text.free_session_total ===0 \n                                                                              ? \n                                                                                \"$ 0\"\n                                                                              :\n                                                                                text.total_discounted_cost \n                                                                                  ? \n                                                                                   \"$\" + text.total_discounted_cost \n                                                                                  :  text.total_cost \n                                                                                      ? \"$\" + text.total_cost \n                                                                                      :\"$0.00\"\n                                                                          :\"NA\"}</span>,\n    },\n    {\n      title: \"Invoice\",\n      dataIndex: \"job_id\",\n      // width: '30%',\n      render: (text) => (\n        (userIsOwner || !ownerHaveSubscription) \n          ? \n            <div className=\"invoice-download-btn\" title=\"Print/Save Invoice\">\n              <ReactToPrint\n                trigger={() => <FontAwesomeIcon icon={faPrint} />}\n                content={() => invoiceRefs.current}\n                onBeforeGetContent={() => getDataToPrint(text)}\n                // onBeforeGetContent={(e) => changeInvoiceData(text)}\n              />\n              <div style={{ display: \"none\" }}>\n                <ComponentRef text={text} ref={invoiceRefs} />\n              </div>\n            </div>\n          : \n            \"NA\"\n      ),\n    },\n    {\n      title: \"Action\",\n      dataIndex: \"job_id\",\n      // width: '30%',\n      render: (text) => (\n        <span>\n          <button\n            className=\"btn app-btn app-btn-super-small normal-font\"\n            onClick={push_to_job_detail}\n            name={text && text.id ? text.id : text}\n          >\n            <span></span>View job\n          </button>\n        </span>\n      ),\n    },\n  ];\n  const ComponentRef = React.forwardRef((props, ref) => {\n    // console.log(\"prosp\",props)\n    return (\n      <div ref={ref}>\n        <Invoice\n          chargeData={chargeData}\n          job={jobDataToPrint}\n          subscriptionData={subscriptionData}\n          billingData={allBillings}\n        />\n      </div>\n    );\n  });\n\n  /*const filterByDate = (e) => {\n    \tif(e.target.value){\n    \t\tfilterByDateInit(e.target.value)\n    \t}else{\n    \t\tsetSelectedFilterDate('')\n    \t\tsetAllBillings(allBillingsWithoutFilters)\n    \t}\n    }*/\n\n  const filterByDateInit = (d) => {\n    setShowLoader(true);\n    setSelectedFilterDate(d);\n    if (allBillingsWithoutFilters.length > 0) {\n      let tempData = [];\n      let nowDate = new Date(d);\n      nowDate = nowDate.setHours(0, 0, 0, 0);\n\n      allBillingsWithoutFilters.map((b, i) => {\n        let d = new Date(b.createdAt);\n        d = d.setHours(0, 0, 0, 0);\n        if (nowDate === d) {\n          if (selectedTransactionType && selectedTransactionType !== \"\") {\n            if (b.transaction_type === selectedTransactionType) {\n              tempData.push(b);\n            }\n          } else {\n            tempData.push(b);\n          }\n        }\n        if (i + 1 === allBillingsWithoutFilters.length) {\n          setAllBillings(tempData);\n          setShowLoader(false);\n        }\n        return true;\n      });\n    } else {\n      setShowLoader(false);\n    }\n  };\n\n  return (\n    <>\n      <Col xs=\"12\" className=\"\">\n        <Loader\n          height=\"100%\"\n          className={showLoader ? \"loader-outer\" : \"d-none\"}\n        />\n\n        <Col xs=\"12\" className=\"pt-5 pb-3\">\n          <h1 className=\"large-heading\">Billing Reports</h1>\n        </Col>\n\n        <Col xs=\"12\" className=\"\">\n          <Col xs=\"12\" className=\"py-3 div-highlighter\">\n            <Row>\n              <Col md=\"4\" className=\"pl-5\">\n                <span className=\"d-block label-total-name\">\n                  Available Balance\n                </span>\n                <span\n                  className=\"d-block label-total-value\"\n                  title=\"Coming Soon...\"\n                >\n                  {(userIsOwner || !ownerHaveSubscription) ? \"$0.00\" : \"NA\"}\n                </span>\n              </Col>\n              <Col md=\"4\" className=\"pl-5 div-highlighter-border\">\n                <span className=\"d-block label-total-name\">\n                  Total Amount{\" \"}\n                  {user && user.userType === \"technician\" ? \"Earned\" : \"Billed\"}\n                </span>\n                <span className=\"d-block label-total-value\">\n                  {(userIsOwner || !ownerHaveSubscription) ? \n                                                              totalEarnings != null ? totalEarnings : 0\n                                                            : \n                                                              \"NA\"\n                  }\n                </span>\n              </Col>\n              <Col md=\"4\" className=\"pl-5\">\n                <span className=\"d-block label-total-name\">\n                  Total Amount of Time\n                </span>\n                <span className=\"d-block label-total-value\">\n                  {hms_convert(totalTimeSeconds)}\n                </span>\n              </Col>\n            </Row>\n          </Col>\n        </Col>\n\n        <Col md=\"12\" className=\"filters-outer py-4 mt-2\">\n          <Row>\n            <Col xs=\"12\" md=\"4\" lg=\"3\">\n              <label className=\"label-name mb-0-imp pb-3-imp\">Transaction Date</label>\n              <RangePicker\n                onCalendarChange={filter_date}\n                value={theDefDates}\n                className=\"form-control\"\n              />\n            </Col>\n            <Col xs=\"12\" md=\"4\" lg=\"3\">\n              <label className=\"label-name\">Transactions Type</label>\n              <Select\n                style={{ width: \"100%\" }}\n                placeholder=\"Transactions Type\"\n                value={transactionSelected}\n                onChange={(e) => {\n                  filterData(e, \"transaction_type\");\n                }}\n                className=\"form-control bottom-border-only filter-element\"\n              >\n                <Select.Option key={\"All\"} value={\"All\"}>\n                  All\n                </Select.Option>\n                {transactionTypeOptions.map((t,i) => {\n                  return (\n                    <Select.Option key={i} value={t}>\n                      {t}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            </Col>\n            <Col xs=\"1\"></Col>\n            <Col xs=\"12\" md=\"3\" className=\"float-right\">\n              <label className=\"label-name\">Sort By</label>\n              <Select\n                style={{ width: \"100%\" }}\n                placeholder=\"Sort By\"\n                onChange={sortData}\n                value={selectedSort}\n                className=\"form-control bottom-border-only filter-element\"\n              >\n                {sortOptions}\n              </Select>\n            </Col>\n            <Col className=\"text-right\" md=\"2\">\n              <label className=\"label-name\"> &nbsp; </label> <br />\n              <button\n                onClick={handleFilterClear}\n                className=\"app-btn app-btn-super-small\"\n              >\n                {\" \"}\n                <span></span> Clear{\" \"}\n              </button>\n            </Col>\n          </Row>\n        </Col>\n\n        <Col md=\"12\" className=\"py-4 mt-1 table-responsive\">\n          <Col xs=\"12\" className=\"table-structure-outer table-responsive\">\n            {/*<Table>\n\t\t            \t\t<thead>\n\t\t\t            \t\t<tr>\n\t\t\t            \t\t\t<th width=\"30\"></th>\n\t\t\t            \t\t\t<th className=\"label-name\">Date</th>\n\t\t\t            \t\t\t<th className=\"label-name\">Tech</th>\n\t\t\t            \t\t\t<th className=\"label-name\">Trans. Type</th>\n\t\t\t            \t\t\t<th className=\"label-name\">Status</th>\n\t\t\t            \t\t\t<th className=\"label-name\">Withdrawals</th>\n\t\t\t            \t\t\t<th width=\"30\"></th>\n\t\t\t            \t\t</tr>\n\t\t\t            \t</thead>\n\t\t\t            \t<tbody>\n\t\t            \t\t{ \n\t\t            \t\t\tallBillings.map((d,i)=>{\n\t\t            \t\t\t\treturn (\n\t\t            \t\t\t\t\t<tr key={i}>\n\t\t\t\t            \t\t\t\t<td width=\"30\"></td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value first-value\">{moment(d.date).format('DD/MM/YYYY')}</td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value\">{d.technician}</td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value\">{d.trans_type}</td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value\">{d.Status}</td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value\">${(d.Amount ? d.Amount : 0)}</td>\n\t\t\t\t            \t\t\t\t<td className=\"cell-value green-text font-weight-bold last-value\">${(d.Balance ? d.Balance : 0)}</td>\n\t\t\t\t            \t\t\t\t<td width=\"30\"></td>\n\t\t\t\t            \t\t\t</tr>\n\t\t            \t\t\t\t)\n\t\t            \t\t\t})\n\t\t            \t\t}\n\t\t            \t\t</tbody>\n\t\t            \t</Table>*/}\n            <Col xs=\"12\" className=\"ant-table-structure-outer table-responsive\">\n              <div className=\"highlight-background\"></div>\n              <Table\n                bordered={false}\n                pagination={false}\n                columns={columns}\n                dataSource={allBillings.map((item,index) => ({...item,key:index}))}\n              />\n              {totalData !== 0 && (\n                <Pagination\n                  style={{ float: \"right\", \"marginRight\": \"40px\" }}\n                  current={currentPage}\n                  onChange={handlePagination}\n                  total={totalData}\n                />\n              )}\n            </Col>\n          </Col>\n        </Col>\n      </Col>\n    </>\n  );\n};\nexport default BillingReportTech;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\billingReports.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "BusinessModal.js",
                                                            "fileData": "import React, { useEffect, useState } from \"react\"\nimport { Modal } from 'antd';\nimport HeadingText from \"pages/Customer/BusinessPlan/Components/HeadingText\";\nimport SubHeadingText from \"pages/Customer/BusinessPlan/Components/SubHeadeingText\";\nimport InputField from \"pages/Customer/BusinessPlan/Components/InputField\";\nimport BasicDropDown from \"../../../components/common/BasicDropDown\"\nimport BasicButton from \"components/common/Button/BasicButton\";\nimport {INDUSTRY, TEAM_SIZE} from \"../../../constants/index\"\nimport { openNotificationWithIcon } from \"utils\";\nimport { useSocket } from '../../../context/socketContext';\nimport * as CustomerApi from '../../../api/customers.api';\nimport * as BusinessApi  from '../../../api/businessDetails.api'\nconst BusinessModal = ({showBusinessModal, setShowBusinessModal, user}) => {\n\n    const [businessName, setBusinessName] = useState(user?.businessName)\n    const [businessWebsite, setBusinessWebsite] = useState(\"NA\")\n    const [otherIndustry, setOtherIndustry] = useState(\"NA\")\n    const [industry, setIndustry] = useState(\"NA\")\n    const [teamSize, setTeamSize] = useState(\"NA\")\n    const { socket } = useSocket();\n\n    // useEffect(()=>{\n    //     console.log(\"My console for business info\", {businessName, businessWebsite, industry, otherIndustry, teamSize})\n    // },[businessName, businessWebsite, industry, otherIndustry, teamSize])\n\n    const handleSubmitForm = async () => {\n        console.log(\"My console for business info after submit\", {businessName, businessWebsite, industry, otherIndustry, teamSize})\n        if(businessName === \"\" || businessName.trim() === \"\"){\n            openNotificationWithIcon(\"error\", \"Info Missing\", \"Please provide your business name.\")\n            return\n        }\n\n        if(industry === \"Others\" && (otherIndustry === \"\" || otherIndustry.trim() === \"\" || otherIndustry === \"NA\")){\n            openNotificationWithIcon(\"error\", \"Info Missing\", \"Please provide your industry.\")\n            return\n        }\n\n        socket.emit('send-business-info-to-admin', {\n            userName : `${user.firstName} ${user.lastName}`,\n            businessName, \n            businessWebsite,\n            industry:industry !== \"Others\" ? industry : otherIndustry,\n            teamSize,\n        });\n        if(user?.business_details?.id){\n        const dataToUpdate ={\n            businessName : businessName,\n            businessWebsite : businessWebsite,\n            industry : industry,\n            teamSize : teamSize\n        }\n        await BusinessApi.updateBusinessDetails(user?.business_details?.id,dataToUpdate)\n        }\n        await CustomerApi.updateCustomer(user.customer.id,{askedForBusiness:true})\n        setShowBusinessModal(false)\n\n    }\n\n    const handleNotABusinessOwner = async () => {\n        console.log(\"User is not a business owner\")\n        await CustomerApi.updateCustomer(user.customer.id,{askedForBusiness:true})\n        setShowBusinessModal(false)\n    }\n\n    return<div>\n        <Modal \n            visible={showBusinessModal} \n            closable={false} \n            destroyOnClose={false} \n            className=\"p-30-50 business-modal\" \n            footer={[]}\n            width={700}\n        >\n            <div className=\"business-modal-outer-div d-flex flex-column justify-content-center align-items-center\">\n                <div className=\"mb-10 text-center\">\n                    <HeadingText firstBlackText={\"Tell us about \"} secondGreenText={\" your business \"} />\n                </div>\n                <span className=\"business-modal-sub-heading text-center\">Let's integrate your business with amazing,</span>\n                <span className=\"business-modal-sub-heading mb-30 text-center\">tailored sevice designed to perfectly fit your needs.</span>\n                <div className=\"mb-20 w-full d-flex justify-content-center \">\n                    <div className=\"max-width-768-w-100per\">\n                        <SubHeadingText text={\"Business Name*\"} />\n                        <InputField onChange={(e)=>{setBusinessName(e.target.value)}} divPropClass={\"max-width-768-w-100per\"} defaultValue={user.businessName} disable={true} />\n                    </div>\n                </div>\n                <div className=\"mb-20 w-full d-flex justify-content-center \">\n                    <div className=\"max-width-768-w-100per\">\n                        <SubHeadingText text={\"Business Website\"} />\n                        <InputField onChange={(e)=>{setBusinessWebsite(e.target.value)}} divPropClass={\"max-width-768-w-100per\"} />\n                    </div>\n                </div>\n                <div className=\"mb-20 w-full d-flex justify-content-center max-width-768-w-100per\">\n                    <div className=\"max-width-768-w-100per\">\n                        <SubHeadingText text={\"Industry\"} />\n                        <BasicDropDown name={\"industry\"} dropDownOptions={INDUSTRY} setValue={setIndustry} divClass={\"max-width-768-w-100per\"} />\n                    </div>\n                </div>\n                {industry === \"Others\" && <div className=\"mb-20 w-full d-flex justify-content-center \">\n                    <div className=\"max-width-768-w-100per\">\n                        <SubHeadingText text={\"Other industry\"} />\n                        <InputField onChange={(e)=>{setOtherIndustry(e.target.value)}} divPropClass={\"max-width-768-w-100per\"} />\n                    </div>\n                </div>}\n                <div className=\"mb-20 w-full d-flex justify-content-center \">\n                    <div className=\"max-width-768-w-100per\">\n                        <SubHeadingText text={\"Team\"} />\n                        <BasicDropDown name={\"team\"} dropDownOptions={TEAM_SIZE} setValue={setTeamSize} divClass={\"max-width-768-w-100per\"} />\n                    </div>\n                </div>\n                <div className=\"business-plan-sign-in-button mb-1 w-full\">\n                    <BasicButton btnTitle={\"Explore Dashboard\"} height={\"inherit\"} width={\"inherit\"} background={\"#01D4D5\"} color={\"white\"} btnIcon={\"arrow\"} faFontSize={\"18px\"} arrowDirection={\"right\"} onClick={handleSubmitForm} />    \n                </div>\n                <span className=\"no-business-text\" onClick={handleNotABusinessOwner}>I'm not a business owner</span>\n            </div>\n        </Modal>\n    </div>\n}\n\nexport default BusinessModal",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\BusinessModal.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "dashboard.js",
                                                            "fileData": "import React, { useEffect, useState,useCallback } from 'react';\nimport { div ,Modal,Pagination} from 'antd';\nimport { Row, Col, Tabs, Tab, Button,Dropdown} from 'react-bootstrap';\nimport { useHistory, useLocation } from 'react-router';\nimport DashboardTable from '../../../components/Dashboard/Table';\nimport { useUser } from '../../../context/useContext';\nimport { useAuth } from '../../../context/authContext';\nimport { useJob } from '../../../context/jobContext';\nimport { useSocket } from '../../../context/socketContext';\nimport * as JobApi from '../../../api/job.api';\nimport Loader from '../../../components/Loader';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { openNotificationWithIcon, handleStartCall, get_or_set_cookie, checkJobValidations, queryDecider, GAevent, PushUserDataToGtm } from '../../../utils';\nimport ReactGA from 'react-ga';\nimport mixpanel from 'mixpanel-browser';\nimport { GOOGLE_ANALYTICS_PROPERTY_ID} from '../../../constants';\nimport LogRocket from 'logrocket';\nimport * as WebSocket from '../../../api/webSocket.api';\nimport AddToCalendarHOC,{SHARE_SITES} from 'react-add-to-calendar-hoc';\nimport moment from 'moment';\nimport * as JobService from \"../../../api/job.api\";\nimport FeedbackCompulsionModal from '../../Technician/feedbackCompulsion';\n// import $ from 'jquery';\nimport {isMobile} from 'react-device-detect';\nimport {useServices} from '../../../context/ServiceContext';\nimport JobCancelFrom from '../components/jobCancelFrom';\nimport { useTools } from '../../../context/toolContext';\nimport * as FullStory from '@fullstory/browser';\nimport {debounce} from 'lodash';\nimport {checkPendingStatus} from '../../../utils';\nimport {JOB_STATUS} from '../../../constants/index';\nimport * as UserApi from '../../../api/users.api';\n\n\nlet mainSoftwareWithoutState = [];\nlet subSoftwareWithoutState = [];\nlet activeTabGlobal = ''\nconst duration = 2\n\n\n\nconst Dashboard = ({setcurrentStep,setjobId,setType,setOpenNotification,ShowBadge,hideBadge, setActiveMenu, toggle}) => {\n\t// console.log(\"running Dashboard ::: \")\n\tconst { checkIfTwoTierJobAndExpertTech } = useServices();\n\tconst { socket } = useSocket();\n\tconst [showLoader, setShowLoader] = useState(true);\n\t// const {fetchNotifications,allNotifications} = useNotifications()\n\tconst {refetch} = useAuth();\n\tconst { user } = useUser();\n\tconst { fetchJobByParams, allJobs,fetchJob,totalJobs,setTotalJobs,setAllJobs} = useJob();\n\t// const [isOpen, setIsOpen] = useState(true);\n\tconst [activeStatus, setActiveStatus] = useState(false);\n\t// const [tierJobStatus, setTierJobStatus] = useState(false);\n\t// const [role, setRole] = useState('');\n\tconst [socketJobUpdated,setSocketJobUpdated] = useState(false)\n\tconst history = useHistory();\n\t// const [verificationSent,setVerificationSent] = useState(false)\n\t// const [columns, setColumns] = useState([]);\n\t// const [hideEmailmsg,sethideEmailmsg] = useState(false)\n\tconst [tableData, setTableData] = useState();\n\tconst TabName = 'ActiveJobTab';\n\t// const [notifyCount,setNotifyCount] = useState(0)\n\t// const [showNotificationBadge,setShowNotificationBadge] = useState(false)\n\t// const detailRef = useRef()\n\t// const [forScheduled,setForScheduled] = useState(false)\n\t// const [fetchNow,setFetchNow] = useState(false)\n\t// const [forJoin,setforJoin] = useState(false)\n\tconst DATE_OPTIONS = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' ,hour: '2-digit', minute:'2-digit'};\n\tconst [isLoading, setIsLoading] = useState(true);\n\t// const [activeData, setActiveData] = useState();\n\tconst [completedData, setCompletedData] = useState();\n\tconst [pendingData, setPendingData] = useState();\n\tconst [proposalsData, setProposalsData] = useState([]);\n\tconst [techCompletedData, setTechCompletedData] = useState();\n\tconst [techDeclinedData, setTechDeclinedData] = useState();\n\tconst [techMainSoftwares, setTechMainSoftwares] = useState([]);\n\tconst [techSubSoftwares, setTechSubSoftwares] = useState([]);\n\tconst [activeTabKey,setActiveTabKey] = useState('');\n\tconst [currentPage,setCurrentPage] = useState(1);\n\tconst [storedData,setStoredData] = useState({})\n\tconst search = useLocation().search;\n\tconst [scheduleMsg,setScheduleMsg] = useState(false);\n\tconst [lastPendingSoftware,setLastPendingSoftware] = useState('');\n\t// const [tabNameInUrl,setTtabNameInUrl] = useState(new URLSearchParams(search).get('t'));\n\tconst tabNameInUrl = new URLSearchParams(search).get('t');\n\tconst [tabInUrlLoaded, setTabInUrlLoaded] = useState(false);\n\tconst AddToCalendarDropdown = AddToCalendarHOC(Button, Dropdown);\n\tconst [showFeedbackModal, setShowFeedbackModal] = useState(false);\n\tconst [FeedbackJobId, setFeedbackJobId] = useState('');\n\tconst [isCancelModal, setIsCancelModal] = useState(false);\n\tconst [cancelJobId, setCancelJobId] = useState(false);\n\tconst [userType, setUserType] = useState(false);\n\tconst[jobData,setJobData]= useState({})\n\tconst {jobFlowStep,setJobFlowStep,jobFlowsDescriptions , startTimer,setShowChatButton,getTwilioConversationDetails} = useTools()\n\tconst [isDisabled, setIsDisabled] = useState(false)\n\tconst [customerConfirm,setCustomerConfirm] = useState(false);\n\tconst [customerConfirmDraftJob,setCustomerConfirmDraftJob] = useState(false);\n\tconst [customeJobIdDraftJob,setCustomeJobIdDraftJob] = useState();\n\tconst [customerConfirmSameTech,setCustomerConfirmSameTech] = useState(false);\n\tconst [customerData,setCustomerData] = useState();\n\tconst [findSameTechnicianJobid,setFindSameTechnicianJobid] = useState();\n\tconst [jobIdFromMessage, setJobIdFromMessage] = useState([])\n\tconst queryParams = new URLSearchParams(search);\n\t// const jobDetails = queryParams.get('chatScreen') ? queryParams.get('chatScreen') : false;\n\n  const message = scheduleMsg\n  ? <span className=\"div-font\" style={{fontSize:20,paddingTop:'40px'}}>\n      One of your previous jobs of <b style={{fontWeight: 'bold'}}>{lastPendingSoftware}</b> is already scheduled with a technician. Are you sure you want to create a new job post?if yes, then your previous job will be <b style={{fontWeight: 'bold'}}>Cancelled</b>\n    </span>\n  : <span className=\"div-font\" style={{fontSize:20,paddingTop:'40px'}}>\n      We are still looking for a technician for your existing job of <b style={{fontWeight: 'bold'}}>{lastPendingSoftware}</b>. Are you sure you want to create a new job post? if yes, then your previous job will be <b style={{fontWeight: 'bold'}}>Cancelled</b>\n    </span>;\n\n\tconst HandleHide = () => {\n\t\ttoggle();\n\t};\n\tif(user && GOOGLE_ANALYTICS_PROPERTY_ID != null){\n\t\t// const DATE_OPTIONS = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' ,hour: '2-digit', minute:'2-digit',timeZone: user.timezone }\n\t\tReactGA.initialize(GOOGLE_ANALYTICS_PROPERTY_ID);\n\t\tReactGA.ga('set', 'userId',user.id)\n\t\tReactGA.ga('set', 'dimension1',user.id)\n\t\tReactGA.ga('send', 'pageview','/dashboard')\n\n\t\tLogRocket.identify(user.id, {\n\t\t  name: user.firstName,\n\t\t  email: user.email,\n\t\t});\n\n\t\tFullStory.identify(user.id, {\n\t\t\tdisplayName: user.firstName,\n\t\t\temail: user.email\n\t\t });\n\t}\n\n\tconst calevent = {\n\t title: 'Sample Event',\n\t  description: 'This is the sample event provided as an example only',\n\t  location: 'Portland, OR',\n\t  startTime: '2016-09-16T20:15:00-04:00',\n\t  endTime: '2016-09-16T21:45:00-04:00'\n  }\n\n\tuseEffect(() => {\n\t\t(async function () {\n\t\t\tconst jobDetails = window.sessionStorage.getItem(\"chatScreen\")\n\t\t\tif (jobDetails) {\n\t\t\t\tconst jobid = jobDetails;\n\t\t\t\tawait fetchJob(jobid)\n\t\t\t\tawait setjobId(jobid)\n\t\t\t\tlet jobResponse = await JobService.retrieveJob(jobid)\n\t\t\t\tsetType(\"details\")\n\t\t\t\tif (jobResponse.schedule_accepted == false && user && user.userType == 'technician' && jobResponse.tech_declined_ids.includes(user.technician.id) == false) {\n\t\t\t\t\tsetType(\"apply\")\n\t\t\t\t}\n\t\t\t\tif (user.userType === 'technician') {\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Technician  - Click on Job details from dashboard page ', { 'JobId': jobid });\n\t\t\t\t} else {\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Customer -  Click on Job details from dashboard page', { 'JobId': jobid });\n\t\t\t\t}\n\t\t\t\tsetcurrentStep(6)\n\t\t\t}\n\t\t\tif (queryParams.get(\"chatScreen\")) {\n\t\t\t\t\n\t\t\t  }  \n\t\t})()\n\t}, [])\n\n\tuseEffect(()=>{\n\t\t// console.log(\"tabNameInUrl now is :\",tabNameInUrl)\n\t\tif(tabNameInUrl && !tabInUrlLoaded && user){\n\t\t\t// console.log(\"Now load the data of \",tabNameInUrl)\n\t\t\tsetTabInUrlLoaded(true);\n\t\t\tif(tabNameInUrl === 'cmp'){\n\t\t\t\tlet main_software = [];\n\t\t\t\tlet sub_software = [];\n\t\t\t\tif (user.technician && (user.technician.registrationStatus === \"incomplete_profile\" || user.technician.registrationStatus === \"completed\" )) {\n\t\t\t\t\tconst { expertise } = user.technician;\n\t\t\t\t\tfillSoftwares(expertise,main_software,sub_software)\n\t\t\t\t}\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tif(user && user.userType === \"technician\"){\n\t\t\t\t\t\tsetTechMainSoftwares(main_software)\n\t\t\t\t\t\tsetTechSubSoftwares(sub_software)\n\t\t\t\t\t\tmainSoftwareWithoutState = main_software;\n\t\t\t\t\t\tsubSoftwareWithoutState = sub_software;\n\t\t\t\t\t\t// console.log(\"main_software before changetab is ::\",main_software)\n\t\t\t\t\t\tchangeTab('Completed Jobs Tech')\n\t\t\t\t\t}else{\n\t\t\t\t\t\tchangeTab('Completed Jobs')\n\t\t\t\t\t}\n\t\t\t\t},500)\n\t\t\t}\n\t\t\tif(tabNameInUrl === 'sub'){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tif(user && user.userType === \"technician\"){\n\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsetcurrentStep(10);\n\t\t\t\t\t\t//setActiveMenu('subscriptions');\n\t\t\t\t\t\t//HandleHide();\n\t\t\t\t\t}\n\t\t\t\t},500)\n\t\t\t}\n\t\t}\n\t},[tabNameInUrl])\n\n\n\t/*useEffect(()=>{\n\t\t$(\"body\").on(\"click\",function(e){\n\t\t\te.preventDefault();\n\t\t\tconsole.log(\"e\",e,$(\".addToCalendar-geeker .dropdown\").length, $(\".addToCalendar-geeker .btn-primary\").hasClass('open-class'))\n\t\t\tif($(\".addToCalendar-geeker .dropdown\") && $(\".addToCalendar-geeker .dropdown\").length > 0 && $(\".addToCalendar-geeker .btn-primary\").hasClass('open-class')){\n\t\t\t\t$(\".addToCalendar-geeker .dropdown\").hide();\n\t\t\t\t// $(\".addToCalendar-geeker .btn-primary.open-class\").trigger('click').removeClass('open-class').addClass('close-class')\n\t\t\t}\n\t\t})\n\t},[])*/\n\n\tuseEffect(()=>{\n\t\tif(ShowBadge){\n\t\t\t // setNotifyCount(0)\n\t\t\t// setShowNotificationBadge(false)\n\t\t\t// console.log(notifyCount)\n\t\t}\n\n\t},[ShowBadge])\n\n\tuseEffect(()=>{\n\t\t// console.log(\"the hide badge -------\")\n\t\tif(hideBadge){\n\t\t\t// setNotifyCount(0)\n\t\t\t// setShowNotificationBadge(false)\n\t\t}\n\t},[hideBadge])\n\n\t/**\n\t * @params : job Type(Object)\n\t * @response: join rooms for the accepted jobs  technicians and customers\n\t * @author :Sahil\n\t * */\n\n\n\tconst joinRoomsForAcceptedJobsCustomerAndTechnician = (job)=>{\n\t\ttry{\n\t\t\tif (job.status === 'Accepted' || job.status === 'Inprogress' )\n\t\t\t{\n\t\t\t\tsocket.emit(\"join\",job.id)\n\t\t\t}\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in joinRoomsForAcceptedJobsCustomerAndTechnician >>>\",err)\n\t\t}\n\t}\n\n\tconst fillSoftwares = (expertise,main_software,sub_software) =>{\n\t\tfor (let i = 0; i <= expertise.length - 1; i++) {\n\t\t\tif (expertise[i].software_id) {\n\t\t\t\tif (!expertise[i].parent || expertise[i].parent === '0') {\n\t\t\t\t\tif (!main_software.includes(expertise[i].software_id)) {\n\t\t\t\t\t\tmain_software.push(expertise[i].software_id);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!main_software.includes(expertise[i].parent)) {\n\t\t\t\t\t\tmain_software.push(expertise[i].parent);\n\t\t\t\t\t}\n\t\t\t\t\tif (!sub_software.includes(expertise[i].software_id)) {\n\t\t\t\t\t\tsub_software.push(expertise[i].software_id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tconst findSameTechnician = async(e)=>{\n\t\te.stopPropagation()\n\t\ttry {\n\t\tif (user && user.userType === 'customer' && user.customer) {\n\t\t\tlet jobId = e.currentTarget.name\n\t\t\tsetFindSameTechnicianJobid(e.currentTarget.name)\n\t\tlet retrievedJob = await JobService.retrieveJob(jobId)\n\t\t\t// let data = e.currentTarget.name;\n\t\t\tlet pendingJobs = await checkPendingStatus(user);\n\t\t\tif (pendingJobs.schedule_accepted) {\n\t\t\t\tsetScheduleMsg(true);\n\t\t\t}\n\n\t\t\tif (pendingJobs.success) {\n\t\t\t\tsetLastPendingSoftware(pendingJobs.name);\n\t\t\t\tsetCustomerConfirmSameTech(true);\n\t\t\t} else {\n\t\t\t\tModal.confirm({\n\t\t\t\t\ttitle: 'Are you sure you want to post this job again?',\n\t\t\t\t\tokText: \"Yes\",\n\t\t\t\t\tcancelText: \"No\",\n\t\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\t\tonOk() {\n\t\t\t\t\t\tmixpanel.identify(user.email)\n\t\t\t\t\t\thistory.push(`/customer/profile-setup?jobId=${jobId}&repost=true&technicianId=${retrievedJob?.technician?.user?.id}`)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t  }\n\t\t}catch (e) {\n\t\t\tconsole.log('Error in checkPendingJobs', e);\n\t\t  }\n\t}\n\n\n\tconst handlePagination = async(page,pageSize) =>{\n\t\tsetIsLoading(true)\n\t\tsetCurrentPage(page)\n\t\tlet demoStoredData = {...storedData}\n\t\tlet pagination={ page: page,pageSize:pageSize, userType : (user.userType === \"technician\" ? user.technician.technicianType : user.customer.customerType), id :(user.userType === \"technician\" ? user?.technician?.id : '')  }\n\t\tlet query  = queryDecider(activeTabKey,user,false,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\t// let mainCondition =!Object.keys(demoStoredData).includes(activeTabKey)\n\t\tconst res = await call_fetch_jobs(query,pagination)\n\t\tlet temp = {}\n\t\ttemp[[JSON.stringify(page)]] = res\n\t\ttemp['totalJobs'] = totalJobs\n\t\tdemoStoredData[activeTabKey] =temp\n\t\t// console.log(\"demoStoredData ::::::: \",demoStoredData)\n\t\tsetStoredData(demoStoredData)\n\t\tsetIsLoading(false)\n\t}\n\n\tconst changeTab = useCallback(async (k, fromSocket = false) => {\n\t\tsetIsLoading(true)\n\t\tlet query = queryDecider(k,user,false,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\tlet technicianAcceptanceArr = [\"incomplete_profile\",\"completed\"]\n\t\tsetActiveTabKey(k)\n\t\tlet demoStoredData = {...storedData}\n\t\tlet condition1 = k !== activeTabKey && !Object.keys(demoStoredData).includes(k)\n\t\tif(user.userType === \"technician\" && !technicianAcceptanceArr.includes(user.technician.registrationStatus)){\n\t\t\tsetIsLoading(false)\n\t\t\treturn ;\n\t\t}\n\t\tif(condition1 || fromSocket){\n\t\t\tconst res = await call_fetch_jobs(query)\n\t\t\tlet theKey = JSON.stringify(1)\n\t\t\tlet temp = {}\n\t\t\tsetCurrentPage(1)\n\t\t\ttemp[theKey] = res\n\t\t\tdemoStoredData[k] = temp\n\t\t\tsetStoredData(demoStoredData)\n\t\t}\n\t\telse{\n\t\t\tif(demoStoredData !== undefined && demoStoredData !== null &&  Object.keys(demoStoredData).length != 0 && demoStoredData[k] &&  Object.keys(demoStoredData[k]).length != 0){\n\t\t\t\tlet data = storedData[k][Object.keys(demoStoredData[k])[0]][\"data\"]\n\t\t\t\tsetTotalJobs(storedData[k][Object.keys(demoStoredData[k])[0]]['totalCount'])\n\t\t\t\tsetAllJobs({\"data\":data})\n\t\t\t\tsetCurrentPage(parseInt(Object.keys(demoStoredData[k])[0]))\n\t\t\t}\n\t\t}\n\t\tsetIsLoading(false)\n\n\t},[activeTabKey]);\n\tconst location = useLocation();\n\t/*const toggle = () => {\n\t\tsetIsOpen(!isOpen);\n\t};*/\n\n\n\t/*const HandleDetailsDashboard = (e)=>{\n\t\t history.push(`/technician/new-job/${e.currentTarget.id}`, { userIds: [user.id],appendedJob:e.currentTarget.id });\n\t}*/\n\n\t/*const sendVerificationMail = ()=>{\n\t\tverificationEmailHandler({\"email\":user.email})\n\t\t// setVerificationSent(true)\n\n\t\t// setTimeout(()=>{sethideEmailmsg(true)},3000)\n\t}*/\n\n\tconst push_to_job_detail = async(e) => {\n\t\te.currentTarget.disabled=true;\n\t\te.stopPropagation();\n\t\tconst jobid = e.currentTarget.name;\n\t\tawait fetchJob(jobid)\n\t\tawait setjobId(jobid)\n\t\tlet jobResponse = await JobService.retrieveJob(jobid)\n\t\tsetType(\"details\")\n\t\tif (jobResponse.schedule_accepted== false && user && user.userType == 'technician' && jobResponse.tech_declined_ids.includes(user.technician.id) == false){\n\t\t\tsetType(\"apply\")\n\t\t}\n\t\tif(user.userType === 'technician'){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician  - Click on Job details from dashboard page ',{'JobId':jobid});\n\t\t}else{\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer -  Click on Job details from dashboard page',{'JobId':jobid});\n\t\t}\n\t\tsetcurrentStep(6)\n\t};\n\n\tconst push_to_job_detailForChat = async(e) => {\n\t\te.stopPropagation();\n\t\tconst jobid = e.currentTarget.name;\n\t\tawait fetchJob(jobid)\n\t\tawait setjobId(jobid)\n\t\tawait JobApi.updateJob(jobid, { tech_message_dashbord: false })\n\t\tsetJobIdFromMessage([])\n\t\tsetShowChatButton(true)\n\t\tlet jobResponse = await JobService.retrieveJob(jobid)\n\t\tsetType(\"details\")\n\t\tif (jobResponse.schedule_accepted== false && user && user.userType == 'technician' && jobResponse.tech_declined_ids.includes(user.technician.id) == false){\n\t\t\tsetType(\"apply\")\n\t\t}\n\t\tif(user.userType === 'technician'){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician  - Click on Job details from dashboard page ',{'JobId':jobid});\n\t\t}else{\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer -  Click on Job details from dashboard page',{'JobId':jobid});\n\t\t}\n\t\tsetcurrentStep(6)\n\t};\n\n\t\t/**\n\t * Function will check if status of job is draft then redirect user to Job summary page  .\n\t * @author : Mritunjay\n\t**/\n\tconst push_to_post_draft_job = async (e) => {\n\t\te.stopPropagation();\n\t\ttry {\n\t\t  if (user && user.userType === 'customer' && user.customer) {\n\t\t\tlet data = e.currentTarget.name;\n\t\t\tconst jobid = e.currentTarget.name;\n\t\t\tlet jobResponse = await JobService.retrieveJob(jobid)\n\t\t\tsetCustomeJobIdDraftJob(data)\n     \t\tlet pendingJobs = await checkPendingStatus(user)\n\t\t\tif (pendingJobs.schedule_accepted) {\n\t\t\t\tsetScheduleMsg(true);\n\t\t\t}\n\n\t\t\tif (pendingJobs.success) {\n\t\t\t\tsetLastPendingSoftware(pendingJobs.name);\n\t\t\t\tsetCustomerConfirmDraftJob(true);\n\t\t\t} else {\n\t\t\t\tModal.confirm({\n\t\t\t\t\ttitle: 'Are you sure you want to post this job again?',\n\t\t\t\t\tokText: \"Yes\",\n\t\t\t\t\tcancelText: \"No\",\n\t\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\t\tonOk: async () => {\n\t\t\t\t\t\t// const jobid = e.currentTarget.name;\n\t\t\t\t\t\t// let jobResponse = await JobService.retrieveJob(jobid)\n\t\t\t\t\t\tif(jobResponse.status === \"Draft\"){\n\t\t\t\t\t\t\tif(jobResponse.post_again_reference_technician){\n\t\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=job-summary&jobId=${jobResponse.id}&technicianId=${jobResponse.post_again_reference_technician}`\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=job-summary&jobId=${jobResponse.id}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t  console.log('Error in checkPendingJobs', e);\n\t\t}\n    };\n\n\n\tconst push_to_post_declined_job = async(e) => {\n\t\te.stopPropagation();\n\t\tconst jobid = e.currentTarget.name;\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Customer - Post again from dashboard',{'JobId':jobid});\n\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\thistory.push(`/customer/start-profile-setup?jobId=${jobid}&repost=true`)\n\t}\n\n\tconst push_to_job_detail_with_apply_button = (e) => {\n\t\te.currentTarget.disabled=true;\n\t\tconst jobid = e.currentTarget.name;\n\t\tfetchJob(jobid)\n\t\tsetjobId(jobid)\n\t\tsetType(\"apply\")\n\t\tsetcurrentStep(6)\n\t\tif(user){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track(`${user.userType}- Apply for this job from dashboard` ,{'JobId':jobid});\n\t\t}\n\t};\n\n\tconst CancelTheJob = (e) => {\n\t\te.stopPropagation()\n\t\tconst job = JSON.parse(e.currentTarget.name);\n\t\tconsole.log(\" job ::::: \", job.id)\n\t\tsetUserType(\"Customer\")\n\t\tsetCancelJobId(job.id)\n\t\tsetJobData(job)\n\t\tsetIsCancelModal(true)\n\t\t// setTimeout(function(){\n\t\t// \twindow.location.reload()\n\t\t// },1000)\n\t}\n\n\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tif(user && user.userType === \"technician\"){\n\t\t\t\t// console.log(\"filters sockets ::: \")\n\t\t\t\tfilterJobsByTech()\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn\n\t\t}\n\t}, [socketJobUpdated,user])\n\n\tuseEffect(() => {\n\n\t\tif(user && user.userType === \"technician\" && proposalsData && proposalsData.length === 0){\n\t\t\tchangeTab('Completed Jobs Tech')\n\t\t}\n\t}, [proposalsData])\n\n\t/**\n\t * Function will check to show the scheduled job to technician or not if the job is post again reference to same technician.\n\t * @params : user_id Type(String),JobData Type(Object)\n\t * @response : return boolean value\n\t * @author : Manibha\n\t **/\n\tconst checkIfPostAgainWithSameTech = (user_id,JobData)=>{\n\t\tlet checkVal = false\n\t\tif(JobData.status === 'Scheduled' && JobData.post_again_reference_technician != undefined && JobData.post_again_reference_technician === user_id){\n\t\t\tcheckVal = true\n\t\t}else if(JobData.status === 'Scheduled' && JobData.post_again_reference_technician == undefined){\n\t\t\tcheckVal = true\n\t\t}\n\t\treturn checkVal\n\t}\n\n\n\tconst handleAccepted = async (e) => {\n\n\t\tlet job = JSON.parse(e.currentTarget.name)\n\t\tlet jobId = job.id\n\t\tconst res = await JobApi.retrieveJob(jobId);\n\t\tModal.confirm({\n\t\t\ttitle: 'Are you sure you want to accept this job?',\n\t\t\tokText: \"Yes\",\n\t\t\tcancelText: \"No\",\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tasync onOk () {\n\t\t\t\tlet resultVal = await checkIfTwoTierJobAndExpertTech(user.technician,job)\n\t\t\t\tconst check_feedback = await JobApi.checkLastJobFeedback({'technician':user.technician.id});\n\t\t\t\tawait JobApi.updateJob(jobId, { acceptedJobTime: new Date()});\n\t\t\t\tif(resultVal == false){\n\t\t\t\t\topenNotificationWithIcon('error', 'Error', 'This job is only for experts.Please contact admin to make you one.');\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}\n\t\t\t\telse if(check_feedback.job_id != undefined){\n\t\t\t\t\t// console.log('check_feedback>>>>>>>',check_feedback)\n\t\t\t\t\tsetShowFeedbackModal(true)\n\t\t\t\t\tsetFeedbackJobId(check_feedback.job_id)\n\t\t\t\t}else{\n\t\t\t\t\tlet validation = checkJobValidations(user,jobId,location)\n\t\t\t\t\tif (validation) {\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tawait JobApi.sendJobAcceptEmail(jobId);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.log(\"this is error in dashboard.js:: \", err)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t},\n\t\t});\n\n\t}\n\t/**\n\t * @params : event Type(Object)\n\t * @response : starts a call for technician\n\t * @author : Sahil\n\t * */\n\tconst handleTechnicianCall = (e)=>{\n\t\te.currentTarget.disabled = true;\n\t\tlet jobId = e.currentTarget.name\n\t\thandleStartCall(e,jobId,socket)\n\t}\n\n\n\n\tconst push_to_post_job = async (e) => {\n\t\te.stopPropagation();\n\t\ttry {\n\t\t  if (user && user.userType === 'customer' && user.customer) {\n\t\t\tlet data = e.currentTarget.name;\n\t\t\tsetCustomerData(data)\n\t\t\tlet pendingJobs = await checkPendingStatus(user);\n\t\t\tif (pendingJobs.schedule_accepted) {\n\t\t\t\tsetScheduleMsg(true);\n\t\t\t}\n\n\t\t\tif (pendingJobs.success) {\n\t\t\t\tsetLastPendingSoftware(pendingJobs.name);\n\t\t\t\tsetCustomerConfirm(true);\n\t\t\t} else {\n\t\t\t\tModal.confirm({\n\t\t\t\t\ttitle: 'Are you sure you want to post this job again?',\n\t\t\t\t\tokText: \"Yes\",\n\t\t\t\t\tcancelText: \"No\",\n\t\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\t\tonOk() {\n\t\t\t\t\t\tconst jobid = data;\n\t\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\t\tmixpanel.track('Customer - Post again from dashboard',{'JobId':jobid});\n\t\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t\t\t\t\thistory.push(`/customer/start-profile-setup?jobId=${jobid}&repost=true`)\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t  console.log('Error in checkPendingJobs', e);\n\t\t}\n    };\n\n\t/**\n\t * Following function is use to check pending jobs and Decline the Latest Pending JOb regarding the  status provided  for post again\n\t * @author : Kartar Singh\n\t **/\n\n\tconst postAgainFunction = async () => {\n\t\tif (user && user.userType === 'customer' && user.customer) {\n\t\t  if (user) {\n\t\t\ttry {\n\t\t\t  const latestJob = await JobApi.latestpendingJobs({ \"customer\": user.customer.id });\n\t\t\t  if (latestJob.total_pending_jobs > 0) {\n\t\t\t\tif (latestJob.last_pending_job.status === JOB_STATUS.PENDING || latestJob.last_pending_job.status === JOB_STATUS.WAITING  || latestJob.last_pending_job.status === JOB_STATUS.SCHEDULED) {\n\t\t\t\t  try {\n\t\t\t\t\tawait JobApi.updateJob(latestJob?.last_pending_job?.id, { status: 'Declined' });\n\t\t\t\t\tconst jobid = customerData;\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Customer - Post again from dashboard', { 'JobId': jobid });\n\t\t\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView']);\n\t\t\t\t\thistory.push(`/customer/start-profile-setup?jobId=${jobid}&repost=true`);\n\t\t\t\t  } catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  }\n\t\t\t} catch (error) {\n\t\t\t  console.error(error);\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }\n\t/**\n\t * Following function is use to check pending jobs and Decline the Latest Pending JOb regarding the  status provided  for post again with same tech\n\t * @return : call the nextJobSummaryPageHandler\n\t * @author : Kartar Singh\n\t **/\n\t  const postAgainFunctionWithSameTech = async () => {\n\t\tif (user && user.userType === 'customer' && user.customer) {\n\t\t  if (user) {\n\t\t\ttry {\n\t\t\t  const latestJob = await JobApi.latestpendingJobs({ \"customer\": user.customer.id });\n\t\t\t  if (latestJob.total_pending_jobs > 0) {\n\t\t\t\tif (latestJob.last_pending_job.status === JOB_STATUS.PENDING || latestJob.last_pending_job.status === JOB_STATUS.WAITING  || latestJob.last_pending_job.status === JOB_STATUS.SCHEDULED) {\n\t\t\t\t  try {\n\t\t\t\t\tawait JobApi.updateJob(latestJob?.last_pending_job?.id, { status: 'Declined' });\n\t\t\t\t\tlet jobId = findSameTechnicianJobid\n\t\t\t\t\tlet retrievedJob = await JobService.retrieveJob(jobId)\n\t\t\t\t\tmixpanel.identify(user.email)\n\t\t\t\t\thistory.push(`/customer/profile-setup?jobId=${jobId}&repost=true&technicianId=${retrievedJob?.technician?.user?.id}`)\n\t\t\t\t  } catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  }\n\t\t\t} catch (error) {\n\t\t\t  console.error(error);\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }\n\n\t  /**\n\t * Following function is use to check pending jobs and Decline the Latest Pending JOb regarding the  status provided  for draft job\n\t * @author : Kartar Singh\n\t **/\n\t  const postAgainFunctionDraft = async () => {\n\t\tif (user && user.userType === 'customer' && user.customer) {\n\t\t  if (user) {\n\t\t\ttry {\n\t\t\t  const latestJob = await JobApi.latestpendingJobs({ \"customer\": user.customer.id });\n\t\t\t  if (latestJob.total_pending_jobs > 0) {\n\t\t\t\tif (latestJob.last_pending_job.status === JOB_STATUS.PENDING || latestJob.last_pending_job.status === JOB_STATUS.WAITING  || latestJob.last_pending_job.status === JOB_STATUS.SCHEDULED) {\n\t\t\t\t  try {\n\t\t\t\t\tawait JobApi.updateJob(latestJob?.last_pending_job?.id, { status: 'Declined' });\n\t\t\t\t\tconst jobid = customeJobIdDraftJob;\n\t\t\t\t\tlet jobResponse = await JobService.retrieveJob(jobid)\n\t\t\t\t\tif(jobResponse.status === \"Draft\"){\n\t\t\t\t\t\tif(jobResponse.post_again_reference_technician){\n\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=job-summary&jobId=${jobResponse.id}&technicianId=${jobResponse.post_again_reference_technician}`\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\twindow.location.href = `/customer/profile-setup?page=job-summary&jobId=${jobResponse.id}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t  } catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  }\n\t\t\t} catch (error) {\n\t\t\t  console.error(error);\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }\n\n\n\tconst try_again_post_job = (e) => {\n\t\tif(user && user.userType === 'customer' && user.customer){\n\t\t\tconst jobid = e.currentTarget.name;\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Try again from dashboard',{'JobId':jobid});\n\t\t\tsetJobFlowStep(jobFlowsDescriptions['jobDetailView'])\n\t\t    history.push(`/customer/start-profile-setup?jobId=${jobid}&repost=true`)\n\t\t}\n\n\t};\n\n\tconst isCompletedJob =async(jobId)=>{\n\t\tconst findJob  = await JobService.retrieveJob(jobId);\n\t\treturn findJob && findJob.status === 'Completed' ? true : false;\n\t}\n\n\n\t// const handleDecline = async(e) => {\n\t// \te.stopPropagation();\n\t// \tconst jobid = e.currentTarget.name;\n\t// \tconst res = await JobApi.retrieveJob(jobid);\n\n\t// \tlet msg = \"Are you sure you want to decline this job?\";\n\t// \tif (user.userType === 'customer') {\n\t// \t\tmsg = \"Are you sure you want to delete this job?\";\n\t// \t\tif (res.schedule_accepted || res.status === 'Accepted') {\n\t// \t\t\topenNotificationWithIcon('error', 'Error', 'A technician accepted your request, so you are not allowed to delete it.');\n\t// \t\t\tsetTimeout(() => {\n\t// \t\t\t\twindow.location.reload()\n\n\t// \t\t\t}, 2000)\n\t// \t\t}\n\t// \t\telse {\n\t// \t\t\tModal.confirm({\n\t// \t\t\t\ttitle: msg,\n\t// \t\t\t\tokText: \"Yes\",\n\t// \t\t\t\tcancelText: \"No\",\n\t// \t\t\t\tclassName: 'app-confirm-modal',\n\t// \t\t\t\tonOk() {\n\t// \t\t\t\t\tif (user.userType === 'customer') {\n\t// \t\t\t\t\t\tmixpanel.identify(user.email);\n\t// \t\t\t\t\t\tmixpanel.track('Customer - Job deleted from dashboard', { 'JobId': jobid });\n\t// \t\t\t\t\t\tdecline_the_job(jobid)\n\t// \t\t\t\t\t} else {\n\n\t// \t\t\t\t\t\tmixpanel.identify(user.email);\n\t// \t\t\t\t\t\tmixpanel.track('Technician - Job declined from dashboard', { 'JobId': jobid });\n\t// \t\t\t\t\t\tdecline_job_by_technician(jobid)\n\t// \t\t\t\t\t}\n\t// \t\t\t\t},\n\t// \t\t\t})\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tuseEffect(()=>{\n\t\tconst dataArray = []\n\t\tsocket.on(\"open-chat-panel-talkjs\", async (data)=>{\n\t\t\tdataArray.push(data);\n\t\t\tsetJobIdFromMessage((prevData) => [...prevData, data])\n\t\t\t\tJobApi.updateJob(data, { tech_message_dashbord: true })\n\t\t\t\t  .then(response => {\n\t\t\t\t\t// Handle the response or perform any necessary actions\n\t\t\t\t\tconsole.log(\"Job updated successfully:\", response);\n\t\t\t\t  })\n\t\t\t\t  .catch(error => {\n\t\t\t\t\t// Handle any errors that occurred during the update process\n\t\t\t\t\tconsole.error(\"Error updating job:\", error);\n\t\t\t\t  });\n\t\t})\n\t\tsocket.on(\"open-chat-panel-talkjs-for-customer\",async (data)=>{\n\t\t\tsetJobIdFromMessage(data)\n\t\t\tawait JobApi.updateJob(data,{tech_message_dashbord: true})\n\t\t})\n\t},[])\n\n\tconst handleScheduledDecline = async (e) => {\n\t\tconst jobid = e.currentTarget.name;\n\t\tlet msg = \"Are you sure you want to decline this job?\";\n\t\tModal.confirm({\n\t\t\ttitle: msg,\n\t\t\tokText: \"Yes\",\n\t\t\tcancelText: \"No\",\n\t\t\tclassName:'app-confirm-modal',\n\t\t\tonOk() {\n\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\tmixpanel.track('Technician - Job declined from dashboard',{'JobId':jobid});\n\t\t\t\tdecline_job_by_technician(jobid,false)\n\t\t\t},\n\t\t})\n\t}\n\n\tconst handleScheduledCancel = (e) => {\n\t\t//const jobid = e.currentTarget.name;\n\t\tconst job = e.currentTarget.name;\n\t\tsetUserType(\"Technician\")\n\t\tsetCancelJobId(job)\n\t\tsetIsCancelModal(true)\n\t}\n\n\n\n\tconst decline_the_job = async (jobid) => {\n\t\tawait JobApi.removeJob(jobid)\n\t\twindow.location.reload();\n\t}\n\n\n\t/**\n\t* This function will is common function for decline the job by tech\n\t* @response : jobid(Type: String): Job id which is declined by tech\n\t*\t\ttechAlert(Type:Boolean): True for other case and in schedule job decline it will only decline the without notification\n\t* @author : unknown\n\t* @note: this function updated by Ridhima Dhir by adding techAlert flag\n\t*/\n\n\tconst decline_job_by_technician = async (jobid, alert=true, reason=null) => {\n\t\t// find job details\n\t\tlet selectedJob = await JobApi.retrieveJob(jobid)\n\t\tlet tech_id = user.technician.id\n\t\tlet notifiedTechs = selectedJob.notifiedTechs;\n\t\tconsole.log(\"notifiedTechs ::: before\",notifiedTechs)\n\t\t// get notifiedTech object and reverse the object bcz notifiedTech have multiple same value\n\t\t// bcz after decline find tech function will work and push tech values agagin.\n\t\t// in secondryTime true: notification again goes to all tech but exclude declined techs.\n\t\tnotifiedTechs.reverse().forEach(function (techs, index) {\n\t\t\tif(techs['techId'] == tech_id){\n\t\t\t\tnotifiedTechs[index]['jobStatus']=\"tech-decline\"\n\t\t\t\tnotifiedTechs[index]['notifyEndAt']= new Date();\n\t\t\t}\n\t\t\ttech_id=false;\n\t\t});\n\t\tconsole.log(\"notifiedTechs ::: after\",notifiedTechs)\n\n\t\tlet dataToUpdate = {\n\t\t\t$unset: { schedule_accepted_by_technician: 1 ,technician: 1,schedule_accepted_on: 1 },\n\t\t\tschedule_accepted:false,\n\t\t\tnotifiedTechs:notifiedTechs.reverse(),\n\t\t\t$push: { tech_declined_ids: user.technician.id }\n\t\t}\n\t\tawait JobApi.updateJob(jobid,dataToUpdate)\n\n\t\tif(alert){\n\t\t\tsocket.emit(\"technician:schedule-job-declined\",{\n\t\t\t\t\"jobId\":selectedJob.id,\n\t\t\t\t\"technician_user\":user,\n\t\t\t\t\"reason\":reason\n\t\t\t})\n\t\t\tconsole.log(\">>>>>>>>>>>>>>>>>>>>>>sending schedule job >>>>>>>>>>>>>>>>\", selectedJob)\n\t\t\tawait socket.emit(\"send-schedule-alerts\",{\n\t\t\t\t\tjobId: jobid,\n\t\t\t\t\taccepted: false,\n\t\t\t\t\tcustomerTimezone: selectedJob.customer.user.timezone,\n\t\t\t\t\tjobObj: selectedJob,\n\t\t\t\t\tprimaryTime:selectedJob.primarySchedule,\n\t\t\t\t\tsecondryTime:selectedJob.secondrySchedule,\n\t\t\t\t\tphoneNumber:selectedJob.customer.user.phoneNumber,\n\t\t\t\t\tcustomerEmail:selectedJob.customer.user.email,\n\t\t\t\t\tcustomerName:selectedJob.customer.user.firstName,\n\t\t\t\t\ttechnicianId:false,\n\t\t\t\t\tdecliedTechnician:user.id\n\t\t\t})\n\t\t\tJobApi.sendSmsForScheduledDeclinedJob({'jobId':jobid,'technicianName':user.firstName})\n\t\t}else{\n\t\t\tconsole.log(\"not alert schedule job not found\");\n\t\t\tawait socket.emit(\"technician:schedule-job-declined-without-accepted\", {\n\t\t\t\t\"jobId\": selectedJob.id,\n\t\t\t\t\"technician_user\": user,\n\t\t\t\t\"reason\": reason\n\t\t\t})\n\t\t}\n\n\t\tsetTimeout(()=>{\n\t\t\twindow.location.reload()\n\t\t},3000)\n\t}\n\n\tconst pushToMeeting = async(e)=>{\n\t\te.currentTarget.disabled = true;\n\t\tconsole.log(\"target\",e.currentTarget.disabled )\n\t\tconst job= JSON.parse(e.currentTarget.name);\n\t\tif(job.status == 'long-job' && user && user.userType){\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track(`${user.userType} - Join long-job from dashboard`,{'JobId':job.id});\n\t\t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/${user.userType}/${job.id}`\n\t\t}\n\t\tif(job.status === \"Accepted\"){\n\n\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\tmixpanel.track(`${user.userType} -Start Call from dashboard`,{'JobId':job.id});\n\t\t\ttry {\n\t\t\t\t  const webdata  = await WebSocket.create({\n\t\t\t\t\t\t\tuser: user.id,\n\t\t\t\t\t\t\tjob : job.id,\n\t\t\t\t\t\t\tsocketType:'accept-job',\n\t\t\t\t\t\t\tuserType:user.userType,\n\t\t\t\t\t\t\thitFromCustomerSide:true,\n\t\t\t\t\t});\n\n\n\t\t\t\t  job['web_socket_id'] = webdata['websocket_details']['id']\n\t\t\t\t   await WebSocket.customer_start_call(job)\n\t\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t  // console.log('pushToMeeting error in dashboard page one>>>',err)\n\t\t\t   await WebSocket.customer_start_call(job)\n\t\t\t}\n\n\t\t}\n\n\t\tif (user.userType === \"customer\") {\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Customer - Join Call from dashboard',{'JobId':job.id});\n\t\t\tlet filter_dict = {'status':'Inprogress','customer':user.customer.id}\n\t\t\tconst checkStatus = await isCompletedJob(job.id);\n\t\t\tif(checkStatus){\n\t\t\t\topenNotificationWithIcon('error','Error',`Job is already completed from Technician side Please refresh your page !!`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst findInprogressLatestJob = JobService.findJobByParams(filter_dict)\n\t\t\tfindInprogressLatestJob.then(async (result)=>{\n\t\t\t\tconsole.log('result.data>>>>>>>>>>>>',{jobId:job.id, result})\n\t\t\t\tfor (let i = 0; i < result.jobs.data.length; i++) {\n\t\t\t\t\tif(user.customer.id === result.jobs.data[i].customer.id){\t\n\t\t\t\t\t\tif(job.id  == result.jobs.data[i].id){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst webdata  = await WebSocket.create({\n\t\t\t\t\t\t\t\t\t\tuser: user.id,\n\t\t\t\t\t\t\t\t\t\tjob : job.id,\n\t\t\t\t\t\t\t\t\t\tsocketType:'accept-job',\n\t\t\t\t\t\t\t\t\t\tuserType:user.userType,\n\t\t\t\t\t\t\t\t\t\thitFromCustomerSide:true,\n\t\t\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\t\t\tjob['web_socket_id'] = webdata['websocket_details']['id']\n\t\t\t\t\t\t\tawait WebSocket.customer_start_call(job)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch(err) {\n\t\t\t\t\t\t\t\t// console.log('pushToMeeting error in dashboard page two>>>',err)\n\t\t\t\t\t\t\t\tawait WebSocket.customer_start_call(job)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsocket.emit(\"invite-technician\", { \"job\": job.id, \"tech\": job.technician })\n\t\t\t\t\t\t\t// console.log('change here 4444444444444444444444')\n\t\t\t\t\t\t\tget_or_set_cookie(user)\n\t\t\t\t\t\t\tif(!result.jobs.data[0].GA_start_call_event_called){\n\t\t\t\t\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\t\t\t\t\tGAevent('Call Started','customer-start-call', result.jobs.data[0].id,user?.customer?.id)\n\t\t\t\t\t\t\t\tif(process.env.REACT_APP_URL){\n\t\t\t\t\t\t\t\t\tconst appUrl = process.env?.REACT_APP_URL?.split(\"/\")[2] || false;\n\t\t\t\t\t\t\t\t\tPushUserDataToGtm('call_started', user, appUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tawait JobApi.updateJob(result.jobs.data[0].id,{GA_start_call_event_called: true})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/customer/${job.id}`\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\topenNotificationWithIcon('error', 'Error', 'Looks like you are already in a meeting.Please end the meeting to start another one.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log(\"Customer id did not matched !!!!!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tlet filter_dict = {'status':'Inprogress','technician':user.technician.id}\n\t\t\tconst checkStatus = await isCompletedJob(job.id);\n\t\t\tif(checkStatus){\n\t\t\t\topenNotificationWithIcon('error','Error',`Job is already completed from Customer side Please refresh your page !!`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst findInprogressLatestJob = JobService.findJobByParams(filter_dict)\n\t\t\tfindInprogressLatestJob.then(async (result)=>{\n\n\t\t\t\tif(job.id  == result.jobs.data[0].id){\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Technician - Join Call from dashboard',{'JobId':job.id});\n\t\t\t\t\tget_or_set_cookie(user)\n\t\t\t\t\tif(!result.jobs.data[0].GA_start_call_event_called){\n\t\t\t\t\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\t\t\t\t\tGAevent('Call Started','tech-start-call', result.jobs.data[0].id,user.technician.id)\n\t\t\t\t\t\tawait JobApi.updateJob(result.jobs.data[0].id,{GA_start_call_event_called: true})\n\t\t\t\t\t}\n\t\t\t\t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${job.id}`\n\t\t\t\t}else{\n\t\t\t\t\topenNotificationWithIcon('error', 'Error', 'Looks like you are busy in another meeting. Please end the other meeting to join this one.')\n\t\t\t\t}\n\n\t\t\t});\n\t\t\t// let technicianData = await TechnicianService.retrieveTechnician(user.technician.id)\n\t\t\t// console.log('technicianData>>>>>>>>',technicianData)\n\t\t\t// if(technicianData.status == 'Available'){\n\t\t\t//     mixpanel.identify(user.email);\n\t\t\t//     mixpanel.track('Technician - Join Call from dashboard',{'JobId':job.id});\n\t\t\t//     history.push({pathname: `/technician/job/${job.id}`,jobId:job.id});\n\t\t\t// }else{\n\t\t\t//     openNotificationWithIcon('error', 'Error', 'Looks like you are busy in another meeting. Please end the other meeting to join this one.')\n\t\t\t// }\n\n\t\t}\n\n\n\t}\n\n\n\n\n\tconst SetPostAgainButton = ({job,data})=>{\n\n\t\tconst handlePostAgain = debounce((e, jobId) => {\n\t    setIsDisabled(true);\n\t    data.postAgain(e, jobId);\n\t    setIsDisabled(false);\n\t  }, 300, { leading: true, trailing: false });\n\n     const handleSameTech = debounce((e, jobId) => {\n\t    setIsDisabled(true);\n\t    data.sameTech(e, jobId);\n\t    setIsDisabled(false);\n\t  }, 300, { leading: true, trailing: false });\n\n\t\tlet stat_arr = ['Completed']\n\t\tif (stat_arr.includes(job.status)){\n\t\t\tif(stat_arr.includes(job.status)){\n\t\t\t\treturn <>\n\t\t\t\t\t\t<TableButton  index={data.index} disabled={isDisabled} onClick={(e)=>{handlePostAgain(e,data.jobId)}} jobId = {data.jobId} text=\"Post Again\" />\n\t\t\t\t\t\t<TableButton  index={data.index} disabled={isDisabled} onClick={(e)=>{handleSameTech(e,data.jobId)}} jobId = {data.jobId} text=\"Post again with same technician\" />\n\t\t\t\t\t</>\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn <TableButton index={data.index} onClick={data.tryAgain} jobId = {data.jobId} text=\"Post Again\" />\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn <></>\n\t\t}\n\n\t}\n\n\tconst SetForDeclinedPostAgainButton = ({job,data}) => {\n\t\tlet string_arr = ['Declined']\n\t\t\tif(string_arr.includes(job.status)){\n\t\t\t\treturn <>\n\t\t\t\t\t\t<TableButton index={data.index} onClick={data.postAgain} jobId = {data.jobId} text=\"Post Again\" />\n\t\t\t\t\t</>\n\t\t\t} else {\n\t\t\t    return <></>\n\t\t    };\n\t};\n\n\n\tconst setData = async(JobData, data, doneData, pendingData, declineData,techCompletedData,techDeclinedData,techProposalsData, jobId = false, technicianId = false, loader = false) => {\n\t\t// console.log('user.technician.id',user.technician.id)\n\t\t// console.log('JobData',JobData)\n\t\tif (JobData.length > 0) {\n\t\t\t// console.log(\">>>>running after \",user)\n\t\t\tfor (var k in JobData) {\n\t\t\t\tlet temp = {};\n\n\t\t\t\ttemp.key = JobData[k].JobId;\n\t\t\t\tif (JobData[k].software) {\n\t\t\t\t\ttemp.software = JobData[k].software.name;\n\t\t\t\t} else {\n\t\t\t\t\ttemp.software = 'None';\n\t\t\t\t}\n\n\t\t\t\tif (JobData[k].subSoftware) {\n\t\t\t\t\ttemp.SubSoftware = JobData[k].subSoftware.name;\n\t\t\t\t} else {\n\t\t\t\t\ttemp.SubSoftware = 'Others';\n\t\t\t\t}\n\n\t\t\t\ttemp.date = JobData[k].createdAt;\n\n\t\t\t\t if(JobData[k].technician != undefined && JobData[k].technician.user != undefined && JobData[k].technician.user.firstName != undefined){\n\n\t\t\t\t\ttemp.technician = JobData[k].technician.user.firstName\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttemp.technician = \"None\"\n\t\t\t\t}\n\n\t\t\t\tif(JobData[k].customer && JobData[k].customer.status == 'deleted' &&  JobData[k].customer.user){\n\n\t\t\t\t\ttemp.customer = 'NA'\n\t\t\t\t}\n\t\t\t\telse{\n\n\t\t\t\t\tif (user && user.userType === 'customer') {\n\t\t\t\t\t\ttemp.customer = JobData[k].customer?.user?.firstName;\n\t\t\t\t\t} else if (user && user?.userType === 'technician') {\n\t\t\t\t\t\tlet businessName = '';\n\t\t\t\t\t\ttemp.customer = JobData[k]?.customer?.user?.firstName\n\t\t\t\t\t\tif (JobData[k].customer?.user?.roles[0] === 'owner' && JobData[k].customer?.user?.isBusinessTypeAccount) {\n\t\t\t\t\t\t\tbusinessName = JobData[k]?.customer?.user?.businessName;\n\t\t\t\t\t\t\ttemp.customer = JobData[k].customer?.user?.firstName + (businessName ? ' ' + '['+businessName+']' : '');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Replace with your desired logic or JSX code\n\t\t\t\t\t\t if (JobData[k]?.customer?.user?.roles[0]==='admin' || JobData[k]?.customer?.user?.roles[0]==='user') {\n\t\t\t\t\t\t\tif (JobData[k]?.customer?.user?.ownerId) {\n\t\t\t\t\t\t\t\tconst ownerUserInfo = await UserApi.getUserById(JobData[k]?.customer?.user?.ownerId);\n\t\t\t\t\t\t\t\tif (ownerUserInfo.isBusinessTypeAccount) {\n\t\t\t\t\t\t\t\t\tbusinessName = ownerUserInfo.businessName;\n\t\t\t\t\t\t\t\t\tconsole.log(\"User admin or user dashboard\", ownerUserInfo);\n\t\t\t\t\t\t\t\t\ttemp.customer = JobData[k].customer?.user?.firstName + (businessName ? ' ' +'['+businessName+']' : '');\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\t}\n\n\t\t\t\ttemp.estimatedWait = JobData[k].software && JobData[k].software.estimatedWait ? JobData[k].software.estimatedWait : 'None'\n\t\t\t\ttemp.estimatedTime = JobData[k].software && JobData[k].estimatedTime ? JobData[k].estimatedTime : 'None'\n\t\t\t\ttemp.subOption = JobData[k].software && JobData[k].subOption ? JobData[k].subOption : 'None'\n\t\t\t\ttemp.estimatedPrice = JobData[k].estimatedPrice   ?JobData[k].estimatedPrice  : 'None'\n\t\t\t\ttemp.jobData = JobData[k]? JobData[k] : {}\n\t\t\t\ttemp.tech_search_start_at = JobData[k].tech_search_start_at ? JobData[k].tech_search_start_at : new Date()\n\t\t\t\ttemp.tech_search_time = JobData[k].tech_search_time ? JobData[k].tech_search_time : 900000\n\t\t\t\ttemp.notifiedTechs = JobData[k].notifiedTechs ? JobData[k].notifiedTechs : []\n\t\t\t\ttemp.cardPreAuthorization = JobData[k].cardPreAuthorization !== undefined ? JobData[k].cardPreAuthorization : false\n\t\t\t\tif (user && user.userType === 'customer') {\n\t\t\t\t\tconsole.log(\"runinig >>>>\")\n\t\t\t\t\tconsole.log(\"JobData[k] .accepted >>>\",JobData[k])\n\t\t\t\t\tjoinRoomsForAcceptedJobsCustomerAndTechnician(JobData[k])\n\t\t\t\t\tlet jobId = JobData[k].id\n\t\t\t\t\tlet index = k\n\t\t\t\t\tlet tryAgain = try_again_post_job\n\t\t\t\t\tlet postAgain = push_to_post_job\n\t\t\t\t\tlet sameTech = findSameTechnician\n\t\t\t\t\tlet dataForComp = {\n\t\t\t\t\t\t\t\tindex : index,\n\t\t\t\t\t\t\t\tpostAgain:postAgain,\n\t\t\t\t\t\t\t\ttryAgain:tryAgain,\n\t\t\t\t\t\t\t\tjobId:jobId,\n\t\t\t\t\t\t\t\tsameTech:sameTech\n\t\t\t\t\t}\n\t\t\t\t\ttemp.action = (\n\n\t\t\t\t\t\t<Col key={JobData.id}>\n\t\t\t\t\t\t\t{user && JobData[k] && JobData[k].customer && JobData[k].customer.user && JobData[k].customer.user.id === user.id &&  JobData[k].status !== \"Draft\" &&\n\t\t\t\t\t\t\t\t<SetPostAgainButton job={JobData[k]} data={dataForComp} />}\n\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn\" onClick={push_to_job_detail} name={`${JobData[k].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\n\t\t\t\t\t\t\t{user && JobData[k] && JobData[k].customer && JobData[k].customer.user &&  JobData[k].customer.user.id === user.id && JobData[k].status === 'Declined' && <SetForDeclinedPostAgainButton job={JobData[k]} data={dataForComp} />}\n\n\t\t\t\t\t\t\t{(JobData[k].status === 'Draft') && user && JobData[k].customer.user.id === user.id\n                               && <Button className=\"mb-2 btn app-btn\" onClick={push_to_post_draft_job} name={`${JobData[k].id}`} title=\"Please post job agian with valid card.\">Post<span></span></Button>}\n\n\t\t\t\t\t\t\t{/*{( JobData[k].status === 'Draft') && user && JobData[k].customer.user.id === user.id\n\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\" onClick={handleDecline} name={`${JobData[k].id}`} title=\"Job will be marked as declined and will be pushed to completed jobs.\">Delete<span></span></Button>} */}\n\n\n\t\t\t\t\t\t\t{JobData[k].status === \"Scheduled\" && JobData[k].customer?.id === user?.customer?.id &&\n\t\t\t\t\t\t\t\t<React.Fragment key=\"scheduled\">\n\t\t\t\t\t\t\t\t\t<div className=\"addToCalendar-geeker mb-2\">\n\t\t\t\t\t\t\t\t\t\t<AddToCalendarDropdown\n\t\t\t\t\t\t\t\t\t\t\tevent={{\n\t\t\t\t\t\t\t\t\t\t\t\t'title': 'Geeker Job',\n\t\t\t\t\t\t\t\t\t\t\t\tduration,\n\t\t\t\t\t\t\t\t\t\t\t\t'description': JobData[k].issueDescription,\n\t\t\t\t\t\t\t\t\t\t\t\t'startDatetime': moment.utc(JobData[k].primarySchedule).format('YYYYMMDDTHHmmssZ'),\n\t\t\t\t\t\t\t\t\t\t\t\t'endDatetime': moment.utc(new Date(new Date(JobData[k].primarySchedule).setHours(new Date(JobData[k].primarySchedule).getHours() + 2))).format('YYYYMMDDTHHmmssZ'),\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tbuttonProps={{\n\t\t\t\t\t\t\t\t\t\t\t\t'className': 'thisssssssssss'\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\titems={[SHARE_SITES.GOOGLE, SHARE_SITES.OUTLOOK]}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t  \t{JobData[k].customer?.id === user?.customer?.id &&\n\t\t\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn\" onClick={CancelTheJob} data-tech={`${technicianId}`} name={`${JSON.stringify(JobData[k])}`}>Cancel<span></span></Button>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{/*{JobData[k].technician && JobData[k].status === \"Scheduled\" && JobData[k].id === jobId && !isMobile\n\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\" onClick={pushToMeeting} data-tech={`${technicianId}`} name={`${JSON.stringify(JobData[k])}`}>Join<span></span></Button>}*/}\n\t\t\t\t\t\t\t<MeetingButton job = {JobData[k]} pushToMeeting={pushToMeeting} user={user} isMobile={isMobile} technicianId={technicianId} />\n\n\t\t\t\t\t\t\t{/* {user && JobData[k] && JobData[k].customer && JobData[k].customer.user && JobData[k].customer.user.id === user.id &&  JobData[k].status !== \"Draft\" && JobData[k].status !== \"Declined\" && JobData[k].status !== \"Expired\" && JobData[k].status !== 'Pending' && JobData[k].chatRoomId !== null && JobData[k].chatRoomId !== undefined &&\n\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn chat-btn-cus unique-button\" onClick={push_to_job_detailForChat} name={`${JobData[k].id}`} title=\"Click to see job details.\">Start chat with technician<span></span></Button>} */}\n\n\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t);\n\n\t\t\t\t\t// This Condition  will run for the job status that is mentioned in the if condition\n\t\t\t\t\tif (JobData[k].status === 'Scheduled' || JobData[k].status === 'Accepted' || JobData[k].status === 'Waiting'\n\t\t\t\t\t\t|| (JobData[k].status === 'Inprogress' && JobData[k].technician && user.technician && JobData[k].technician.id === user.technician.id)\n\t\t\t\t\t\t|| (JobData[k].status === 'Inprogress' && JobData[k].customer && user.customer) || JobData[k].status === 'long-job'\n\t\t\t\t\t\t|| JobData[k].status === 'Pending' || JobData[k].status === 'Draft')\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.log('JobData[k].status>>>>>>>>',JobData[k].status)\n\t\t\t\t\t\ttemp.stats = JobData[k].status;\n\n\t\t\t\t\t\tif (JobData[k].status === 'Scheduled' && (JobData[k].technician && JobData[k].technician !== '') && user.id === JobData[k].customer.user.id) {\n\t\t\t\t\t\t\ttemp.stats = 'Scheduled & Accepted'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (JobData[k].status === 'Waiting' && (JobData[k].technician && JobData[k].technician !== '') && user.id === JobData[k].customer.user.id) {\n\t\t\t\t\t\t\ttemp.stats = JobData[k].status\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (JobData[k].status === 'Scheduled' || JobData[k].status === 'Waiting' || JobData[k].status === 'Accepted' || JobData[k].status === 'Inprogress'\n\t\t\t\t\t\t    || JobData[k].status === 'ScheduledExpired' || JobData[k].status === 'long-job' || JobData[k].status === 'Pending' || JobData[k].status === 'Draft') {\n\t\t\t\t\t\t    \tif(JobData[k].status === 'long-job'){\n\t\t\t\t\t\t    \t\ttemp.stats = 'Long Job'\n\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t    \tif(JobData[k].status === 'Inprogress'){\n\t\t\t\t\t\t    \t\ttemp.stats =\"InProgress\"\n\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t\tdata.push(temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if (user && user.userType === 'technician' && user.technician) {\n\n\t\t\t\t\tjoinRoomsForAcceptedJobsCustomerAndTechnician(JobData[k])\n\t\t\t\t\t// console.log(\"the temp ::::::::: ,\",temp)\n\t\t\t\t\ttemp.action = (\n\t\t\t\t\t\t<Row key={JobData[k].id}>\n\t\t\t\t\t\t\t<Col xs=\"12\">\n\t\t\t\t\t\t\t    <Button className=\"mb-2 btn app-btn\" onClick={push_to_job_detail} name={`${JobData[k].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\n\t\t\t\t\t\t\t\t{JobData[k].status === 'Scheduled' && (JobData[k].technician === undefined || !JobData[k].technician) && !JobData[k].tech_declined_ids.includes(user.technician.id)\n\t\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\" onClick={push_to_job_detail_with_apply_button} name={`${JobData[k].id}`} title=\"Click to see job details and apply for this job.\">Apply<span></span></Button>}\n\t\t\t\t\t\t\t\t{JobData[k].status === 'Scheduled' && (JobData[k].technician && JobData[k].technician.id === user.technician.id) && !JobData[k].tech_declined_ids.includes(user.technician.id)\n\t\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={handleScheduledCancel}\n\t\t\t\t\t\t\t\t\t\tname={JobData[k].id}\n\t\t\t\t\t\t\t\t\t\ttitle=\"You will no longer see this job if you click on this button.\">Cancel<span></span></Button>}\n\t\t\t\t\t\t\t\t{JobData[k].status === 'Scheduled' && !JobData[k].technician  && !JobData[k].tech_declined_ids.includes(user.technician.id)\n\t\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={handleScheduledDecline}\n\t\t\t\t\t\t\t\t\t\tname={JobData[k].id}\n\t\t\t\t\t\t\t\t\t\ttitle=\"You will no longer see this job if you click on this button.\">Decline<span></span></Button>}\n\t\t\t\t\t\t\t\t{JobData[k].technician && JobData[k].status === \"Scheduled\" && JobData[k].id === jobId && JobData[k].technician.user.id === technicianId  \n\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\" onClick={pushToMeeting} data-tech={`${technicianId}`} name={`${JSON.stringify(JobData[k])}`}>Join<span></span></Button>}\n\t\t\t\t\t\t\t\t{(JobData[k].status === 'Inprogress' && JobData[k].technician && JobData[k].technician.id === user.technician.id) && \n\t\t\t\t\t\t\t\t\t <Button className= \"mb-2 btn app-btn\" onClick={pushToMeeting} name={`${JSON.stringify(JobData[k])}`} >Join<span></span></Button>}\n\n\t\t\t\t\t\t\t\t{(JobData[k].status === 'long-job' && JobData[k].technician && JobData[k].technician.id === user.technician.id) && \n\t\t\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn\" onClick={pushToMeeting} name={`${JSON.stringify(JobData[k])}`} >Join<span></span></Button>}\n\n\n\t\t\t\t\t\t\t\t{(JobData[k].status === 'Waiting' && !JobData[k].tech_declined_ids.includes(user.technician.id)) && !JobData[k].declinedByCustomer.includes(user.technician.id) \n\t\t\t\t\t\t\t\t\t&& <Button className=\"mb-2 btn app-btn\" onClick={handleAccepted} name={`${JSON.stringify(JobData[k])}`} title=\"Accept the current job\">Accept<span></span></Button>}\n\n\n\t\t\t\t\t\t\t\t{JobData[k].status === 'Scheduled' && JobData[k].technician && JobData[k].technician.id === user.technician.id &&\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<div className=\"addToCalendar-geeker mb-2\">\n\t\t\t\t\t\t\t\t\t <AddToCalendarDropdown\n\t\t\t\t\t\t\t\t\t\tevent={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t'title': 'Geeker Job',\n\t\t\t\t\t\t\t\t\t\t\t\t\tduration,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'description': JobData[k].issueDescription,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'startDatetime': moment.utc(JobData[k].primarySchedule).format('YYYYMMDDTHHmmssZ'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'endDatetime': moment.utc( new Date(new Date(JobData[k].primarySchedule).setHours(new Date(JobData[k].primarySchedule).getHours() + 2))).format('YYYYMMDDTHHmmssZ'),\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tbuttonProps={{\n\t\t\t\t\t\t\t\t\t\t'className':'thisssssssssss'\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\titems={[SHARE_SITES.GOOGLE, SHARE_SITES.OUTLOOK]}\n\t\t\t\t\t\t\t\t\t  />\n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{JobData[k].status === 'Accepted' && JobData[k].technician && JobData[k].technician.id === user.technician.id &&\n\t\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn\" onClick={handleTechnicianCall} name={JobData[k].id} title=\"Accept the current job\">Start call with customer<span></span></Button>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{/* {JobData[k].chatRoomId !== null && JobData[k].chatRoomId !== undefined && JobData[k].status !== 'Waiting' && JobData[k].status !== 'Declined' && JobData[k].status !== 'Expired' && JobData[k].status !== 'Pending' &&\n\t\t\t\t\t\t\t\t<Button className=\"mb-2 btn app-btn chat-btn-cus unique-button\" onClick={push_to_job_detailForChat} name={`${JobData[k].id}`} title=\"Click to see job details.\">Start chat with customer<span></span></Button>} */}\n\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t);\n\n\t\t\t\t\tif((techMainSoftwares.includes(JobData[k].software.id) || techSubSoftwares.includes(JobData[k].software.id)) && (JobData[k].status === 'Pending' || JobData[k].status === 'Scheduled' || JobData[k].status === 'Waiting') &&  JobData[k].tech_declined_ids && !JobData[k].tech_declined_ids.includes(user.technician.id) && JobData[k].declinedByCustomer && !JobData[k].declinedByCustomer.includes(user.technician.id)){\n\n\t\t\t\t\t\tif(JobData[k].status == 'Waiting' || JobData[k].status == 'Scheduled'){\n\t\t\t\t\t\t\tconsole.log('JobData[k].status>>>>>>>>>>',JobData[k].issueDescription)\n\t\t\t\t\t\t\tlet resultVal = await checkIfTwoTierJobAndExpertTech(user.technician,JobData[k])\n\t\t\t\t\t\t\tlet checkVal = checkIfPostAgainWithSameTech(user.id,JobData[k])\n\n\t\t\t\t\t\t\tif(resultVal && checkVal){\n\t\t\t\t\t\t\t\ttemp.stats = JobData[k].status\n\t\t\t\t\t\t\t\ttechProposalsData.push(temp)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\ttemp.stats = JobData[k].status\n\t\t\t\t\t\t\ttechProposalsData.push(temp)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif((JobData[k].status === 'Accepted' || JobData[k].status === 'Pending' || JobData[k].status === 'Inprogress' || JobData[k].status === 'long-job') && JobData[k].technician && user.technician && JobData[k].technician.id === user.technician.id ){\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('JobData[k].status>>>>>>>>>>',JobData[k].status)\n\n\t\t\t\t\t\ttemp.stats = JobData[k].status\n\t\t\t\t\t\tif(JobData[k].status === 'long-job'){\n\t\t\t\t\t\t\ttemp.stats = 'Long Job'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(JobData[k].status === \"Inprogress\"){\n\t\t\t\t\t\t\ttemp.stats = \"InProgress\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(JobData[k].status === \"Pending\"){\n\t\t\t\t\t\t\ttemp.stats = \"Pending\"\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttechProposalsData.push(temp)\n\n\t\t\t\t\t}\n\n\t\t\t\t\t if (JobData[k].status === 'Scheduled' && JobData[k].technician && JobData[k].technician.id === user.technician.id) {\n\t\t\t\t\t\ttemp.stats = 'Scheduled & Accepted'\n\t\t\t\t\t}\n\t\t\t\t\tif(JobData[k].status === 'Scheduled' && JobData[k].tech_declined_ids.includes(user.technician.id)){\n\t\t\t\t\t\ttemp.stats = \"Cancelled by you\"\n\t\t\t\t\t\ttechCompletedData.push(temp)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (JobData[k].declinedByCustomer.includes(user.technician.id)) {\n\t\t\t\t\t\ttemp.stats = 'Cancelled by Customer'\n\t\t\t\t\t\ttechDeclinedData.push(temp)\n\t\t\t\t\t\ttechCompletedData.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttemp.issuedesc = JobData[k].issueDescription;\n\t\t\t\ttemp.jobId = JobData[k].id\n\t\t\t\tif(JobData[k].status === 'Scheduled'){\n\t\t\t\t\ttemp.date = JobData[k].primarySchedule;\n\t\t\t\t}\n\n\t\t\t\tif (JobData[k].status === 'Completed' || JobData[k].status === 'Declined' || JobData[k].status === 'Expired' || JobData[k].status === 'ScheduledExpired') {\n\t\t\t\t\tif (user.userType === 'customer') {\n\t\t\t\t\t\ttemp.stats = JobData[k].status;\n\t\t\t\t\t\tif (JobData[k].status === 'ScheduledExpired'  && user.id === JobData[k].customer.user.id) {\n\t\t\t\t\t\t\ttemp.stats = 'ScheduledExpired'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(JobData[k].status === 'Declined'){\n\t\t\t\t\t\t\ttemp.stats = \"Cancelled\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdoneData.push(temp);\n\t\t\t\t\t}else {\n\t\t\t\t\t\tif (user.userType === 'technician' && JobData[k].technician && JobData[k].technician.id === user.technician.id) {\n\t\t\t\t\t\t\ttemp.stats = JobData[k].status;\n\t\t\t\t\t\t\tif (JobData[k].tech_declined_ids.includes(user.technician.id)) {\n\t\t\t\t\t\t\t\ttemp.stats = JobData[k].is_transferred === true ? \"Completed\" :'Cancelled by You';\n\t\t\t\t\t\t\t\ttechDeclinedData.push(temp);\n\t\t\t\t    \t}\n\t\t\t\t\t\t\ttechCompletedData.push(temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"JobData\", JobData[k]);\n\t\t\t\t}\n\n\t\t\t\telse if (JobData[k].status === 'Pending' || JobData[k].status === 'Draft') {\n\t\t\t\t\tif (user.userType === 'customer') {\n\t\t\t\t\t\ttemp.stats = JobData[k].status;\n\t\t\t\t\t\tpendingData.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\t// techCompletedData.forEach(record => {\n\t\t// \t// Check if the customer status is 'deleted'\n\t\t// \tconsole.log(\"record: \" , record)\n\t\t// \tif (record.jobData.customer.status == 'deleted') {\n\t\t// \t  // Update the firstName property to 'NA'\n\t\t// \t  record.jobData.customer.user.firstName = 'NA';\n\t\t// \t}\n\t\t//   });\n\t\tconst filteredTableData = data && data.length>0 ? data.filter((v,i,a)=>a.findIndex(v2=>(v2.key===v.key))===i) : data;\n\t\tconst filteredProposalData = techProposalsData && techProposalsData.length>0 ? techProposalsData.filter((v,i,a)=>a.findIndex(v2=>(v2.key===v.key))===i) : techProposalsData;\n        console.log('doneData>>>>>>>>>>', filteredTableData);\n\t\tsetCompletedData(doneData);\n\t\tsetTableData(filteredTableData);\n\t\tsetPendingData(pendingData);\n\t\tconsole.log('techProposalsData>>>>>>>>>>>', filteredProposalData)\n\t\tsetProposalsData(filteredProposalData)\n\t\tsetTechCompletedData(techCompletedData)\n\t\tsetTechDeclinedData(techDeclinedData)\n\t\tsetShowLoader(false);\n\n\t}\n\n\tuseEffect(()=>{\n\t\tactiveTabGlobal = activeTabKey\n\t},[activeTabKey])\n\n\tuseEffect(() => {\n\t\t// let JobData = []\n\t\tsocket.on(\"scheduled-call-alert\", function (receiver) {\n\t\t\t// JobData = receiver.allJobs\n\t\t\ttry {\n\t\t\t\tconsole.log(\"Inside socket FetchJob ::::1\")\n\n\t\t\t\tfilterJobsByTech()\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"this is the error\",err)\n\t\t\t}\n\t\t})\n\t\tsocket.on('update-dashboard-status',()=>{\n\t\t\tif(user.userType === \"technician\"){\n\t\t\t\tfilterJobsByTech()\n\t\t\t\t}\n\t\t})\n\t\tsocket.on(\"join-scheduled-call\", function (receiver) {\n\t\t\t// JobData = receiver.allJobs\n\n\t\t\ttry {\n\t\t\t\tconsole.log(\"Inside socket FetchJob ::::2\")\n\t\t\t\tfilterJobsByTech()\n\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"join-scheduled-call error :\",err)\n\t\t\t}\n\t\t})\n\n\t\tsocket.on(\"set-join-on-dashboard\", function (receiver) {\n\t\t\t// JobData = receiver.allJobs\n\t\t\tif (receiver.tech) {\n\t\t\t\tconsole.log(\"inside receiver.tech\")\n\t\t\t\tif (user === undefined) {\n\t\t\t\t\trefetch()\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tfilterJobsByTech()\n\t\t\t\t} catch (err) {\n\t\t\t\t\trefetch()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tsocket.on(\"technician:assigned\",(data)=>{\n\t\t\tconsole.log(\"data >>>>>>\",data)\n\t\t\ttry{\n\t\t\t\tif (user && user.technician && data.technician == user.technician.id){\n\t\t\t\t\tconsole.log(\"activeTabKey >>>>>\",activeTabGlobal)\n\t\t\t\t\tlet query = queryDecider(activeTabGlobal,user,false,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\t\t\t\tcall_fetch_jobs(query)\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\tconsole.log(\"error in technician:assigned socket >>>\",err)\n\t\t\t}\n\n\t\t})\n\t\tsocket.on(\"decline-technician\", (receiver) => {\n\t\t\tif (user && user.technician && receiver.res != undefined && user.technician.id === receiver.res.id) {\n\t\t\t\t// JobData = receiver.allJobs\n\t\t\t\tlet query = queryDecider(activeTabKey,user,false,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\t\t\tcall_fetch_jobs(query)\n\t\t\t}\n\t\t})\n\t\tsocket.on(\"call:started-customer\",()=>{\n\t\t\tif (user){\n\t\t\t\tlet query = queryDecider(activeTabKey,user,false,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\t\t\tcall_fetch_jobs(query)\n\t\t\t}\n\t\t})\n\n\n\t}, [socket])\n\n\n\n\tuseEffect(() => {\n\t\t// This condition is added so that when tab is toggled then it will not  reset the data as if it reset then it assume that\n\t\t// there is no  Live Job Available and Completed and Declined Job Tab Occuply full width\n\t\tconst data = tableData && tableData.length>0 ? tableData :[];\n\t\tconst doneData = [];\n\t\tlet JobData = []\n\t\tconst pendingData = []\n\t\tconst declineData = []\n\t\tconst techCompletedData = []\n\t\tconst techDeclinedData = []\n\t\tconst techProposalsData = proposalsData && proposalsData.length>0 ? proposalsData : [];\n\n\t\tif (user.customer) {\n\t\t\tif (allJobs) {\n\t\t\t\tJobData = allJobs.data\n\t\t\t}\n\t\t}\n\n\t\tif(user.technician && (user.technician.registrationStatus === \"incomplete_profile\" || user.technician.registrationStatus === \"completed\" )){\n\t\t\tif (allJobs) {\n\t\t\t\tJobData = allJobs.data\n\t\t\t}\n\t\t}else if(user.technician){\n\t\t\t setIsLoading(false)\n\t\t}\n\t\tif (JobData && JobData.length > 0) {\n\t\t\ttry {\n\t\t\t\tsetData(JobData, data, doneData, pendingData, declineData,techCompletedData,techDeclinedData,techProposalsData, true)\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"useEffect dashboard.js \", err)\n\t\t\t}\n\t\t}\n\t\t// setforJoin(false)\n\t}, [allJobs, history,socket,user, startTimer]);\n\n\t/*const handleCheck = key => {\n\t\tif (key === 'activeStatus') {\n\t\t\tconst transData = {\n\t\t\t\tuserId: user.id,\n\t\t\t\tactiveStatus: !activeStatus,\n\t\t\t};\n\n\t\t\tupdateUserInfo(transData).then((userRes) => {\n\t\t\t\tsetActiveStatus(userRes.activeStatus);\n\t\t\t\tnotification.success({\n\t\t\t\t\tmessage: 'Success',\n\t\t\t\t});\n\t\t\t}).catch(() => { });\n\t\t} else {\n\t\t\tsetTierJobStatus(!tierJobStatus);\n\t\t}\n\t};*/\n\n\tconst filterJobsByTech = () => {\n\t\tlet main_software = [];\n\t\tlet sub_software = [];\n\t\tif (user.technician && (user.technician.registrationStatus === \"incomplete_profile\" || user.technician.registrationStatus === \"completed\" )) {\n\t\t\tconst { expertise } = user.technician;\n\t\t\tfillSoftwares(expertise,main_software,sub_software)\n\t\t\tmainSoftwareWithoutState = main_software;\n\t\t\tsetTechMainSoftwares(main_software)\n\t\t\tsetTechSubSoftwares(sub_software)\n\t\t\tlet newSoftArray =  main_software.concat(sub_software)\n\t\t\tconst query = {\n\t\t\t\t\t   software: { \"$in\": newSoftArray },$or:[{ status: {$in:[\"Waiting\"]},\n\t\t\t\t\t   tech_declined_ids : {$nin:[user.technician.id]} },\n\t\t\t\t\t   {$and:[{status:\"Accepted\"},{technician:user.technician.id}]},\n\t\t\t\t\t   {\"$or\":[{\"$and\":[{\"status\":[\"Scheduled\"]},{\"schedule_accepted_by_technician\":user.id}]},{\n\t\t\t\t\t\t\t\"$and\":[{\"status\":['Scheduled']},{\"schedule_accepted\":false}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]},\n\t\t\t\t\t\t {\"$or\":[{\"$and\":[{\"status\":\"Inprogress\"},{\"technician\":user.technician.id}]},\n\t\t\t\t\t\t ]},\n\t\t\t\t\t\t {\"$or\":[{\"$and\":[{\"status\":\"long-job\"},{\"technician\":user.technician.id}]},\n\t\t\t\t\t\t ]},\n\n\t\t\t\t\t   ] }\n\t\t\tconsole.log(\"filterJobsByTech query :::: \",query)\n\t\t\tcall_fetch_jobs(query)\n\t\t}\n\t\telse{\n\t\t\tsetTotalJobs(0)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t(async()=>{ if (user) {\n\t\t\tif (user.userType === 'customer') {\n\t\t\t\tif (user.customer) {\n\t\t\t\t\tsetActiveTabKey(\"Active Jobs\")\n\t\t\t\t\t// mixpanel code//\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Customer - On dashboard page');\n\t\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t});\n\t\t\t\t\t// setIsLoading(false)\n\t\t\t\t\t// mixpanel code//\n\n\t\t\t\t    // Here firstly I check whether is there any live job or not, if not then we will fetch completed and Declined jobs of customer\n\t\t\t\t\tconst customerLiveJobData = await call_fetch_jobs({ customer: `${user.customer.id}`, '$or': [{ status: { $in: [\"Scheduled\", \"Inprogress\", \"Waiting\", \"Accepted\", \"long-job\", \"Pending\", \"Draft\"] } }] })\n\t\t\t\t\tif(customerLiveJobData?.totalCount == 0 && customerLiveJobData?.data?.length == 0){\n\t\t\t\t\t\tcall_fetch_jobs({ customer: `${user.customer.id}`, '$or': [{ status: { $in: [\"ScheduledExpired\",\"Expired\",\"Completed\",\"Declined\"] } }] })\n\t\t\t\t\t\tsetActiveTabKey(\"Completed Jobs\")\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\t\t\t\t\t// when new customer registers,we get only user information in this file and no customer data, it is the final stage where code stops in this file , so here we will refetch user so that we can get customer data within it(manibha)\n\t\t\t\t\trefetch()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet main_software = [];\n\t\t\t\tlet sub_software = [];\n\t\t\t\tsetActiveTabKey(\"Proposals\")\n\t\t\t\tif (user.technician && (user.technician.registrationStatus === \"incomplete_profile\" || user.technician.registrationStatus === \"completed\" )) {\n\t\t\t\t\t // mixpanel code//\n\t\t\t\t\tsetActiveTabKey(\"Proposals\")\n\t\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\t\tmixpanel.track('Technician - On dashboard page');\n\t\t\t\t\tmixpanel.people.set({\n\t\t\t\t\t\t$first_name: user.firstName,\n\t\t\t\t\t\t$last_name: user.lastName,\n\t\t\t\t\t});\n\t\t\t\t\t// mixpanel code//\n\n\t\t\t\t\tconst { expertise } = user.technician;\n\t\t\t\t\tfillSoftwares(expertise,main_software,sub_software)\n\t\t\t\t\tsetTechMainSoftwares(main_software);\n\t\t\t\t\tsetTechSubSoftwares(sub_software);\n\t\t\t\t\tlet newSoftArray =  main_software.concat(sub_software)\n\t\t\t\t\t// console.log('main_software>>>>>>>>',main_software)\n\t\t\t\t\tconst query = queryDecider(\"Proposals\",user,newSoftArray,techMainSoftwares,techSubSoftwares,mainSoftwareWithoutState,subSoftwareWithoutState)\n\t\t\t\t\t// const query = { software: { \"$in\": newSoftArray },$or:[{ status: {$in:[\"Waiting\"]},\n\t\t\t\t\t//    tech_declined_ids : {$nin:[user.technician.id]} },\n\t\t\t\t\t//    {$and:[{status:\"Accepted\"},{technician:user.technician.id}]},\n\t\t\t\t\t//    {\"$or\":[{\"$and\":[{\"status\":[\"Scheduled\"]},{\"schedule_accepted_by_technician\":user.id}]},{\n\t\t\t\t\t// \t\t\"$and\":[{\"status\":['Scheduled']},{\"schedule_accepted\":false}]\n\t\t\t\t\t// \t }\n\n\t\t\t\t\t// \t ]},\n\t\t\t\t\t// \t {\"$or\":[{\"$and\":[{\"status\":\"Inprogress\"},{\"technician\":user.technician.id}]}\n\t\t\t\t\t// \t ]},\n\n\t\t\t\t\t// \t {\"$or\":[{\"$and\":[{\"status\":\"long-job\"},{\"technician\":user.technician.id}]},\n\t\t\t\t\t// \t ]},\n\n\t\t\t\t\t//    ] }\n\n\t\t\t\t\tconsole.log('useeffect query::',query)\n\t\t\t\t\tcall_fetch_jobs(query, { page: 1,pageSize:10, userType : (user.userType === \"technician\" ? user.technician.technicianType : user.customer.customerType), id : user.userType === \"technician\" ? user?.technician?.id : '' })\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetTotalJobs(0)\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// setRole(user.userType);\n\t\t\tsetActiveStatus(user.activeStatus);\n\t\t}})()\n\t}, [user,refreshData]);\n\n\tconst call_fetch_jobs = async (filter,\n\tpagination={ page: 1,pageSize:10, userType : (user.userType === \"technician\" ? user.technician.technicianType : user.customer.customerType), id: (user.userType === \"technician\" ? user?.technician?.id : '')}) => {\n\t\tconst res = await fetchJobByParams(filter,pagination)\n\t\tsetTimeout(function(){\n\t\t\tsetIsLoading(false)\n\t\t},1500)\n\n\t\tconsole.log(\"call_fetch_jobs response :::::: \",res)\n\t\tif(res){\n\t\t\treturn res.jobs\n\t\t}\n\t\telse{\n\t\t\treturn []\n\t\t}\n\t}\n\n\tif (!user) {\n\t\thistory.push('/login');\n\t}\n\tconst closePendingModal = () => {\n\t\tsetCustomerConfirm(false);\n\t\tsetCustomerConfirmSameTech(false)\n\t\tsetCustomerConfirmDraftJob(false)\n\t  };\n\n\tconst [refreshData, setRefreshData] = useState(false)\n\treturn (\n\n\t\t<>\n\n\t\t<Modal\n\t\t\tstyle={{ top: 40}}\n\t\t\tclosable={true}\n\t\t\tonCancel={closePendingModal}\n\t\t\tvisible={customerConfirm || customerConfirmSameTech || customerConfirmDraftJob}\n\t\t\tmaskStyle={{backgroundColor:\"#DCE6EDCF\"}}\n\t\t\tmaskClosable={true}\n\t\t\twidth={800}\n\t\t\tbodyStyle={{height: 170, paddingTop:50}}\n\t\t\tfooter={\n\t\t\t\t[\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"btn app-btn app-btn-light-blue modal-footer-btn\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetCustomerConfirm(false);\n\t\t\t\t\t\tsetCustomerConfirmSameTech(false)\n\t\t\t\t\t\tsetCustomerConfirmDraftJob(false)\n\t\t\t\t\t}}\n\t\t\t\t\tkey='no'\n\t\t\t\t>\n\t\t\t\t\t<span></span>Back To Dashbord\n\t\t\t\t</Button>,\n\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"btn app-btn job-accept-btn modal-footer-btn\"\n\t\t\t\t\tonClick={customerConfirm ?  postAgainFunction : customerConfirmSameTech ? postAgainFunctionWithSameTech : customerConfirmDraftJob ? postAgainFunctionDraft : null}\n\t\t\t\t\tkey='yes'\n\t\t\t\t>\n\t\t\t\t\t<span></span>Create New\n\t\t\t\t</Button>,\n\n\t\t\t\t]}\n\t\t>\n\t\t<div className=\"\">\n\t\t\t<span className=\"div-font\" style={{fontSize:20,paddingTop:'40px'}}>\n\t\t\t\t{message}\n\t\t\t\t</span>\n\t  </div>\n\t\t</Modal>\n\n\t\t\t<Col md=\"12\" className=\"py-4 mt-1\">\n\t\t\t\t<Loader height=\"100%\" className={(isLoading ? \"loader-outer\" : \"d-none\")}  />\n\t\t\t\t<Col xs=\"12\" className=\"pb-3\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<JobCancelFrom\n\t\t\t\t\t\t\tisCancelModal={isCancelModal}\n\t\t\t\t\t\t\tsetIsCancelModal={setIsCancelModal}\n\t\t\t\t\t\t\tcancelJobId={cancelJobId}\n\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\ttype={userType}\n\t\t\t\t\t\t\tjob={jobData}\n\t\t\t\t\t\t\tdecline_job_by_technician={decline_job_by_technician}\n\t\t\t\t\t\t\tsetcurrentStep={setcurrentStep}\n\t\t\t\t\t\t/>\n\n\n\t\t\t\t\t<Col md=\"12\" className=\"py-4 mt-1\">\n\t\t\t\t\t\t<Col xs=\"12\" className=\"p-0 dashboard-tables-outer\">\n\t\t\t\t\t\t\t{user && user.userType === 'customer' &&\n\n\t\t\t\t\t\t\t\t<Tabs defaultActiveKey=\"Active Jobs\" id=\"cust-dashboard\" className={tableData && tableData.length > 0 ? \"mb-3 tabs-outer-customer\" : \"mb-3 tabs-outer-customer-full-size\"} activeKey={tableData && tableData.length > 0 ? activeTabKey : \"Completed Jobs\"} onSelect={(k) => { changeTab(k) }}>\n\n\t\t\t\t\t\t\t\t\t{tableData && tableData.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Active Jobs\" title=\"Live Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t\t<DashboardTable push_to_job_detailForChat={push_to_job_detailForChat} jobIdFromMessage={jobIdFromMessage} data={tableData} isLoading={showLoader} user_data={user} date_options={DATE_OPTIONS} tabname={TabName} />\n\t\t\t\t\t\t\t\t\t\t</Tab>}\n\n\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Completed Jobs\" title=\"Completed & Declined Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<DashboardTable push_to_job_detailForChat={push_to_job_detailForChat} jobIdFromMessage={jobIdFromMessage} data={completedData} isLoading={showLoader} user_data={user} date_options={DATE_OPTIONS} />\n\n\t\t\t\t\t\t\t\t\t</Tab>\n\n\t\t\t\t\t\t\t\t\t{/* <Tab eventKey=\"Pending Jobs\" title=\"Pending Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<DashboardTable data={pendingData} isLoading={showLoader}  user_data={user} date_options={DATE_OPTIONS}/>\n\n\t\t\t\t\t\t\t\t\t</Tab> */}\n\n\t\t\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{user && user.userType === 'technician' &&\n\n\t\t\t\t\t\t\t\t<Tabs defaultActiveKey=\"Proposals\" id=\"tech-dashboard\" className={proposalsData && proposalsData.length > 0 ? \"mb-3 tabs-outer-customer\" : \"mb-3 tabs-outer-customer-full-size\"} activeKey={proposalsData && proposalsData.length > 0 ? activeTabKey : \"Completed Jobs Tech\"} onSelect={(k) => { changeTab(k) }}>\n\t\t\t\t\t\t\t\t\t{proposalsData && proposalsData.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Proposals\" title=\"Live Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t\t<DashboardTable push_to_job_detailForChat={push_to_job_detailForChat} jobIdFromMessage={jobIdFromMessage} data={proposalsData} isLoading={showLoader} user_data={user} date_options={DATE_OPTIONS} />\n\t\t\t\t\t\t\t\t\t\t</Tab>\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t<Tab eventKey=\"Completed Jobs Tech\" title=\"Completed & Declined Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<DashboardTable push_to_job_detailForChat={push_to_job_detailForChat} jobIdFromMessage={jobIdFromMessage} data={techCompletedData} isLoading={showLoader} user_data={user} date_options={DATE_OPTIONS} />\n\t\t\t\t\t\t\t\t\t</Tab>\n\n\t\t\t\t\t\t\t\t\t{/* <Tab eventKey=\"Declined Jobs Tech\" title=\"Declined Jobs\" className=\"col-md-12 p-0\">\n\t\t\t\t\t\t\t\t\t\t<DashboardTable data={techDeclinedData} isLoading={showLoader}  user_data={user} date_options={DATE_OPTIONS} />\n\t\t\t\t\t\t\t\t\t</Tab> */}\n\n\t\t\t\t\t\t\t\t</Tabs>\n\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ totalJobs !== 0 && <Pagination style={{\"float\":\"right\",\"marginRight\":\"40px\"}} current={currentPage} onChange={handlePagination} total={totalJobs} />}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t{ setShowFeedbackModal && <FeedbackCompulsionModal user={user} isModalOpen={showFeedbackModal} jobId={FeedbackJobId} />}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Col>\n\n\t\t\t</Col>\n\t\t</>\n\n\t)\n};\n\n\n\nexport default Dashboard;\n\nconst TableButton = ({index,onClick,jobId,text, disabled, isDisabled})=>{\n\n\treturn (<>\n\t\t<Button className={(isDisabled ? \"disable-btn \" : \"\") + \" mb-2 btn app-btn\"}  disabled={disabled} id={index} onClick={onClick} name={jobId} title=\"Click on this button to create a new similar job.\">{text}<span></span></Button>\n\t</>)\n}\n\n\n/**\n * @params : job Type(Object) , pushToMeeting Type(Function), user Type(Object), isMobile Type(Boolean) , technicianId Type(String)\n * @response : Creates a component that returns start call buttons for Customer according to conditions\n * @author : Sahil\n * **/\nconst MeetingButton = ({job,pushToMeeting,user,isMobile,technicianId})=>{\n\tif(job.technician && (job.status === \"Inprogress\" || job.status === \"long-job\" || job.technician_started_call) && job.status !== \"Completed\" && job.customer.id === user.customer.id){\n\t\treturn <Button className=\"mb-2 btn app-btn\"onClick={pushToMeeting} data-tech={`${technicianId}`} name={`${JSON.stringify(job)}`}>Join<span></span></Button>\n\t}\n\tif(job.technician && job.status === \"Accepted\" && job.customer.id === user.customer.id ){\n\t\treturn <Button className= \"mb-2 btn app-btn\" onClick={pushToMeeting} data-tech={job.technician.id} name={`${JSON.stringify(job)}`}>Start Call<span></span></Button>\n\t}\n\n\treturn <></>\n\n\n}\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\dashboard.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "earnings.js",
                                                            "fileData": "import React, { useEffect, useState, useRef, createRef } from \"react\";\nimport { Table, Pagination } from \"antd\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Select, DatePicker } from \"antd\";\n// import Styled from 'styled-components';\nimport { useAuth } from \"../../../context/authContext\";\nimport { useServices } from \"../../../context/ServiceContext\";\n// import LeftSidebar from '../../../components/Sidebar/LeftSidebar';\n// import RightSidebar from '../../../components/Sidebar/RightSidebar';\n// import TopBar from '../components/TopBar';\n// import { TabsHeader } from \"../components/Tabs\";\n// import { DashboardTab, DashboardTabPane } from '../../../components/Dashboard/Tabs';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport moment from \"moment\";\nimport Loader from \"../../../components/Loader\";\nimport { useEarningDetails } from \"../../../context/earningDetailsContext\";\n// import {useGetEarningDetails} from '../../../context/earningDetailsContext';\nimport ReactToPrint from \"react-to-print\";\nimport mixpanel from \"mixpanel-browser\";\nimport Invoice from \"../../../components/Result/invoice.js\";\nimport { useJob } from \"../../../context/jobContext\";\nimport * as EarningDetailsApi from \"../../../api/earningDetails.api\";\n\nconst { Option } = Select;\n/*const transactionTypeOptions = [\n\t<Option key={'all'} value={'all'}>All</Option>,\n\t<Option key={'credit'} value={'Credit Card'}>Credit Card</Option>,\n\t<Option key={'debit'} value={'Debit Card'}>Debit Card</Option>\n]*/\n\nconst sortOptions = [\n  <Option key={\"asc\"} value=\"asc\">\n    Earnings: Low to high\n  </Option>,\n  <Option key={\"desc\"} value=\"desc\">\n    Earnings: High to low\n  </Option>,\n];\nlet DATE_OPTIONS = {\n  weekday: \"short\",\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n};\nlet initialLoad = true;\nconst EarningsTech = ({ setcurrentStep, setjobId, setType }) => {\n  const { user, refetch } = useAuth();\n\n  const { totalTimeSeconds, totalEarnings } = useServices();\n  const { job, fetchJob } = useJob();\n\n  // let tech = user.technician;\n  const { RangePicker } = DatePicker;\n  const [allEarnings, setAllEarnings] = useState([]);\n  const [allEarningsWithoutFilters, setAllEarningsWithoutFilters] = useState(\n    []\n  );\n  const [showLoader, setShowLoader] = useState(true);\n  const { earningDetailsList } = useEarningDetails();\n  // const {getEarning} = useGetEarningDetails();\n  const [transactionSelected, settransactionSelected] = useState(\"All\");\n  const [selectedSort, setselectedSort] = useState(\"\");\n  let invoiceRefs = useRef();\n  let dateFilterRef = useRef();\n  const [fromDate, setFromDate] = useState(null);\n  const [chargeData, setChargeData] = useState(null);\n  const [toDate, setToDate] = useState(null);\n  const [transactionTypeOptions, setTransactionTypeOptions] = useState([]);\n  const [jobDataToPrint, setJobDataToPrint] = useState({});\n\n  const [selectedTransactionType, setSelectedTransactionType] = useState(\"\");\n  const [selectedFilterDate, setSelectedFilterDate] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalData, setTotalData] = useState(10);\n  const [mainFilters, setMainFilters] = useState({});\n  const [theDefDates, setMainDates] = useState([]);\n  const [technician, setTechnicianData] = useState(null);\n  let transactionTypeRef = useRef();\n  let sortDataRef = useRef();\n\n  // console.log(totalTime,\">>totoalTIne>>\")\n  /*useEffect(()=>{\n\n\t\t// setAllEarnings(jobsData);\n\t\tsetShowLoader(false);\n\n\t},[jobsData])*/\n  if (user) {\n    DATE_OPTIONS[\"timeZone\"] = user.timezone;\n  }\n  const filter_date = (dates) => {\n    setMainDates(dates);\n    if (dates != null) {\n      if (dates[0] != null && dates[1] != null) {\n        setShowLoader(true);\n\n        const start_date = moment(dates[0]).format(\"YYYY-MM-DD\");\n        const end_date = moment(dates[1]).format(\"YYYY-MM-DD\");\n        const from_dt = `${start_date} 00:00:00`;\n        const to_dt = `${end_date} 23:59:59`;\n        setFromDate(from_dt);\n        setToDate(to_dt);\n      }\n    } else {\n      setFromDate(null);\n      setToDate(null);\n    }\n  };\n  const handlePagination = async (page, pageSize) => {\n    setShowLoader(true);\n    setCurrentPage(page);\n    let filters = { ...mainFilters };\n    filters.page = page;\n    filters.pageSize = pageSize;\n    filters.technician_user_id = user.id;\n    let detailsList = await earningDetailsList(filters);\n    setTotalData(detailsList.totalCount);\n    commissionCalculator(detailsList);\n  };\n  const runFilters = async () => {\n    let filters = {};\n    filters[\"technician_user_id\"] = user.id;\n    if (transactionSelected !== \"All\" && transactionSelected !== \"\") {\n      filters.transaction_type = transactionSelected;\n    }\n    filters[\"page\"] = 1;\n    filters[\"pageSize\"] = 10;\n    if (fromDate != null && toDate != null) {\n      filters[\"createdAt\"] = { $gte: fromDate, $lte: toDate };\n    }\n    setMainFilters(filters);\n\n    let detailsList = await earningDetailsList(filters);\n    setTotalData(detailsList.totalCount);\n    commissionCalculator(detailsList);\n    setShowLoader(false);\n  };\n  useEffect(() => {\n    if (!initialLoad) {\n      setShowLoader(true);\n      runFilters();\n    }\n    initialLoad = false;\n    //\n  }, [transactionSelected, toDate, fromDate]);\n  const commissionCalculator = (detailsList) => {\n    if (detailsList.data && detailsList.data) {\n      invoiceRefs = detailsList.data.map(() => createRef());\n      let tempBillDetails = [...detailsList.data];\n      // console.log(\"tempBIllDeatils :::: \",'working')\n      for (var k in tempBillDetails) {\n        let total_amount = tempBillDetails[k].total_amount;\n        // console.log(\"total_amount>>>>>>\", total_amount);\n        tempBillDetails[k].commision =\n          total_amount > 0\n            ? \"$\" +\n              parseFloat(\n                (total_amount * parseFloat(tempBillDetails[k].commision)) / 100\n              ).toFixed(2) +\n              ` (${tempBillDetails[k].commision}%)`\n            : \"$0.00\";\n      }\n      const unique_transaction_type = [\n        ...new Set(tempBillDetails.map((item) => item.transaction_type)),\n      ];\n      console.log(\"tempBillDetails :: \",tempBillDetails)\n      setAllEarnings(tempBillDetails);\n      setAllEarningsWithoutFilters(tempBillDetails);\n      // console.log(\"unique_transaction_type\",unique_transaction_type)\n      setTimeout(function () {\n        setTransactionTypeOptions(unique_transaction_type);\n        setShowLoader(false);\n      }, 1000);\n    } else {\n      setShowLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      refetch();\n      let detailsList = await earningDetailsList({\n        technician_user_id: user.id,\n        page: 1,\n        pageSize: 10,\n      });\n      setTotalData(detailsList.totalCount);\n      if (detailsList.data && detailsList.data) {\n        invoiceRefs = detailsList.data.map(() => createRef());\n        let tempBillDetails = [...detailsList.data];\n        for (var k in tempBillDetails) {\n          let total_amount = tempBillDetails[k].total_amount;\n          tempBillDetails[k].commision =\n            total_amount > 0\n              ? \"$\" +\n                parseFloat(\n                  (total_amount * parseFloat(tempBillDetails[k].commision)) /\n                    100\n                ).toFixed(2) +\n                ` (${tempBillDetails[k].commision}%)`\n              : \"$0.00\";\n        }\n        const unique_transaction_type = [\n          ...new Set(tempBillDetails.map((item) => item.transaction_type)),\n        ];\n        console.log(\"tempBillDetails :: \",tempBillDetails)\n        setAllEarnings(tempBillDetails);\n        setAllEarningsWithoutFilters(tempBillDetails);\n        // console.log(\"unique_transaction_type\",unique_transaction_type)\n        setTimeout(function () {\n          setTransactionTypeOptions(unique_transaction_type);\n          setShowLoader(false);\n        }, 1000);\n      } else {\n        setShowLoader(false);\n      }\n    })();\n  }, []);\n\n  const sortData = (val) => {\n    let tempArr = [...allEarnings];\n    setselectedSort(val);\n    // console.log(\"allEarnings\",allEarnings)\n    // console.log(\"val\",val)\n    if (val === \"asc\") {\n      tempArr.sort(function (a, b) {\n        return a.amount_earned - b.amount_earned;\n      });\n    } else {\n      tempArr.sort(function (a, b) {\n        return b.amount_earned - a.amount_earned;\n      });\n    }\n    // console.log(\"tempArr ::: \",tempArr)\n    setAllEarnings(tempArr);\n  };\n\n  /*const filterData=(val,type)=>{\n\t\tconsole.log(\"e,type\",val,type)\n\t\tsettransactionSelected(val)\n\t\tlet condition = \"\"\n\t\tlet tempArr = [...allEarningsWithoutFilters];\n\t\tif(val == \"all\"){\n\t\t\t// console.log(\"tempArr\")\n\t\t\tsetAllEarnings(tempArr)\n\t\t\treturn\n\t\t}\n\t\t// console.log(\"tempArr before::: \",tempArr)\n\t\tif(type == 'transaction_type'){\n\t\t\ttempArr = tempArr.filter(obj => {\n\t\t\t  \treturn obj.transaction_type === val\n\t\t\t})\n\t\t}\n\t\tconsole.log(\"tempArr ::: \",tempArr)\n\t\t\tsetShowLoader(false);\n\t\t\tsetAllEarnings(tempArr)\n\t}*/\n  const filterData = (val, type) => {\n    setShowLoader(true);\n    let tempArr = [];\n    if (type === \"transaction_type\") {\n      settransactionSelected(val);\n      let earningsData = allEarningsWithoutFilters;\n\n      let filterDate = \"\";\n      if (selectedFilterDate !== \"\") {\n        filterDate = new Date(selectedFilterDate);\n        filterDate = filterDate.setHours(0, 0, 0, 0);\n      }\n\n      if (val === \"All\") {\n        setSelectedTransactionType(\"\");\n        if (filterDate) {\n          filterByDateInit(filterDate);\n        } else {\n          setAllEarnings([...allEarningsWithoutFilters]);\n          setShowLoader(false);\n        }\n      } else {\n        setSelectedTransactionType(val);\n\n        earningsData.map((b, i) => {\n          if (b.transaction_type === val) {\n            if (filterDate) {\n              let d = new Date(b.createdAt);\n              d = d.setHours(0, 0, 0, 0);\n              if (filterDate === d) {\n                tempArr.push(b);\n              }\n            } else {\n              tempArr.push(b);\n            }\n          }\n          if (i + 1 === earningsData.length) {\n            setAllEarnings(tempArr);\n            setShowLoader(false);\n          }\n          return true;\n        });\n      }\n    }\n  };\n\n  const hms_convert = (t) => {\n    if (t) {\n      let d = Number(t);\n      let h = Math.floor(d / 3600);\n      let m = Math.floor((d % 3600) / 60);\n      let s = Math.floor((d % 3600) % 60);\n      let hFormat = h <= 9 ? \"0\" + h : h;\n      let mFormat = m <= 9 ? \"0\" + m : m;\n      let sFormat = s <= 9 ? \"0\" + s : s;\n      let hDisplay = h > 0 ? hFormat + \":\" : \"00:\";\n      let mDisplay = m > 0 ? mFormat + \":\" : \"00:\";\n      let sDisplay = s > 0 ? sFormat : \"00\";\n      return hDisplay + mDisplay + sDisplay;\n    } else {\n      return \"00:00:00\";\n    }\n  };\n\n  /*const filterByDate = (e) => {\n    \tif(e.target.value){\n    \t\t\n\t    \tif(allEarningsWithoutFilters.length > 0){\n\t    \t\tlet tempData = []\n\t    \t\tlet nowDate = new Date(e.target.value);\n\t    \t\tnowDate = nowDate.setHours(0,0,0,0)\n\t    \t\t\n\t    \t\tallEarningsWithoutFilters.map((b,i)=>{\n\t    \t\t\tlet d = new Date(b.createdAt)\n\t    \t\t\td = d.setHours(0,0,0,0)\n\t    \t\t\tif(nowDate == d){\n\t    \t\t\t\ttempData.push(b)\n\t    \t\t\t}\n\t    \t\t\tif(i+1 == allEarningsWithoutFilters.length){\n\t    \t\t\t\tsetAllEarnings(tempData)\n\t    \t\t\t}\n\t    \t\t})\n\t    \t}\n    \t}else{\n    \t\tsetAllEarnings(allEarningsWithoutFilters)\n    \t}\n    }*/\n  /*const filterByDate = (e) => {\n    \tif(e.target.value){\n    \t\tfilterByDateInit(e.target.value)\n    \t}else{\n    \t\tsetSelectedFilterDate('')\n    \t\tsetAllEarnings(allEarningsWithoutFilters)\n    \t}\n    }*/\n  const filterByDateInit = (d) => {\n    setShowLoader(true);\n    setSelectedFilterDate(d);\n    if (allEarningsWithoutFilters.length > 0) {\n      let tempData = [];\n      let nowDate = new Date(d);\n      nowDate = nowDate.setHours(0, 0, 0, 0);\n\n      allEarningsWithoutFilters.map((b, i) => {\n        let d = new Date(b.createdAt);\n        d = d.setHours(0, 0, 0, 0);\n        if (nowDate === d) {\n          if (selectedTransactionType && selectedTransactionType !== \"\") {\n            if (b.transaction_type === selectedTransactionType) {\n              tempData.push(b);\n            }\n          } else {\n            tempData.push(b);\n          }\n        }\n        if (i + 1 === allEarningsWithoutFilters.length) {\n          setAllEarnings(tempData);\n          setShowLoader(false);\n        }\n        return true;\n      });\n    } else {\n      setShowLoader(false);\n    }\n  };\n\n  const handleFilterClear = () => {\n    setMainDates([null, null]);\n    if (dateFilterRef.current != undefined) {\n      dateFilterRef.current.value = [\"\", \"\"];\n    }\n    let tempArr = [...allEarningsWithoutFilters];\n    setselectedSort(\"\");\n\n    settransactionSelected(\"All\");\n    setAllEarnings(tempArr);\n    // console.log(transactionTypeRef.current,\".......\");\n  };\n\n  // const filterByDate = (e)=>{\n  // \tconsole.log(\"evenet value ::: \",e.currentTarget.value)\n  // \tlet userDate = e.currentTarget.value\n  // \tlet dateSortedArr = [...allEarnings]\n  // \tdateSortedArr.sort((a)=>{\n  // \t\tlet jobDateObj = new Date(a.createdAt)\n  // \t\tlet jobMonth = jobDateObj.getMonth()\n  // \t\tlet jobDate = jobDateObj.getDate()\n  // \t\tlet jobYear  = jobDateObj.getYear()\n  // \t\tlet dateStr = `${jobYear}-${jobDate}-${jobMonth}`\n  // \t\tif(userDate == dateStr ){\n  // \t\t\treturn a\n  // \t\t}\n\n  // \t})\n  // \tlet datesForSortedArr = dateSortedArr.map(item=>new Date(item.createdAt))\n  // \tconsole.log(\"userDate :::: \",new Date(userDate).getDate())\n  // \tconsole.log(\"datesForSortedArr:::: \",datesForSortedArr)\n  // \tsetAllEarnings(dateSortedArr)\n  // }\n  const push_to_job_detail = (e) => {\n    // console.log(\"push_to_job_detail>>>>>>>>>\")\n    const jobId = e.currentTarget.name;\n    // fetchJob(jobId)\n    setjobId(jobId);\n    setType(\"details\");\n    mixpanel.identify(user.email);\n    if (user.userType === \"technician\") {\n      mixpanel.track(\"Technician  - Job details\", { JobId: jobId });\n    } else {\n      mixpanel.track(\"Customer - Job details\", { JobId: jobId });\n    }\n    setcurrentStep(6);\n  };\n\n  // Author : Utkarsh Dixit\n  // Purpose : To set job related data\n  // prameters : An object containing job data such as job id\n  // response : function set all the data related to job in job variable\n  const getDataToPrint = async (d) => {\n    // console.log(\"d>>>>>>>>>>>>>>>>>>>>>>>>\", d);\n    if (d) {\n      let retrieve_charge = await EarningDetailsApi.getEarningDetails(d);\n      //   console.log(\"Earnings details \" + JSON.stringify(retrieve_charge));\n      setChargeData(retrieve_charge);\n      await fetchJob(retrieve_charge.job_id);\n      // setJobDataToPrint(job)\n    }\n  };\n\n  useEffect(() => {\n    if (job) {\n      //   console.log(\"jobData\", job);\n      setJobDataToPrint(job);\n    }\n  }, [job]);\n\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createdAt\",\n      // width: '20%',\n      render: (text) => (\n        <span> {new Date(text).toLocaleTimeString(\"en-US\", DATE_OPTIONS)}</span>\n      ),\n    },\n    {\n      title: \"Trans. Type\",\n      dataIndex: \"transaction_type\",\n      // width: '15%'\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"transaction_status\",\n      // width: '30%',\n      render: (text) => (\n        <span>{text && text === \"Processing\" ? text + \"...\" : text}</span>\n      ),\n    },\n    //Author : Utkarsh\n    // Purpose : Commented the code for company commision and amount\n    // {\n    //     title: 'Amount',\n    //     dataIndex: 'total_amount',\n    //     // width: '30%',\n    //     render: text => (\n    //         <span>\n    //             {(text ? '$'+text : '$0.00')}\n    //         </span>\n    //     ),\n    // },\n    // {\n    //     title: 'Commission (%)',\n    //     dataIndex: 'commision',\n    //     // width: '30%',\n    //     render: text => (\n    //         <span className = \"red-text font-weight-bold\">\n    //             {(text ? text : '$0.00')}\n    //         </span>\n    //     ),\n    // },\n    {\n      title: \"Amount Earned\",\n      dataIndex: \"amount_earned\",\n      // width: '30%',\n      render: (text) => (\n        user?.technician?.tag !== 'employed' ?\n        <span className=\"green-text font-weight-bold\">\n          {text ? \"$\" + parseFloat(text).toFixed(2) : \"$0.00\"}\n        </span>:\n        <span className=\"red-text font-weight-bold\">\n        NA\n        </span>\n      ),\n    },\n    {\n      title: \"Invoice\",\n      dataIndex: \"id\",\n      // width: '30%',\n      render: (text) => (\n        user?.technician?.tag !== 'employed' ?\n        <div className=\"invoice-download-btn\">\n          <ReactToPrint\n            trigger={() => <FontAwesomeIcon icon={faDownload} />}\n            content={() => invoiceRefs.current}\n            onBeforeGetContent={(e) => getDataToPrint(text)}\n          />\n          <div style={{ display: \"none\" }}>\n            <ComponentRef text={text} ref={invoiceRefs} />\n          </div>\n        </div>:\n        <span className=\"red-text font-weight-bold\">\n        NA\n        </span>\n      ),\n    },\n    {\n      title: \"Action\",\n      dataIndex: \"job_id\",\n      // width: '30%',\n      render: (text) => (\n        <span>\n          <button\n            className=\"btn app-btn app-btn-super-small normal-font\"\n            onClick={push_to_job_detail}\n            name={text && text.id ? text.id : text}\n          >\n            <span></span>View job\n          </button>\n        </span>\n      ),\n    },\n  ];\n\n  const ComponentRef = React.forwardRef((props, ref) => {\n    return (\n      <div ref={ref}>\n        <Invoice chargeData={chargeData} job={job} />\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment key=\"earning\">\n      <Col xs=\"12\" className=\"\">\n        <Loader\n          height=\"100%\"\n          className={showLoader ? \"loader-outer\" : \"d-none\"}\n        />\n        <Col xs=\"12\" className=\"pt-5 pb-3\">\n          <h1 className=\"large-heading\">My Earnings</h1>\n        </Col>\n\n        <Col xs=\"12\" className=\"\">\n          <Col xs=\"12\" className=\"py-3 div-highlighter\">\n            <Row>\n              <Col md=\"4\" className=\"pl-5\">\n                <span className=\"d-block label-total-name\">\n                  Current Balance\n                </span>\n                <span\n                  className=\"d-block label-total-value\"\n                  title=\"Coming Soon...\"\n                >\n                  $0.00\n                </span>\n              </Col>\n              <Col md=\"4\" className=\"pl-5 div-highlighter-border\">\n                <span className=\"d-block label-total-name\">\n                  Total Amount Earned\n                </span>\n                {user?.technician?.tag !== 'employed' ? \n                <span className=\"d-block label-total-value\">\n                  ${totalEarnings != null ? totalEarnings : 0}\n                </span> : \n                <span className=\"d-block label-total-value\">\n                NA\n                </span>}\n              </Col>\n              <Col md=\"4\" className=\"pl-5\">\n                <span className=\"d-block label-total-name\">\n                  Total Amount of Time\n                </span>\n                <span className=\"d-block label-total-value\">\n                  {hms_convert(totalTimeSeconds)}\n                </span>\n              </Col>\n            </Row>\n          </Col>\n        </Col>\n\n        <Col md=\"12\" className=\"filters-outer py-4 mt-2 earning-filters\">\n          <Row>\n            <Col md=\"3\">\n              <label className=\"label-name mb-0-imp pb-3-imp\">Transaction Date</label>\n              <RangePicker\n                ref={dateFilterRef}\n                onCalendarChange={filter_date}\n                value={theDefDates}\n                className=\"form-control\"\n              />\n            </Col>\n            <Col md=\"3\">\n              <label className=\"label-name\">Transactions Type</label>\n              <Select\n                ref={transactionTypeRef}\n                style={{ width: \"100%\" }}\n                value={transactionSelected}\n                placeholder=\"Transactions Type\"\n                onChange={(e) => {\n                  filterData(e, \"transaction_type\");\n                }}\n                className=\"form-control bottom-border-only filter-element\"\n              >\n                <Select.Option key={\"All\"} value={\"All\"}>\n                  All\n                </Select.Option>\n                {transactionTypeOptions.map((t) => {\n                  return (\n                    <Select.Option key={t} value={t}>\n                      {t}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            </Col>\n            <Col md=\"1\"></Col>\n            <Col md=\"3\" className=\"float-right\">\n              <label className=\"label-name\">Sort By</label>\n              <Select\n                ref={sortDataRef}\n                style={{ width: \"100%\" }}\n                placeholder=\"Sort By\"\n                onChange={sortData}\n                value={selectedSort}\n                className=\"form-control bottom-border-only filter-element\"\n              >\n                {sortOptions}\n              </Select>\n            </Col>\n            <Col md=\"2\" className=\"float-right text-right\">\n              <label className=\"label-name\"> &nbsp; </label>\n              <br />\n              <button\n                onClick={handleFilterClear}\n                className=\"btn app-btn app-btn-super-small\"\n              >\n                <span />\n                Clear\n              </button>\n            </Col>\n          </Row>\n        </Col>\n\n        <Col md=\"12\" className=\"py-4 mt-1 table-responsive\">\n          <Col xs=\"12\" className=\"table-structure-outer table-responsive p-0\">\n            <Col\n              xs=\"12\"\n              className=\"ant-table-structure-outer table-responsive p-0\"\n            >\n              <div className=\"highlight-background\"></div>\n              <Table\n                bordered={false}\n                pagination={false}\n                columns={columns}\n                dataSource={allEarnings.map((item,index) => ({...item,key:index}))}\n                className=\"earnings-table\"\n              />\n              {totalData !== 0 && (\n                <Pagination\n                  style={{ float: \"right\", \",marginRight\": \"40px\" }}\n                  current={currentPage}\n                  onChange={handlePagination}\n                  total={totalData}\n                />\n              )}\n            </Col>\n          </Col>\n        </Col>\n      </Col>\n    </React.Fragment>\n  );\n};\nexport default EarningsTech;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\earnings.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "jobReports.js",
                                                            "fileData": "import React, { useEffect, useState } from 'react';\nimport {\n\tDatePicker, Table, Select, Input,Pagination\n} from 'antd';\nimport { Row, Col ,Button} from 'react-bootstrap';\n// import Styled from 'styled-components';\n// import moment from 'moment';\nimport { useAuth } from '../../../context/authContext';\nimport { useServices } from '../../../context/ServiceContext';\n// import LeftSidebar from '../../../components/Sidebar/LeftSidebar';\n// import RightSidebar from '../../../components/Sidebar/RightSidebar';\n// import * as JobService from '../../../api/job.api';\n// import { TabsHeader } from '../components/Tabs';\n// import { DashboardTab, DashboardTabPane } from '../../../components/Dashboard/Tabs';\nimport Loader from '../../../components/Loader';\nimport * as SoftwareApi from '../../../api/software.api';\nimport { useJob } from '../../../context/jobContext';\nimport * as UserApi from '../../../api/users.api';\n\n// const { Content } = Layout;\nconst JobReports = ({setcurrentStep,setjobId,setType}) => {\n\tconst { Option } = Select;\n\tconst moment = require('moment');\n\tconst { user,refetch } = useAuth();\n\tconst { RangePicker } = DatePicker;\n\tconst { totalTimeSeconds, totalEarnings } = useServices();\n\t// const tech = user.technician;\n\tconst [allJobsReports, setAllJobs] = useState([]);\n\tconst [showLoader, setShowLoader] = useState(true);\n\tconst [children, setchildren] = useState([]);\n\tconst [fromDate, setFromDate] = useState(null);\n\tconst [toDate, setToDate] = useState(null);\n\tconst [filteredSoftwares, setFilteredSoftwares] = useState([]);\n\tconst [filteredStatus, setFilteredStatus] = useState([]);\n\tconst [filteredInput, setFilteredInput] = useState('');\n\tconst { fetchJobByParams, fetchJob,totalJobs} = useJob();\n\tconst [currentPage,setCurrentPage] = useState(localStorage.getItem('pageNum')? Number(localStorage.getItem('pageNum')):1);\n\tconst [queryParam,setQueryParam] = useState({});\n\tconst [userIsOwner,setUserIsOwner] = useState(true)\n\tconst [ownerHaveSubscription,setOwnerHaveSubscription] = useState(false)\n\tconst [ownerInfo,setOwnerInfo] = useState()\n\n\t// const date_range = [];\n\tlet children_status = [];\n\n\t useEffect(()=>{\n\t\t(async () => {\n\t\t\tif(user && user.ownerId && user.ownerId !== null){\n\t\t\t\tsetUserIsOwner(false)\n\t\t\t\tconst ownerInfoObject = await UserApi.getUserById(user.ownerId)\n\t\t\t\tif(ownerInfoObject){\n\t\t\t\t\tsetOwnerInfo(ownerInfoObject)\n\t\t\t\t\tif(ownerInfoObject.customer && ownerInfoObject.customer.subscription){\n\t\t\t\t\t\tsetOwnerHaveSubscription(true)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\trefetch()\n\t\t})()\n\t},[])\n\t//comment\n\n\tif(user && user.userType === 'technician'){\n\t\tchildren_status = [<Option key=\"status_1\" value=\"Completed\">Completed</Option>,<Option key=\"status_3\" value=\"Cancelled\">Cancelled</Option>, <Option key=\"status_4\" value=\"Scheduled\">Scheduled</Option>, <Option key=\"status_6\" value=\"Waiting\">Waiting</Option>, <Option key=\"status_7\" value=\"Inprogress\">Inprogress</Option>];\n\t}else if(user && user.userType === 'customer'){\n\t\tchildren_status = [<Option key=\"status_1\" value=\"Completed\">Completed</Option>, <Option key=\"status_2\" value=\"Pending\">Pending</Option>,\n\t\t<Option key=\"status_3\" value=\"Cancelled\">Cancelled</Option>, <Option key=\"status_4\" value=\"Scheduled\">Scheduled</Option>, <Option key=\"status_6\" value=\"Waiting\">Waiting</Option>, <Option key=\"status_7\" value=\"Inprogress\">Inprogress</Option>];\n\t}\n\t\n\n\n\tconst push_to_job_detail = (e) => {\n        const jobid = e.currentTarget.name;\n        fetchJob(jobid)\n        setjobId(jobid)\n        setType(\"details\")\n        setcurrentStep(6)\n    };\n\n    const filterizationForJobReports = (all_data)=>{\n\t\tconsole.log(\"ALLL DATA::::>>>\",all_data)\n    \tlet new_data = []\n    \tif (user.userType === 'technician' && filteredStatus.length === 1 && filteredStatus.includes('Declined')) {\t\t\t\t\n\t\t\tfor (let i = 0; i <= all_data.length - 1; i++) {\n\t\t\t\tall_data[i].action =  <Button className=\"mb-2 btn app-btn  app-btn-super-small\" onClick={push_to_job_detail} name={`${all_data[i].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\t\t\t\tif (all_data[i].tech_declined_ids && all_data[i].tech_declined_ids.includes(user.technician.id)) {\n\t\t\t\t\tall_data[i].status = 'Cancelled by you';\n\t\t\t\t\tnew_data.push(all_data[i])\n\t\t\t\t}else if (all_data[i].declinedByCustomer && all_data[i].declinedByCustomer.includes(user.technician.id)) {\n\t\t\t\t\tall_data[i].status = 'Cancelled by customer';\n\t\t\t\t\tnew_data.push(all_data[i])\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsetAllJobs(new_data);\t\t\t\t\n\t\t}\n\t\telse if (user.userType === 'technician' ){\n\n\t\t\tfor (let i = 0; i <= all_data.length - 1; i++) {\n\t\t\t\tall_data[i].action =  <Button className=\"mb-2 btn app-btn  app-btn-super-small \" onClick={push_to_job_detail} name={`${all_data[i].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\n\t\t\t\tif (all_data[i].tech_declined_ids && all_data[i].tech_declined_ids.includes(user.technician.id)) {\n\t\t\t\t\tall_data[i].status = 'Cancelled by you';\n\t\t\t\t}else if (all_data[i].declinedByCustomer && all_data[i].declinedByCustomer.includes(user.technician.id)) {\n\t\t\t\t\tall_data[i].status = 'Cancelled by customer';\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetAllJobs(all_data);\t\t\t\t\n\t\t}\n\t\tif(user.userType === 'customer'){\n\t\t\tfor (let i = 0; i <= all_data.length - 1; i++) { \n\t\t\t\tall_data[i].action =  <Button className=\"mb-2 btn app-btn  app-btn-super-small\" onClick={push_to_job_detail} name={`${all_data[i].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\t\t\t}\n\t\t\tsetAllJobs(all_data);\n\t\t}\n    }\n    /*const handleFilters = async()=>{\n    \tconst res = await fetchJobByParams(queryParam)\n    \tlet all_data = res.jobs.data\n    \tfilterizationForJobReports(all_data)\n    }\n    useEffect (()=>{\n    \thandleFilters()\n    },[queryParam])*/\n\n    const handlePagination = async(page,pageSize)=>{\n    \tsetShowLoader(true)\n    \tsetCurrentPage(page)\n    \tlet pagination={ page:page,pageSize:pageSize }\n    \tconsole.log(\"queryParam :::: \",queryParam)\n    \tconsole.log(\"pagination object ::: \",pagination)\n    \tconst res = await fetchJobByParams(queryParam,pagination)\n    \tlet all_data = res.jobs.data\n    \tfilterizationForJobReports(all_data)\n    \tsetShowLoader(false)\n\t\tlocalStorage.setItem('pageNum', page) //Saving current page number from pagination in localStorage.\n    \tconsole.log(\"handlePagination is working \")\n    }\n\n\tconst filter_date = (dates) => {\n\t\tif(dates != null){\n\t\t\tif (dates[0] != null && dates[1] != null) {\n\t\t\t\tsetShowLoader(true)\n\t\t\t\t// setTisetShowLoader(true);\n\t\t\t\tlet start_date = moment(dates[0]).format('YYYY-MM-DD');\n\t\t\t\tlet end_date = moment(dates[1]).format('YYYY-MM-DD');\n\t\t\t\tlet from_dt = `${start_date} 00:00:00`;\n\t\t\t\tlet to_dt = `${end_date} 23:59:59`;\n\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\tsetShowLoader(false)\n\t\t\t\t},5000)\n\t\t\t\tsetFromDate(from_dt);\n\t\t\t\tsetToDate(to_dt);\n\t\t\t}\n\t\t}else{\n\t\t\tsetFromDate(null);\n\t\t\tsetToDate(null);\n\t\t}\n\t\t\n\t};\n\n\tconst final_filter_function = async () => {\n\t\tlet filter_dict = {};\n\t\tlet res = false\n\t\tif (user.userType === 'customer') {\n\t\t\tfilter_dict.customer = user.customer?.id;\n\t\t} else {\n\t\t\tif(user && user.technician){\n\t\t\t\tfilter_dict.$or = [{ technician: user.technician.id }, { tech_declined_ids: { $in: [user.technician.id] } },{declinedByCustomer:{ $in: [user.technician.id] }}];\n\t\t\t}\t\t\t\n\t\t}\n\n\n\t\tif (filteredStatus.length > 0) {\n\t\t\tif(user.userType === 'technician' && filteredStatus.includes('Declined')){\n\t\t\t\tlet new_filter_status =   [...filteredStatus];\n\t\t\t\tlet indexofdecline\t= new_filter_status.indexOf('Declined')\n\t\t\t\tnew_filter_status.splice(indexofdecline, 1);\n\t\t\t\t// console.log('new_filter_status>>>>>>>>>>',new_filter_status)\n\t\t\t\tif(new_filter_status.length > 0){\t\n\t\t\t\t\tfilter_dict = {}\n\t\t\t\t\tfilter_dict.$or = [\t\t\t\t\t\t\n\t\t\t\t\t\t{ $and:[{status : { $in: new_filter_status }},{ technician: user.technician.id }]\n\t\t\t\t\t\t},\t\t\t\t\t\t\n\t\t\t\t\t\t{ tech_declined_ids: { $in: [user.technician.id] } }\n\t\t\t\t\t\t,\n\t\t\t\t\t\t{declinedByCustomer:{ $in: [user.technician.id] }}\n\t\t\t\t\t]\t\t\n\t\t\t\t}else{\n\t\t\t\t\tfilter_dict.$or = [{ tech_declined_ids: { $in: [user.technician.id] } },{declinedByCustomer:{ $in: [user.technician.id] }}];\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tfilter_dict.status = { $in: filteredStatus };\n\t\t\t}\n\t\t}\n\n\n\t\tif (fromDate != null && toDate != null) {\n\t\t\tfilter_dict.createdAt = { $gte: fromDate, $lte: toDate };\n\t\t}\n\n\t\tif (filteredSoftwares.length > 0) {\n\t\t\tfilter_dict.software = { $in: filteredSoftwares };\n\t\t}\t\n\n\n\t\tif (filteredInput !== '') {\n\t\t\tfilter_dict.issueDescription = { $regex: filteredInput };\n\t\t}\n\t\tconsole.log(\"filter_dict :::: \",filter_dict)\n    \t// console.log(\"pagination object ::: \",pagination)\n    \tif(Object.keys(filter_dict).length !== 0){\n    \t\tsetQueryParam(filter_dict)\n\t\t\tres = await fetchJobByParams(filter_dict);\n    \t}\n\t\t\t\n\t\tif(res){\n\t\t\tsetShowLoader(false);\n\t\t\tconst all_data = res.jobs.data;\n\t\t\tlet new_data = []\n\n\t\t\tif (user.userType === 'technician' ){\n\n\t\t\t\tfor (let i = 0; i <= all_data.length - 1; i++) { \n\t\t\t\t\tall_data[i].action =  <Button className=\"mb-2 btn app-btn  app-btn-super-small\" onClick={push_to_job_detail} name={`${all_data[i].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\n\t\t\t\t\tif (all_data[i].tech_declined_ids && all_data[i].tech_declined_ids.includes(user.technician.id)) {\n\t\t\t\t\t\tall_data[i].status = 'Cancelled by you';\n\t\t\t\t\t}else if (all_data[i].declinedByCustomer && all_data[i].declinedByCustomer.includes(user.technician.id)) {\n\t\t\t\t\t\tall_data[i].status = 'Cancelled by customer';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst filteredResponse = all_data.filter((item) =>  !(item?.is_transferred_notification_sent  && item?.tech_declined_ids.includes(user?.technician?.id)) );\n\t\t\t\tconsole.log('filteredResponse',filteredResponse)\n\t\t\t\tsetAllJobs(filteredResponse);\t\t\t\t\n\t\t\t}\n\n\t\t\tif(user.userType === 'customer'){\n\t\t\t\tfor (let i = 0; i <= all_data.length - 1; i++) { \n\t\t\t\t\tall_data[i].action =  <Button className=\"mb-2 btn app-btn  app-btn-super-small\" onClick={push_to_job_detail} name={`${all_data[i].id}`} title=\"Click to see job details.\">Details<span></span></Button>\n\t\t\t\t}\n\t\t\t\tsetAllJobs(all_data);\n\t\t\t}\n\n\t\t}\n\t\telse{\n\t\t\tsetShowLoader(false);\n\t\t}\n\n\t\tif (children.length === 0) {\n\t\t\tconst soft_res = await SoftwareApi.getSoftwareList();\n\t\t\tconst softwares = soft_res.data;\n\t\t\tconst child_array = [];\n\t\t\tfor (let i = 0; i < softwares.length; i++) {\n\t\t\t\t// console.log('softwares.>>>>>>>>',softwares[i])\n\t\t\t\t\tchild_array.push(<Option key={i} value={softwares[i].id}>{softwares[i].name}</Option>);\n\t\t\t}\n\n\t\t\tsetchildren(child_array);\n\t\t}\n\t\t\n\t}\n\n\tuseEffect(() => {\n\t\tfinal_filter_function();\n\t}, [toDate, filteredSoftwares, filteredStatus, filteredInput]);\n\n\tconst handleChangeSoftware = (value) => {\n\t\t// console.log('value>>>>>>>>>>>>',value)\n\t\tsetShowLoader(true);\n\t\tsetFilteredSoftwares(value);\n\t};\n\tconst handleChangeStatus = (value) => {\n\t\t// console.log('value>>>>>>>>>>>>',value)\n\t\tsetShowLoader(true);\n\t\tsetFilteredStatus(value);\n\t};\n\n\tconst inputChange = (e) => {\n\t\tsetShowLoader(true);\n\t\tsetFilteredInput(e.target.value);\n\t};\n\n\tconst hms_convert = (t) => {\n\t\tif (t) {\n\t\t\tconst d = Number(t);\n\t\t\tconst h = Math.floor(d / 3600);\n\t\t\tconst m = Math.floor(d % 3600 / 60);\n\t\t\tconst s = Math.floor(d % 3600 % 60);\n\t\t\tconst hFormat = h <= 9 ? `0${h}` : h;\n\t\t\tconst mFormat = m <= 9 ? `0${m}` : m;\n\t\t\tconst sFormat = s <= 9 ? `0${s}` : s;\n\t\t\tconst hDisplay = h > 0 ? `${hFormat}:` : '00:';\n\t\t\tconst mDisplay = m > 0 ? `${mFormat}:` : '00:';\n\t\t\tconst sDisplay = s > 0 ? sFormat : '00';\n\t\t\treturn hDisplay + mDisplay + sDisplay;\n\t\t}\n\t\treturn '00:00:00';\n\t};\n\n\tconst columns = [{\n\t\t\t\t\t\ttitle: 'Date',\n\t\t\t\t\t\tdataIndex: 'createdAt',\n\t\t\t\t\t\trender: text => (\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t{ moment(text).format('MM-DD-YYYY')}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Software',\n\t\t\t\t\t\trender: (text, record) => (\n\t\t\t\t\t\t\t(record.software ? record.software.name : '')\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Issue Desc',\n\t\t\t\t\t\tdataIndex: 'issueDescription',\n\t\t\t\t\t\twidth: '30%',\n\t\t\t\t\t\trender: text => (\n\t\t\t\t\t\t\t<p padding=\"10px 5px\" title={text} className=\"issue-description\">\n\t\t\t\t\t\t\t\t{(text.length > 100 ? `${text.substring(0, 50)}...` : text)}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Status',\n\t\t\t\t\t\tdataIndex: 'status',\n\t\t\t\t\t\trender: text =>(\n\t\t\t\t\t\t\t<span padding=\"10px 5px\" title={text}>\n\t\t\t\t\t\t\t{(text === \"Declined\" ? 'Cancelled' : (text === 'long-job' ? 'Long Job' : (text === 'Inprogress' ? 'InProgress' :text)) )}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Tech',\n\t\t\t\t\t\trender: (text, record) => (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{ record && record.technician\n\t\t\t\t\t\t\t\t\t? `${record.technician.user?.firstName} ${record.technician.user?.lastName}` : 'NA'}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t),\n\n\t\t\t\t\t},\n\t\t\t\t\t {\n\t\t\t\t        title: 'Action',\n\t\t\t\t        dataIndex: 'action',\n\t\t\t\t    },\n\t\t\t    ];\n\n\treturn (\n\n\t\t<React.Fragment key=\"JobReports\">\n\t\t\t<Col xs=\"12\" className=\"\">\n\t\t\t\t<Loader height=\"100%\" className={(showLoader ? 'loader-outer' : 'd-none')} />\n\t\t\t\t<Col xs=\"12\" className=\"pt-5 pb-3\">\n\t\t\t\t\t<h1 className=\"large-heading\">Job Reports</h1>\n\t\t\t\t</Col>\n\n\t\t\t\t<Col xs=\"12\" className=\"\">\n\t\t\t\t\t<Col xs=\"12\" className=\"py-3 div-highlighter\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col md=\"4\" className=\"pl-5\">\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-name\">Total Number of Jobs</span>\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-value\" title=\"\">{(totalJobs ? totalJobs : 0)}</span>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col md=\"4\" className=\"pl-5 div-highlighter-border\">\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-name\">\n\t\t\t\t\t\t\t\t\tTotal Amount{\" \"}\n\t\t\t\t\t\t\t\t\t{(user && user.userType === 'technician' ? 'Earned' : 'Billed')}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-value\">\n\t\t\t\t\t\t\t\t\t{(userIsOwner || !ownerHaveSubscription) \n\t\t\t\t\t\t\t\t\t\t? \n\t\t\t\t\t\t\t\t\t\t\tuser?.technician?.tag !== 'employed'\n\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t(totalEarnings != null ? '$' + totalEarnings : '$' + 0)\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"NA\" \n\t\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t\t\t\"NA\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col md=\"4\" className=\"pl-5\">\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-name\">Total Amount of Time</span>\n\t\t\t\t\t\t\t\t<span className=\"d-block label-total-value\">\n\t\t\t\t\t\t\t\t\t{hms_convert(totalTimeSeconds)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Col>\n\t\t\t\t</Col>\n\n\t\t\t\t<Col md=\"12\" className=\"filters-outer py-4 mt-2 job-report-filters\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs=\"12\" lg=\"3\">\n\t\t\t\t\t\t\t<label className=\"label-name\">Transactions date</label>\n\t\t\t\t\t\t\t<RangePicker onCalendarChange={filter_date} className=\"form-control bottom-border-only\" />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs=\"12\" lg=\"3\">\n\t\t\t\t\t\t\t<label className=\"label-name\">Status</label>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\t\tshowArrow=\"true\"\n\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\t\tplaceholder=\"Select Status\"\n\t\t\t\t\t\t\t\tonChange={handleChangeStatus}\n\t\t\t\t\t\t\t\tclassName=\"form-control bottom-border-only filter-element job-report-selection\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{children_status}\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs=\"12\" lg=\"3\">\n\t\t\t\t\t\t\t<label className=\"label-name\">Softwares</label>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\t\tshowArrow=\"true\"\n\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\t\tplaceholder=\"Select Software\"\n\t\t\t\t\t\t\t\tonChange={handleChangeSoftware}\n\t\t\t\t\t\t\t\tclassName=\"form-control bottom-border-only filter-element job-report-selection\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t</Select>\n\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs=\"12\" lg=\"3\" className=\"float-right\">\n\t\t\t\t\t\t\t<label className=\"label-name\">Search</label>\n\t\t\t\t\t\t\t<Input placeholder=\"Issue description\" onPressEnter={inputChange} className=\"form-control bottom-border-only filter-element\" />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Col>\n\n\t\t\t\t<Col md=\"12\" className=\"py-4 mt-1 table-responsive\">\n\t\t\t\t\t<Col xs=\"12\" className=\"ant-table-structure-outer table-responsive p-0\">\n\t\t\t\t\t\t<div className=\"highlight-background\" />\n\t\t\t\t\t\t<Table dataSource={allJobsReports} pagination={false} columns={columns} rowKey=\"id\" className=\"jobreports-table\" />\n\t\t\t\t\t\t{/* Added a new attribute in pagination i.e. defaultCurrent */}\n\t\t\t\t\t\t{ totalJobs !== 0 && <Pagination style={{\"float\":\"right\",\"marginRight\":\"40px\"}} current={currentPage} defaultCurrent={currentPage} onChange={handlePagination} total={totalJobs} />}\n\t\t\t\t\t\t\n\t\t\t\t\t</Col>\n\t\t\t\t</Col>\n\t\t\t</Col>\n\t\t</React.Fragment>\n\n\t);\n};\n\nexport default JobReports;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\jobReports.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "referalRewards.js",
                                                            "fileData": "import React,{useEffect, useState} from 'react';\nimport { Table,Pagination} from 'antd';\nimport { Row, Col,Button} from 'react-bootstrap';\nimport {handleRefModal} from '../../../utils'\nimport {useDiscountHistory} from '../../../context/discountContext';\nimport Loader from '../../../components/Loader';\n// import Box from '../../../components/common/Box';\nlet intialRender = true\nconst ReferalRewardsTable = ({user})=>{\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [columns,setColumns] = useState([\n\t\t  {\n\t\t    title: 'Type',\n\t\t    dataIndex: 'spentType',\n\t\t    key: 'spentType',\n\t\t  },\n\t\t  {\n\t\t    title: 'Transaction Type',\n\t\t    dataIndex: 'spentFor',\n\t\t    key: 'spentFor',\n\t\t  },\n\t\t  {\n\t\t    title: 'Intital Amount ($)',\n\t\t    dataIndex: 'initalAmount',\n\t\t    key: 'initalAmount',\n\t\t  },\n\t\t  {\n\t\t    title: 'Spent Amount ($)',\n\t\t    dataIndex: 'spentAmount',\n\t\t    key: 'spentAmount',\n\t\t  },\n\t\t  {\n\t\t    title: 'Net Amount ($)',\n\t\t    dataIndex: 'newAmount',\n\t\t    key: 'newAmount',\n\t\t  },\n\t])\n\tconst [data,setData] = useState([])\n\tconst [showLoader, setShowLoader] = useState(true);\n\t\n\tconst {discountHistory,fetchDiscountHistory,totalReferalAmount,totalReferal,discountCount} = useDiscountHistory()\n\n\tconst handlePagination = async (page, pageSize) => {\n\t\tconsole.log(\">>>>>>>>>true\")\n\t    setShowLoader(true);\n\t    setCurrentPage(page);\n\t    // let filters = { ...mainFilters };\n\t    page = page;\n\t    pageSize = pageSize;\n\t    fetchDiscountHistory(page,pageSize)\n\t    // filters.technician_user_id = user.id;\n\t    // let detailsList = await earningDetailsList(filters);\n\t    // setTotalData(detailsList.totalCount);\n\t    // commissionCalculator(detailsList);\n  };\n\n\tuseEffect(()=>{\n\t\tif(user && user.customer){\n\t\t\ttotalReferalAmount({query:{\"customer\":user.customer.id}})\n\t\t\tfetchDiscountHistory(1,10)\n\t\t\tsetShowLoader(false)\n\t\t\tintialRender = false\n\t\t}\n\t},[user])\n\tuseEffect(()=>{\n\t\tif (discountHistory.length > 0){\n\t\t\tsetData(discountHistory)\n\t\t\tsetShowLoader(false)\n\t\t}\n\t},[discountHistory])\n\n\treturn (\n       <React.Fragment key=\"referReward\">\n        \t<Col xs=\"12\" className=\"\">\n\t    \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t<Col xs=\"12\" className=\"pt-5\">\n\t            \t<Col xs=\"12\" className=\"py-3 div-highlighter\">\n\t            \t\t<Row>\n\t\t                \t<Col md=\"4\" className=\"pl-5 mb-4\">\n\t                    \t\t<span className=\"d-block label-total-name\">Available Balance</span>\t\n\t\t                \t\t<span className=\"d-block label-total-value\" title=\"Coming Soon...\">${totalReferal}</span>\n\t\t                \t</Col>\n\t\t                \t<Col md=\"8\" className=\"text-right mt-3\">   \n\t\t\t\t\t\t\t\t\t<Button onClick={handleRefModal} className=\"btn app-btn\">\n\t\t\t\t\t\t\t\t\t\t<span></span> Refer person\n\t\t\t\t\t\t\t\t  </Button>\n\t\t\t\t\t\t\t</Col>\n\t                \t</Row>\n\t                </Col>\n\t            </Col>\n\t        \t<Col xs=\"12\" className=\"pt-5 pb-3\">\n\t                <h1 className=\"large-heading\">Referral Rewards</h1>\n\t            </Col>\n\t\t\t\t\t<Col xs=\"12\" className=\"ant-table-structure-outer table-responsive\"> \n\t                    <div className=\"highlight-background\"></div>\n\t                    <Table\n\t                        bordered={false}\n\t                        pagination={false}\n\t                        columns={columns}\n\t                        dataSource={data}\n\t                    />\n\t\t            </Col>\n\t\t            {discountCount > 0 &&\n\t\t            \t<Pagination\n\t\t                  style={{ float: \"right\", \",marginRight\": \"40px\" }}\n\t\t                  current={currentPage}\n\t\t                  onChange={handlePagination}\n\t\t                  total={discountCount}\n\t\t                />\n\t\t            }\n\t\t            \n\t        </Col>\n    \t</React.Fragment>\t\t\n\n\t)\n};\nexport default ReferalRewardsTable;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\referalRewards.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "referPeople.js",
                                                            "fileData": "\nimport React,{useEffect, useState, useRef, createRef} from 'react';\nimport { Row, Col,Button} from 'react-bootstrap';\nimport {useAuth} from '../../../context/authContext';\nimport {APP_URL} from '../../../constants';\nimport {Modal,Form,getFieldDecorator,Input,Typography} from 'antd';\n// import { Col, Button} from 'react-bootstrap';\n\nimport Box from '../../../components/common/Box';\nimport styled from 'styled-components';\nimport { openNotificationWithIcon } from 'utils';\nimport * as TypeServiceApi from '../../../api/typeService.api';\nimport * as ReferPeopleApi from '../../../api/refer.api';\nimport * as UserApi from '../../../api/users.api';\n\nconst ReferPeople = ()=>{\t\n\tconst {user} = useAuth();\n\tconst [referLink,setReferLink] = useState('');\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [form] = Form.useForm();\n\n\tconst showModal = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\tconst handleRefModal = ()=>{\n\t\twindow.refdCode = 'open'\n\t\tsetTimeout(()=>{\n\t\t\twindow.refdCode = 'false'\n\t\t},2000)\n\t}\n\tconst onFinish = async (values) => {\n\t\tif(values && values['email']){\n\t\t\tconst user_data = await UserApi.getUserByParam({'email':values['email']})\n\t\t\tif(user_data == null){\n\t\t\t\tawait TypeServiceApi.ReferpeopleThroughEmail({'email':values['email'],'link':referLink});\n\t\t\t\tawait ReferPeopleApi.createRefer({'user':user.id,'email':values['email']})\n\t\t\t\tsetIsModalVisible(false)\n\t\t\t\tform.resetFields();\n\t\t\t\topenNotificationWithIcon('success', 'Success', 'Reference has been sent!.');\n\t\t\t}else{\n\t\t\t\tform.resetFields();\n\t\t\t\topenNotificationWithIcon('error', 'Error', 'Email suggested is already a user on Geeker.');\n\t\t\t}\n\t\t\t\t        \n\t\t }else{\n\t\t\topenNotificationWithIcon('error', 'Error', 'Please input an email.');\n\t\t}\n\n\t};\n\n\tconst onFinishFailed = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\t \n\tuseEffect(()=>{\n\t\tif(user){\n\t\t\tlet  user_id  = user.id\n\t\t\tlet split_id = user_id.split('_')\n\t\t\tsetReferLink(APP_URL+\"/customer/register?referred_by=\"+split_id[1])\n\t\t}\n\t},[user])\n\n\tconst onClose = () => {\n\t\tform.resetFields();\n\t\tsetIsModalVisible(false);\n  \t};\n\n\n  \tconst copy_link = ()=>{\n\t\tnavigator.clipboard.writeText(referLink)\n\t\topenNotificationWithIcon('success', 'Success', 'Link has been copied.');\n  \t}\n\n\treturn (\n\t\t  \n\t\t<Col xs=\"12\" className=\"mt-5\">\n\t\t\t\n\t\t\t\t\n\t\t\t <Modal title=\"Refer Modal\" visible={isModalVisible}  onCancel={onClose} footer={false} bodyStyle={{height:290}} maskClosable={false} width={400} title=\"Refer people\" className=\"selectCallTypeModal referModal\">\n\t\t\t\t\t\t<p> You can copy the link or enter email and press Refer button</p>\n\t\t\t\t\t\t<Button type=\"button\" className=\"app-btn invite-pin-btn app-btn-small\" \tonClick={copy_link}>\n\t\t\t\t\t\t<span></span>Copy link\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\tname=\"basic\"\n\t\t\t\t\t\t\t\tform={form}         \n\t\t\t\t\t\t\t\tlabelCol={{\n\t\t\t\t\t\t\t\t\tspan: 8,\n\t\t\t\t\t\t\t\t}}               \n\t\t\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\t\t\tremember: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\tonFinish={onFinish}\n\t\t\t\t\t\t\t\tonFinishFailed={onFinishFailed}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t<Label className=\"steplable\">Refer user by mail</Label>\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t<CallDiv>\n\t\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t\t        type: 'email',\n\t\t\t\t\t\t\t\t\t        message: 'The input is not valid E-mail!',\n\t\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t\t        required: true,\n\t\t\t\t\t\t\t\t\t        message: 'Please input your E-mail!',\n\t\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t\t    ]}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Input className=\"h-30\"/>\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t</CallDiv>\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t  <div className=\"\"> \n\t\t\t\t\t\t\t\t<Button htmlType=\"submit\" className=\"app-btn invite-pin-btn app-btn-small\" onClick={() => form.submit()}>\n\t\t\t\t\t\t\t\t  <span></span>Refer\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t</Form>\n\n\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t</Modal>\n\t\t</Col>\n\t\t\n\t\t)\n\n};\nconst Label = styled(Typography)`\n  font-size: 14px;\n`;\n\nconst CallDiv =styled.div`\n  display:flex;\n  justify-content :space-between\n`;\n\nexport default ReferPeople;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\referPeople.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "technicianRewards.js",
                                                            "fileData": "import React,{useEffect, useState} from 'react';\nimport { Table } from 'antd';\nimport { Row, Col} from 'react-bootstrap';\n// import {handleRefModal} from '../../../utils'\nimport Loader from '../../../components/Loader';\nimport * as PromoApi from '../../../api/promo.api';\nlet intialRender = true\nconst TechnicianRewardsTable = ({user})=>{\n\tconst [currentPage, setCurrentPage] = useState(1);\n    const [techRewardsData, setTechRewardData] =useState([]);\n    const [totalRewardMoney,setTotalRewardMoney]= useState(0);\n\tconst [columns,setColumns] = useState([\n\t\t  {\n\t\t    title: 'Customer',\n\t\t    dataIndex: 'customer',\n\t\t    key: 'Customer',\n\t\t  },\n\t\t  {\n\t\t    title: 'Technician Earned($)',\n\t\t    dataIndex: 'technician_earn',\n\t\t    key: 'spentFor',\n\t\t  },\n\t\t//   {\n\t\t//     title: 'Intital Amount ($)',\n\t\t//     dataIndex: 'initalAmount',\n\t\t//     key: 'initalAmount',\n\t\t//   },\n\t\t//   {\n\t\t//     title: 'Spent Amount ($)',\n\t\t//     dataIndex: 'spentAmount',\n\t\t//     key: 'spentAmount',\n\t\t//   },\n\t\t//   {\n\t\t//     title: 'Net Amount ($)',\n\t\t//     dataIndex: 'newAmount',\n\t\t//     key: 'newAmount',\n\t\t//   },\n\t])\n\tconst [data,setData] = useState([])\n\tconst [showLoader, setShowLoader] = useState(true);\n\t\n\tconst handlePagination = async (page, pageSize) => {\n\t\tconsole.log(\">>>>>>>>>true\")\n\t    setShowLoader(true);\n\t    setCurrentPage(page);\n\t    // let filters = { ...mainFilters };\n\t    page = page;\n\t    pageSize = pageSize;\n\t    // filters.technician_user_id = user.id;\n\t    // let detailsList = await earningDetailsList(filters);\n\t    // setTotalData(detailsList.totalCount);\n\t    // commissionCalculator(detailsList);\n  };\n\n\tuseEffect(()=>{\n        (async()=>{\n            let technician_reward_data\n            if(user && user.technician){\n                technician_reward_data = await PromoApi.retrievePromoData({\n                    \"technician_id\":user.technician.id,\n                    \"redeemed\":true\n                })\n                console.log('technician_reward_data',technician_reward_data)\n                let totalearned=0;\n                let temp = [];\n                for (var k in technician_reward_data){\n    \n                    let obj ={ ...technician_reward_data[k]}\n                    totalearned = technician_reward_data[k].technician_earn + totalearned;\n                    obj[\"customer\"] = technician_reward_data[k].customer_id.user.firstName+\" \"+technician_reward_data[k].customer_id.user.lastName\n                    temp.push(obj)\n                }\n                setTotalRewardMoney(totalearned)\n                setTechRewardData(temp)\n                setShowLoader(false)\n                intialRender = false\n            }\n        })()\n\t},[user])\n\n\treturn (\n    \n       <React.Fragment key=\"techReward\">\n        \t<Col xs=\"12\" className=\"\">\n\t    \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t<Col xs=\"12\" className=\"pt-5\">\n\t            \t<Col xs=\"12\" className=\"py-3 div-highlighter\">\n\t            \t\t<Row>\n\t\t                \t<Col md=\"4\" className=\"pl-5 mb-4\">\n\t                    \t\t<span className=\"d-block label-total-name\">Total Earned Reward</span>\t\n\t\t                \t\t<span className=\"d-block label-total-value\" title=\"Coming Soon...\">${totalRewardMoney}</span>\n\t\t                \t</Col>\n\t                \t</Row>\n\t                </Col>\n\t            </Col>\n\t        \t<Col xs=\"12\" className=\"pt-5 pb-3\">\n\t                <h1 className=\"large-heading\">Technician Rewards</h1>\n\t            </Col>\n\t\t\t\t\t<Col xs=\"12\" className=\"ant-table-structure-outer table-responsive\"> \n\t                    <div className=\"highlight-background\"></div>\n\t                    <Table\n\t                        bordered={false}\n\t                        pagination={false}\n\t                        columns={columns}\n\t                        dataSource={techRewardsData}\n\t                    />\n\t\t            </Col>\n\t\t            {/* {discountCount > 0 &&\n\t\t            \t<Pagination\n\t\t                  style={{ float: \"right\", \",marginRight\": \"40px\" }}\n\t\t                  current={currentPage}\n\t\t                  onChange={handlePagination}\n\t\t                  total={discountCount}\n\t\t                />\n\t\t            } */}\n\t\t            \n\t        </Col>\n    \t</React.Fragment>\t\t\n\t)\n};\nexport default TechnicianRewardsTable;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\technicianRewards.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "transactions.js",
                                                            "fileData": "import React,{useEffect, useState} from 'react';\nimport { Table} from 'antd';\nimport { Row, Col, Button} from 'react-bootstrap';\nimport {Select} from 'antd';\nimport {useServices} from '../../../context/ServiceContext';\nimport Loader from '../../../components/Loader';\nimport {useEarningDetails} from '../../../context/earningDetailsContext';\nimport '.././index.css'\n// import { useUser } from '../../../context/useContext';\nconst { Option } = Select;\n/*const transactionTypeOptions = [\n\t<Option key={'all'} value={'all'}>All</Option>,\n\t<Option key={'credit'} value={'Credit Card'}>Credit Card</Option>,\n\t<Option key={'debit'} value={'Debit Card'}>Debit Card</Option>\n]*/\n\nconst sortOptions = [\n\t<Option key={'asc'} value=\"asc\">Earnings: Low to high</Option>,\n\t<Option key={'desc'} value=\"desc\">Earnings: High to low</Option>\n]\nlet DATE_OPTIONS = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' ,hour: '2-digit', minute:'2-digit' }\nlet initialLoad= true\nconst TechnicianTransactons = ({user})=>{\n\tconst [showLoader,setShowLoader] = useState(true)\n\t// const [detailSubmission, setDetailSubmission] = useState();\n\tconst [payPeriodData, setPayPeriodData]\t= useState([]);\n\tconst { getStripeAccountStatus,generateAccountLink,createStripeAccount,detailSubmission,disable,getStripeAccountLoginLink } = useServices()\n    const [columns,setColumns]  = useState([\n\t\t{\n\t        title: 'Name',\n\t        dataIndex: 'name',  \n\t\t\tkey: 'name',\n\t        // width: '20%',  \n\t    },\n\t\t{\n\t        title: 'Email',\n\t        dataIndex: 'email',  \n\t\t\tkey: 'email',\n\t        // width: '20%',  \n\t    },\n\t\t{\n\t        title: 'Pay Period',\n\t        dataIndex: 'payPeriod',  \n\t\t\tkey:\"payPeriod\"\n\t        // width: '20%',  \n\t    },\n        {\n\t        title: 'Earnings ($)',\n\t        dataIndex: 'earnings',  \n\t\t\tkey:\"earnings\"\n\n\t        // width: '20%',  \n\t    },\n        {\n\t        title: 'Status',\n\t        dataIndex: 'status',\n            key: 'status', \n\t        // width: '20%',  \n\t    },\n\t\t{\n\t        title: 'PayDate',\n\t        dataIndex: 'payDate',\n            key: 'payDate', \n\t        // width: '20%',  \n\t    },\n    ])\t\n    const {fetchTransactions,getDetailsOfPaycycles,totalPaidAmount} = useEarningDetails()\n    useEffect(()=>{\n\t\t(async () => {\n\t\t\tif(user && user.technician){\n\t\t\t\t\n\t\t\t\tlet query = {}\n\t\t\t\tquery['technician'] = user.technician.id\n\t\t\t\tfetchTransactions(query)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t}, 1000);\n\t\t\t}\t\n\t\t})();\n    },[user])\n\tuseEffect(()=>{\n\t\t(async () => {\n\t\t\tif(user.technician && user.technician.accountId){\n\t\t\t\tawait getStripeAccountStatus(user.technician.accountId)\n\t\t\t}\n\t\t})();\n\t},[detailSubmission])\n\tuseEffect(()=>{\n\t\t(async () => {\t\n\t\t\tif(user){\n\t\t\t\tlet res = await getDetailsOfPaycycles(user.id,user.technician.id)\n\t\t\t\tif(res?.payperiodArr){\n\t\t\t\t\tsetPayPeriodData(res.payperiodArr)\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t},[user])\n\n\tconst removePlusFromNumber = (phoneNumber) => {\n\t\tconst newPhoneNumber = JSON.stringify(phoneNumber.replace('+', ''))\n\t\treturn newPhoneNumber\n\t}\n\treturn (\n        <React.Fragment key=\"technicianTrans\">       \n        \t<Col xs=\"12\" className=\"\">\n\t    \t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t<Col xs=\"12\" className=\"mt-3\">\n\t\t\t\t\t<Col xs=\"12\" className=\"py-3\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t{user && user.technician && !user.technician.accountId &&\n\t\t\t\t\t\t\t(<Col md={{ span: 4, offset: 8}}>\n\t\t\t\t\t\t\t\t<Button className='btn app-btn' disabled={disable} size=\"lg\" \n\t\t\t\t\t\t\t\tonClick ={()=>{\n\t\t\t\t\t\t\t\t\tcreateStripeAccount(user)\n\t\t\t\t\t\t\t\t}} >Create Stripe Account</Button>\n\t\t\t\t\t\t\t</Col>)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{detailSubmission === false &&\n\t\t\t\t\t\t\t(<Col md={{ span: 4, offset: 8}}>\n\t\t\t\t\t\t\t\t<Button className ='btn app-btn' disabled={disable} size=\"lg\" \n\t\t\t\t\t\t\t\tonClick = {()=> {\n\t\t\t\t\t\t\t\tgenerateAccountLink(user)}}\n\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tComplete your stripe account</Button>\t\n\t\t\t\t\t\t\t</Col>)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{detailSubmission === true &&\n\t\t\t\t\t\t\t(<Col md={{ span: 3, offset: 9}}>\n\t\t\t\t\t\t\t\t<Button className ='btn app-btn' disabled={disable} size=\"lg\" \n\t\t\t\t\t\t\t\tonClick = {()=> {\n\t\t\t\t\t\t\t\t\tgetStripeAccountLoginLink(user)}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tStripe Login</Button>\t\n\t\t\t\t\t\t\t</Col>)\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Col>\n\t            </Col>\n\n\t            <Col md=\"12\" className=\"py-4 mt-1 table-responsive\">\n\t            \t<Col xs=\"12\" className=\"table-structure-outer table-responsive p-0\">\t\t            \n\t\t            \t<Col xs=\"12\" className=\"ant-table-structure-outer table-responsive p-0\"> \n\t\t                    <div className=\"highlight-background\"></div>\n\t\t                    <Table\n\t\t                        bordered={false}\n\t\t                        pagination={false}\n\t\t                        columns={columns}\n\t\t                        dataSource={payPeriodData}\n\t\t                        className=\"earnings-table\"\n\t\t                    />\n\t\t                </Col>\n\t\t            </Col>\n\t            </Col>\n\t        </Col>\n        </React.Fragment>\n\t)\n};\nexport default TechnicianTransactons;",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Dashboard\\steps\\transactions.js"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "folder",
                                            "name": "Technician",
                                            "children": [
                                                {
                                                    "type": "folder",
                                                    "name": "CustomerConfirmation",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React from 'react';\nimport styled from 'styled-components';\nimport { Row, Col, Typography } from 'antd';\nimport StepButton from '../../../components/StepButton';\nimport Box from '../../../components/common/Box';\n\nconst { Text } = Typography;\n\nfunction CustomerConfirmation() {\n  return (\n    <div className=\"w-85\">\n      <Container span={15}>\n        <StepContainer>\n          <NewJobContainer>\n            <Div>\n              <Row style={{ textAlign: 'center' }}>\n                <Title\n                  style={{\n                    textAlign: 'center',\n                    width: '100%',\n                    marginBottom: '20px',\n                  }}\n                >\n                  You are connected with the customer\n                </Title>\n              </Row>\n              <Row>\n                <SubTitle\n                  style={{\n                    textAlign: 'center',\n                    width: '100%',\n                    marginBottom: '20px',\n                  }}\n                >\n                  Our system will connect you and your tech by calling\n                  {' '}\n                </SubTitle>\n              </Row>\n              <Row>\n                <Col\n                  span={12}\n                  style={{\n                    display: 'block',\n                    textAlign: '-webkit-right',\n                  }}\n                >\n                  <Title\n                    style={{\n                      float: 'right',\n                      width: '100%',\n                      marginBottom: '20px',\n                      fontWeight: '500',\n                    }}\n                  >\n                    +1 201-555-555\n                  </Title>\n                </Col>\n                <Col\n                  span={8}\n                  style={{\n                    display: 'block',\n                    textAlign: '-webkit-center',\n                  }}\n                >\n                  <TextHeader2>Ext:</TextHeader2>\n                  <ExtTitle> 105 </ExtTitle>\n                </Col>\n              </Row>\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <StepButton>Dial Number</StepButton>\n              </Box>\n            </Div>\n          </NewJobContainer>\n        </StepContainer>\n      </Container>\n    </div>\n  );\n}\n\nCustomerConfirmation.defaultProps = {\n  userInfo: {},\n  setTechProfile: () => {},\n  techProfile: {},\n};\n\nconst Div = styled.div`\n  width: 100%;\n`;\n\nconst Title = styled.p`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 600;\n  font-size: 26px;\n  padding-bottom: 22px;\n  line-height: 1.4;\n`;\nconst ExtTitle = styled.span`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n  font-size: 26px;\n  padding-bottom: 22px;\n  line-height: 1.4;\n`;\nconst SubTitle = styled.p`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 300;\n  font-size: 22px;\n  line-height: 1.4;\n`;\n\nconst TextHeader2 = styled(Text)`\n  font-size: 26px;\n  font-weight: 400;\n  margin-bottom: 30px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst NewJobContainer = styled.div`\n  background: #fff;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  margin-top: 50px;\n  align-items: flex-start;\n  padding: 55px;\n  box-shadow: 0px 15px 50px 0px #d5d5d566;\n  flex: 1;\n`;\n\nconst StepContainer = styled.div`\n  width: 47%;\n  height: 100%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport default CustomerConfirmation;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\CustomerConfirmation\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "EditTech",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, {useState,useRef,useEffect} from 'react';\nimport styled from 'styled-components';\n// import GoogleLogin from 'react-google-login';\n// import FacebookLogin from 'react-facebook-login';\n// import { FaFacebook } from 'react-icons/fa';\nimport { Col } from 'antd';\nimport PhoneInput from 'react-phone-input-2';\nimport { Form } from 'antd';\n// import { FB_APP_ID, GOOGLE_CLIENT_ID } from 'constants/social';\n// import Header from 'components/Header/UnAuthHeader';\nimport FormItem from 'components/FormItem';\n// import InputPassword from 'components/AuthLayout/InputPassword';\nimport Input from 'components/AuthLayout/Input';\n// import Link from 'components/AuthLayout/Link';\nimport { useAuth } from 'context/authContext';\n// import { useHistory } from 'react-router-dom';\nimport * as TechnicianService from '../../../api/technician.api'\nimport {Button} from 'react-bootstrap';\nimport { openNotificationWithIcon } from '../../../utils';\nimport { Select,Typography } from 'antd'; \nimport {languages} from   '../../../constants';\nimport mixpanel from 'mixpanel-browser';\n\nconst { Option } = Select;\n\nconst {p} = Typography;\n\n\nconst  EditTech =  () => {\n  const {user} = useAuth();\n  const formRef = useRef();\n  const technician = user.technician\n  const [showError,SetshowError] = useState(false)\n  // const history = useHistory()\n  useEffect(()=>{\n    formRef.current.setFieldsValue({\n      firstName : user.firstName,\n      lastName : user.lastName\n    })\n\n    setLanguage(technician.language)\n    setPhoneNumber(technician.profile.confirmId.phoneNumber)\n\n  },[])\n\n\n  const { updateUserInfo } = useAuth();\n  const [phoneNumber, setPhoneNumber] = useState('');\n  // const [extension, setExtension] = useState('');\n  const [language,setLanguage] = useState('')\n  \n\n  const HandlePhoneNumber = (e) => {\n    setPhoneNumber(`+${e}`);\n  };\n\n  /*const handleExtension = e => {\n    setExtension(e.target.value);\n  };*/\n\n  const onSignUp = async (values) => {  \n\n    if(phoneNumber && language !== ''){\n      SetshowError(false)\n      updateUserInfo({\"userId\":user.id,\"firstName\":values.firstName,\"lastName\":values.lastName})\n      TechnicianService.updateTechnician(technician.id,\n        {\n          confirmId:{phoneNumber:phoneNumber},\n          language:language,\n          profileImage:{imageUrl:false}\n        })\n\n\n    // mixpanel code//\n    mixpanel.identify(user.email);\n    mixpanel.track('Technician - User profile updated');\n    // mixpanel code//\n\n    openNotificationWithIcon(\"success\",\"Success\",\"Details Successfully changed\")\n    setTimeout(()=>{window.location.href=\"/technician/profile\"},1000)\n\n    }\n    else{\n      SetshowError(true)\n    }\n  \n  };\n\n  return (\n    <div>\n        <SectionEmail>     \n         <Col span={24}>\n            <Col span={12}>  \n              <Title className=\"subtitle\">Edit Account</Title>         \n            </Col>\n          </Col>     \n          <Form  onFinish={onSignUp} layout=\"vertical\" ref={formRef}>\n          <Col span={24}>              \n              <RegForm\n                      name=\"firstName\"\n\n                      label=\"FIRST NAME\"\n                      rules={[\n                        {\n                          required: true,\n                          message: 'Please input your First Name!',\n                        },\n                        () => ({\n                          validator(_, value) {\n                            const re = /^[a-zA-Z ]*$/;\n                            if (!re.test(String(value))) {\n                              return Promise.reject(\n                                'No numbers or special characters are allowed',\n                              );\n                            }\n                            if (value && value.length > 30) {\n                              return Promise.reject('Maximum length is 30 characters');\n                            }\n                            return Promise.resolve();\n                          },\n                        }),\n                      ]}\n                    >\n       \n                  <RegInput\n                      name=\"firstName\"\n                      size=\"large\"\n                      \n                      placeholder={user.firstName}\n                  />\n                   \n                </RegForm>\n                <RegForm\n                    name=\"lastName\"\n                    label=\"LAST NAME\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your Last Name!',\n                      },\n                      () => ({\n                        validator(_, value) {\n                          const re = /^[a-zA-Z ]*$/;\n                          if (!re.test(String(value))) {\n                            return Promise.reject(\n                              'No numbers or special characters are allowed',\n                            );\n                          }\n                          if (value && value.length > 30) {\n                            return Promise.reject('Maximum length is 30 characters');\n                          }\n                          return Promise.resolve();\n                        },\n                      }),\n                    ]}\n                  >\n                    <RegInput  name=\"lastName\" size=\"large\" placeholder=\"Last Name\" />\n                  </RegForm>\n            </Col>\n             <Col span={24}>\n                <FormItem\n\n                  name=\"phonenumber\"\n                  label=\"PHONE NUMBER\" >\n                  <InputWithLabel>\n                    <PhoneInput value={phoneNumber} countryCodeEditable={false} onChange={HandlePhoneNumber} country=\"us\" onlyCountries={['in', 'gr', 'us', 'ca']} />\n                  </InputWithLabel>\n                </FormItem>\n            </Col>  \n\n            <Col span={24}>\n\n            <FormItem\n\n                  name=\"language\"\n                  label=\"Language\" >\n                  <LanguageSelect\n                    showSearch\n                     optionFilterProp=\"children\"\n                     defaultValue={technician.language}\n                    filterOption={(input, option) =>\n                    \n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                    onChange = {(value,option)=>{\n                      setLanguage(option.children)\n                    }}\n\n\n\n                  >\n                  {languages.map((item,index)=>{\n                    if(index === 2){\n                      return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                    }\n                    else{\n                      return <Option key={`lang_${index}`} value={index} >{item[0]}</Option>\n                    }\n                  })}\n                  </LanguageSelect>  \n                  \n                </FormItem>\n                {showError ? <p className=\"error-msg\">Language Required </p> :\"\" }\n               \n\n\n            </Col>\n\n            <Col span={20}>\n                <Button\n                  type=\"primary\"\n                  size=\"large\"\n                  className=\"app-btn\"\n                  >\n                  <span></span>\n                Update \n                </Button>\n            </Col>\n            \n          </Form>\n        </SectionEmail>\n       {/* <SectionEmail>\n        <div>\n          <Row>\n           <Col span={24}>         \n              <Link to='/' className=\"signin-btn-link\">   \n                  Already have an account? Sign In.\n              </Link>\n          </Col>\n           </Row>\n        </div>\n        </SectionEmail>*/}\n       \n    </div>\n  );\n};\n\nconst Title = styled.p`\n\n  font-size:40px;\n  font-weight:400;\n`\n\n\nconst SectionEmail = styled.section`\n  width:50%\n  margin: auto;\n\n  & .ant-col-12{\n    display:inline-block;\n    width: 40%;\n    margin-left: 15px;\n    padding:30px;\n    margin-top:20px;\n  }\n\n  & .ant-col-20{\n    padding-left: 20px;\n  }\n`;\n\n\n\nconst RegForm = styled(FormItem)`\n  &.ant-form-item-has-error {\n    margin-bottom: 6px;\n  }\n\n`;\n\nconst RegInput = styled(Input)`\n  border : 0px none !important;\n  border-radius:0px none !important;\n  border-bottom : 1px solid black  !important;\n  padding: 15px 20px;\n  width:30%;\n   background:transparent !important;\n  border-radius: initial;\n  font-family: 'Open-Sans', sans-serif;\n`;\n\n\nconst LanguageSelect = styled(Select)`\n\n  border:0px none;\n  color:black;\n  border-bottom : 1px solid black !important;\n\n`\n\n\nexport const InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  &:last-child {\n    marginRight: 0;\n  }\n  & input{\n    height:50px;\n    padding:10px;\n    padding: 15px 20px;\n    width:30%;\n    border-radius: 10px;\n    margin-top: 15px;\n    border : 0px none !important;\n    border-radius:0px none !important;\n    border-bottom : 1px solid black !important;\n     padding: 15px 20px;\n      width:30%;\n    background:transparent !important;\n    margin-top:15px;\n    margin-left:20px;\n  }\n  & .react-tel-input .form-control {\n    height:50px;  \n    border : 0px none !important;\n    border-radius:0px none !important;\n    width:100%;\n    border-bottom : 1px solid black !important;\n\n\n\n }\n  & .react-tel-input .flag-dropdown {\n    background:transparent;\n    border : 0px none !important;\n    border-radius: 0px none !important;\n    border-bottom : 1px solid black !important;\n  }\n\n\n \n`;\n\nEditTech.propTypes = {};\n\nexport default EditTech;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\EditTech\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "feedbackCompulsion",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useState ,useEffect} from 'react';\nimport { Modal } from 'antd';\nimport { Button } from 'react-bootstrap';\n\nconst FeedbackCompulsionModal = ({user,isModalOpen,jobId}) => {\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [feedbackLink, setfeedbackLink] = useState('');\n\tconst[isDisabled, setIsDisabled]= useState(false)\n\n\n\tuseEffect(()=>{\n\t\tconsole.log('isModalOpen>>>>>>>>>>>',isModalOpen)\n\t\tsetIsModalVisible(isModalOpen)\n\t\t\n\t},[isModalOpen])\n\n\tconst showModal = () => {\n\t\tsetIsModalVisible(true);\n\t};\n\n\t\t\n\tconst locationChangeToFeedback = () => {\n\t\tsetIsDisabled(true)\n\t\tif(jobId && isModalOpen){\n\t\t\twindow.location.href =  `/meeting-feedback/${jobId}`;\n\t\t}\n\t}\n\n  return (\n    <>\n      <Modal title=\"Please provide feedback first\" visible={isModalVisible} className=\"feedback-first title-bold\" closable={false} footer={null}>\n       \n\t\t<div className=\"section_one\">\n            <div className=\"section_sub_one\">\n            \t<p>Please provide the feedback to old job first.Click on the following button to give feedback.</p>\n\t\t        <Button className={(isDisabled ? \"disabled-btn\" : \"\") + \"btn app-btn\"} disabled={isDisabled} onClick={locationChangeToFeedback}>\n\t\t\t\t\tFeedback\n\t\t\t\t</Button>\n            </div>\n           \n        </div>\n\n\n\n      </Modal>\n    </>\n  );\n};\n\nexport default FeedbackCompulsionModal;\n\n\n\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\feedbackCompulsion\\index.js"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "JobAlert",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useState} from 'react';\nimport { useParams } from 'react-router';\nimport Spinner from '../../../components/Spinner';\nimport DeclineJob from './steps/DeclineJob';\nimport WaitJob from './steps/WaitJob';\nimport NewJob from './steps/NewJob';\nimport {get_or_set_cookie,GAevent} from '../../../utils'\nimport { useJob } from '../../../context/jobContext';\nimport { useUser } from '../../../context/useContext';\nimport * as JobService from '../../../api/job.api';\nimport * as JobCycleApi from '../../../api/jobCycle.api';\nimport { JobTags } from '../../../constants/index.js';\nimport { useSocket } from '../../../context/socketContext';\n// import { useHistory } from 'react-router-dom';\nimport { openNotificationWithIcon } from '../../../utils';\nimport mixpanel from 'mixpanel-browser';\n// import { ConsoleSqlOutlined } from '@ant-design/icons';\nconst JobAlert = () => {\n  const { jobId } = useParams();\n  const [mainJobId,setMainJob] = useState(jobId)\n  const [step, setStep] = useState(0);\n  const { job, fetchJob,jobIds } = useJob();\n  const { user } = useUser();\n  const [job_arr,set_job_arr] = useState([]);\n  const [webSocketId,setWebSocketId] = useState('')\n  const { socket } = useSocket();\n  const [mainJob,setMainJobObject] = useState();\n  const [userNotifiedAboutTier, setUserNotifiedAboutTier] = useState(false);\n  // const location = useLocation();\n  // const appended_job = location.state.appendedJob ?location.state.appendedJob :null\n  // const discarded_job = location.state.discardedJob?location.state.discardedJob :null\n  // const fromSchedule = location.state.fromSchedule ? location.state.fromSchedule : null\n  // const mainJobs = location.state.mainJobs ? location.state.mainJobs : []\n  // const [appended_data,setAppendedData] = useState([])\n  const { updateJob } = useJob();\n  const [hiddenElement,setHiddenElement] = useState([])\n  // const history = useHistory();\n  const [key ,setKey] = useState();\n  const [ isDisabled, setIsDisabled ]= useState(false);\n  // const [active,setActive] = useState();\n  const active = \"\";\n\n  /**\n   * Starts a call on technician side\n   * @params = \n   * @response : it redirects the technician to meeting page ,starts a call with customer and sends the socket to change the button on client screen.\n   * @author : Sahil, Nafees\n  */\n\nconst handleStartCall = async()=>{\n  try{\n    setIsDisabled(true);\n    console.log(\"disabled\", isDisabled)\n    let updatedJob = await JobService.retrieveJob(jobId)\n    if(updatedJob.status !== \"Declined\" && updatedJob.status !== \"Scheduled\"){\n      socket.emit('call:started',{id:jobId})\n    }\n    get_or_set_cookie(user)\n    // mixpanel code//\n    mixpanel.identify(user.email);\n    mixpanel.track('Technician - Started Call', { JobId: jobId });\n    if(!updatedJob.GA_start_call_event_called){\n      //GA3 tag commented by Vinit on 24/04/2023.\n      GAevent('Call Started','tech-start-call', updatedJob.id,updatedJob?.technician?.id)\n      await updateJob(updatedJob.id, {GA_start_call_event_called:true});\n    }\n    // mixpanel code//\n    let lifeCycleTag = ''\n    if(job.is_transferred && job.is_transferred == true){\n      lifeCycleTag = JobTags.TECHNICIAN_START_CALL_AFTER_TRANSFER;\n    }else{\n      lifeCycleTag = JobTags.TECHNICIAN_START_CALL;\n    }\n    \n    let currentJob = await JobService.retrieveJob(jobId);\n    if(currentJob.status !== 'Declined' && updatedJob.status !== \"Scheduled\"){\n        if (currentJob.technician.id == user.technician.id){\n          await JobCycleApi.create(lifeCycleTag, jobId);\n          window.location.href =  process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`\n        }\n        else{\n          window.location.href = \"/\"\n          openNotificationWithIcon(\"info\",\"This job is already taken\")\n        }\n\n    } else{\n        openNotificationWithIcon('error', 'Error', `The job no longer available.`)\n        setTimeout(()=>{\n          window.location.href = \"/\"\n        },3000)\n      }\n  }\n  catch(err){\n    console.log(\"error in handleStartCall >>>\",err)\n  }\n}\n\n\n\n  useEffect(()=>{\n    fetchJob(jobId)\n    console.log(\">jobId >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \",jobId)\n  },[])\n  useEffect(() => {\n    // console.log(\"job,,,,,,,,,,,\",job)\n    if(job && job.id && job.id == jobId){\n      let mainJob = {...job}\n      let softwareData = (job.subSoftware && job.subSoftware.id ? job.subSoftware : job.software)\n      let price_Arr =(softwareData && softwareData.estimatedPrice ? softwareData.estimatedPrice.split(\"-\") : [])\n      const time1 = (softwareData && softwareData.estimatedWait ? parseInt(softwareData.estimatedWait.split(\"-\")[0]) : 0)\n      const time2 = (softwareData && softwareData.estimatedWait ? parseInt(softwareData.estimatedWait.split(\"-\")[1]) : 0)\n\n      mainJob.estimatedWaitFrom = time1\n      mainJob.estimatedWaitTo = time2\n      mainJob.estimatedPrice1 = \"NA\"\n      mainJob.estimatedPrice2 = \"NA\"\n      if(price_Arr.length > 0){\n        mainJob.estimatedPrice1   = \"$ \" +  (time1/6)*parseInt(price_Arr[0])\n        mainJob.estimatedPrice2  = \"$ \" + (time2/6)*parseInt(price_Arr[0])\n      }\n      console.log(\">mainJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \",mainJob)\n      setMainJobObject(mainJob)\n      set_job_arr(prevArr =>[mainJob])\n\n      /*let settings = SettingsApi.getSettingsList({\"software\":mainJob.software.id})\n        settings.then((data)=>{\n           let price_Arr =(data.data[0] != undefined ? data.data[0].estimatedPrice.split(\"-\") : [])\n           const time1 = (data.data[0] != undefined ? parseInt(data.data[0].estimatedWait.split(\"-\")[0]) : 0)\n          const time2 = (data.data[0] != undefined ? parseInt(data.data[0].estimatedWait.split(\"-\")[1]) : 0)\n          console.log(\">>>>>>>.time  >>>>>>>>>>>>>>\",time1)\n          console.log(\">>>>>>>time 2\")\n          mainJob.estimatedWaitFrom = time1\n          mainJob.estimatedWaitTo = time2\n\n          mainJob.estimatedPrice1   = \"$ \" +  (time1/6)*parseInt(price_Arr[0])\n            mainJob.estimatedPrice2  = \"$ \" + (time2/6)*parseInt(price_Arr[0])\n            console.log(\">>>Hey i am reaching here >>>>>>>>>>\")\n            set_job_arr(prevArr =>[mainJob])\n\n        })*/\n\n    }\n\n  },[job]);\n\n  if (jobIds!==undefined  &&jobIds.length <0 ) return (<Spinner />);\n\n  const handleDecline = async (jobdata)=>{\n    try {\n        let jobdetail = await JobService.retrieveJob(jobdata.id);\n        let updatedNotifiedTechs =[];\n\t\t\t\t\t\n\t\t\t\t  for(const k in jobdetail.notifiedTechs){\n\t\t\t\t\t  let jobStatus = jobdetail.notifiedTechs[k]['jobStatus'];\n\t\t\t\t\t  let notifyEndAt = (jobdetail.notifiedTechs[k]['notifyEndAt'])?jobdetail.notifiedTechs[k]['notifyEndAt']:new Date();\n\t\t\t\t\t  console.log(\">>>>>>>>>> jobdetail.notifiedTechs\", jobdetail.notifiedTechs[k], jobdetail.id);\n\t\t\t\t\t  if(jobdetail.notifiedTechs[k]['techId'] == user.technician.id){\n\t\t\t\t\t\t  jobStatus = \"tech-decline\";\n\t\t\t\t\t\t  notifyEndAt = new Date();\n\t\t\t\t\t  }\n\t\t\t\t\t  updatedNotifiedTechs[k] = {\n\t\t\t\t\t\t  'techId' :  jobdetail.notifiedTechs[k]['techId'],\n\t\t\t\t\t\t  'techStatus':  jobdetail.notifiedTechs[k]['techStatus'],\n\t\t\t\t\t\t  'notifyAt' : jobdetail.notifiedTechs[k]['notifyAt'],\n\t\t\t\t\t\t  'jobStatus' : jobStatus,\n\t\t\t\t\t\t  'notifyEndAt' : notifyEndAt,\n\t\t\t\t\t  }\n\t\t\t\t  }\n\n      await updateJob(jobdata.id, {$push:{tech_declined_ids:user.technician.id ,technician:\"\"},'notifiedTechs':updatedNotifiedTechs });\n      openNotificationWithIcon('success', 'Success', `Job has been declined.`)\n      let lifeCycleTag = ''\n      if(jobdata.is_transferred && jobdata.is_transferred == true){\n        lifeCycleTag = JobTags.TECHNICIAN_DECLINED_AFTER_TRANSFER;\n      }else{\n        lifeCycleTag = JobTags.TECH_DECLINED_JOB;\n      }\n      await JobCycleApi.create(lifeCycleTag, jobdata.id);\n      if(job_arr.length === 1){\n        window.location.href = '/'\n      }else{\n        set_job_arr(job_arr.filter(item => item.id !== jobdata.id))\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n\n  return (\n    <div className=\"w-85\">\n      {\n        step === 0 && <NewJob userNotifiedAboutTier={userNotifiedAboutTier} setUserNotifiedAboutTier={setUserNotifiedAboutTier} setWebSocketId={setWebSocketId} job_arr={job_arr} key={key} mainJob={mainJob} setMainJob={setMainJob} active={active} handleStartCall={handleStartCall} setKey = {setKey} hiddenElement={hiddenElement} setHiddenElement ={setHiddenElement} handleDecline={handleDecline} set_job_arr={set_job_arr}  setStep={setStep} isDisabled={isDisabled} setIsDisabled={setIsDisabled} />\n\n      }\n      {\n        step === 1 && <DeclineJob setStep={setStep} user_logged={user} />\n      }\n      {\n        step === 2 && <WaitJob webSocketId={webSocketId}  jobId={mainJobId} setStep={setStep} handleStartCall={handleStartCall} isDisabled={isDisabled} setIsDisabled={setIsDisabled}/>\n      }\n    </div>\n  );\n};\n\nexport default JobAlert;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "folder",
                                                                    "name": "Components",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "ConfirmationModel.js",
                                                                            "fileData": "import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap';\nimport { Modal, Spin } from 'antd';\nimport yes from '../../../../../assets/images/yes.png'\nimport no from '../../../../../assets/images/no.png'\nimport maybe from '../../../../../assets/images/maybe.png'\nimport { openNotificationWithIcon } from '../../../../../utils';\n\nfunction ConfirmationModel({ acceptClicked, acceptJobEvent, open, setOpen, handleAccept }) {\n    const [selectedOpt, setSelectedOpt] = useState(\"\");\n    let objArr = [\n        {\n            optionValue: \"Yes\",\n            image: yes,\n            optionText: \"I feel comfortable moving forward with the job\",\n        },\n        {\n            optionValue: \"No\",\n            image: no,\n            optionText: \"I am not able to assist\",\n        },\n        {\n            optionValue: \"Maybe\",\n            image: maybe,\n            optionText: \"I am willing to try. Advise Customer if they would like to proceed.\",\n        }\n    ]\n\n    const handleSubmit = () => {\n        if(selectedOpt === \"No\") {\n            // openNotificationWithIcon('error', 'Error', 'You won\\'t able to accept this job.');\n            window.location.href = '/dashboard';\n            return;\n        }\n        if(selectedOpt === \"Yes\" || selectedOpt === \"Maybe\") handleAccept(acceptJobEvent)\n        else openNotificationWithIcon('error', 'Error', 'Select an Option above.');\n    }\n  return (\n        <Modal\n        title=\"\"\n        visible={open}\n        width={750}\t\n        closable={false}\n        footer={null}\n        onCancel={()=>setOpen(false)}\n        bodyStyle={{ padding: 50, paddingBottom: 85, boxShadow: '-1px -1px 7px #FDFDFD, 3px 3px 14px #D2DBE2', background: '#FFFFFF', borderRadius: 8 }}\n        >\n        <div className=\"confirm-modal-for-job-outer-div align-items-center\">\n            <div className=\"confirm-modal-for-job-heading d-flex flex-column align-items-center\">\n                <div className=\"confirm-modal-for-job-heading1 d-flex flex-column mb-2\">\n                <span>Remember the \"1st Minute Rule\"</span>\n                </div>\n                <div className=\"confirm-modal-for-job-heading2\">\n                Are you able to assist the customer with their issue?\n                </div>\n            </div>\n            \n            <div className=\"confirm-modal-for-job-content d-flex align-items-center flex-wrap\">\n             {\n                   objArr.map((obj, i)=>(\n                    <div key={i} className={`confirm-modal-for-job-content-card ${selectedOpt === obj.optionValue ? 'selectedCard-before-meeting' : ''}`} onClick={() => setSelectedOpt(obj.optionValue)}>\n                    <span className=\"confirm-modal-for-job-content-card-title mt-5\">\n                    <img src={obj.image} alt=\"some caption\" /> \n                    </span>\n                    <b><strong>{\" \"} {obj.optionValue}</strong></b>\n                    <span className=\"confirm-modal-for-job-content-description\"> {obj.optionText}</span>\n                    </div>\n                ))\n            }\n            </div>\n            <div className=\"confirm-modal-for-job-btn-div justify-content-center d-flex \">\n              <Button className=\"confirm-modal-for-job-button job-accept-btn\" title=\"OK\" onClick={!acceptClicked ? handleSubmit : ()=>{}}>\n              <span />\n              {acceptClicked\n                        ?\n                        <Spin />\n                        :\n                        <>Ok</>\n                    }\n                </Button>\n            </div>\n        </div>\n        {/*<div className='before-meeting-popup'>\n            <div className='before-meeting-popup-heading'>\n                <div>\n                    Remember the \"1st Minute Rule\"\n                </div>\n                <span>Are you able to assist the customer with their issue?</span>\n            </div>\n            <div className='before-meeting-popup-content'>\n                {objArr.map((obj, i) => (\n                    <div key={i} className={`before-meeting-popup-content-card ${selectedOpt === obj.optionValue ? 'selectedCard-before-meeting' : ''}`} onClick={() => setSelectedOpt(obj.optionValue)}>\n                        <span className='before-meeting-popup-content-title'><img src={obj.image} alt=\"some caption\" /> {\" \"} {obj.optionValue}</span>\n                        <span className='before-meeting-popup-content-description'>{obj.optionText}</span>\n                    </div>\n                ))}\n            </div>\n            <div>\n                <Button className=\"before-meeting-popup-button job-accept-btn\" title=\"OK\" onClick={!acceptClicked ? handleSubmit : ()=>{}}>\n                    <span />\n                    {acceptClicked\n                        ?\n                        <Spin />\n                        :\n                        <>Ok</>\n                    }\n                </Button>\n            </div>\n        </div>*/}\n    </Modal>\n  )\n}\n\nexport default ConfirmationModel",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\Components\\ConfirmationModel.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "DeclineJob.js",
                                                                    "fileData": "import React, { useState } from 'react';\n// import { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Row, Col } from 'antd';\nimport {Button} from 'react-bootstrap';\n// import StepButton from '../../../../components/StepButton';\nimport Select from '../../../../components/common/Select';\nimport {useJob} from '../../../../context/jobContext';\nconst { Option } = Select;\n\nfunction DeclineJob({ setStep, job,user_logged }) {\n  console.log('user_logged>>>>>>>>> in DeclineJob',user_logged)\n  const [reason, setReason] = useState('Needed to log off');\n  // const history = useHistory();\n  const { updateJob } = useJob();\n\n  const onSubmit = async () => {\n    try {\n      console.log(\">>>>>>job id >>>>>>>>>>>>\",job)\n      await updateJob(job.id, {$push:{tech_declined_ids:user_logged.technician.id } });\n      await updateJob(job.id, { reasons: [...job.reasons, reason] });\n      setStep(0)\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Container span={15}>\n      <StepContainer>\n        <NewJobContainer>\n          <Div>\n            <Row span={24} style={{ marginBottom: '30px' }}>\n              <AlertTileBox>\n                <Title>Please tell us why you declined?</Title>\n              </AlertTileBox>\n            </Row>\n            <Row span={24}>\n              <SelectStyled value={reason} onChange={e => setReason(e)}>\n                <Option value=\"Needed to log off\">Needed to log off</Option>\n                <Option value=\"No time for me\">No time for me</Option>\n                <Option value=\"No available for me\">No available for me</Option>\n              </SelectStyled>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <ButtonContainer span={24}>\n                  <Button className=\"btn app-btn\" onClick={onSubmit}><span></span>Done</Button>\n                  <Button className=\"btn app-btn app-btn-light-blue\" onClick={() => setStep(0)}><span></span>Cancel</Button>\n                </ButtonContainer>\n              </Col>\n            </Row>\n          </Div>\n        </NewJobContainer>\n      </StepContainer>\n    </Container>\n  );\n}\n\nconst Div = styled.div`\n  width: 100%;\n`;\n\nconst AlertTileBox = styled.div`\n    width:100%;\n    display: flex;\n    position: relative;\n    img{\n        position: absolute;\n        left: 0;\n        top: -3px;\n        padding:4px 4px 4px 0px;\n    }\n}\n`;\nconst Title = styled.p`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.4;\n`;\nconst ButtonContainer = styled(Col)`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 30px;\n\n  & .ant-btn{\n    float:left;\n    margin-left:0 !important;\n  }\n`;\n/*const DeclineButton = styled.button`\n  height: 60px;\n  background: transparent;\n  display: flex;\n  font-weight: bold;\n  border-radius: 10px;\n  padding: 0px 40px;\n  line-height: 60px;\n  border: 0px;\n  font-size: 18px;\n  curser: pointer;\n  color: #464646;\n  float:left;\n  cursor:pointer;\n`;*/\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\nconst NewJobContainer = styled.div`\n  background: #fff;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  margin-top: 50px;\n  align-items: flex-start;\n  padding: 60px;\n  box-shadow: 0px 15px 50px 0px #d5d5d566;\n  flex: 1;\n`;\nconst StepContainer = styled.div`\n  width: 80%;\n  height: 100%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\nconst SelectStyled = styled(Select)`\n  width: 100%;\n  margin-bottom: 30px;\n`;\n\nexport default DeclineJob;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\DeclineJob.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ExtensionModal.js",
                                                                    "fileData": "// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n// import React from 'react';\n// import { Modal as AntModal, Typography } from 'antd';\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\n// import StepButton from '../../../../components/StepButton';\n\n// const ExtensionModal = ({ isOpen, onClose }) => {\n//   const handleSubmit = () => {\n//     window.open('https://remotedesktop.google.com/support', 'Generate Code', \"height=800,width=800\");\n//     onClose();\n//   };\n\n//   return (\n//     <Modal visible={isOpen} onCancel={onClose} footer={false}>\n//       <Container>\n//         <Description>Please install Remote PC controller Extension</Description>\n//         <ButtonContainer>\n//           <InstallButton onClick={handleSubmit}>Install or Use</InstallButton>\n//         </ButtonContainer>\n//       </Container>\n//     </Modal>\n//   );\n// };\n\n// const Modal = styled(AntModal)`\n//   .ant-modal-content {\n//     border-radius: 10px;\n//   }\n// `;\n\n// const Container = styled.div`\n//   padding: 20px;\n// `;\n// const ButtonContainer = styled.div`\n//   margin-top: 60px;\n//   display: flex;\n//   justify-content: center;\n// `;\n// const Description = styled(Typography)`\n//   font-size: 20px;\n//   margin: 15px 0;\n//   font-weight: 600;\n//   text-align: center;\n// `;\n// const InstallButton = styled(StepButton)`\n//   padding: 20px 40px;\n//   font-size: 16px;\n//   width: initial;\n//   margin: 0;\n// `;\n\n// ExtensionModal.propTypes = {\n//   isOpen: PropTypes.bool.isRequired,\n//   onClose: PropTypes.func.isRequired,\n// };\n\n// export default ExtensionModal;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\ExtensionModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "NewJob.js",
                                                                    "fileData": "import React, { useEffect, useState,useRef } from 'react';\nimport { Row, Col, Typography, Modal, Spin } from 'antd';\nimport styled from 'styled-components';\nimport { useLocation, useParams } from 'react-router';\nimport { getFullName, openNotificationWithIcon,get_or_set_cookie,GAevent} from '../../../../utils';\nimport { useHistory } from 'react-router-dom';\nimport * as JobApi from '../../../../api/job.api';\nimport * as JobCycleApi from '../../../../api/jobCycle.api';\nimport { JobTags } from '../../../../constants/index.js';\nimport { useUser } from '../../../../context/useContext';\nimport { useSocket } from '../../../../context/socketContext';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\nimport {Button} from 'react-bootstrap';\nimport mixpanel from 'mixpanel-browser';\nimport moment from 'moment';\n// import { useChatEngineTools } from '../../../../context/chatContext';\nimport * as WebSocket from '../../../../api/webSocket.api';\nimport {useNotifications} from '../../../../context/notificationContext';\nimport Loader from '../../../../components/Loader';\nimport FeedbackCompulsionModal from '../../feedbackCompulsion';\nimport {useServices} from '../../../../context/ServiceContext';\nimport { useFeedback } from '../../../../context/feedbackContext';\nimport * as JobService from \"../../../../api/job.api\";\nimport * as TwilioChatApi from '../../../../api/twilioChat.api'\nimport ConfirmationModel from './Components/ConfirmationModel';\n// import { getTalkChatUser,getTalkGroupChatUser } from '../../../../api/chat.api';\n// import { createOrGetUserChat } from '../../../../utils';\n// import ChatPanelAccpetJob from 'components/ChatPanelAccpetJob';\nimport  notifySound from '../../../../assets/sounds/notification.mp3'\nimport Box from '../../../../components/common/Box';\nimport {debounce} from 'lodash';\nimport Badge from '@mui/material/Badge';\nimport ChatPanelTwilio from 'components/ChatPanelTwilio';\nconst { Text } = Typography;\n\n/*const renderTime = ({ remainingTime }) => {\n\n\t// if (remainingTime === 0) {\n\t//   window.location.href = '/dashboard';\n\t// }\n\n\treturn (\n\t\t<div className=\"timer\">\n\t\t\t<div className=\"value\">{remainingTime}</div>\n\t\t</div>\n\t);\n};*/\n\nconst NewJob = ({ userNotifiedAboutTier,\n    setUserNotifiedAboutTier, \n    setStep,\n    job_arr,handleDecline ,\n    set_job_arr,hiddenElement,\n    setHiddenElement,\n    mainJob,\n    key,\n    setKey,\n    active,\n    setMainJob,\n    setWebSocketId,\n    handleStartCall,\n\tisDiabled, \n\tsetIsDisabled\n}) => {\n\tconst { jobId } = useParams();\n\tconst clock = useRef()\n\tconst [techId,setTechId] = useState(\"\");\n\tconst { user } = useUser();\n\tconst location = useLocation();\n\tconst { socket } = useSocket();\n\tconst history = useHistory();\n\tconst {fetchNotifications} = useNotifications();\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [showFeedbackModal, setShowFeedbackModal] = useState(false);\n\tconst [FeedbackJobId, setFeedbackJobId] = useState('');\n\tconst [showDisableAcceptbutton, setShowDisableAcceptbutton] = useState(false);\n\tconst { checkIfTwoTierJobAndExpertTech } = useServices();\n\tconst { getFeedback } = useFeedback();\n\tconst [open, setOpen] = useState(false)\n\tconst [acceptJobEvent, setAcceptJobEvent] = useState()\n\t// const { createChatUsers,createGroupChatUsers, createTalkUserSession, joinTalkChatConversation, createOrGetTalkChatConversation,joinTalkChatConversationGroup,createOrGetTalkChatConversationGroup,handleTalkChatUser } = useChatEngineTools();\n\tconst [duration, setDuration] = useState('')\n\tconst [showLoader, setShowLoader] = useState(null)\n\tconst now_time = moment();\n\tconst inboxRef = useRef();\n\tconst [showChat, setShowChat] = useState(false)\n\tconst [refetchChat,setRefetchChat] = useState(false)\n\tconst [showChatPanel,setShowChatPanel] = useState(false)\n\tconst [socketHits, setSocketHits] = useState(0);\n\tconst [showLoaderForChat, setShowLoaderForChat] = useState(null)\n\tconst [chatPanelHasOpen,setChatPanelHasOpen] = useState(true)\n\tconst [jobFromApi, setJobFromApi] = useState()\n\n\tconst StyledBadge = styled(Badge)(({ theme }) => ({\n\t\t'& .MuiBadge-badge': {\n\t\t  right: -3,\n\t\t  top: 13,\n\t\t  backgroundColor:'red',\n\t\t  padding: '0 4px',\n\t\t},\n\t  }));\n\n\tlet audio = new Audio(notifySound)\n\n\t// const appendedBorder = active=> ({border:\"1px solid green\"})\n\t// const [selectedJob, setSelectedJob] = useState({});\n\tconst paramsJobId = useParams(\"jobId\")\n\tconst [acceptClicked, setAcceptClicked] = useState(true);\n\tuseEffect(()=>{\n\t\tif(job_arr && job_arr[0] && paramsJobId.jobId === job_arr[0].id){\n\t\t\tsocket.emit(\"join\",jobId)\n\t\t}\n\t},[])\n\tuseEffect(()=>{\n\t\tif(job_arr && job_arr[0] && paramsJobId.jobId === job_arr[0].id){\n\t\t\tsetIsLoading(false);\n\t\t\tsetAcceptClicked(false)\n\t\t}\n\t\tsetTimeout(function(){\n\t\t\tsetIsLoading(false);\n\t\t},30000)\n\t},[job_arr])\n\tuseEffect(()=>{\n\t\tif(job_arr.length >0 && job_arr.length === hiddenElement.length){\n\t\t\twindow.location.href= \"/\"\n\t\t}\n\t},[hiddenElement])\n\n\tconst handelShowChat = () =>{\n\t\tsetShowChatPanel(true)\n\t\tsetChatPanelHasOpen(false)\n\t\tsetSocketHits(0)\n\t\t// fetchSingleJob()\n\t}\n\n\tconst handleSendMessage = (message) => {\n\t\tsocket.emit(\"talk-js-notification-to-customer\",jobId)\n\t  };\n\t\n\t/*const removeJob = (e)=>{\n\t\tlet job = JSON.parse(e.currentTarget.name)\n\t\tconsole.log(\">>>>>>>\",job)\n\t}*/\n\tuseEffect(()=>{\n\t\tsocket.on('accept-job', async(job) => {\n\t\tconsole.log(\"jobId >>>>>>>>>>>>>>>>>>>>> \",jobId)\n\t\tconsole.log(\"job >>>>>>>>>>>>>>>>>>>>>>>>>>>\",job)\n\t\tconsole.log(\"accept-job socket received on technician side to change the page to meeting\")\n\t\tif(job.technician && user ){\n\t\t  try {\n\t\t\t\t WebSocket.updateSocket(job['web_socket_id'],{'hitFromTechnicianSide':true})\n\t\t\t\t\n\t\t\t  }\n\t\t  catch(err) {\n\t\t\t  console.log('accept-job error in newjob  one>>>',err)\n\t\t  }\n\n\t\t  try{\n\t\t\t const res =  await JobApi.retrieveJob(jobId);\n\t\t\t\tconsole.log(\"res >>>>>>>>>>>>>>>>>>>>>>>>> \",res)\n\t\t\t\tif(res.technician.user.id === user.id){\n\t\t\t\t\tget_or_set_cookie(user)\n\t\t\t\t   window.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`\n\t\t\t\t}\n\t\t\t  }catch(err) {\n\t\t\t  \tget_or_set_cookie(user)\n\t\t\t  console.log('accept-job error in newjob two>>>',err)\n\t\t\t  if(jobId == job.id){\n\t\t\t\t  window.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`\n\t\t\t  }\n\t\t  }\n\t\t \n\t\t}\n\t  });\n\t \n\t},[socket])\n\n\n\tconst handleSocketEvent = () => {\n\t\t// Increase the socket hits count\n\t\tsetSocketHits((prevHits) => prevHits + 1);\n\t\n\t\t// Perform other actions\n\t\taudio.play()\n\t  };\n\n\tuseEffect(()=>{\n\t\tsocket.on(\"open-chat-panel-talkjs\",(data)=>{\n\t\t\tif(data === jobId){\n\t\t\t  handleSocketEvent()\n\t\t\t}\n\t\t  })\n\t},[])\n\n\tuseEffect(() => {\n\t\tconst fetchJobData = async () => {\n\t\t  let response = await JobApi.retrieveJob(jobId);\n\t\t  setJobFromApi(response)\n\t\t  // Process the response or update state here\n\t\t};\n\t  \n\t\tfetchJobData();\n\t  }, []);\n\n\tuseEffect(() =>{\n\t\tif(user){\n\t\t\tmixpanel.track('Technician - On New Job Request Page ', { 'Email': user.email });\n\t\t}\n\t\t(async () => {\n\t\t\tif(user != undefined && user.technician != undefined && mainJob != undefined){\n\t\t\t\tconsole.log(\"job_arr >>>>>>>\",job_arr)\n\t\t\t \tlet value = await checkIfTwoTierJobAndExpertTech(user.technician,mainJob)\n\t\t\t \tconsole.log('value>>>>>>> of expert array',value)\n\t\t\t\tconsole.log(\"useeffect, before if\");\n\t\t\t \tif(!value){\n\t\t\t \t\tsetShowDisableAcceptbutton(true);\n\t\t\t\t\tif(!userNotifiedAboutTier) {\n\t\t\t\t\t\topenNotificationWithIcon('error', 'Error', 'This job is for expert technicians.You cannot accept this job.');\n\t\t\t\t\t\tsetUserNotifiedAboutTier(true)\n\t\t\t\t\t}\n                    value = undefined;\n\t\t\t \t}\n\t\t\t}\n\t\t})();\n\n\t},[user,mainJob])\n\n\t// const fetchSingleJob = async()=>{\n\t// \ttry{\n\t// \t\tlet response = await JobApi.retrieveJob(jobId)\n\t// \t\tsetDuration(moment.duration(moment(response.primarySchedule).diff(now_time)))\n\t// \t\tif(response.is_long_job || response.schedule_accepted || response.status === 'Inprogress' || response.status === 'Completed' || response.status === 'Accepted'){\n\t// \t\t\tsetShowLoaderForChat(true)\n\t\t\t\t\n\t// \t\t\tlet customerDataObject = {...response.customer.user} \n\t// \t\t\tlet technicianDataObject = { ...response.technician.user }\n\n\t// \t\t\tlet customerChatUser = await handleTalkChatUser(customerDataObject)\n\t// \t\t\tlet technicianChatUser = await handleTalkChatUser(technicianDataObject)\n\n\t// \t\t\tif (user.userType == 'technician') {\n\t// \t\t\t\tcreateTalkUserSession(technicianChatUser)\n\t// \t\t\t}\n\t// \t\t\telse {\n\t// \t\t\t\tcreateTalkUserSession(customerChatUser)\n\t// \t\t\t}\n\t// \t\t\tlet conversationData = await createOrGetUserChat([JSON.stringify(customerDataObject.id), JSON.stringify(technicianDataObject.id)], response.id, response.software.name, response)\n\t// \t\t\tlet conversation = await createOrGetTalkChatConversation(conversationData)\n\t// \t\t\tlet userInbox = await joinTalkChatConversation({ \"customer\": customerChatUser, \"technician\": technicianChatUser, \"conversationId\": response.chatRoomId ? response.chatRoomId : conversationData.jobId })\n\t// \t\t\tsetTimeout(() => {\n\t// \t\t\t\ttry {\n\t// \t\t\t\t  if (userInbox) {\n\t// \t\t\t\t\tsetShowLoaderForChat(false);\n\t// \t\t\t\t\tsetTimeout(() => {\n\t// \t\t\t\t\t  if (inboxRef.current != undefined) {\n\t// \t\t\t\t\t\tuserInbox.mount(inboxRef.current);\n\t// \t\t\t\t\t\tuserInbox.onSendMessage(handleSendMessage);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t  if (user.userType === 'technician') {\n\t// \t\t\t\t\t\tsetShowChat(true);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t}, 1000);\n\t// \t\t\t\t  }\n\t// \t\t\t\t} catch (err) {\n\t// \t\t\t\t  console.log('error in fetchSingleJob (inner setTimeout) >>', err);\n\t\t\t\t\t  \n\t// \t\t\t\t}\n\t// \t\t\t}, 1000);\n\t// \t\t}\n\n\n\n\t// \t}\n\t// \tcatch (err) {\n\t// \t\tconsole.log(\"error in fetchSingleJob >>\")\n\t// \t}\n\t// }\n\n\tconst handelCallBackPanel = (e) => {\n\t\te.length === 2 ? setRefetchChat(true) : setRefetchChat(false)\n\t\tsetSocketHits(0)\n\t}\n\n\tconst handleOnDecline = (e,job)=>{\n\t\t\tModal.confirm({\n\t\t\t\ttitle: 'Are you sure you want to decline this job?',\n\t\t\t\tokText: 'Yes',\n\t\t\t\tcancelText: 'No',\n\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\tonOk(e) {\n\t\t\t\t\thandleOnDeclineSubmit(job);\n\t\t\t\t\tModal.destroyAll()\n\t\t\t\t},\n\t\t\t});\n\t}\n\tconst handleOnDeclineSubmit = (selectedJob)=>{\n\t\tif(user){\n\t\t\t // mixpanel code//\n\t\t\t fetchNotifications({\"user\":user.id})\n\t\t\t mixpanel.identify(user.email);\n\t\t\t mixpanel.track('Technician - Job declined',{'JobId':jobId});\n\t\t\t// mixpanel code//\n\t\t\t}\n\t\t// console.log(\"selectedJob\",selectedJob)\n\t\t// let jobData = JSON.parse(e.target.name)\n\t\tif(selectedJob?.post_again_reference_technician && selectedJob?.post_again_reference_job === jobId){\n\t\t\tsocket.emit(\"decline-post-again-job\",jobId)\n\t\t}\n\t\thandleDecline(selectedJob)\n\n\t}\n\n\tconst addParticipatToTwilioChat = async (jobId, technicianId) => {\n\t\ttry {\n\t\t\tconst twilioData = {\n\t\t\t\tchatId: jobId,\n\t\t\t\ttechnician: technicianId,\n\t\t\t}\n\t\t\tconst twilioResponse = await TwilioChatApi.fetchTwilioConversation(twilioData);\n\t\t\tif (twilioResponse.twilioData.success) {\n\t\t\t\tconst sid = twilioResponse?.twilioData?.conversation?.sid;\n\t\t\t\tconst chatServiceSid = twilioResponse?.twilioData?.conversation?.chatServiceSid;\n\t\t\t\tif (sid && chatServiceSid) {\n\t\t\t\t\tawait TwilioChatApi.addTwilioParticiants({ conversationSid: sid, userDetails: user, chatServiceSid: chatServiceSid, })\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\tconsole.log(\"error while adding technician to the twilio chat\", error);\n\t\t\treturn;\n\t\t}\n\t}\n\n\n\tconst handleAccept = async (e) => {\n\t\tsetAcceptClicked(true)\n\t\tlet job = JSON.parse(e.currentTarget.name)\n\t\tlet jobId = job.id\n\t\tawait JobApi.updateJob(jobId, { acceptedJobTime: new Date()});\n\t\tconst res = await JobApi.retrieveJob(jobId);\n\n\t\t\n\t\n\t\tif(res.customer && res.customer.status == 'deleted')\n\t\t{\n\t\t\topenNotificationWithIcon('error', 'Error', 'Job has been deleted by customer');\n\t\t\tsetTimeout(()=>{\n\t\t\t\twindow.location.href=`/dashboard`\n\t\t\t},2000)\n\n\t\t}\n\t\tif(Object.keys(res).length === 0){\n\t\t\topenNotificationWithIcon('error', 'Error', 'Job has been deleted by customer.');\n\t\t\tsetTimeout(()=>{\n\t\t\t\thistory.push('/')\n\t\t\t},2000)\n\n\t\t}else{\n\t\tsetMainJob(job.id)\n\t\tconst check_feedback = await JobApi.checkLastJobFeedback({'technician':user.technician.id});\n        await addParticipatToTwilioChat(jobId,user.technician.id)\n\t\tlet TwoTiervalue = await checkIfTwoTierJobAndExpertTech(user.technician,job)\n\t\t\n\n\t\tif(check_feedback.job_id != undefined){\n\t\t\t// if feedback not given\n\t\t\tconsole.log('check_feedback>>>>>>>',check_feedback)\n\t\t\tsetShowFeedbackModal(true)\n\t\t\tsetFeedbackJobId(check_feedback.job_id)\n\t\t}\t\n\t\telse if(!TwoTiervalue){\n\t\t\topenNotificationWithIcon('error', 'Error', 'This job is for expert technicians.You cannot accept this job.');\n\t\t\tsetTimeout(()=>{\n\t\t\t\thistory.push('/')\n\t\t\t},500)  \n\t\t}\n\t\telse if(res.status === 'Declined'){\n\t\t\topenNotificationWithIcon('error', 'Error', `The job has been declined by customer.`)\n\t\t\tif(job_arr.length === 1){\n\t\t\t\t\thistory.push('/')\n\t\t\t}else{\n\t\t\t\tset_job_arr(job_arr.filter(item => item.id !== job.id))\n\t\t\t}\n\t\t}\n\t\telse if(res.status === \"Scheduled\"){\n\t\t\t openNotificationWithIcon('error', 'Error', `This job has been converted to scheduled.`)\n\t\t\t  setTimeout(()=>{ \n\t\t\t\t// history.push('/') \n\t\t\t\twindow.location.href=`/dashboard?scheduleJobId=${paramsJobId.jobId}`\n\t\t\t        },1000) }\n\t\telse if(res.declinedByCustomer.includes(user.technician.id)){\n\t\t\topenNotificationWithIcon('error', 'Error', `Your proposal has been declined by customer.`)\n\t\t\tif(job_arr.length === 1){\n\t\t\t\thistory.push('/')\n\t\t\t}else{\n\t\t\t\tset_job_arr(job_arr.filter(item => item.id !== job.id))\n\t\t\t}\n\t\t}\n\t\telse if(res.technician && res.technician.id && res.technician.id === user.technician.id){\n\t\t\tif(user){\n\t\t\t\t // mixpanel code//\n\t\t\t\t mixpanel.identify(user.email);\n\t\t\t\t mixpanel.track('Technician - Same job accepted again.',{'JobId':jobId});\n\t\t\t\t// mixpanel code//\n\t\t\t}\n\n\t\t\topenNotificationWithIcon('success', 'Success', 'Job has already been accepted by you.');\n\t\t\tsetTimeout(()=>{\n\t\t\t\thistory.push('/')\n\t\t\t},500)  \n\n\t\t}else if(res.technician){\n\t\t\tif(user){\n\t\t\t\t // mixpanel code//\n\t\t\t\t mixpanel.identify(user.email);\n\t\t\t\t mixpanel.track('Technician - Job accepted but job already taken.',{'JobId':jobId});\n\t\t\t\t// mixpanel code//\n\t\t\t}\n\n\t\t\topenNotificationWithIcon('error', 'Error', 'Sorry!.The job has been taken.');\n\t\t\tsetTimeout(()=>{\n\t\t\t\thistory.push('/')\n\t\t\t},500)  \n\n\t\t}else{\n\t\t\t// accept job if nothing else is wrong\n\t\t\tif(res.status !==  'Declined' && res.status !== 'Expired' && !res.declinedByCustomer.includes(user.technician.id)){\n\t\t\t\tacceptJobFinally(jobId,user,res)\n\t\t\t\tlet lifeCycleTag = ''\n\t\t\t\tif(job.is_transferred && job.is_transferred == true){\n\t\t\t\t\tlifeCycleTag = JobTags.TECHNICIAN_ACCEPT_AFTER_TRANSFER;\n\t\t\t\t}else{\n\t\t\t\t\tlifeCycleTag = JobTags.TECH_ACCEPT_JOB;\n\t\t\t\t}\n\t\t\t\tawait JobCycleApi.create(lifeCycleTag, jobId);\n\t\t\t}\n\t\t}\n\t}\n\t};\n\n\t// const handleAcceptModal = (job) => {\n\t// \tsetAcceptJobEvent(job)\n\t// \tsetOpen(true)\n\t// }\n\t\n\t// This  code is commented by Jagroop as we want to disable the 1 min pop up under Ticket GK-349\n\t// const handleAcceptModal = debounce((job) => {\n\t//   setAcceptJobEvent(job);\n\t//   setOpen(true);\n\t// }, 300)\n\n\n\n\tconst acceptJobFinally = async(jobId,user,job)=>{\n\t\tif(user){\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Job accepted',{'JobId':jobId});\n\t\t\t// mixpanel code//\n\t\t}\n\t\t\n\t\t//GA3 tag commented by Vinit on 24/04/2023.\n\t\tGAevent('Technician Accepted', 'tech_job_accepted', job?.technician?.id, jobId)\n\t\tlet webSocket = await WebSocket.create({'hitFromTechnicianSide':true,'user':user.id,'job':job.id,'socketType':'new-appointment-request','userType':'technician'})\n\t\tlet data_to_send = {\n\t\t\tjobId,\n\t\t\tcustomerEmail:(job && job.customer) ? job.customer.user.email : '',\n\t\t\tmainJob :job,\n\t\t\ttechnicianName : (user && user?.technician) ? user.firstName +\" \"+ user.lastName : \"Technician\",\n\t\t\tcustomer: (job && job.customer) ? job.customer.id : '',\n\t\t\ttechnician: (user && user.technician) ? user.technician.id : techId,\n\t\t\tuserIds:\n\t\t\t\tlocation.state && location.state.userIds\n\t\t\t\t\t? location.state.userIds.filter(item => item !== user.id)\n\t\t\t\t\t: [],\n\t\t\tweb_socket_id : webSocket.websocket_details.id,\n\t\t\tsoftwareName:job.software.name,\n\t\t}\n\n\t\tsetWebSocketId(webSocket.websocket_details.id)\n\t\tif(user?.technician && user?.technician.id){\n\t\t\tconsole.log(\"Job accepted through New job: \" + data_to_send.technicianName);\n\t\t\tWebSocket.technician_accepted_customer(data_to_send)\n\t\t}else{\n\t\t\twindow.location.reload()\n\t\t}\n\t\t\n\t\tsocket.on(\"call-failed\",(msg)=>{\n\t\t\t\topenNotificationWithIcon('error', 'Error', `Call not Connected Due to  ${msg}`)\n\t\t\t\tsetStep(2);\n\t\t})\n\t\ttry {\n\t\t\tJobApi.sendJobAcceptEmail(jobId);\n\t\t\topenNotificationWithIcon('success', 'Success', 'We have sent email to the customer.');\n\t\t\tsetStep(2);\n\t\t} catch (err) {\n\t\t\topenNotificationWithIcon('error', 'Error', 'We have failed to send email.');\n\t\t}\n\t}\n\n\tconst getEstimateEarning = (job) => {\n\t\tif(job){\n\n\t\t\tlet softwareData = (job.subSoftware ? job.subSoftware : job.software)\n\n\t\t\tlet time1 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedTime).split(\"-\")[0]) : 0)\n\t\t\tlet time2 = (softwareData && String(softwareData.estimatedTime).indexOf('-') !== -1  ? parseInt(String(softwareData.estimatedTime).split(\"-\")[1]) : 0)\n\n\t\t\tlet price_per_six_min = softwareData.rate\n\t\t\tlet price1 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1 ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[0]) : 0)\n\t\t\tlet price2 = (softwareData && String(softwareData.estimatedPrice).indexOf('-') !== -1  ? parseInt(String(softwareData.estimatedPrice).split(\"-\")[1]) : 0)\n\t\t\t// console.log(\"price_per_six_min customer/jobcreate :: \",price_per_six_min)            \n\t\t\t// if(price_per_six_min > 0){\n\t\t\tprice1 = (price1 ? price1 : price_per_six_min )\n\t\t\tprice2 = (price2 ? price2 : price_per_six_min )\n\t\t\tconsole.log(\"price1 >>>>>>\",price1)\n\t\t\tconsole.log(\"price 2 >>>>>>\",price2)\n\t\t\tlet initPriceToShow = (time1/6)*parseInt(price1)\n\t\t\tinitPriceToShow = (initPriceToShow && initPriceToShow > 0 ? initPriceToShow.toFixed(0) : 'NA')\n\t\t\tlet finalPriceToShow = (time2/6)*parseInt(price2)\n\t\t\tfinalPriceToShow = (finalPriceToShow && finalPriceToShow > 0 ? finalPriceToShow.toFixed(0) : 'NA')\n\t\t\tconsole.log(\"initPriceToShow >>>\",parseInt(initPriceToShow))\n\t\t\tconsole.log(\"finalPriceToShow >> \",parseInt(finalPriceToShow))\n\t\t\tlet initPriceAfterComission = \"$\"+(parseInt(initPriceToShow) - ((parseInt(softwareData.comission)/100) * parseInt(initPriceToShow))).toFixed(0)\n\t\t\tlet finalPriceAfterComission = \"$\"+(parseInt(finalPriceToShow) - ((parseInt(softwareData.comission)/100) * parseInt(finalPriceToShow))).toFixed(0)\n\n\t\t\treturn `${initPriceAfterComission}-${finalPriceAfterComission}`;\n\t\t}else{\n\t\t\treturn 'NA';\n\t\t}\n\t\t\n\t}\n\n\t/*useEffect(()=>{\n\t\tif(user){\n\t\t\tconsole.log(\"job is \")\n\t\t\tconsole.log(\"user is \",user)\n\t\t}\n\t},[user])*/\n\n\n\t// @ autor : Utkarsh Dixit\n\t// purpose : check feedback for last job and set modal true\n\tconst checkFeedback = async () => {\n\t\t\t// console.log(\"In side the fucntion\")\n\t\t\tconst findJob = await JobService.findJobByParams({'technician':user.technician.id},{page:1,pageSize:1});\n\t\t\tif(findJob != undefined){\n\t\t\t\tif(findJob.jobs != undefined && findJob.jobs.data != undefined && findJob.jobs.data.length > 0){\n\t\t\t\t\tif(findJob.jobs.data[0].status === 'Completed'){\n\t\t\t\t\t\t// console.log(\"value of find job\",findJob);\n\t\t\t\t\t\tconst feedbackDataRes = await getFeedback(findJob.jobs.data[0].id);\n\t\t\t\t\t\tsetFeedbackJobId(findJob.jobs.data[0].id);\n\t\t\t\t\t\t// console.log(\"Value of feedback res\", feedbackDataRes);\n\t\t\t\t\t\tif(feedbackDataRes && feedbackDataRes.length == 0){\n\t\t\t\t\t\t\tsetShowFeedbackModal(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\t\t\n\t  };\n\n\tuseEffect(()=>{\n     checkFeedback();\n\t},[])\n\n\tif (isLoading) return <Loader height=\"100%\" />;\n\n\n\n\treturn (\n\t<>\n\t\t{/* <ConfirmationModel acceptClicked={acceptClicked} acceptJobEvent={acceptJobEvent} open={open} setOpen={setOpen} handleAccept={handleAccept} /> */}\n\t\t<Container span={15}>\n\t\t\t<StepContainer ref={clock}>\n\t\t\t\t{job_arr.length > 0 &&\n\t\t\t\t\t<>\n\t\t\t\t\t{ job_arr.map((job,index)=> \n\t\t\t\t\t\t<NewJobContainer  key={index} className={((hiddenElement.indexOf(job.id) !== -1 && hiddenElement != null  )?\" hideOnJob \":\"\")+(job.appended?\" appendedBorder \":\"\")}>\n\t\t\t\t\t\t\t<Div> \n\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\tspan={24}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\talignItems: 'left',\n\t\t\t\t\t\t\t\t\t\tmarginBottom: '30px',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Col key=\"xs\" xs={24}  lg={12}>\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<AlertTileBox>\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon className=\"alert-icon\" icon={faExclamationCircle} />\n\t\t\t\t\t\t\t\t\t\t\t\t<Title className = \"alert-title\">{user.firstName} there's a job request waiting for you! {job.hire_expert && '(2-Tier)'}</Title>\n\t\t\t\t\t\t\t\t\t\t\t</AlertTileBox>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col key=\"xs2\" xs={24}  lg={12} >\n\t\t\t\t\t\t\t\t\t\t<FileButtonContainer span={24} style={{ marginTop: '0px' }}>\n\t\t\t\t\t\t\t\t\t\t\t{/*<SystemIcon src={excelIcon} />*/}\n\t\t\t\t\t\t\t\t\t\t\t<SoftwareImage src={job.subSoftware ? job.subSoftware.blob_image : job.software.blob_image} />\n\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t{job.subSoftware ? job.subSoftware.name : job.software.name}\n\t\t\t\t\t\t\t\t\t\t</FileButtonContainer>\n\t\t\t\t\t\t\t\t\t</Col>\t\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<Row style={{ marginBottom: '20px' }}>\n\t\t\t\t\t\t\t\t\t<Title className=\"title-font\" style={{ fontSize: '20px' }} >\n\t\t\t\t\t\t\t\t\t\t{job && getFullName(job.customer?.user)}\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\tis looking for help with\n\t\t\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Title className=\"label-name\" >ISSUE</Title>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\n\t\t\t\t\t\t\t\t\t<SubTitle key=\"subtitle\" className=\"label-value\"><span title={job ? job.issueDescription : ''}>{job ? job.issueDescription : ''} </span></SubTitle>\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Title className=\"label-name mt-3\" >JOB DURATION</Title>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\n\t\t\t\t\t\t\t\t\t<SubTitle className=\"label-value\"><span title={job ? job.jobDuration : ''}>{job ? job.jobDuration: ''} </span></SubTitle>\n\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t<Row style={{ marginTop: 30 }} className=\"divider\"  >\n\t\t\t\t\t\t\t\t\t<Col key=\"estimated\" xs={24} md={12} lg={8} xl={6} style={{ marginBottom: 30 }}>\n\t\t\t\t\t\t\t\t\t\t<Row style={{ marginBottom: '10px' }}>\n\t\t\t\t\t\t\t\t\t\t\t<TextHeader  className=\"label-name\" >ESTIMATED TIME</TextHeader>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<TextHeader2>\n\t\t\t\t\t\t\t\t\t\t\t\t{ (job.subSoftware \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjob.subSoftware.estimatedTime  + \" mins\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjob.software\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjob.software.estimatedTime  + \" mins\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'NA'\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</TextHeader2>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col key=\"employed\" xs={24} md={12} lg={8} xl={6} style={{ marginBottom: 30 }}>\n\t\t\t\t\t\t\t\t\t\t{user?.technician?.tag !== 'employed' && \n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t<Row style={{ marginBottom: '10px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TextHeader  className=\"label-name estimated-earning-job-alert\" > Estimated Earning</TextHeader>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TextHeader2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{getEstimateEarning(job)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/*(job.subSoftware \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'$'+job.subSoftware.estimatedPrice\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjob.software\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'$'+job.software.estimatedPrice\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'NA'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)*/}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TextHeader2>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<Col xs={24} md={24} lg={24} xl={12} style={{ marginBottom: 30 }}>\n\n\t\t\t\t\t\t\t\t\t\t<ButtonContainer key=\"buttoncontainer\" style={{ marginTop: 0 }} className=\"new-job-btn\" > \n\t\t\t\t\t\t\t\t\t\t{ job.status !== \"Accepted\" && job.status !== \"Inprogress\" && job.status !== \"Completed\"\n\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t<>                                                                              \n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"declined\" className={(acceptClicked ? 'disabled-btn' : '') + \" app-btn app-btn-light-blue mr-3\"} name={JSON.stringify(job)}  onClick={(e)=>handleOnDecline(e,job)} disabled={acceptClicked}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>Decline\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ (showDisableAcceptbutton == false) &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button name={JSON.stringify(job)} className={(acceptClicked ? 'disabled-btn' : '') + \" app-btn job-accept-btn\"} onClick={handleAccept} disabled={acceptClicked}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{acceptClicked\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Spin/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Accept</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ (showDisableAcceptbutton)  &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"conAccept\" className={\"disabled-btn app-btn job-accept-btn\"} disabled=\"disabled\" title=\"This job is for expert technicians.You cannot accept this job.\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Accept</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t</>\n\n\t\t\t\t\t\t\t\t\t\t\t:\n\n\t\t\t\t\t\t\t\t\t\t\t\t<> \n\t\t\t\t\t\t\t\t\t\t\t\t\t{job && user && job.technician && job.technician.user && job.technician.user.id === user.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"backtodash\" className={(isDiabled ? \"disabled-btn\" : \"\")+\"app-btn app-btn-light-blue mr-3\"} onClick={()=>{window.location.href=\"/\"}}><span></span> Back to dashboard  </Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{job.status === 'Inprogress' &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"Join\" className={(isDiabled ? 'disable-btn' : \"\" ) +\"app-btn\"} onClick={()=>{window.location.href=process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`}} ><span></span>Join </Button>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{job.status === 'Accepted' &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"Start\" className={(isDiabled ? \"disabled-btn\" : \"\")+ \"app-btn\"} disabled={isDiabled} onClick={handleStartCall} ><span></span>Start Call </Button>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"backtodashboard\" className={(isDiabled ? \"disabled-btn\" : \"\")+\"app-btn app-btn-light-blue mr-3\"} onClick={()=>{window.location.href=\"/\"}}><span></span> Back to dashboard  </Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button key=\"Available\" className=\"app-btn\" ><span></span>Not Available </Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t\t\t\t\t\t{ job.status === \"Accepted\" &&\n\t\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" style={{marginRight:'-7px'}} justifyContent=\"right\" marginTop={20} className=\"float-right invite-tech-btn\">\n\t\t\t\t\t\t\t\t\t\t\t\t{chatPanelHasOpen ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<StyledBadge badgeContent={socketHits} color=\"secondary\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ display:  \"flex\", justifyContent: \"center\", fontWeight: \"bold\", color: \"#97abb6\", cursor: \"pointer\", pointerEvents: chatPanelHasOpen ? \" \" : \"none\", border:'none', textDecoration:'underline' }} className='bell-icon-class' onClick={handelShowChat}>Start chat with customer</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</StyledBadge>\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n                                        }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</NewJobContainer> \n\t\t\t\t\t\t\n\t\t\t\t\t) \n\t\t\t\t\t\n\t\t\t\t}   \n\t\t\t\t{job_arr[0].technician && job_arr[0].status === \"Accepted\" && job_arr[0].technician.user.id === user.id && showChatPanel && jobFromApi &&\n\t\t\t\t\t<>\n\t\t\t\t\t{/* <ChatPanelTwilio job={jobFromApi} width={'700px'} height={'500px'} /> */}\n\t\t\t\t\t<div className='d-flex justify-content-center new-mb-chat'>\n\t\t\t\t\t  <ChatPanelTwilio job={jobFromApi} width={'700px'} height={'500px'} />\n\t\t\t\t    </div>\n\t\t\t\t\t{/* <ChatPanelAccpetJob\n\t\t\t\t\t  showLoaderForChat={showLoaderForChat}\n\t\t\t\t\t  socketHits={socketHits}\n\t\t\t\t\t  refetchChat={refetchChat}\n\t\t\t\t\t  setRefetchChat={setRefetchChat}\n\t\t\t\t\t  techStyle={'fromTech'}\n\t\t\t\t\t  inboxRef={inboxRef}\n\t\t\t\t\t  showLoader={showLoader}\n\t\t\t\t\t  handelCallBackPanel={handelCallBackPanel}\n\t\t\t\t\t/> */}\n\t\t\t\t  </>\n\t\t\t\t}\n\t\t\t\t</>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{job_arr.length === 0 &&\n\t\t\t\t\t<NewJobContainer  key=\"lengthless\" className=\"\">\n\t\t\t\t\t\t<Div> \n\t\t\t\t\t\t\t<Row span={24} style={{alignItems: 'left',marginBottom: '30px'}}>\n\t\t\t\t\t\t\t\t<Col key=\"newjob\" xs={24} lg={16}>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<AlertTileBox>\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon className=\"alert-icon\" icon={faExclamationCircle} />\n\t\t\t\t\t\t\t\t\t\t\t<Title className = \"alert-title\">New job request!</Title>\n\t\t\t\t\t\t\t\t\t\t</AlertTileBox>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<SubTitle className=\"label-value\">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<span>Looking like job you are trying to accept is no more available.</span>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</SubTitle>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row style={{ marginTop: 30 }} className=\"divider\"  >\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<Col xs={24} md={24} lg={24} xl={12} style={{ marginBottom: 30 }}>\n\t\t\t\t\t\t\t\t\t<ButtonContainer style={{ marginTop: 0 }} className=\"new-job-btn\" > \n\t\t\t\t\t\t\t\t\t\t<Button className={(isDiabled ? \"disabled-btn\" : \"\")+\"app-btn mr-3\"} onClick={()=>{window.location.href=\"/\"}}><span></span> Back to dashboard  </Button>\n\t\t\t\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Div>\n\t\t\t\t\t</NewJobContainer> \n\t\t\t\t}\n\n\t\t\t\t{ setShowFeedbackModal && <FeedbackCompulsionModal user={user} isModalOpen={showFeedbackModal} jobId={FeedbackJobId} />}\n\t\t\t\t\n\t\t\t</StepContainer>\n\t\t\t\n\t\t</Container>\n\t</>\n\t);\n};\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\n\t& .hideOnJob {\n\t\tdisplay:none\n\t}\n\t& .appendedBorder{\n\t\tborder:2px solid green;\n\t}\n`;\n\nconst Div = styled.div`\n\twidth: 100%;\n`;\n\nconst AlertTileBox = styled.div`\n\t\twidth:100%;\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t\timg{\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 0;\n\t\t\t\ttop: -3px;\n\t\t\t\tpadding:4px 4px 4px 0px;\n\t\t}\n}\n`;\nconst Title = styled.p`\n\tmargin-bottom: 0.5em;\n\tcolor: rgba(0, 0, 0, 0.85);\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tline-height: 1.4;\n\tfont-family:Arial;\n`;\nconst SubTitle = styled.p`\n\tmargin-bottom: 0.5em;\n\tcolor: rgba(0, 0, 0, 0.85);\n\tfont-weight: 300;\n\tfont-size: 20px;\n\tline-height: 1.4;\n\n\tp{\n\t\ttext-overflow: ellipsis;\n\t\tfont-weight:bold;\n\t\tcursor:pointer;\n\t\tmargin-bottom:unset;\n\t\twidth: 100%;\n\t\tfont-size:14px;\n\t\tcolor:#92A9B8;\n\t}\n\n`;\n\nconst ButtonContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tmargin-top: 30px;\n\t@media (max-width: 1366px) {\n\t\tjustify-content: space-between;\n\t}\n\t@media screen and (max-width: 763px) {\n\t\tflex-direction:column;\n\t}\n`;\nconst FileButtonContainer = styled.button`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tmargin-top: 0px;\n\theight: 60px;\n\tline-height: 60px;\n\tpadding: 0 15px;\n\talign-items: center;\n\tfont-size: 22px;\n\tborder: 0;\n\tbackground-color:#EDF4FA;\n\tfloat: right;\n\t@media screen and (max-width: 991px) {\n\t\tflex-direction:column;\n\t\tmargin-top: 29px !important;\n\t\toverflow: hidden;\n\t\theight: auto;\n\t\tfloat: none;\n\t\twidth: 100%;\n\t\tpadding-top: 20px;\n\t}\n\t}\n`;\n/*const DeclineButton = styled.button`\n\theight: 60px;\n\tbackground: transparent;\n\tdisplay: flex;\n\tfont-weight: bold;\n\tborder-radius: 10px;\n\tpadding: 0px 40px;\n\tmargin-left: 15px;\n\tline-height: 60px;\n\tborder: 0px;\n\tfont-size: 18px;\n\tcursor: pointer;\n\tcolor: #464646;\n`;*/\nconst TextHeader2 = styled(Text)`\n\tfont-size: 18px;\n\tfont-weight: 600;\n\tcolor:#92A9B8 !important;\n`;\n\nconst NewJobContainer = styled.div`\n\tbackground: #fff;\n\tmargin-bottom: 50px;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-top: 50px;\n\talign-items: flex-start;\n\tpadding: 60px;\n\tpadding-bottom: 30px;\n\t\n@media screen and (max-width: 763px) {\n\tpadding: 20px;\n}\n\tbox-shadow: 0px 15px 50px 0px #d5d5d566;\n\tflex: 1;\n`;\n\n/*const SystemIcon = styled.img`\n\twidth: 35px;\n\tpadding: 5px;\n`;*/\n\nconst TextHeader = styled(Text)`\n\tfont-size: 20px;\n\tfont-weight: 600;\n\tcolor: #c9c9c9;\n`;\n\nconst StepContainer = styled.div`\n\twidth: 90%;\n\theight: 100%;\n\tmargin: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n`;\nconst SoftwareImage = styled.img`\n\twidth: 50px;\n\theight: auto;\n\t@media screen and (max-width: 991px) {\n\t\twidth:200px;\n\t}\n`;\n\nexport default NewJob;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\NewJob.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "PinModal.js",
                                                                    "fileData": "import React from 'react';\nimport { Modal as AntModal, Typography } from 'antd';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport { openNotificationWithIcon } from '../../../../utils';\n\nconst PinModal = ({ isOpen, onClose, pinCode }) => {\n  const pinCodeRef = React.useRef(null);\n\n  const openExtension = () => {\n    window.open(`https://remotedesktop.google.com/support/session/${pinCode}`);\n  };\n\n  const copyPinCode = () => {\n    if (pinCodeRef && pinCodeRef.current) {\n      pinCodeRef.current.select();\n      document.execCommand('copy');\n      openNotificationWithIcon('success', 'Success', 'Copied Pin code');\n    }\n    // onClose();\n  };\n\n  return (\n    <Modal visible={isOpen} onCancel={onClose} footer={false} width={600}>\n      <Container>\n        <Box>\n          <Label>PIN Code:</Label>\n          <Description ref={pinCodeRef} value={pinCode} />\n        </Box>\n        <ButtonContainer>\n          <DeclineButton onClick={openExtension}>Open Extension</DeclineButton>\n          <SendButton onClick={copyPinCode}>Pin Code Copy</SendButton>\n        </ButtonContainer>\n      </Container>\n    </Modal>\n  );\n};\n\nconst Modal = styled(AntModal)`\n  .ant-modal-content {\n    border-radius: 10px;\n  }\n`;\nconst Container = styled.div`\n  padding: 20px;\n`;\nconst Box = styled.div`\n  display: flex;\n`;\nconst Label = styled(Typography)`\n  font-size: 16px;\n  font-weight: 600;\n  marginRight: 15px;\n`;\nconst Description = styled.input`\n  font-size: 16px;\n  font-weight: 600;\n  border: 0;\n\n  &:focus {\n    outline: none;\n  }\n`;\nconst ButtonContainer = styled.div`\n  margin-top: 40px;\n  display: flex;\n  justify-content: center;\n`;\nconst SendButton = styled(StepButton)`\n  padding: 20px 40px;\n  font-size: 16px;\n  width: initial;\n  margin: 0;\n`;\n\nconst DeclineButton = styled.button`\n  height: 60px;\n  background: transparent;\n  display: flex;\n  font-weight: bold;\n  border-radius: 10px;\n  padding: 0px 40px;\n  margin-left: 15px;\n  line-height: 60px;\n  border: 0px;\n  font-size: 18px;\n  cursor: pointer;\n  color: #464646;\n`;\n\nexport default PinModal;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\PinModal.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WaitJob.js",
                                                                    "fileData": "import React, { useEffect,useState ,useRef} from 'react';\nimport styled from 'styled-components';\nimport { Row,Col, Progress } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSocket } from '../../../../context/socketContext';\nimport Loader from '../../../../components/Loader';\nimport { useUser } from '../../../../context/useContext';\n// import {useNotifications} from '../../../../context/notificationContext';\nimport * as WebSocket from '../../../../api/webSocket.api';\nimport * as JobApi from '../../../../api/job.api';\nimport moment from 'moment';\n// import { getTalkChatUser,getTalkGroupChatUser } from '../../../../api/chat.api';\n// import { useChatEngineTools } from '../../../../context/chatContext';\nimport mixpanel from 'mixpanel-browser';\nimport { openNotificationWithIcon,get_or_set_cookie } from '../../../../utils';\n// import ChatPanel from '../../../JobDetail/ChatPanel';\n// import ChatPanelAccpetJob from 'components/ChatPanelAccpetJob';\n// import { createOrGetUserChat } from '../../../../utils';\nimport  notifySound from '../../../../assets/sounds/notification.mp3'\nimport Box from '../../../../components/common/Box';\nimport Badge from '@mui/material/Badge';\nimport ChatPanelTwilio from 'components/ChatPanelTwilio';\n\n\nlet progress = 0\nfunction WaitJob({ jobId, abc, setStep,webSocketId,handleStartCall, isDisabled, setIsDisabled }) {\n  const { socket } = useSocket();\n  const history = useHistory();\n  const inboxRef = useRef();\n  const { user }   = useUser();\n  const [notify,setNotifyTimes] = useState(0)\n  const [percent,setPercent] = useState(0)\n  const [jobEnded,setJobEnded] = useState(false)\n  const [isLoading,setIsloading] = useState(true)\n  const [duration, setDuration] = useState('')\n  const [showLoader, setShowLoader] = useState(null)\n  const [showChat, setShowChat] = useState(false)\n  // const { createChatUsers,createGroupChatUsers, createTalkUserSession, joinTalkChatConversation, createOrGetTalkChatConversation,joinTalkChatConversationGroup,createOrGetTalkChatConversationGroup,handleTalkChatUser } = useChatEngineTools();\n  const now_time = moment();\n  const [refetchChat,setRefetchChat] = useState(false)\n  const [activeKey,setActiveKey] = useState(false)\n  const [buttonKeyForChat,setButtonKeyForChat] = useState(false)\n  const [socketHits, setSocketHits] = useState(0);\n  const [showLoaderForChat, setShowLoaderForChat] = useState(null)\n  const [chatPanelHasOpen,setChatPanelHasOpen] = useState(true)\n  const [showChatPanel,setShowChatPanel] = useState(false)\n  const [jobFromApi, setJobFromApi] = useState()\n\n\tlet audio = new Audio(notifySound)\n  // useEffect(()=>{\n  //   const res =  JobApi.retrieveJob(jobId);\n  //   console.log(res)\n  //   try{\n  //     res.then((result)=>{\n  //     console.log(result)\n  //     if(result.technician.id != user.technician.id)\n  //     {\n  //     console.log(user.technician,\">>>>>>>>>>>\")\n  //     openNotificationWithIcon(\"info\",'Info',\"Job has been already taken\")\n  //         // history.push(\"/\")\n  //     }\n  //     })\n  //   }\n  //   catch(err){\n  //     history.push(\"/\")\n  //   }\n    \n    \n    \n  //   },[])\n\n  // useEffect(() => {\n  //   // setTimeout(() => {\n  //     // fetchSingleJob()\n  //     // }, 2000)\n\t// }, [user,refetchChat])\n\n  const handleSendMessage = (message) => {\n\t\tsocket.emit(\"talk-js-notification-to-customer\",jobId)\n  };\n\n  const StyledBadge = styled(Badge)(({ theme }) => ({\n\t\t'& .MuiBadge-badge': {\n\t\t  right: -3,\n\t\t  top: 13,\n\t\t  backgroundColor:'red',\n\t\t  padding: '0 4px',\n\t\t},\n\t  }));\n\n  const handelShowChat = () =>{\n\t\tsetChatPanelHasOpen(false)\n    setShowChatPanel(true)\n\t\tsetSocketHits(0)\n\t\t// fetchSingleJob()\n\t}\n\n  useEffect(() => {\n    const fetchJobData = async () => {\n      let response = await JobApi.retrieveJob(jobId);\n      setJobFromApi(response)\n      // Process the response or update state here\n    };\n  \n    fetchJobData();\n  }, []);\n  \n  \n\n\n  // \tconst fetchSingleJob = async()=>{\n\t// \ttry{\n\t// \t\tlet response = await JobApi.retrieveJob(jobId)\n\t// \t\tsetDuration(moment.duration(moment(response.primarySchedule).diff(now_time)))\n\t// \t\tif(response.is_long_job || response.schedule_accepted || response.status === 'Inprogress' || response.status === 'Completed' || response.status === 'Accepted'){\n\t// \t\t\tsetShowLoaderForChat(true)\n\n\t\t\t\t\n\t// \t\t\tlet customerDataObject = {...response.customer.user} \n\t// \t\t\tlet technicianDataObject = { ...response.technician.user }\n\n\t// \t\t\tlet customerChatUser = await handleTalkChatUser(customerDataObject)\n\t// \t\t\tlet technicianChatUser = await handleTalkChatUser(technicianDataObject)\n\n\t// \t\t\tif (user.userType == 'technician') {\n\t// \t\t\t\tcreateTalkUserSession(technicianChatUser)\n\t// \t\t\t}\n\t// \t\t\telse {\n\t// \t\t\t\tcreateTalkUserSession(customerChatUser)\n\t// \t\t\t}\n\t// \t\t\tlet conversationData = await createOrGetUserChat([JSON.stringify(customerDataObject.id), JSON.stringify(technicianDataObject.id)], response.id, response.software.name, response)\n\t// \t\t\tlet conversation = await createOrGetTalkChatConversation(conversationData)\n\t// \t\t\tlet userInbox = await joinTalkChatConversation({ \"customer\": customerChatUser, \"technician\": technicianChatUser, \"conversationId\": response.chatRoomId ? response.chatRoomId : conversationData.jobId })\n\t// \t\t\tsetTimeout(() => {\n\t// \t\t\t\ttry {\n\t// \t\t\t\t  if (userInbox) {\n\t// \t\t\t\t\tsetShowLoaderForChat(false);\n\t// \t\t\t\t\tsetTimeout(() => {\n\t// \t\t\t\t\t  if (inboxRef.current != undefined) {\n\t// \t\t\t\t\t\tuserInbox.mount(inboxRef.current);\n\t// \t\t\t\t\t\tuserInbox.onSendMessage(handleSendMessage);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t  if (user.userType === 'technician') {\n\t// \t\t\t\t\t\tsetShowChat(true);\n\t// \t\t\t\t\t  }\n\t// \t\t\t\t\t}, 1000);\n\t// \t\t\t\t  }\n\t// \t\t\t\t} catch (err) {\n\t// \t\t\t\t  console.log('error in fetchSingleJob (inner setTimeout) >>', err);\n\t\t\t\t\t  \n\t// \t\t\t\t}\n\t// \t\t\t  }, 1000);\n\t// \t\t}\n\n\n\n\t// \t}\n\t// \tcatch (err) {\n\t// \t\tconsole.log(\"error in fetchSingleJob >>\")\n\t// \t}\n\t// }\n\n\n  const counter = ()=>{\n    if(progress === 100){\n      progress = 0\n    }\n    progress = progress +1\n    setPercent(progress)\n  }\n\n  useEffect(()=>{\n    socket.emit(\"join\",jobId)\n    setTimeout(()=>{\n      setIsloading(false)\n    },8000)\n     let timer = setInterval(counter,1000)\n     setTimeout(()=>{\n      setJobEnded(true)\n      clearInterval(counter)\n    },1800000)\n   // 1800000\n  },[])\n\n const callApi = async(data_to_send)=>{\n    try{\n          let webRes =  await WebSocket.technician_polling(data_to_send)\n          if (webRes.meetingStarted && webRes.technician_id === user.technician.id && webRes.job_id === jobId){\n            clearInterval(counter)\n            get_or_set_cookie(user)\n            window.location.href =  process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`\n          }\n        }\n        catch(Err){\n          console.log(\"api error \")\n        }\n    \n }\n\n const handelCallBackPanel = (e) => {\n  e.length === 2 ? setRefetchChat(true) : setRefetchChat(false)\n  setSocketHits(0)\n}\n\n  useEffect(()=>{\n    console.log('percent :::',percent)\n    if(percent > 20 && percent%25 === 0 && !jobEnded){\n      let data_to_send = {\n        \"job_id\" :jobId,\n        \"socket_id\":webSocketId\n      }\n      callApi(data_to_send)\n    }\n\n    if(percent === 100 && !jobEnded){      \n      setTimeout(()=>{\n        progress = 0\n        setPercent(0)\n        setNotifyTimes(notify + 1)\n        openNotificationWithIcon(\"info\",\"Sending Alert\",`Notifying client to start the meeting for ${notify +1} time`)\n      },1000)\n      \n    }\n\n  },[percent])\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n      socket.on('accept-job', (job) => {\n\n        console.log(\"accept-job socket received on technician side to change the page to meeting\")\n        if(job.technician && user ){\n          try {\n                 WebSocket.updateSocket(job['web_socket_id'],{'hitFromTechnicianSide':true})\n                \n              }\n          catch(err) {\n              console.log('accept-job error in Waitjob page>>>',err)\n          }\n\n\n          const res =  JobApi.retrieveJob(jobId);\n          res.then((data)=>{\n            if(data.technician.user.id === user.id){\n                clearInterval(counter)\n                get_or_set_cookie(user)\n                window.location.href =  process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${jobId}`\n            }\n          })\n        }\n       \n      });\n      \n      if(user){\n        mixpanel.track('Technician - On Waiting For Client Confirmation Page ', { 'Email': user.email });\n      }\n  }, [jobId, setStep, socket, history, user]);\n\n  const handleSocketEvent = () => {\n\t\t// Increase the socket hits count\n\t\tsetSocketHits((prevHits) => prevHits + 1);\n\t\n\t\t// Perform other actions\n    audio.play()\n    setButtonKeyForChat(true);\n\t  };\n\n  useEffect(()=>{\n\t\tsocket.on(\"open-chat-panel-talkjs\",(data)=>{\n      if(data === jobId){\n        handleSocketEvent()\n      }\n\t\t  })\n\t},[])\n\n  return (\n  <>\n    <Container span={15}>\n    <Loader height=\"100%\" className={(isLoading ? \"loader-outer\" : \"d-none\")}  />\n      <StepContainer>\n        <NewJobContainer>\n          <Div>\n            <Row span={24} style={{ marginBottom: '30px' }}>\n              <AlertTileBox>\n                <Title>Waiting for client confirmation</Title>\n              </AlertTileBox>\n            </Row>\n            <Row span={24}>\n              <ProgressStyled percent={percent} showInfo={false} />\n            </Row>\n          </Div>\n          <Col xs={24} md={24} lg={24} xl={12} style={{ marginTop: 10 ,float:\"right\"}}>\n              <ButtonContainer style={{ marginTop: 0 }} className=\"new-job-btn\" >\n                  <button onClick={handleStartCall} type=\"button\" disabled={isDisabled} className={(isDisabled ? \"disabled-btn\" : \"\") +\"btn app-btn  btn btn-primary\"}>Start Call</button>\n              </ButtonContainer>\n            </Col>\n            <Box display=\"flex\" style={{marginLeft:'-7px'}} justifyContent=\"right\" marginTop={20} className=\"float-right invite-tech-btn\">\n                        {chatPanelHasOpen ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<StyledBadge badgeContent={socketHits} color=\"secondary\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ display:  \"flex\", justifyContent: \"center\", fontWeight: \"bold\", color: \"#97abb6\", cursor: \"pointer\", pointerEvents: chatPanelHasOpen ? \" \" : \"none\", border:'none', textDecoration:'underline' }} className='bell-icon-class' onClick={handelShowChat}>Start chat with customer</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</StyledBadge>\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\t                       \t\n\t\t\t\t\t  </Box>\n        </NewJobContainer>\n        \n      </StepContainer>\n      \n    </Container>\n    {showChatPanel && jobFromApi &&\n    <div className='d-flex justify-content-center mb-5'>\n      <ChatPanelTwilio job={jobFromApi} width={'700px'} height={'500px'} />\n    </div>\n      // <ChatPanelAccpetJob\n      //   showLoaderForChat={showLoaderForChat}\n      //   socketHits={socketHits}\n      //   activeKey={activeKey}\n      //   setActiveKey={setActiveKey}\n      //   refetchChat ={refetchChat} \n      //   setRefetchChat={setRefetchChat}\n      //   buttonKeyForChat={buttonKeyForChat}\n      //   techStyle={'fromTech'} \n      //   inboxRef={inboxRef} \n      //   handelCallBackPanel={handelCallBackPanel}\n      //   showLoader={showLoader}/>\n      }\n  </>\n  );\n}\n\nconst Div = styled.div`\n  width: 100%;\n`;\nconst AlertTileBox = styled.div`\n    width:100%;\n    display: flex;\n    position: relative;\n    img{\n        position: absolute;\n        left: 0;\n        top: -3px;\n        padding:4px 4px 4px 0px;\n    }\n}\n`;\nconst Title = styled.p`\n  margin-bottom: 0.5em;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.4;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst NewJobContainer = styled.div`\n  background: #fff;\n  margin: 80px 0;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 90px 70px;\n  box-shadow: 0px 15px 50px 0px #d5d5d566;\n  flex: 1;\n  @media screen and (max-width: 763px) {\n  padding: 40px 20px;\n  }\n`;\n\nconst StepContainer = styled.div`\n  width: 60%;\n  height: 100%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  @media screen and (max-width: 991px) {\n    width: 80%;\n  }\n  @media screen and (max-width: 763px) {\n    width: 100%;\n  }\n`;\n\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #60E1E2;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 30px;\n  @media (max-width: 1366px) {\n    justify-content: space-between;\n  }\n  @media screen and (max-width: 763px) {\n    flex-direction:column;\n  }\n`;\n\nexport default WaitJob;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobAlert\\steps\\WaitJob.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "JobProgress",
                                                    "children": [
                                                        {
                                                            "type": "folder",
                                                            "name": "components",
                                                            "children": [
                                                                {
                                                                    "type": "folder",
                                                                    "name": "Footer",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Footer.js",
                                                                            "fileData": "import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { Row, Col } from 'antd';\nimport { getFullName } from '../../../../../utils';\nimport {useJob} from '../../../../../context/jobContext';\n\nconst TechInfoSection = () => {\n  const { job } = useJob();\n\n  return (\n    <InfoSectionStyled>\n      <Col xs={24} sm={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Customer</InfoSectionTitleStyled> <br />\n          <InfoSectionContent>\n            {(job && job.customer) && getFullName(job.customer.user)}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={12}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Issue</InfoSectionTitleStyled> <br />\n          <InfoSectionContent style={{ fontWeight: 'normal' }}>\n            {job && job.issueDescription}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Estimated Time</InfoSectionTitleStyled> <br />\n          <InfoSectionContent>\n            {job && job.duration\n              ? `${job.duration.from}-${job.duration.to}`\n              : 0}{' '}\n            mins\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Estimated Earnings</InfoSectionTitleStyled>\n          <br />\n          <InfoSectionContent>\n            $\n            {job && job.price\n              ? `${job.price.from.toFixed(0)}-${job.price.to.toFixed(0)}`\n              : 0}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n    </InfoSectionStyled>\n  );\n};\n\nconst InfoSectionStyled = styled(Row)`\n  background-color: #464646;\n  color: white;\n  padding: 20px;\n`;\n\nconst InfoSectionTitleStyled = styled.h4`\n  text-transform: uppercase;\n  color: lightgray;\n  font-weight: 500;\n`;\n\nconst InfoSectionItemStyled = styled.div`\n  margin: 0px 20px 15px;\n  min-width: fit-content;\n`;\n\nconst InfoSectionContent = styled.span`\n  font-weight: 600;\n`;\n\nTechInfoSection.propTypes = {};\nexport default memo(TechInfoSection);\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\components\\Footer\\Footer.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Footer2.js",
                                                                            "fileData": "import { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { Progress, Row, Col } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { memo, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../../components/StepButton';\nimport { getFullName, getFormattedTime } from '../../../../../utils';\nimport { useJob } from '../../../../../context/jobContext';\nimport { useSocket } from '../../../../../context/socketContext';\n\nlet time = 0;\nlet intervalId;\n\nconst CustomerInfoSection = ({ setCurrentStep }) => {\n  const { job, jobTime, setJobTime } = useJob();\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  const handleCompleteJob = () => {\n    socket.emit('job-completed', { id: jobId });\n    setCurrentStep(10);\n  };\n\n  useEffect(() => {\n    time = jobTime;\n\n    intervalId = setInterval(() => {\n      time += 1;\n      setJobTime(time);\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [jobTime, setJobTime]);\n\n  return (\n    <InfoSectionStyled>\n      <Col xs={24} sm={12} md={12} lg={4}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Customer</InfoSectionTitleStyled>\n          {' '}\n          <br />\n          <InfoSectionContent>\n            {(job && job.customer) && getFullName(job.customer.user)}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={12} md={12} lg={8}>\n        <InfoSectionItemStyled>\n          <InfoSectionTitleStyled>Issue</InfoSectionTitleStyled>\n          {' '}\n          <br />\n          <InfoSectionContent style={{ fontWeight: 'normal' }}>\n            {job && job.issueDescription}\n          </InfoSectionContent>\n        </InfoSectionItemStyled>\n      </Col>\n      <Col xs={24} sm={24} md={24} lg={12}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <TimerStatusStyled>Timer</TimerStatusStyled>\n          <CircularProgress\n            type=\"circle\"\n            width=\"80px\"\n            percent={80}\n            format={() => getFormattedTime(jobTime)}\n            strokeColor=\"#fff\"\n            strokeLinecap=\"#908d8d\"\n          />\n          <StepButtonSecondary>\n            <CloseOutlined />\n            Cancel Session\n          </StepButtonSecondary>\n          <StepButtonStyled onClick={handleCompleteJob}>\n            <CheckOutlined />\n            Complete Job\n          </StepButtonStyled>\n        </div>\n      </Col>\n    </InfoSectionStyled>\n  );\n};\n\nconst InfoSectionStyled = styled(Row)`\n  background-color: ${props => props.theme.secondary};\n  color: white;\n  padding: 20px;\n`;\n\nconst InfoSectionTitleStyled = styled.h4`\n  /* text-transform: uppercase; */\n  color: lightgray;\n  font-weight: 500;\n`;\n\nconst StepButtonSecondary = styled(StepButton)`\n  background-color: ${props => props.theme.secondary};\n  border: none;\n`;\n\nconst InfoSectionItemStyled = styled.div`\n  margin: 0px 20px 15px;\n  min-width: fit-content;\n`;\n\nconst TimerStatusStyled = styled.h3`\n  color: white;\n  min-width: fit-content;\n  margin: 20px;\n  font-weight: 600;\n`;\n\nconst CircularProgress = styled(Progress)`\n  .ant-progress-inner:not(.ant-progress-circle-gradient)\n    .ant-progress-circle-path {\n    stroke: white;\n  }\n\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\n\nconst InfoSectionContent = styled.span`\n  font-weight: 600;\n`;\n\nconst StepButtonStyled = styled(StepButton)`\n  &:hover {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n  &:active {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n  &:focus {\n    background: ${props => props.theme.primary};\n    color: '#fff';\n    border-color: ${props => props.theme.primary};\n  }\n`;\n\nCustomerInfoSection.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(CustomerInfoSection);\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\components\\Footer\\Footer2.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "index.js",
                                                                            "fileData": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport Footer2 from './Footer2';\nimport Footer from './Footer';\n\nconst SelectFooter = ({ currentStep, setCurrentStep }) => {\n  const getFooter = () => {\n    if (currentStep === 11) {\n      return <Footer2 setCurrentStep={setCurrentStep} />;\n    }\n    return <Footer />;\n  };\n  return <div>{getFooter()}</div>;\n};\n\nSelectFooter.propTypes = {\n  currentStep: PropTypes.number,\n  setCurrentStep: PropTypes.func,\n};\n\nexport default SelectFooter;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\components\\Footer\\index.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Sidebar.js",
                                                                    "fileData": "import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ConfirmCustomersIssue from '../steps/ConfirmCustomersIssue';\nimport ConfirmJobSummary from '../steps/ConfirmJobSummary';\nimport ConfirmMatch from '../steps/ConfirmMatch';\nimport ConfirmWithCustomer from '../steps/ConfirmWithCustomer';\nimport SelectRightCategory from '../steps/SelectRightCategory';\nimport SignOffWithCustomer from '../steps/SignOffWithCustomer';\nimport SummarizeSolution from '../steps/SummarizeSolution';\nimport TechJobInProgress from '../steps/TechJobInProgress';\nimport TimeAccurate from '../steps/TimeAccurate';\nimport UpdateTimeEstimate from '../steps/UpdateTimeEstimate';\nimport WaitForIssueSummaryConfirmation from '../steps/WaitForIssueSummaryConfirmation';\nimport WaitForSolutionConfirmation from '../steps/WaitForSolutionConfirmation';\nimport WaitForTimeEstimateApprove from '../steps/WaitForTimeEstimateApprove';\nimport WrongCategory from '../steps/WrongCategory';\n\nconst TechSidebar = ({ currentStep, setCurrentStep }) => {\n  const [updatedEstimateTime, setUpdatedEstimateTime] = useState();\n  const [solutions, setSolutions] = useState([]);\n\n  const getStep = () => {\n    if (currentStep === 0) {\n      // When Tech receives the email\n      return <ConfirmMatch setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 1) {\n      // When tech confirms the match, it should be redirected to Time Accurate screen\n      return <TimeAccurate setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 2) {\n      // When tech confirms time is accurate, He should be redirected to confirm Job Summary screen\n      return <ConfirmJobSummary setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 3) {\n      //  When tech match is not confirmed, he will be redirected to wrong category page\n      return <WrongCategory setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 4) {\n      // If tech selects wrong category option from Wrong category screen, He should be redirect to select right category.\n      return <SelectRightCategory setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 5) {\n      // If tech selects time is not accurate, he should be redirected to udpate time estimate screen\n      return (\n        <UpdateTimeEstimate\n          setCurrentStep={setCurrentStep}\n          estimateTime={updatedEstimateTime}\n          onUpdate={setUpdatedEstimateTime}\n        />\n      );\n    }\n    if (currentStep === 6) {\n      // When tech submits his updated time estimate, He should be redirected to confirm with customer screen\n      return (\n        <ConfirmWithCustomer\n          setCurrentStep={setCurrentStep}\n          estimateTime={updatedEstimateTime}\n        />\n      );\n    }\n    if (currentStep === 7) {\n      return <ConfirmCustomersIssue setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 8) {\n      return <ConfirmCustomersIssue setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 9) {\n      return (\n        <WaitForIssueSummaryConfirmation setCurrentStep={setCurrentStep} />\n      );\n    }\n    if (currentStep === 10) {\n      return (\n        <SummarizeSolution\n          setCurrentStep={setCurrentStep}\n          solutions={solutions}\n          setSolutions={setSolutions}\n        />\n      );\n    }\n    if (currentStep === 11) {\n      return <TechJobInProgress setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 12) {\n      return <WaitForSolutionConfirmation setCurrentStep={setCurrentStep} />;\n    }\n    if (currentStep === 13) {\n      return (\n        <SignOffWithCustomer\n          setCurrentStep={setCurrentStep}\n          solutions={solutions}\n        />\n      );\n    }\n    if (currentStep === 14) {\n      return <WaitForTimeEstimateApprove setCurrentStep={setCurrentStep} />;\n    }\n    return <div></div>;\n  };\n\n  return <div>{getStep()}</div>;\n};\n\nTechSidebar.propTypes = {\n  currentStep: PropTypes.number,\n  setCurrentStep: PropTypes.func,\n};\nexport default memo(TechSidebar);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\components\\Sidebar.js"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { memo, useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Spin, Progress ,Table, Pagination,Checkbox} from 'antd';\nimport { Container, Row, Col, Button, Alert } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport * as DOM from 'react-router-dom';\nimport Timer from 'react-compound-timer';\nimport { getIdFromJobId } from 'utils';\nimport { useJob } from '../../../context/jobContext';\nimport { useUser } from '../../../context/useContext';\nimport { useJitsiMeet } from '../../../context/jitsiMeetContext';\nimport Box from '../../../components/common/Box';\nimport { useSocket } from '../../../context/socketContext';\n// import ExtensionModal from '../JobAlert/steps/ExtensionModal';\n// import PinModal from '../JobAlert/steps/PinModal';\nimport {useTools} from '../../../context/toolContext';\nimport { openNotificationWithIcon,clearAllTimeOuts } from 'utils';\nimport ConfirmTechMatch from '../../Customer/JobProgress/steps/ConfirmTechMatch';\nimport { CopyOutlined } from '@ant-design/icons';\nimport * as TechnicianApi from '../../../api/technician.api';\nimport { useHistory } from 'react-router';\nimport Loader from '../../../components/Loader';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faBan, faPencilAlt, faTrash,faClock, faPhone, faPhoneAlt,faVolumeUp} from '@fortawesome/free-solid-svg-icons';\nimport {useServices} from '../../../context/ServiceContext';\nimport  notifySound from '../../../assets/sounds/notification.mp3';\nimport logo from '../../../assets/images/logo.png';\nimport style from 'styled-components';\nimport mixpanel from 'mixpanel-browser';\nimport { JITSI_URL,JOB_CHARACTERS_ALLOWED} from '../../../constants';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport * as SoftwareApi from '../../../api/software.api';\nimport * as JobService from \"../../../api/job.api\";\nimport {useNotifications} from '../../../context/notificationContext';\nimport * as WebSocket from '../../../api/webSocket.api';\n\nlet calledTechnician = false\nlet jitsiIsLoaded = false\nlet api = null;\nlet count  = 0;\nlet audio = new Audio(notifySound)\nconst time = { seconds: 0, minutes: 0, hours: 0 };\nlet new_on_page = false\nlet cardFunctionCalled = false;\nconst TechJobProgress = () => {\n\tconst moment = require('moment');\n\tconst [ratePerTime,setratePerTime] = useState();\n\tconst [MainInvitation,setInvitation] = useState(false);\n\tconst [invitedNumber,setInvitedNumber] = useState('');\n\tconst history = useHistory();\n\tconst {createNotification,fetchNotifications} = useNotifications()\n\tconst currentStep = 0;\n\t// const [extension,setExtension] = useState('')\n\tconst { jobId } = useParams();\n\tconst [DeclinedReason,setDeclinedReasons] = useState('')\n\tconst [meetingJob, setMeetingJob] = useState({});\n\tconst [softwareSettings, setSoftwareSettings] = useState({});\n\tconst [jitsiMeetId,setJitsiMeet] = useState(false);\n\tconst {sethideBadge} = useTools()\n\tlet locale = {\n\t\temptyText: 'No past job found.',\n\t};\n\tconsole.log('jobId from starting>>>>>',jobId)\n\n\tconst [showDeclineModal,setShowDeclineModal] = useState(false);\n\n\tconst { setJobTime, fetchJob ,method,setMethod,job,updateJob, getTotalPaidJobs} = useJob();\n\n\tconst { user } = useUser();\n\tconst { getJitsiMeet, createMeeting, meetingId } = useJitsiMeet();\n\tconst { socket } = useSocket();\n\t// const [isExtensionModalOpen, setIsExtensionModalOpen] = useState(false);\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [pinCode, setPinCode] = useState('');\n\tconst toggleInviteUserToScreenhare = false;\n\tconst [computerAudioEnabled,setComputerAudioEnabled] = useState(true);\n\tconst jitsiContainerId = '6063bd22202fb514ce26346b';\n\tconst dialInRef = useRef(null);\n\tconst remoteDesktopRef = useRef(null);\n\tconst [showLoader,setShowLoader] = useState(true);\n\tconst [intialTimeVal,setIntialTimeVal] = useState(0);\n\tconst hideButton = useRef()\n\tconst [isScreenShared,setIsScreenShared] = useState(false);\n\tconst tiRef = useRef();\n\tconst textAreaRef = useRef();\n\tconst { CreateEarningReport } = useServices();\n\tconst [notesSaveLoader, setNotesSaveLoader] = useState(false);\n\tconst [alertMessageShow, setAlertMesasgeShow] = useState(false);\n\tconst [waitingForCustomer,setWaitingForCustomer] = useState(false);\n\tconst [notesAvailable,setNotesAvailable] = useState(false);\n\tconst [declinedMessageShow,setDeclinedMessageShow] = useState(false);\n\tconst [softwareList, setSoftwareList] = useState([]);\n\tconst [showSidebarLoader, setShowSidebarLoader] = useState(false);\n\tconst [dataLoaded, setDataLoaded] = useState(false);\n\tconst [showUpdateBlock, setShowUpdateBlock] = useState(false);\n\tconst [jobUpdatedData, setJobUpdatedData] = useState({\"software\":'',\"subSoftware\":\"\",\"subOption\":\"\",\"updatedIssueDescription\":[],\"estimatedTime\":\"\"});\n\tconst [jobUpdatedIssueDescription, setJobUpdatedIssueDescription] = useState(\"\");\n\tconst [subOptionsList, setSubOptionsList] = useState([]);\n\tconst [updateJobDetailsLoader, setUpdateJobDetailsLoader] = useState(false);\n\tconst [updateDetailsMessageShow,setUpdateDetailsMessageShow] = useState(false);\n\tconst [subSoftwareList, setSubSoftwareList] = useState([]);\n\tconst [selectedSubSoftware, setSelectedSubSoftware] = useState('');\n\tconst [jobDetailsErrorMsgShow, setjobDetailsErrorMsgShow] = useState(false);\n\tconst [jobDetailsErrorMsg, setjobDetailsErrorMsg] = useState('Please select the required fields');\n\tconst [visible, setVisible] = useState(false);\n\tconst [allJobs,setAllJobs] = useState([]);\n\tconst [issuesList, setIssuesList] = useState([]);\n\tconst [freeSession,setFreeSession] = useState(0)\n\tconst [editIssueIdx, setEditIssueIdx] = useState('');\n\tconst [confirmedIssuesList, setConfirmedIssuesList] = useState([]);\n\tconst [disabledCallYourself, setDisabledCallYourself] = useState(false);\n\tconst [disabledCallCustomer, setDisabledCallCustomer] = useState(false);\n\tconst [isJitsiLoaded,setIsJitsiLoaded] = useState(false)\n\tconst [showStartTimerbtn, setShowStartTimerbtn] = useState(false);\n\tconst [showPauseTimerbtn, setShowPauseTimerbtn] = useState(true);\n\tconst [enableStartPauseTimerButton, setEnableStartPauseTimerButton] = useState(false);\n\tconst [meetingPauseStartTime, setMeetingPauseStartTime] = useState('');\n\tconst [estTimeFrom, setEstTimeFrom] = useState(1);\n\tconst [estTimeTo, setEstTimeTo] = useState(1);\n\tconst [showTransfterCallLoader, setShowTransfterCallLoader] = useState(false);\n\tconst [transferCallErrors, setTransferCallErrors] = useState({});\n\tconst [estTimeFromErrorMsg, setEstTimeFromErrorMsg] = useState('');\n\tconst [estTimeToErrorMsg, setEstTimeToErrorMsg] = useState('');\t\n\tconst [jitsiSessionEnd, setJitsiSessionEnd] = useState(false);\n\tconst [disabledEndCall, setDisabledEndCall] = useState(false);\n\tconst [totalJobs,setTotalJobs] = useState(1);\n\tconst [currentPage,setCurrentPage] = useState(1);\n\tconst [disabledStartTimerButton, setdisabledStartTimerButton] = useState(false);\n\tconst [disabledPauseTimerButton, setdisabledPauseTimerButton] = useState(false);\n\tconst [hireExpert,setHireExpert]= useState(false);\n\n\tconst pollingBoth = ()=>{\n\t\tif(!new_on_page){\n\t\t\tnew_on_page = true\n\t\t\twindow.pollingInterval = setInterval(async()=>{\n\t\t\t\tlet totalHoursInSeconds = (parseInt(time.hours) > 0 ? parseInt(time.hours)*60*60 : 0)\n\t\t\t\tlet totalMinsInSeconds = (parseInt(time.minutes) > 0 ? parseInt(time.minutes)*60 : 0)\n\t\t\t\tlet totalSeconds = parseInt(time.seconds)\n\t\t\t\tlet jobTimerinSeconds = totalHoursInSeconds+totalMinsInSeconds+totalSeconds;\n\t\t\t\tlet updateTimer = JobService.updateTimer({\"sample\":jobTimerinSeconds,\"jobId\":jobId})\n\t\t\t\tconsole.log(\"updating the timer second by second\")\n\n\t\t\t},3000)\n\t\t}\n\t}\n\twindow.intialJitsi = setTimeout(()=>{\n\t\tif(!isJitsiLoaded){\n\t\t\tinitialiseJitsi(computerAudioEnabled)\n\t\t}\n\t},5000)\n\twindow.recordingTimeOut = setTimeout(()=>{\n\t\tif(api != null){\n\t\t\tapi.executeCommand(\"startRecording\",{\n\t\t\t\tmode:\"file\"\n\t\t\t})\n\t\t}\n\t},10000)\n\tconst push_to_job_detail = (e) => {\n\t\tconst currentJobId = e.currentTarget.name;\n\t\twindow.open(`/job-details?jobID=${currentJobId}&type=noapply&from=customerhistory`, '_blank').focus();\n\t};\n\tconst handleParticipantMic = ()=>{\n\t\t\tif (api != null){\n\t\t\t\tapi.executeCommand('toggleAudio');\n\t\t\t}\t\n\t}\n\t\n\n\tconst call_fetch_jobs = async (filter,pagination={ page: 1,pageSize:10 }) => {\n\t\t\n\t\tconst res = await JobService.findJobByParams(filter,pagination);\n\t\tif(res !==undefined){\n\t\t\tlet all_data = [...res.jobs.data]\n\t\t\tfor(let i=0;i<= all_data.length -1  ;i++){\n\t\t\t\tif(all_data[i]['tech_declined_ids']  && all_data[i]['tech_declined_ids'].includes(user.technician.id)){\n\t\t\t\t\tall_data[i]['status'] = 'Declined by customer'\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetAllJobs(all_data)\n\t\t\tsetTotalJobs(res.totalPages)\n\t\t\treturn res.jobs\n\n\t\t}\n\t\telse{\n\t\t\treturn []\n\t\t}\n\t}\n\n\tconst handlePagination = async(page,pageSize) =>{\n\t\tsetCurrentPage(page)\n\n\t\tlet pagination={ page: page,pageSize:pageSize }\n\t\tlet query  = {\"customer\":job.customer.id,\"status\":\"Completed\"}\n\t\tcall_fetch_jobs(query,pagination)\n\n\t }\n\n\n\tuseEffect(()=>{\n\t\tif(api != null && MainInvitation){\n\t\t\t// api.invite([{allowed: true,number: `${invitedNumber + '-'+ extension+extension.length}`,originalEntry:`${invitedNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t\t// console.log(\"extension\",extension)\n\t\t\t// let extLength = (extension && extension !== '' ? extension.length : \"0\")\n\t\t\t// console.log(\"extLength\",extLength)\n\t\t\tapi.invite([{allowed: true,number: `${invitedNumber }`,originalEntry:`${invitedNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t\tsetInvitation(false)\n\t\t}\n\t},[invitedNumber])\n\n\tuseEffect(() => {\n\t\ttry{\n\t\t\tlet iframe  =  document.querySelector('[title=\"Button to launch messaging window\"]');\n\t\t\tlet buttonIframe = document.querySelector('[title = \"Message from company\"]')\n\t\t\tif(buttonIframe){\n\t\t\t\tbuttonIframe.style.display = \"none\"\n\t\t\t}\n\t\t\tif(iframe){\n\t\t\t  iframe.style.visibility = \"hidden\"\n\t\t\t}\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in hiding the chatbot iframe\")\n\t\t}\n\t\t\n\t\tsocket.emit('join', jobId);\n\t}, []);\n\n\n\n\tuseEffect(() => {\n\t\tsetComputerAudioEnabled(false)\n\t\tif(job && job.callStartType != undefined){\n\t\t\twindow.jitsiTimeout = setTimeout(()=>{\n\t\t\t\tif(jitsiMeetId !== false  && jitsiMeetId === getIdFromJobId(jobId) && jitsiIsLoaded === false ){\n\t\t\t\t\tinitialiseJitsi(computerAudioEnabled)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t},4000)\n\t\t}\n\n\t}, [job]);\n\n\tuseEffect(()=>{\n\t\t(async () => {\n\t\t\tconsole.log(\"job in async useeffect**********\",job)\n\t\t\tif(job && job.customer && !cardFunctionCalled){                \n\t\t\t\tcardFunctionCalled = true;\n\t\t\t}\n\t\t})();\n\t},[job]);\n\n\tuseEffect(()=>{\n\t\tsocket.on(\"hangup-all\",(data)=>{\n\t\t\tconsole.log(\"Received signal to technician hangup-all\")\n\t\t\tHandleHangup(data)\n\t\t})\n\t\tsocket.on(\"setLoaderFalse\",()=>{\n\t\t\tsetShowLoader(false)\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Jitsi session started',{'JobId':jobId});\n\t\t\t// mixpanel code//\n\n\t\t})\n\n\t\tsocket.on(\"send-tech-to-zoho-session\",(data)=>{\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Received Zoho Session',{'JobId':jobId});\n\n\t\t\tconsole.log(\"Received signal to zoho meeting\")\n\t\t\twindow.open(data['representation']['technician_url'], '_blank');\n\t\t});\n\t\t// NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n\t\t// socket.on(\"notification-to-technician-for-timeout\",()=>{\n\t\t// \taudio.play()\n\t\t// \tconsole.log(\"Received notification for setting the message\")\n\t\t// \topenNotificationWithIcon(\"info\",\"Info\",\"Pleae ask client to continue or decline the meeting.\")\n\t\t// })\n\t\tsocket.on(\"mute-signal\",(data)=>{\n\t\t\tif(data.job.technician.user.id === user.id){\n\t\t\t\tif(api != null){\n\t\t\t\t\tapi.isAudioMuted().then(muted => {\n\t\t\t\t\t\tif(muted === false){\n\t\t\t\t\t\t\tmuted = true\n\t\t\t\t\t\t\tapi.executeCommand(\"toggleAudio\")\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsocket.on('send-notes-confirmation-to-technician', data => {\n\t\t\tif (data && data.jobId && jobId && data.jobId === jobId) {\n\t\t\t\tfetchJob(jobId);      \t\t\t\n\t\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\t// setTimerStarted(true);\n\t\t\t\t\ttiRef.current.start();\n\t\t\t\t\tsetEnableStartPauseTimerButton(true);\n\t\t\t\t\t// console.log(\"tiref startred\",tiRef)\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log('tiref is undefined on technician side so lets reload page')\n\t\t\t\t\twindow.location.reload()\n\t\t\t\t}\n\t\t\t\tsetWaitingForCustomer(false);\n\t\t\t\tsetNotesAvailable(true);\n\t\t\t}\n\t\t});\n\n\n\t\t socket.on(\"free-customer-calculation\",(data)=>{\n\t\t\tsetFreeSession(data.freeSession)\n\t\t})\n\n\t\tsocket.on(\"stop-timer-for-card\",()=>{\n\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\ttiRef.current.stop();\n\t\t\t}\n\t\t\tsetShowStartTimerbtn(true)\n\t\t\tsetShowPauseTimerbtn(false)\n\t\t\t// setdisabledStartTimerButton(true)\n\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"Timer is Paused Because Customer is updating CC Details\")\n\t\t\t// socket.emit(\"stop-timer\",{ id: jobId, timer:time} )\n\t\t})\n\t\tsocket.on(\"start-timer-for-card\",()=>{\n\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\ttiRef.current.start();\n\t\t\t}\n\t\t\tsetShowStartTimerbtn(false)\n\t\t\tsetShowPauseTimerbtn(true)\n\t\t})\n\n\t\tsocket.on('send-notes-declined-confirmation-to-technician', data => {\n\t\t\tif (data && data.jobId && jobId && data.jobId === jobId) {\n\t\t\t\tfetchJob(jobId);\n\t\t\t\tsetWaitingForCustomer(false)\n\t\t\t\tsetNotesAvailable(false)\n\t\t\t\tsetDeclinedMessageShow(true)\n\t\t\t}\n\t\t});\n\n\t},[socket])\n\n\tuseEffect(() => {\n\t\t\n\t\tfetchJob(jobId);\n\t\tsocket.on('accept-screenshare', () => {\n\t\t});\n\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t// socket.on('dial-number', () => {\n\t\t// \tsetIsExtensionModalOpen(true);\n\t\t// });\n\t\tsocket.on('start-share', (code) => {\n\t\t\tsetPinCode(code);\n\t\t\tsetIsOpen(true);\n\t\t});\n\t\tsocket.on('stop-screenshare', () => {\n\t\t\ttry{\n\t\t\t\tif (api) {\n\t\t\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\t\tif(participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tapi.executeCommand('hangup');\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\tconsole.log(\"Error in Technician hangup ::: \")\n\t\t\t}\n\t\t});\n\n\t}, [jobId]);\n\n\tuseEffect(() => {\n\n\t\tconsole.log(\"jobId :::: inside user \",jobId)\n\t\tif (user && jobId && jitsiMeetId ) {\n\t\t\tconsole.log(\"inside meeting create Function :::: \",jitsiMeetId)\n\t\t\t// createMeeting({\n\t\t\t// \temail: user.email,\n\t\t\t// \tname: `${user.firstName} ${user.lastName}`,\n\t\t\t// \tavatar:\n\t\t\t// \t\t'https://www.gravatar.com/avatar/73543542128f5a067ffc34305eefe48a',\n\t\t\t// \tuserId: user.id,\n\t\t\t// \tgroup: 'justwinkit',\n\t\t\t// \taud: 'jitsi',\n\t\t\t// \tiss: 'panther-core',\n\t\t\t// \tsub: JITSI_URL.BASE_URL,\n\t\t\t// \troom: jitsiMeetId,\n\t\t\t// \tauthRoom: '*',\n\t\t\t// \texp: 24,\n\t\t\t// });\n\n\t\t}\n\t}, [user, jobId, jitsiMeetId]);\n\n\n\tuseEffect(()=>{\n\t\tif(api != null && api.getNumberOfParticipants() === -1){\n\t\t\tsetJitsiSessionEnd(true);\n\t\t}\n\t\tif(job && job.id === jobId){\n\t\t\tconsole.log(\"job inside useEffect :::: \",job)\n\t\t\t// console.log(\"jobId ::::: \",jobId)\n\t\t\tsetJitsiMeet(getIdFromJobId(job.id))\n\t\t\t\n\t\t\t\n\t\t\t// console.log(\"job  techincian job progress:: \",job)\n\t\t\tlet price = 0;\n\t\t\tif(job.subSoftware && job.subSoftware.rate){\n\t\t\t\tprice = job.subSoftware.rate;\n\t\t\t}else if(job.software && job.software.rate){\n\t\t\t\tprice = job.software.rate;\n\t\t\t}\n\t\t\tsetratePerTime(price)\n\n\t\t\tif(!job.customerDeclinedNotes){\n\t\t\t\tif(!job.technicianSubmitNotes){\n\t\t\t\t\tif(job.allNotes && job.allNotes.trim().length > 0){\n\t\t\t\t\t\tlet issuesListArr = job.allNotes.split('|SEP|');\n\t\t\t\t\t\tsetIssuesList(issuesListArr);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\n\t\t\t\t\tif(job.allNotes && job.allNotes.trim().length > 0 && !job.customerConfirmedNotes){\n\t\t\t\t\t\tsetWaitingForCustomer(true)\n\t\t\t\t\t}\n\t\t\t\t\tif(job.allNotes && job.allNotes.trim().length > 0 && job.customerConfirmedNotes){\n\t\t\t\t\t\tsetNotesAvailable(true)\n\t\t\t\t\t}\n\t\t\t\t\tif(job.confirmedNotes && job.confirmedNotes.trim().length > 0 && job.customerConfirmedNotes){\n\t\t\t\t\t\tlet confirmedIssuesListArr = job.confirmedNotes.split('|SEP|');\n\t\t\t\t\t\tsetConfirmedIssuesList(confirmedIssuesListArr)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsetDeclinedMessageShow(true)\n\t\t\t\tsetWaitingForCustomer(false)\n\t\t\t\tsetNotesAvailable(false)\n\t\t\t\tif(job.allNotes && job.allNotes.trim().length > 0){\n\t\t\t\t\tlet issuesListArr = job.allNotes.split('|SEP|');\n\t\t\t\t\tsetIssuesList(issuesListArr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(job.meeting_start_time){\n\t\t\t\tlet meeting_start_time = new Date(job.meeting_start_time)\n\t\t\t\tlet now_date = new Date()\n\t\t\t\tif(job.pause_start_time && job.pause_start_time !== '' && job.meeting_pause){\n\t\t\t\t\tnow_date = new Date(job.pause_start_time)\n\t\t\t\t}\n\t\t\t\tlet seconds = (now_date.getTime() - meeting_start_time.getTime()) / 1000;\n\t\t\t\tseconds = (job.total_pause_seconds ? parseInt(seconds)- job.total_pause_seconds : parseInt(seconds))\n\t\t\t\tlet milliseconds = seconds * 1000\n\t\t\t\tsetIntialTimeVal(milliseconds)    \n\t\t\t\tsetEnableStartPauseTimerButton(true)\n\t\t\t\t\n\t\t\t\tif(!job.meeting_pause){\n\t\t\t\t\t\n\t\t\t\t\tsetdisabledStartTimerButton(true)\n\t\t\t\t\twindow.meeting_pause = setTimeout(\t\t\t\t\n\t\t\t\t\tfunction(){ \n\t\t\t\t\t\tsetShowStartTimerbtn(false);\t\n\t\t\t\t\t\tsetdisabledStartTimerButton(false)\t\t\t\t\t\n\t\t\t\t\t\tsetShowPauseTimerbtn(true)\t\t\t\t\n\t\t\t\t\t}, 4000);\n\t\t\t\t\twindow.tiRefTimeout = setTimeout(function(){\n\t\t\t\t\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\t\t\t\t\ttiRef.current.start() \n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1000);\n\t\t\t\t}else{\n\t\t\t\t\tsetdisabledPauseTimerButton(true)\n\t\t\t\t\twindow.timerButtonTimeout = setTimeout(\t\t\t\t\n\t\t\t\t\tfunction(){ \n\t\t\t\t\t\tsetShowPauseTimerbtn(false);\n\t\t\t\t\t\tsetdisabledPauseTimerButton(false)\n\t\t\t\t\t\tsetShowStartTimerbtn(true)\t\t\t\t\t\n\t\t\t\t\t}, 4000);\n\t\t\t\t}\t\t\t    \n\t\t\t}\n\t\t\t\n\t\t\tif(job.pause_start_time && job.pause_start_time !== ''){\n\t\t\t\tsetMeetingPauseStartTime(job.pause_start_time)\n\t\t\t}\n\t\t\tpollingBoth()\n\t\t\tlet jobDataToUpdate = {\n\t\t\t\t\"software\":job.software.id,\n\t\t\t\t\"subSoftware\":(job.subSoftware ? job.subSoftware.id : \"\"),\n\t\t\t\t\"subOption\":job.subOption,\n\t\t\t\t\"issueDescription\":job.issueDescription,\n\t\t\t\t\"updatedIssueDescription\":job.updatedIssueDescription,\n\t\t\t\t\"estimatedTime\":(job.estimatedTime ? job.estimatedTime : \"\")\n\t\t\t};\n\t\t\tif(job.updatedIssueDescription && job.updatedIssueDescription.length > 0){\n\t\t\t\tsetJobUpdatedIssueDescription(job.updatedIssueDescription[job.updatedIssueDescription.length-1].issueDescription)\n\t\t\t}else{\n\t\t\t\tsetJobUpdatedIssueDescription(job.issueDescription);\n\t\t\t}\n\t\t\tsetSelectedSubSoftware(job.subSoftware ? job.subSoftware.id : \"\")\n\n\t\t\tsetJobUpdatedData(jobDataToUpdate);\n\t\t\tlet softSettings = (job.subSoftware ? job.subSoftware : job.software)\n\t\t\tsetSoftwareSettings(softSettings)\n\t\t\tsetMeetingJob(job);\n\t\t\tif(job.status === \"Completed\" && job.id === jobId){\n\t\t\t\thistory.push(\"/\")\n\t\t\t}\n\n\t\t\tconsole.log('user.technician.id>>>>>>>>',user.technician.id)\n\t\t\tif(job.id === jobId && job.tech_declined_ids.includes(user.technician.id)){\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"Job has been declined by you.\")\n\t\t\t\thistory.push(\"/\")\n\t\t\t}\n\n\t\t\t// console.log(\"softSettings :\",softSettings)\n\t\t\tlet timeArr = (softSettings.estimatedTime ? softSettings.estimatedTime.split(\"-\") : [])\n\t\t\tlet timeFrom = (timeArr[0] ? timeArr[0] : 0)\n\t\t\tlet timeTo = (timeArr[1] ? timeArr[1] : timeFrom)\n\t\t\tif(job.estimatedTime){\n\t\t\t\ttimeArr = job.estimatedTime.split(\"-\")\n\t\t\t\ttimeFrom = (timeArr[0] ? timeArr[0] : 0)\n\t\t\t\ttimeTo = (timeArr[1] ? timeArr[1] : timeFrom)\n\t\t\t}\n\t\t\tsetEstTimeFrom(timeFrom.trim());\n\t\t\tsetEstTimeTo(timeTo.trim());\n\t\t\tlet filter_dict = {}\n\t\t\tfilter_dict['customer'] = job.customer.id\n\t\t\tfilter_dict['status'] = 'Completed'\n\t\t\t// console.log(\"filter_dict :::: \",filter_dict)\n\t\t\tconst res = JobService.findJobByParams(filter_dict,{ page:1,pageSize:10 })\n\t\t\t// console.log(\"hy res ::::: \",res)\n\t\t\tres.then((result)=>{  \n\t\t\t\tconsole.log('result>>>>>>>>>>>>>>',result)\n\t\t\t\tlet all_data = result.jobs.data \n\t\t\t\tsetTotalJobs(result.totalPages)\n\t\t\t\tconsole.log(result)\n\t\t\t\tif(user.userType === 'technician' && all_data){\n\n\t\t\t\t\tfor(let i=0;i<= all_data.length -1  ;i++){\n\t\t\t\t\t\tif(all_data[i]['tech_declined_ids'] && all_data[i]['tech_declined_ids'].includes(user.technician.id)){\n\t\t\t\t\t\t\tall_data[i]['status'] = 'Declined by customer'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetAllJobs(all_data)      \n\t\t\t})\n\t\t}\n\t},[job, meetingJob,jitsiMeetId]);\n\n\tuseEffect(() => {\n\t\tif (meetingId) {\n\t\t\tgetJitsiMeet(meetingId);\n\t\t}\n\t}, [meetingId]);\n\n\tuseEffect(() => {\n\t\tif (currentStep === 0) {\n\t\t\tsetJobTime(0);\n\t\t}\n\t}, [currentStep]);\n\n\tconst HandleHangup = (data)=>{\n\t\ttry{\n\t\t\tsetMethod(\"ComputerAudio\")\n\t\t\tdata.user_type = user.userType\n\t\t\tif (api != null) {\n\t\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\tif(participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t\tapi = null\n\t\t\t}\n\n\t\t\tconsole.log(\"Tech :All data before hangup is \",data);\n\t\t\tconsole.log('job.id>>>>>>>>>>HandleHangup',jobId);\n\t\t\tconsole.log(\"job data is \",job);\n\t\t\tconsole.log(\"meetingJob data is \",meetingJob);\n\n\t\t\tWebSocket.updateSocket(data['web_socket_id'],{'hitFromTechnicianSide':true})\n\t\t\twindow.location.href = `/meeting-feedback/${data.jobId}`\n\t\t}\n\t\tcatch{\n\t\t\twindow.location.href = `/meeting-feedback/${data.jobId}`\n\t\t}\n\t}\n\tconst loadJitsiScript = () => {\n\t\tlet resolveLoadJitsiScriptPromise = null;\n\t\tconst loadJitsiScriptPromise = new Promise((resolve) => {\n\t\t\tresolveLoadJitsiScriptPromise = resolve;\n\t\t\t});\t\n\t\ttry{\t\n\t\t\tconsole.log(\"the jitsi script\")\n\t\t\tconst script = document.createElement('script');\n\t\t\tscript.src = JITSI_URL.FULL_URL + 'external_api.js'; // winkit.ml mytestroom\n\t\t\tscript.async = true;\n\t\t\tscript.onload = () => resolveLoadJitsiScriptPromise(true);\n\t\t\tdocument.body.appendChild(script);\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error in loadJitsiScript ::::\",err)\n\t\t}\n\n\t\treturn loadJitsiScriptPromise;\n\t};\n\n\tconst handleModalClose = () => {\n\t\tsetIsOpen(false);\n\t};\n\n\tconst initialiseJitsi = async (computerAudioEnabled) => {\n\t\tlet startSilentMeeting = false\n\t\tlet technicianCallingHimself = false\n\t\ttry {\n\t\t\tconsole.log(\">>>>>>>>> initialiseJitsi >>>>>>>>>>>>>>>>>\",computerAudioEnabled)\n\t\t\tif (!window.JitsiMeetExternalAPI) {\n\t\t\t\tconsole.log(\"initialize jitsi error ::::::: ::::\")\n\t\t\t\tawait loadJitsiScript();\n\t\t\t}\n\t\t\tif(window.localStorage.getItem(\"jitsiLocalStorage\") != undefined){\n\t\t\t\twindow.localStorage.removeItem(\"jitsiLocalStorage\");\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log(\"running again :::initialize-jitsi ::: \",jitsiMeetId)\n\t\t\tconsole.log(\"element console :::: \",document.getElementById(jitsiContainerId))\n\t\t\tconsole.log('jitsiIsLoaded>>>>>>>>>>>>>',jitsiIsLoaded)\n\t\t\t// try{\n\t\t\t// \tif(window.localStorage.getItem(\"technicianCallingHimSelf\") != null && window.localStorage.getItem(\"technicianCallingHimSelf\") == \"true\"){\n\t\t\t// \tstartSilentMeeting = true\n\t\t\t// \ttechnicianCallingHimself = true\n\t\t\t// \tsetAudioIcon(true)\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// catch(err){\n\t\t\t// \tconsole.log(\"err :::: \",err)\n\t\t\t// }\n\n\t\t\tif(jitsiIsLoaded === false && jitsiMeetId !== false){\n\n\n\t\t\t\t// mixpanel code//\n\t\t\t\tmixpanel.identify(user.email);\n\t\t\t\tmixpanel.track('Technician - Jitsi session started',{'JobId':jobId});\n\t\t\t\t// mixpanel code//\n\n\n\t\t\t\tapi = new window.JitsiMeetExternalAPI(JITSI_URL.BASE_URL, {\n\t\t\t\tinterfaceConfigOverwrite: {\n\t\t\t\t\tSHOW_PROMOTIONAL_CLOSE_PAGE: false,\n\n\t\t\t\t\tDISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\n\t\t\t\t},\n\t\t\t\tconfigOverwrite: {\n\t\t\t\t\tstartWithAudioMuted: computerAudioEnabled,\n\t\t\t\t\tnotifications: [],\n\t\t\t\t\tstartWithVideoMuted:true,\n\t\t\t\t\tstartSilent:startSilentMeeting,\n\t\t\t\t\ttoolbarButtons: [\n\t\t\t\t\t\t'microphone',\n\t\t\t\t\t\t'fullscreen',\n\t\t\t\t\t\t'fodeviceselection',\n\t\t\t\t\t\t'profile',\n\t\t\t\t\t\t'chat',\n\t\t\t\t\t\t'desktop'\n\t\t\t\t\t],\n\t\t\t\t\tstartScreenSharing: false,\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tparentNode: document.getElementById(jitsiContainerId),\n\t\t\t\troomName: jitsiMeetId,\n\t\t\t\tjwt: '',\n\t\t\t\tuserInfo: {\n\t\t\t\t\tdisplayName: user?.firstName.trim() + user?.lastName.trim(),\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (jitsiMeetId !== false) {\n\t\t\t\tconsole.log(\"jitsiIsLoaded :::::::false made true \",jitsiIsLoaded)\n\t\t\t\tjitsiIsLoaded =  true\n\t\t\t}\n\t\t\t\n\t\t\tapi.isMultipleAudioInputSupported().then(isMultipleAudioInputSupported => {\n\t\t\t})\n\n\t\t\tapi.on('micError',(type,message)=>{\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"Audio Permission Denied\")\n\t\t\t\t})\n\n\t\t\tapi.on('videoConferenceLeft', () => {\n\t\t\t\tif (jitsiMeetId !== false) {\n\t\t\t\t\tjitsiIsLoaded =  true\n\t\t\t\t}\n\t\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\tif(participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t});\n\t\t\tapi.on(\"recordingStatusChanged\",(data)=>{\n\t\t\t\tconsole.log(\"data :::::::::: \",data)\n\t\t\t})\n\n\t\t\twindow.showLoaderTimeout = setTimeout(()=>{setShowLoader(false)},12000)\n\t\t\tapi.on('participantJoined', () => {\n\t\t\t\tsetIsJitsiLoaded(true)\n\t\t\t\tif(hideButton.current && hideButton.current != null){\n\t\t\t\t\thideButton.current.click()\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tsetShowLoader(false);\n\t\t\t})\n\n\t\t\tapi.on('readyToClose', () => {\n\t\t\t\tsetJitsiSessionEnd(true);\n\t\t\t\twindow.location.href = `/meeting-feedback/${job.id}`\n\t\t\t\tconsole.log('meeting closesd ::::: Tech Side ');\n\t\t\t});\n\n\t\t\tapi.on('screenSharingStatusChanged', (screen_data) => {\n\t\t\t\tif(screen_data['on'] ===  true){\n\t\t\t\t\tsetIsScreenShared(true);\n\t\t\t\t\tsetShowLoader(false);\n\t\t\t\t}else{\n\t\t\t\t\tsetIsScreenShared(false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\n\t\t\tapi.on(\"incomingMessage\",()=>{\n\t\t\t\t\n\t\t\t\taudio.play()\n\t\t\t\topenNotificationWithIcon(\"info\",\"Info\",\"New Message from Customer\")\n\t\t\t})\n\t\t\tapi.on(\"errorOccurred\",(err)=>{\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t\t\tconsole.log(\"api :::::::::: \",api)\n\t\t\t}\n\n\t\t\twindow.retryJitsiTimeout = setTimeout(function(){\n\t\t\t\tif(api){\n\t\t\t\t\tlet partispantsArr = api.getParticipantsInfo()\n\t\t\t\t\tconsole.log(\"partispantsArr>>>>09-03-22\",partispantsArr)\n\n\t\t\t\t\tif(partispantsArr.length > 0){\n\t\t\t\t\t\tlet valueToFind = user.firstName.trim()+user.lastName.trim()+' (me)';\n\t\t\t\t\t\tconsole.log(\"valueToFind++++++++++++\",valueToFind)\n\t\t\t\t\t\tlet result = partispantsArr.find( ({ formattedDisplayName }) => formattedDisplayName === valueToFind );\n\t\t\t\t\t\tconsole.log(\"result********************\",result)\n\t\t\t\t\t\tif(!result){\n\t\t\t\t\t\t\tretryJitsi();\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tretryJitsi();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tretryJitsi();\n\t\t\t\t}\n\n\t\t\t},35000)\n\t\t} catch (error) {\n\t\t\tconsole.log(\">>Error\",error)\n\t\t\tsetIsJitsiLoaded(false)\n\t\t\tconsole.log('error from initialize jitsi');\n\t\t\tretryJitsi();\n\t\t}\n\t};\n\n\tconst retryJitsi = () => {\n\t\tif(job && job.id && job.status !== \"Completed\"){\n\t\t\tconsole.log(\"Going to reload page to reinitialize jitsi\");\n\t\t\twindow.location.href = process.env.REACT_APP_MEETING_PAGE+`/meeting/technician/${job.id}`\n\t\t}\n\t}\n\n\tconst stopShareScreen = () => {\n\t\tif(api!=null && isScreenShared){\n\t\t\tapi.executeCommand('toggleShareScreen');\n\t\t}\n\t};\n\n\tconst HandleDeclineJob = async()=>{\n\t\tsetEstTimeFromErrorMsg('');\n\t\tsetEstTimeToErrorMsg('');\n\t\tlet transferCallErrorsTemp = {};\n\t\tlet goFurther = true;\n\t\tlet data = {...jobUpdatedData}\n\t\tdata['subSoftware'] = selectedSubSoftware\n\t\tdata['estimatedTime'] = estTimeFrom+'-'+estTimeTo;\n\t\tif(DeclinedReason === '' || DeclinedReason.trim() === ''){\n\t\t\ttransferCallErrorsTemp['emptyReason'] = true;\n\t\t\tgoFurther = false;\n\t\t}\n\t\t\n\t\tif(data['software'] === ''){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptySoftware'] = true;\n\t\t}\n\t\tif(selectedSubSoftware === '' && subSoftwareList.length > 0){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptySubSoftware'] = true;\n\t\t}\n\t\tif(data['subOption'] === ''){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyArea'] = true;\n\t\t}\n\t\tif(jobUpdatedIssueDescription === ''){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyIssueDescription'] = true;\n\t\t}\n\t\tif(jobUpdatedIssueDescription.length > JOB_CHARACTERS_ALLOWED){\n\t\t\tconsole.log(\"jobUpdatedIssueDescription ::::: \")\n\t\t\tgoFurther = false\n\t\t\ttransferCallErrorsTemp['emptyIssueDescription'] = true\n\t\t}\n\t\tif(estTimeFrom < 1){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyEstTimeFrom'] = true;\n\t\t\tsetEstTimeFromErrorMsg('Please enter `Est. time from` value in minutes.');\n\t\t}\n\n\t\tif(estTimeTo > 120){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyEstTimeTo'] = true;\n\t\t\tsetEstTimeToErrorMsg('`Est. time to` value cannot be greater than 2 hours.');\n\t\t}\n\t\tif(estTimeTo < 1){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyEstTimeTo'] = true;\n\t\t\tsetEstTimeToErrorMsg('Please enter `Est. time to` value in minutes.');\n\t\t}\n\t\tif(estTimeFrom > estTimeTo){\n\t\t\tgoFurther = false;\n\t\t\ttransferCallErrorsTemp['emptyEstTimeFrom'] = true;\n\t\t\tsetEstTimeFromErrorMsg('`Est. time from` value should be less as compare to `Est. time to`.');\n\t\t}\n\t\tsetTransferCallErrors(transferCallErrorsTemp);\n\n\t\tlet tempDescription = {\n\t\t\t'technician':(user && user.technician ? user.technician.id : user.id),\n\t\t\t'technicianName':(user ? user.firstName+' '+user.lastName : ''),\n\t\t\t'issueDescription':jobUpdatedIssueDescription,\n\t\t\t'updatedAt':new Date()\n\t\t}\n\t\tlet updatedIssueDescriptionArr = [...data['updatedIssueDescription']];\n\t\tif(updatedIssueDescriptionArr.length === 0){\n\t\t\tif(data['issueDescription'].toLowerCase().trim() !== jobUpdatedIssueDescription.toLowerCase().trim()){\n\t\t\t\tupdatedIssueDescriptionArr.push(tempDescription)\n\t\t\t\tdata['updatedIssueDescription'] = updatedIssueDescriptionArr\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tlet descriptionFound = updatedIssueDescriptionArr.find(o => o.issueDescription === jobUpdatedIssueDescription);\n\t\t\tif(!descriptionFound){\n\t\t\t\tupdatedIssueDescriptionArr.push(tempDescription)\n\t\t\t\tdata['updatedIssueDescription'] = updatedIssueDescriptionArr\n\t\t\t}\n\t\t}\n\t\tif(goFurther){\n\t\t\tconsole.log(\"inside goFurther\")\n\t\t\tlet techDeclined = [...job.tech_declined_ids]\n\t\t\tlet reasonsTech = [...job.reasons];\n\t\t\ttechDeclined.push(user.technician.id);\n\t\t\treasonsTech.push(DeclinedReason);\n\n\t\t\t// mixpanel code//\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Transfer Call',{'JobId':jobId});\n\t\t\t// mixpanel code//\n\t\t\t\n\t\t\t\n\t\t\ttry{\n\t\t\t\tTechnicianApi.updateTechnician(user.technician.id,{\"status\":\"Available\"})\n\t\t\t\t  let updatedNotifiedTechs =[];\n\t\t\t\t\t\n\t\t\t\t  for(const k in job.notifiedTechs){\n\t\t\t\t\t  let jobStatus = job.notifiedTechs[k]['jobStatus'];\n\t\t\t\t\t  let notifyEndAt = (job.notifiedTechs[k]['notifyEndAt'])?job.notifiedTechs[k]['notifyEndAt']:new Date();\n\t\t\t\t\t  console.log(\">>>>>>>>>> job.notifiedTechs\", job.notifiedTechs[k], user.technician.id);\n\t\t\t\t\t  if(job.notifiedTechs[k]['techId'] == user.technician.id){\n\t\t\t\t\t\t  jobStatus = \"tech-decline\";\n\t\t\t\t\t\t  notifyEndAt = new Date();\n\t\t\t\t\t  }\n\t\t\t\t\t  updatedNotifiedTechs[k] = {\n\t\t\t\t\t\t  'techId' :  job.notifiedTechs[k]['techId'],\n\t\t\t\t\t\t  'techStatus':  job.notifiedTechs[k]['techStatus'],\n\t\t\t\t\t\t  'notifyAt' : job.notifiedTechs[k]['notifyAt'],\n\t\t\t\t\t\t  'jobStatus' : jobStatus,\n\t\t\t\t\t\t  'notifyEndAt' : notifyEndAt,\n\t\t\t\t\t  }\n\n\t\t\t\t  }\n\t\t\t\t  console.log(\">>>>>>>>>> updatedNotifiedTechs\", updatedNotifiedTechs);\n\t\t\t\tawait updateJob(jobId,{\n\t\t\t\t\t\"tech_declined_ids\":techDeclined,\n\t\t\t\t\t\"allNotes\":\"allNotes\",\n\t\t\t\t\t\"notifiedTechs\":updatedNotifiedTechs,\n\t\t\t\t\t\"reasons\":reasonsTech,\n\t\t\t\t\t\"status\":\"Waiting\",\n\t\t\t\t\t\"total_time\":0,\n\t\t\t\t\t\"meeting_start_time\":'',\n\t\t\t\t\t\"technician\":\"\",\n\t\t\t\t\t\"software\":data['software'],\n\t\t\t\t\t\"subSoftware\":data['subSoftware'],\n\t\t\t\t\t\"subOption\":data['subOption'],\n\t\t\t\t\t\"issueDescription\":data['issueDescription'],\n\t\t\t\t\t\"estimatedTime\":data[\"estimatedTime\"],\n\t\t\t\t\t\"updatedIssueDescription\":data['updatedIssueDescription'],\n\t\t\t\t\t\"confirmedNotes\":\"\",\n\t\t\t\t\t\"customerConfirmedNotes\":false,\n\t\t\t\t\t\"customerDeclinedNotes\":false,\n\t\t\t\t\t\"technicianSubmitNotes\":false,\n\t\t\t\t\t\"total_pause_seconds\":0,\n\t\t\t\t\t\"meeting_pause\":false,\n\t\t\t\t\t\"hire_expert\":hireExpert,\n\n\t\t\t\t})\n\t\t\t\tendMeeting(true);\n\t\t\t\tsetShowDeclineModal(!showDeclineModal)\n\t\t\t\topenNotificationWithIcon('success', 'Success', 'Job declined.');\n\t\t\t\twindow.fetchNotificationTimeOut = setTimeout(function(){\n\t\t\t\t\tlet notificationData = {\n\t\t\t\t\t  user:job.customer.user.id,\n\t\t\t\t\t  job:job.id,\n\t\t\t\t\t  actionable:false,\n\t\t\t\t\t  read:false,\n\t\t\t\t\t  title:\"Technician has quit your call.Please wait for another technician to join\",\n\t\t\t\t\t\t\t  type:\"job_declined_by_technician\",\n\n\t\t\t\t\t}\n\t\t\t\t\tcreateNotification(notificationData)\n\t\t\t\t\tfetchNotifications({\"user\":job.customer.user.id})\n\t\t\t\t},1000)\n\t\t\t}\n\t\t\tcatch(error){\n\t\t\t\tconsole.log(\"Error in fetch meeting :::: \")\n\t\t\t\t// endMeeting(true);\n\t\t\t}\n\t\t\t\n\t\t\t \n\t\t}\n\t}\n\n\tconst rejoinPhoneCall = async() => {   \n\t\t// mixpanel code//\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Technician - Rejoin',{'JobId':jobId,'meetingMethod':method});\n\t\t// mixpanel code//\n\t\tif(method === \"ComputerAudio\"){\n\t\t\twindow.location.reload()\n\t\t}else{\n\t\t\twindow.localStorage.setItem(\"technicianCallingHimSelf\",true)\n\t\t\twindow.location.reload()\n\n\t\t\t// let extLength = (job.technician.extension && job.technician.extension !== '' ? job.technician.extension.length : \"0\")\n\t\t\t// let extension = job.technician.extension && job.technician.extension != null ? job.technician.extension : \"\"\n\t\t\tapi.invite([{allowed: true,number: `${job.technician.profile.confirmId.phoneNumber}`,originalEntry: `${job.technician.profile.confirmId.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t}\n\t\t\n\t}\n\tconst hideLoader = ()=>{\n\t\tsetShowLoader(false)\n\t}\n\n\tfunction convert_millis_to_hms_format(millis){\n\t\tlet sec = Math.floor(millis / 1000);\n\t\tlet hrs = Math.floor(sec / 3600);\n\t\tsec -= hrs * 3600;\n\t\tlet min = Math.floor(sec / 60);\n\t\tsec -= min * 60;\n\n\t\tsec = '' + sec;\n\t\tsec = ('00' + sec).substring(sec.length);\n\n\t\tif (hrs > 0) {\n\t\t\tif(hrs < 10){\n\t\t\t\tmin = '' + min;\n\t\t\t\tmin = ('00' + min).substring(min.length);\n\t\t\t\treturn '0'+hrs + \":\" + min + \":\" + sec;\n\t\t\t}else{\n\t\t\t\tmin = '' + min;\n\t\t\t\tmin = ('00' + min).substring(min.length);\n\t\t\t\treturn hrs + \":\" + min + \":\" + sec;\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"min ::::\",min)\n\t\t\tif(min === 0){\n\t\t\t\treturn  `00:00:${sec}`;\n\t\t\t}\n\t\t\telse if(min > 0 && min < 10){\n\t\t\t\tconsole.log(\"min > 0 && min < 10 :::::\",min > 0 && min < 10)\n\t\t\t\treturn  `00:0${min}:${sec}`;\n\t\t\t}else{\n\t\t\t\tconsole.log(\"condition 2::::::\",min > 0 && min < 10)\n\t\t\t\treturn  `00:${min}:${sec}`;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tconst endMeeting = async (rejected=false) => {\t\t\n\t\tsetJitsiSessionEnd(true);\n\t\tsetDisabledEndCall(true)\n\t\tclearInterval(window.pollingInterval)\n\t\tclearAllTimeOuts()\n\t\tconsole.log(\"Inside end meeting of technicinan\")\n\t\t// mixpanel code//\n\t\tmixpanel.identify(user.email);\n\t\tmixpanel.track('Technician - End meeting',{'JobId':jobId});\n\t\t// mixpanel code//\n\t\tconsole.log('job.id>>>>>>>>>>endMeeting',jobId)\n\t\tconsole.log(\"Time in end meeting is \",time)\n\t\tlet data = {jobId : jobId,user_type:user.userType,techId:user.technician.id,userId:user.id}\n\n\n\t\tlet fetchUpdatedJob =  await JobService.retrieveJob(jobId)\n\t\tconsole.log('fetchUpdatedJob>>>>>>>>',fetchUpdatedJob)\n\t\tlet miliseconds = fetchUpdatedJob.total_seconds*1000\n\t\tconsole.log('miliseconds>>>>>>>',miliseconds)\n\t\tdata['total_time'] =  convert_millis_to_hms_format(miliseconds)\n\t\tconsole.log(data['total_time'],'.............................')\n\t\t\n\t\tdata['total_seconds'] = fetchUpdatedJob.total_seconds\n\t\tdata['job_data'] = job\n\t\tsethideBadge(true)\n\n\t\tlet totalPaidJobsCount = await getTotalPaidJobs({'customer':job.customer.id})\n\t\tconsole.log(\"totalPaidJobsCount\",totalPaidJobsCount)\n\n\t\tdata['is_free_job'] = (totalPaidJobsCount > 1 ? false : true)\n\t\t\n\t\tlet totalCostGenerationData = {\"jobId\":jobId,\"customerId\":job.customer.id}\n\t\tconsole.log(\"************************ Job Service Request Total Cost  *****************************************\")\n\t\tlet res = await JobService.generateTotalCost(totalCostGenerationData)\n\t\tconsole.log(\"************************ Job Service Request Total Cost *****************************************\")\n\t\tif (api != null) {\n\t\t\ttry{\n\t\t\t\tlet participant_array = api.getParticipantsInfo()\n\t\t\t\tconsole.log(\"participant_array :::: :\",participant_array)\n\t\t\t\tfor (var k in participant_array){\n\t\t\t\t\tconsole.log(\"participant_array id:::: \",participant_array[k]['participantId'])\n\t\t\t\t\tlet participant_id = participant_array[k]['participantId']\n\t\t\t\t\tif(participant_array[k]['displayname'] != user?.firstName.trim() + user?.lastName.trim()){\n\t\t\t\t\t\tapi.executeCommand(\"kickParticipant\",participant_id)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tjitsiIsLoaded = false\n\t\t\t\tapi.executeCommand('hangup');\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\tconsole.log(\"error in Technician hangup (endMeeting) :::: \")\n\t\t\t}\n\t\t}\n\n\n\t\tif(!rejected){\n\n\t\t\t\tawait CreateEarningReport(jobId, job, res.total_cost);\n\n\t\t\t\tawait WebSocket.create({\n\t\t\t\t\tuser: user.id,\n\t\t\t\t\tjob : jobId,\n\t\t\t\t\tsocketType:'meeting-closed',\n\t\t\t\t\tuserType:user.userType,\n\t\t\t\t\tdata:data,\n\t\t\t\t});\n\n\n\t\t\t\tconsole.log(\"Data in end meeting is \",data)\n\t\t\t\t\t\t\t\n\t\t}\n\t\telse{\n\t\t\tsethideBadge(true)\n\t\t\tsocket.emit(\"rejected\",data)\n\t\t\tsetTimeout(function(){ window.location.href = '/' }, 2000);\n\t\t}\n\t}\n\n\tconst submitNotes=async()=>{\n\t\tsetNotesSaveLoader(true)\n\t\tsetAlertMesasgeShow(false)\n\t\tif(issuesList.length > 0){\n\t\t\tlet jobNotes = issuesList.join(\"|SEP|\");\n\t\t\tawait updateJob(jobId,{\"allNotes\":jobNotes,\"customerDeclinedNotes\":false, \"technicianSubmitNotes\":true})\n\n\t\t\tlet data = {}\n\t\t\tdata['jobId'] = jobId\n\t\t\tdata['allNotes'] = jobNotes\n\t\t\tsocket.emit(\"technician-submitted-notes\",data)\n\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Submit the notes',{'JobId':jobId});\n\t\t\twindow.notesSaveLoader = setTimeout(function(){\n\t\t\t\tsetNotesSaveLoader(false)\n\t\t\t},1500)\n\t\t}else{\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - trying to submit the empty notes.',{'JobId':jobId});\n\t\t\tsetAlertMesasgeShow(true)\n\t\t\tsetNotesSaveLoader(false)\n\t\t}\n\n\t}\n\n\tconst handleUserUsingComputer = ()=>{\n\t\ttry{\n\t\t\thandleParticipantMic()\n\t\t\twindow.localStorage.setItem(\"technicianCallingHimSelf\",false)\n\t\t}\n\t\tcatch(err){\n\t\t\tconsole.log(\"error ::::: \",err)\n\t\t}\n\t}\n\n\tconst updateJobDetails = async() => {\n\t\tsetShowUpdateBlock(true);\n\t\tif(!dataLoaded){\n\t\t\tsetShowSidebarLoader(true);\n\t\t\tconst res = await SoftwareApi.getSoftwareList();\n\t\t\tif (res && res.data) {\n\t\t\t\tsetSoftwareList(res.data);\n\t\t\t\tsetSubSoftwareArray(res.data, meetingJob.software.id);\n\t\t\t\tlet optionsList = (meetingJob.subSoftware ? meetingJob.subSoftware.sub_option : meetingJob.software.sub_option)\n\t\t\t\tsetSubOptionsList(optionsList)\n\t\t\t\t\n\t\t\t\tsetDataLoaded(true);\n\t\t\t\tsetShowSidebarLoader(false);\n\t\t\t\tsetUpdateJobDetailsLoader(false);\n\t\t\t\tsetUpdateDetailsMessageShow(false);\n\t\t\t\tsetjobDetailsErrorMsgShow(false);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n\tconst setSubSoftwareArray = (softwares, software_id) => {\n\t\tlet subSoftList = []\n\t\tsoftwares.map((s,i)=>{\n\t\t\tif((s.parent !== 0 || s.parent !== \"0\") && s.parent === software_id){\n\t\t\t\tsubSoftList.push(s)\n\t\t\t}\n\t\t\tif(i+1 === softwares.length){\n\t\t\t\tsetSubSoftwareList(subSoftList);\n\t\t\t\tif(subSoftList.length === 0){\n\t\t\t\t\tsetSelectedSubSoftware('');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t})\n\t}\n\n\tconst submitJobDetails = async() => {\n\t\tsetjobDetailsErrorMsgShow(false);\n\t\tsetUpdateDetailsMessageShow(false);\n\t\tsetUpdateJobDetailsLoader(true);\n\t\tconsole.log(\"submit job details ::::::::::::::::\",jobUpdatedIssueDescription)\n\t\tlet data = {...jobUpdatedData}\n\t\tdata['subSoftware'] = selectedSubSoftware\n\t\tdata['estimatedTime'] = estTimeFrom+'-'+estTimeTo;\n\t\tlet goFurther = true;\n\t\tif(data['software'] === ''){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please select the software');\n\t\t}\n\t\telse if(selectedSubSoftware === '' && subSoftwareList.length > 0){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please select the subsoftware');\n\t\t}else if(data['subOption'] === ''){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please select the area option');\n\t\t}else if(jobUpdatedIssueDescription === '' || jobUpdatedIssueDescription.trim() === ''){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please enter issue description');\n\t\t}\n\t\telse if(jobUpdatedIssueDescription.length > JOB_CHARACTERS_ALLOWED){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg(`maximum ${JOB_CHARACTERS_ALLOWED} characters are allowed`);\n\t\t}\n\t\telse if(estTimeFrom < 1){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please enter `Est. time from` value.');\n\t\t}\n\n\t\telse if(estTimeTo > 120){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Est. time to` value cannot be greater than 2 hours.');\n\t\t}\n\t\telse if(estTimeTo < 1){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('Please enter `Est. time to` value.');\n\t\t}\n\t\telse if(estTimeFrom > estTimeTo){\n\t\t\tgoFurther = false;\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg('`Est. time from` value should be less as compare to `Est. time to`.');\n\t\t}\n\t\tlet tempDescription = {\n\t\t\t'technician':(user && user.technician ? user.technician.id : user.id),\n\t\t\t'technicianName':(user ? user.firstName+' '+user.lastName : ''),\n\t\t\t'issueDescription':jobUpdatedIssueDescription,\n\t\t\t'updatedAt':new Date()\n\t\t}\n\t\tlet tempArr = [...data['updatedIssueDescription']];\n\t\tif(tempArr.length === 0){\n\t\t\tif(data['issueDescription'].toLowerCase().trim() !== jobUpdatedIssueDescription.toLowerCase().trim()){\n\t\t\t\ttempArr.push(tempDescription)\n\t\t\t\tdata['updatedIssueDescription'] = tempArr\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tlet descriptionFound = tempArr.find(o => o.issueDescription === jobUpdatedIssueDescription);\n\t\t\tif(!descriptionFound){\n\t\t\t\ttempArr.push(tempDescription)\n\t\t\t\tdata['updatedIssueDescription'] = tempArr\n\t\t\t}\n\t\t}\n\t\tif(goFurther){  \t\n\n\t\t\tawait updateJob(jobId,data)\n\t\t\tdata['jobId'] = jobId;\n\t\t\tsocket.emit(\"technician-updated-job-details\",data)\n\t\t\tfetchJob(jobId);\n\t\t\tsetUpdateDetailsMessageShow(true);\n\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Update the job details',{'JobId':jobId});\n\t\t}\n\t\tsetUpdateJobDetailsLoader(false);\n\t}\n\n\tconst backFromUpdateJob = () => {\n\t\tsetShowUpdateBlock(false);\n\n\t\tif(job.updatedIssueDescription && job.updatedIssueDescription.length > 0){\n\t\t\tsetJobUpdatedIssueDescription(job.updatedIssueDescription[job.updatedIssueDescription.length-1].issueDescription)\n\t\t}else{\n\t\t\tsetJobUpdatedIssueDescription(job.issueDescription);\n\t\t}\n\t\tsetSelectedSubSoftware(job.subSoftware ? job.subSoftware.id : \"\")\n\n\t\tlet softSettings = (job.subSoftware ? job.subSoftware : job.software)\n\t\tsetSoftwareSettings(softSettings)\n\t\tlet timeArr = (softSettings.estimatedTime ? softSettings.estimatedTime.split(\"-\") : [])\n\t\tlet timeFrom = (timeArr[0] ? timeArr[0] : 0)\n\t\tlet timeTo = (timeArr[1] ? timeArr[1] : timeFrom)\n\t\tif(job.estimatedTime){\n\t\t\ttimeArr = job.estimatedTime.split(\"-\")\n\t\t\ttimeFrom = (timeArr[0] ? timeArr[0] : 0)\n\t\t\ttimeTo = (timeArr[1] ? timeArr[1] : timeFrom)\n\t\t}\n\t\tsetEstTimeFrom(timeFrom.trim());\n\t\tsetEstTimeTo(timeTo.trim());\n\n\n\t}\n\n\tconst mainSoftwareSelectChange = async(e) => {\n\t\tlet sid = e.target.value;\n\t\tsetSubSoftwareArray(softwareList, sid);\n\t\tupdateOptionsList(sid,'software');\n\t}\n\n\tconst subSoftwareSelectChange = (e) => {\n\t\tsetSelectedSubSoftware(e.target.value);\n\t\tupdateOptionsList(e.target.value,'subSoftware');\n\t}\n\n\tconst optionSelectChange = (e) => {\n\t\tsetjobDetailsErrorMsgShow(false);\n\t\tlet jobDataToUpdate = {...jobUpdatedData};\n\t\tjobDataToUpdate['subOption'] = e.target.value\n\t\tsetJobUpdatedData(jobDataToUpdate);\n\t}\n\n\tconst issueDescriptionChange = (e) => {\n\t\tif(e.target.value.length > JOB_CHARACTERS_ALLOWED){\n\t\t\tsetjobDetailsErrorMsgShow(true);\n\t\t\tsetjobDetailsErrorMsg(`maximum ${JOB_CHARACTERS_ALLOWED} characters are allowed`);\n\t\t}\n\t\tsetJobUpdatedIssueDescription(e.target.value)\n\t}\n\n\tconst updateOptionsList = (software_id,col) => {\n\t\tsetjobDetailsErrorMsgShow(false);\n\t\tlet obj = softwareList.find(s => s.id === software_id);\n\t\tlet jobDataToUpdate = {...jobUpdatedData};\n\t\tif(obj){\n\t\t\tsetSubOptionsList(obj.sub_option)\n\t\t\tjobDataToUpdate['subOption'] = '';\n\t\t\tjobDataToUpdate[col] = software_id;\n\t\t\tsetJobUpdatedData(jobDataToUpdate);\n\t\t\tobj.sub_option.map(function(o){\n\t\t\t\tif(o === meetingJob.subOption){\n\t\t\t\t\tjobDataToUpdate['subOption'] = o\n\t\t\t\t\tsetJobUpdatedData(jobDataToUpdate);\n\t\t\t\t}\t\n\t\t\t\treturn true;\t\t\t\n\t\t\t})\n\t\t}else{\n\t\t\tjobDataToUpdate[col] = software_id;\n\t\t\tsetJobUpdatedData(jobDataToUpdate);\n\t\t}\n\t}\n\tconst notesInputSubmit = (e) => {\n\t\t\tsetAlertMesasgeShow(false);\n\t\t\tlet issueText = textAreaRef.current.value;\n\t\t\tif(issueText !== ''){\n\t\t\t\tlet tempIssuesList = [...issuesList]\n\t\t\t\tif(editIssueIdx.toString() !== ''){\n\t\t\t\t\ttempIssuesList[editIssueIdx] = issueText\n\t\t\t\t}else{\n\t\t\t\t\ttempIssuesList.push(issueText)\n\t\t\t\t}\n\t\t\t\tsetIssuesList(tempIssuesList);\n\t\t\t\tsetEditIssueIdx('');\n\t\t\t\ttextAreaRef.current.value = \"\"\n\t\t\t}else{\n\t\t\t\tsetAlertMesasgeShow(true);\n\t\t\t}\n\t}\n\n\tconst removeIssueFromList = (idx) => {\n\t\tlet tempIssuesList = [...issuesList]\n\t\ttempIssuesList.splice(idx,1)\n\t\tsetIssuesList(tempIssuesList);\n\t}\n\n\tconst editIssueFromList = (idx) => {\n\t\tlet tempIssuesList = [...issuesList]\n\t\t// setIssueValue(tempIssuesList[idx])\n\t\ttextAreaRef.current.value = tempIssuesList[idx]\n\t\tsetEditIssueIdx(idx)\n\t}\n  \n\tconst call_yourself = ()=>{\n\t\thandleParticipantMic()\n\t\tif(api != null){\n\t\t\tsetDisabledCallYourself(true)\n\t\t\tapi.invite([{allowed: true,number: `${job.technician.profile.confirmId.phoneNumber+\"0\"}`,originalEntry: `${job.technician.profile.confirmId.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t\twindow.setDisableCall = setTimeout(function(){ setDisabledCallYourself(false) }, 15000);\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Call himself',{'JobId':jobId});\n\n\t\t}\n\t\tconsole.log(\"refreshing the page because tech called himself\")\n\t\t// window.localStorage.setItem(\"technicianCallingHimSelf\",true)\n\t\t// window.location.reload()\n\t}\n\n\tconst call_customer = ()=>{\n\n\t\tif(api != null){\n\t\t\tsetDisabledCallCustomer(true)\n\n\t\t\t// let extLength = (job.customer.extension && job.customer.extension !== null && job.customer.extension !== '' ? job.customer.extension.length : \"0\")\n\t\t\t// let extension =  job.customer.extension && job.customer.extension !== null && job.customer.extension !== '' ? job.customer.extension:''\n\t\t\tapi.invite(\n\t\t\t\t[{allowed: true,number: `${job.customer.phoneNumber}`,originalEntry:`${job.customer.phoneNumber}`,showCountryCodeReminder: false,type: \"phone\"}])\n\t\t\twindow.setDisableCall = setTimeout(function(){ setDisabledCallCustomer(false) }, 15000);\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Call to customer',{'JobId':jobId});\n\t\t}\n\t\t\n\t}\n\n\tconst pauseTimer = async()=>{\n\t\tif(tiRef && tiRef != null && tiRef.current != null){\n\t\t\tsetdisabledPauseTimerButton(true)\n\t\t\ttiRef.current.pause()\n\t\t\tlet pause_from_time = new Date()\t\t\t\t\t\n\t\t\twindow.pauseTimer = setTimeout(\t\t\t\t\n\t\t\t\tfunction(){ \n\t\t\t\t\tsetShowPauseTimerbtn(false);\n\t\t\t\t\tsetdisabledPauseTimerButton(false)\n\t\t\t\t\t\tsetShowStartTimerbtn(true)\t\t\t\t\t\n\t\t\t\t}, 4000);\t\n\t\t\tsetMeetingPauseStartTime(pause_from_time)\n\t\t\tsocket.emit(\"stop-timer\",{ id: jobId, timer:time} )\n\t\t\tlet data = {'meeting_pause':true, 'pause_start_time':pause_from_time,'technician_paused_timer':true}\n\t\t\tawait JobService.updateJob(jobId,data)\t\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Pause the timer.',{'JobId':jobId});\n\t\t}\n\t}\n\n\n\tconst startTimer = async()=>{\n\t\tif(tiRef && tiRef != null && tiRef.current != null){  \n\t\t\tsetdisabledStartTimerButton(true)\n\t\t\twindow.startTimer = setTimeout(\t\t\t\t\n\t\t\t\tfunction(){ \n\t\t\t\t\tsetShowStartTimerbtn(false);\t\n\t\t\t\t\tsetdisabledStartTimerButton(false)\t\t\t\t\t\n\t\t\t\t\tsetShowPauseTimerbtn(true)\t\t\t\t\n\t\t\t\t}, 4000);\n\n\t\t\ttiRef.current.start();\n\t\t\tlet pauseEndTime = new Date();\n\t\t\tlet pauseStartTime = new Date(meetingPauseStartTime);\t\t\t\n\t\t\tlet seconds = (pauseEndTime.getTime() - pauseStartTime.getTime()) / 1000;\n\t\t\tlet jobInfo = await JobService.retrieveJob(jobId)\n\t\t\tlet totalPauseSeconds = (jobInfo.total_pause_seconds ? jobInfo.total_pause_seconds+seconds : seconds);\n\t\t\tlet data = {'meeting_pause':false, 'total_pause_seconds':totalPauseSeconds,'technician_paused_timer':false}\t\n\t\t\tsocket.emit(\"start-timer\",{ id: jobId,pausedSeconds : totalPauseSeconds })\n\t\t\tawait JobService.updateJob(jobId,data)\n\t\t\tmixpanel.identify(user.email);\n\t\t\tmixpanel.track('Technician - Start the timer',{'JobId':jobId});\t\t\t\n\t\t\t\n\t\t}\n\t}\n\n\tconst setEstTime = (e, type) => {  \t\t\n\t\tlet val = e.target.value;\n\t\tif(type === 'from'){\n\t\t\tsetEstTimeFrom(val);\n\t\t}\n\t\tif(type === 'to'){\n\t\t\tsetEstTimeTo(val)\n\t\t}\n\t}\n\n\tconst handleTransferCall = async() => {\n\t\tsetShowTransfterCallLoader(true);\n\t\tsetShowDeclineModal(!showDeclineModal)\n\t\tif(!dataLoaded){\n\t\t\tconst res = await SoftwareApi.getSoftwareList();\n\t\t\tif (res && res.data) {\n\t\t\t\tsetSoftwareList(res.data);\n\t\t\t\tsetSubSoftwareArray(res.data, meetingJob.software.id);\n\t\t\t\tlet optionsList = (meetingJob.subSoftware ? meetingJob.subSoftware.sub_option : meetingJob.software.sub_option)\n\t\t\t\tsetSubOptionsList(optionsList)\n\t\t\t\t\n\t\t\t\tsetDataLoaded(true);\n\t\t\t\tsetShowTransfterCallLoader(false);\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tsetShowTransfterCallLoader(false);\n\t\t}\n\t}\n\n\n\tfunction checkboxChange(e){\n\n\t\tconsole.log(`checked = ${e.target.checked}`);\n\t\tsetHireExpert(e.target.checked)\n\t}\n\n\tconst columns = [\n\t\t{\n\t\t\ttitle: 'Date',\n\t\t\tdataIndex: 'createdAt',\t   \n\t\t\trender: text => <span> { moment(text).format('YYYY-MM-DD')}</span>,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Software', \n\t\t\trender: (text, record) => (\n\t\t\t\t(record && record.software ? record.software.name : '')   \n\t\t\t),\n\t\t},\n\n\t\t{\n\t\t\ttitle: 'Issue Desc',\n\t\t\tdataIndex: 'issueDescription',\n\t\t\twidth: '30%',\n\t\t\trender: text => (\n\t\t\t\t<p padding=\"10px 5px\" title={text} className=\"issue-description\">\n\t\t\t\t\t{(text.length > 100 ? text.substring(0,100)+'...' : text)}\n\t\t\t\t</p>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\ttitle: 'Status',\n\t\t\tdataIndex: 'status',\n\t\t},\n\t\t{\n\t\t\ttitle: 'Tech',\t   \n\t\t\trender: (text, record) => (\n\t\t\t\t<>\n\t\t\t\t{ record && record.technician && record.technician.user ?\n\t\t\t\t\trecord.technician.user.firstName+' '+record.technician.user.lastName : 'NA' \n\t\t\t\t}\n\t\t\t\t</>\n\t\t\t),\n\t\t\t\n\t\t},\n\t\t {\n\t\t\ttitle: 'Action',\n\t\t   render: (text, record) => (\n\t\t\t<span>\n\t\t\t\t<button className=\"details-btn-history\" onClick={push_to_job_detail} name={record.id}><span></span>Details</button>\n\t\t\t</span>\n\n\t\t\t),\n\t\t},\n\t];\n\n\tconst handleLogoRedirection = (e) => {\n\t\te.preventDefault()\n\t\tlocalStorage.removeItem('CurrentStep');\n\t\twindow.location.href = '/dashboard';\n\t}\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row className=\"flex-row-reverse1\">\n\n\t\t\t\t<Col md=\"3\" lg=\"2\" >\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs={12} className=\"pt-4\">\n\t\t\t\t\t\t\t<div className=\"bar-logo-box\">\n\t\t\t\t\t\t\t\t<Link to=\"/\" onClick={handleLogoRedirection}>\n\t\t\t\t\t\t\t\t\t<Image src=\"https://winkit-software-images.s3.amazonaws.com/geeker_logo.png\" alt=\"Geeker\" />\n\t\t\t\t\t\t\t\t</Link>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t  \n\t\t\t\t\t\t<Col xs={12} className=\"mt-3 side-menu-bar px-3\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Loader height=\"100%\" className={(showSidebarLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t\t\t\t\t{waitingForCustomer &&\n\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t<h5 className=\"font-weight-bold\">Waiting for client to confirm the solution</h5>\n\t\t\t\t\t\t\t\t\t\t<ProgressStyled percent={70} showInfo={false} />\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{!waitingForCustomer && !notesAvailable &&\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{showUpdateBlock &&\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"font-weight-bold\">Update job details:</h5>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t{updateDetailsMessageShow &&\n\t\t\t\t\t\t\t\t\t\t\t\t<Alert variant='success' className=\"w-100\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails updated successfully.\n\t\t\t\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t{jobDetailsErrorMsgShow &&\n\t\t\t\t\t\t\t\t\t\t\t\t<Alert variant='danger' className=\"w-100\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{jobDetailsErrorMsg}\n\t\t\t\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Software <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={mainSoftwareSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\t\t\t\t      \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.parent === \"0\" || item.parent === 0){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.id === meetingJob.software.id){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id} selected=\"selected\">{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id}>{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t{subSoftwareList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Sub Software <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={subSoftwareSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubSoftwareList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.parent !== \"0\" || item.parent !== 0){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(meetingJob.subSoftware && item.id === meetingJob.subSoftware.id){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id} selected=\"selected\">{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id}>{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Area <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={optionSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubOptionsList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item === meetingJob.subOption){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item} selected=\"selected\">{item}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item}>{item}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Issue Description <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={jobUpdatedIssueDescription}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={issueDescriptionChange}\n\t\t\t\t\t\t\t\t\t\t\t\t\tspellCheck=\"true\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmaxLength=\"200\"\n\t\t\t\t\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={6} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Est. Time From <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={estTimeFrom} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e)=>setEstTime(e,'from')}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"From\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={6} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Est. Time To <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={estTimeTo} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e)=>setEstTime(e,'to')}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"To\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button className={(updateJobDetailsLoader ? \"disabled-btn\" : \"\")+\" btn app-btn w-100 mt-3 notes-submit-btn\"} disabled={updateJobDetailsLoader} onClick={submitJobDetails}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{updateJobDetailsLoader \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Spin/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Update</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t      \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn app-btn-light-blue w-100 mt-3\" onClick={backFromUpdateJob}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t{!showUpdateBlock &&\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"font-weight-bold\">Confirm the issue with client</h5>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t{alertMessageShow &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Alert variant='danger' className=\"w-100\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPlease write the issue before click on add.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t{declinedMessageShow &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Alert variant='danger' className=\"w-100\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIssues are declined by customer. Please review the issues.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<textarea \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Summarize the issue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={textAreaRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn app-btn app-btn-light-blue app-btn-small notes-add-btn w-100 mt-2\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={notesInputSubmit}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{editIssueIdx.toString() !== '' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Update</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Add</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-notes-text\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t{issuesList.length === 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted small-text\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo issues summarized yet. <br/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDescribe the details of the client issue using the textbox above. <br/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSelect  after each important detail to create a clear, listed outline of the issue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{issuesList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul className=\"small-text p-0 m-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tissuesList.map((i,idx)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"issue-list-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"issue-num\">{idx+1}.</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"issue-text\">{i}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"issue-action-btns text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"dark-green-text mr-3\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faPencilAlt} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Edit this issue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>editIssueFromList(idx)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"red-text\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faTrash} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>removeIssueFromList(idx)} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Remove this issue from list\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button className={(notesSaveLoader || issuesList.length === 0 ? \"disabled-btn\" : \"\")+\" btn app-btn w-100 mt-3 notes-submit-btn\"} onClick={submitNotes} disabled={notesSaveLoader || issuesList.length === 0}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{notesSaveLoader \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Spin/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Submit</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn app-btn-light-blue w-100 mt-3\" onClick={updateJobDetails}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\t\t\t\tUpdate Job Details\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{notesAvailable &&\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"font-weight-bold\">Issues confirmed by client :</h5>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"notes-outer\">\n\t\t\t\t\t\t\t\t\t\t\t {confirmedIssuesList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t<ul className=\"small-text p-0 m-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfirmedIssuesList.map((i,idx)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"issue-list-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"issue-num\">{idx+1}.</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"issue-text\">{i}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t}                     \n\n\t\t\t\t\t\t\t\t<Col xs={12}>\n\n\t\t\t\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\t\t\t\ttitle=\"Customer history\"\n\t\t\t\t\t\t\t\t\t\tcentered\n\t\t\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\t\t\tonOk={() => setVisible(false)}\n\t\t\t\t\t\t\t\t\t\tonCancel={() => setVisible(false)}\n\t\t\t\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\t\t\t\tclassName=\"rejectJobModal\"\n\t\t\t\t\t\t\t\t\t\tfooter={null}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Table locale={locale} dataSource={allJobs} columns={columns} rowKey=\"id\" className=\"jobsdetail-table\" pagination={false} id=\"ThemeLight\"/>\n\t\t\t\t\t\t\t\t\t\t { totalJobs !== 0 && <Pagination style={{\"float\":\"right\",\",marginRight\":\"40px\"}} current={currentPage} onChange={handlePagination} total={totalJobs} />} \n\t\t\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn app-btn-light-blue w-100 mt-3\" onClick={() => setVisible(true)}>\n\t\t\t\t\t\t\t\t\t\t<span/>\n\t\t\t\t\t\t\t\t\t\tCustomer History\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\n\t\t\t\t\t</Row>\n\t\t\t\t</Col>\n\t\t\t\n\t\t\t\t<Col md=\"9\" lg=\"10\" className=\"px-4\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Loader height=\"100%\" className={(showLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t\t\t<Col xs=\"12\" className=\"jitsi-screen-outer mt-4\">\n\t\t\t\t\t\t\t{showLoader && (\n\t\t\t\t\t\t\t\t<div className=\"session_loading\">\n\t\t\t\t\t\t\t\t\t<button onClick={hideLoader} style={{\"visibility\":\"hidden\"}} ref={hideButton}>Hide me</button>Loading the session\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{jitsiSessionEnd &&\n\t\t\t\t\t\t\t\t<div className=\"no-meeting-loaded\">\n\t\t\t\t\t\t\t\t\t<div className=\"meeting-area text-center\">\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"mb-3\">Thanks for using Geeker service.</h2>\n\t\t\t\t\t\t\t\t\t\t<h1>Looked like meeting session is ended. Please reload your page.</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t </div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{!jitsiSessionEnd &&\n\t\t\t\t\t\t\t\t<div id={jitsiContainerId} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs=\"12\">\n\t\t\t\t\t\t\t<Col xs=\"12\" className=\"jitsi-bottom-section my-4 p-3 radius-8\">\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col lg=\"5\" xs=\"12\">\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"pt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"7\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.customer &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Software :  </span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">{job.software.name + (job.subSoftware ? ' ('+job.subSoftware.name+')' : '')}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"5\" className=\"d-none1\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.estimatedTime \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. time:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.estimatedTime} mins\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{softwareSettings && softwareSettings.estimatedTime &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. time:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{softwareSettings.estimatedTime} mins\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"7\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.customer &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Client:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.customer.user.firstName} {meetingJob.customer.user.lastName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"5\" className=\"d-none1\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.estimatedPrice\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. price:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<EstimatedPriceToggle  softwareSettings = {meetingJob}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{softwareSettings && softwareSettings.estimatedPrice &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Est. price:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<EstimatedPriceToggle  softwareSettings = {softwareSettings}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"mt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.customer &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.updatedIssueDescription && meetingJob.updatedIssueDescription.length > 0 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Issue (Added by client):</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>Issue:</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.issueDescription}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t\t\t\t\t{meetingJob && meetingJob.customer && meetingJob.updatedIssueDescription && meetingJob.updatedIssueDescription.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\" className=\"mt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-name\">Issue [Updated by technician ({meetingJob.updatedIssueDescription[meetingJob.updatedIssueDescription.length-1].technicianName})]:</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"meeting-label-value\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{meetingJob.updatedIssueDescription[meetingJob.updatedIssueDescription.length-1].issueDescription}        \t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col lg=\"7 text-right\" xs=\"12\">\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col lg=\"2\" xs=\"12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={intialTimeVal} className=\"meeting-timer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer initialTime={intialTimeVal} startImmediately={false} ref={tiRef}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{() => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"f-16\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Hours\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('value>>>>>>>hours',value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.hours = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '00';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Minutes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('value>>>>>>>minutes',value)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.minutes = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '00';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Timer.Seconds\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatValue={(value) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('value>>>>>>>seconds',value)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = (value > 9 ?  value : (value < 1) ? '00': '0'+value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime.seconds = value || 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value || '00';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Timer>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col lg=\"6\" xs=\"12\" className=\"text-right pl-lg-5\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row style={{justifyContent:\"center\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row style={{justifyContent:\"center\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <Col xs=\"2\" className=\"d-md-block\"/> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ enableStartPauseTimerButton && showStartTimerbtn && \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"12\" className=\"pt-3 text-center\" title=\"Start timer\">\t\t\t\t                \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button  onClick={()=>{startTimer()}} className={(disabledStartTimerButton ? \"disabled-btn\" : \"\") +\" meeting-btn\"} disabled={disabledStartTimerButton}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faClock}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{startTimer()}} disabled={disabledStartTimerButton}>Start Timer</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ enableStartPauseTimerButton && showPauseTimerbtn &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Pause timer\">\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\t\t\t\t\t                \t\t\t\t\t\t\t                \t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className={(disabledPauseTimerButton ? \"disabled-btn\" : \"\") +\" meeting-btn\"} onClick={()=>{pauseTimer()}} disabled={disabledPauseTimerButton}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faClock}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{pauseTimer()}} disabled={disabledPauseTimerButton}>Pause Timer</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Invite user\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"meeting-btn\" onClick={()=>{dialInRef.current.click()}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPaperPlane}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{dialInRef.current.click()}}>Invite</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Transfer call to another technician\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"meeting-btn\" onClick={handleTransferCall}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faBan}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={handleTransferCall}>Transfer</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col xs=\"12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row style={{justifyContent:\"center\"}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <Col xs=\"2\" className=\"d-md-block\"/> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Call yourself on mobile\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className={(disabledCallYourself ? \"disabled-btn\" : \"\") +\" meeting-btn\"}  onClick={()=>{call_yourself()}} disabled={disabledCallYourself} title=\"Call yourself on phone\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPhone}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{call_yourself()}} disabled={disabledCallYourself}>Call Yourself</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"2\" lg=\"3\" xs=\"4\" className=\"pt-3 text-center\" title=\"Call customer on mobile\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className={(disabledCallCustomer ? \"disabled-btn\" : \"\") +\" meeting-btn\"}  onClick={()=>{call_customer()}} disabled={disabledCallCustomer} title=\"Call customer on phone\" >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPhoneAlt} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer meeting-btn-link text-center p-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={()=>{call_customer()}} disabled={disabledCallCustomer}>Call Customer</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col lg=\"4\" xs=\"12\" className=\"text-center pt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"end-meeting-btn-outer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={(disabledEndCall ? \"disabled-btn\" : \"\") +\" app-btn app-btn-red\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tendMeeting();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Click this button to end the meeting.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={disabledEndCall}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>End Meeting\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col md=\"12\" className=\"app-link-outer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ method !== \"ComputerAudio\" && <> <span>Disconnected?</span> <Button className=\"app-btn app-btn-transparent joinBtn\" onClick={rejoinPhoneCall} > <span></span> Call me again </Button> </>}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<ConfirmTechMatch \n\t\t\t\t\t\t\t\t\tinvited={true} \n\t\t\t\t\t\t\t\t\tdialInRef={dialInRef} \n\t\t\t\t\t\t\t\t\tstopScreenShare = {stopShareScreen}\n\t\t\t\t\t\t\t\t\tsetInvitation = {setInvitation}\n\t\t\t\t\t\t\t\t\tsetInvitedNumber = {setInvitedNumber}\n\t\t\t\t\t\t\t\t\tremoteDesktopRef = {remoteDesktopRef}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t<Modal title=\"Decline the job?\" onCancel={()=>{setShowDeclineModal(false)}} visible={showDeclineModal} className=\"rejectJobModal\" footer={[\n\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn app-btn-light-blue app-btn-small declne-job-btn\" onClick={()=>{setShowDeclineModal(false)}}>\n\t\t\t\t\t\t\t\t\t\t  <span></span>Cancel\n\t\t\t\t\t\t\t\t\t\t</Button>,\n\t\t\t\t\t\t\t\t\t\t<Button className=\"btn app-btn app-btn-small declne-job-btn\" onClick={HandleDeclineJob} >\n\t\t\t\t\t\t\t\t\t\t  <span></span>Submit\n\t\t\t\t\t\t\t\t\t\t</Button>,            \n\t\t\t\t\t\t\t\t\t]}>\n\t\t\t\t\t\t\t\t\t\t<Row className=\"transfer-call-outer\">\n\t\t\t\t\t\t\t\t\t\t\t<Loader height=\"100%\" className={(showTransfterCallLoader ? \"loader-outer\" : \"d-none\")} />\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"\">\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-muted small-text input-notes-text input-notes-modal\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tPlease correct the job details as per client requirement before decline.\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t{/*<Col xs={12} className=\"mt-2\">\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox onChange={checkboxChange}>Would you like to hire expert?</Checkbox>\n\t\t\t\t\t\t\t\t\t\t\t</Col> */}\n\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Software <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={mainSoftwareSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\t\t\t\t      \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.parent === \"0\" || item.parent === 0){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.id === meetingJob.software.id){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id} selected=\"selected\">{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id}>{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptySoftware ? '' : 'd-none') + \" red-text\"}>Please select the software.</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t{subSoftwareList.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Sub Software <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={subSoftwareSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubSoftwareList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.parent !== \"0\" || item.parent !== 0){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(meetingJob.subSoftware && item.id === meetingJob.subSoftware.id){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id} selected=\"selected\">{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id}>{item.name}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptySubSoftware ? '' : 'd-none') + \" red-text\"}>Please select the subsoftware.</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Select Area <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" onChange={optionSelectChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">--Select--</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubOptionsList.map(item => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item === meetingJob.subOption){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item} selected=\"selected\">{item}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item}>{item}</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptyArea ? '' : 'd-none') + \" red-text\"}>Please select the area.</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Issue Description <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={jobUpdatedIssueDescription}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={issueDescriptionChange}\n\t\t\t\t\t\t\t\t\t\t\t\t\tspellCheck=\"true\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmaxLength=\"200\"\n\t\t\t\t\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptyIssueDescription ? '' : 'd-none') + \" red-text\"}>Please enter issue description.</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={6} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Est. Time From <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={estTimeFrom} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e)=>setEstTime(e,'from')}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"From\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptyEstTimeFrom ? '' : 'd-none') + \" red-text\"}>{estTimeFromErrorMsg}</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={6} className=\"mt-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Est. Time To <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={estTimeTo} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e)=>setEstTime(e,'to')}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"To\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptyEstTimeTo ? '' : 'd-none') + \" red-text\"}>{estTimeToErrorMsg}</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={12} className=\"mt-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"m-0 font-weight-bold\">Reason to decline the job <span className=\"red-text pl-1\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea onChange={(e)=>{setDeclinedReasons(e.target.value)}} type=\"text\" id=\"ReasonToDecline\" className=\"rejectJobClass\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={(transferCallErrors.emptyReason ? '' : 'd-none') + \" red-text\"}>Please enter the reason to decline job.</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t{/*\n\t\t\t\t\t\t\t\t// Commented by Nafees as per ticket - GKF-237 on 10-07-2023\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<ExtensionModal\n\t\t\t\t\t\t\t\t\tonClose={() => setIsExtensionModalOpen(false)}\n\t\t\t\t\t\t\t\t\tisOpen={isExtensionModalOpen}\n\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t{/* <PinModal pinCode={pinCode} onClose={handleModalClose} isOpen={isOpen} /> */}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nconst EstimatedPriceToggle = (props)=>{\n\tconst time1 = (props.softwareSettings ? parseInt(props.softwareSettings.estimatedTime.split(\"-\")[0]) : 'NA')\n\tconst time2 = (props.softwareSettings ? parseInt(props.softwareSettings.estimatedTime.split(\"-\")[1]) : 'NA')\n\tlet price_per_six_min =props.softwareSettings.rate\n\tlet price1 = (props.softwareSettings ? props.softwareSettings.estimatedPrice.split(\"-\")[0] : price_per_six_min )\n\tlet price2 = (props.softwareSettings ? props.softwareSettings.estimatedPrice.split(\"-\")[1] : price_per_six_min )\n\tlet temp1 = (time1/6)*parseInt(price1)\n\t\ttemp1 = (temp1 ? temp1.toFixed(0) : 'NA')\n\tlet temp2 = (time2/6)*parseInt(price2)\n\t\ttemp2 = (temp2 ? temp2.toFixed(0) : 'NA') \t\n\treturn <>\n\t\t\t${temp1}-{temp2}\n\t\t</>\n\n}\nconst Link = style(DOM.Link)`\n\tcursor:pointer;\n`;\nconst Image = style.img`\n\tdisplay: block;\n\twidth: 120px;\n`;\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n\tbackground-color: #1bd4d5;\n  }\n  .ant-progress-text {\n\tcolor: white !important;\n  }\n  .ant-progress-inner{\n\tbackground-color: #CBD1D6;\t\n  }\n`;\n\nTechJobProgress.propTypes = {};\n\nexport default memo(TechJobProgress);",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\index.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmCustomersIssue.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport StepButton from '../../../../components/StepButton';\nimport TextArea from '../../../../components/TextArea';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title } = Typography;\n\nconst ConfirmCustomerIssue = ({ setCurrentStep }) => {\n  const { jobId } = useParams();\n  const [issueBreakdown, setissueBreakdown] = useState('');\n  const { socket } = useSocket();\n\n  const handleConfirm = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023 \n    // socket.emit('issue-breakdown', { id: jobId, issueBreakdown });\n    setCurrentStep(9);\n  };\n\n  const handleCancel = () => {};\n\n  const handleChangeText = e => {\n    setissueBreakdown(e.target.value);\n  };\n\n  return (\n    <div>\n      <Title level={3}>Confirm the customer&apos;s issue</Title>\n      <TextAreaStyled rows={15} onChange={handleChangeText} />\n      <StepButtonStyled onClick={handleConfirm}>Submit</StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleCancel}>\n        Cancel session\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst TextAreaStyled = styled(TextArea)`\n  margin-top: 20px;\n  resize: none;\n  height: 70%;\n`;\n\nConfirmCustomerIssue.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(ConfirmCustomerIssue);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\ConfirmCustomersIssue.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmJobSummary.js",
                                                                    "fileData": "import { Typography } from 'antd';\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\n\nconst { Title, Text } = Typography;\n\nconst ConfirmJobSummary = ({ setCurrentStep }) => {\n  const handleConfirm = () => {\n    setCurrentStep(8);\n  };\n\n  return (\n    <div>\n      <Title level={3}>Please confirm job summary</Title>\n      <Text>Please confirm the job summary</Text>\n      <StepButtonStyled onClick={handleConfirm}>Confirm</StepButtonStyled>\n      <StepButtonStyled type=\"back\">Cancel</StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nConfirmJobSummary.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(ConfirmJobSummary);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\ConfirmJobSummary.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmMatch.js",
                                                                    "fileData": "import React, { memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst ConfirmMatch = ({ setCurrentStep }) => {\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n  }, [jobId, socket]);\n\n  const handleMatchConfirm = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('match-confirmed', { id: jobId, isMatched: true });\n    setCurrentStep(1);\n  };\n  const handleNotConfirm = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('match-confirmed', { id: jobId, isMatched: false });\n    setCurrentStep(3);\n  };\n\n  return (\n    <div>\n      <h2>Is this job a match for your skills?</h2>\n      <div>\n        Please ask the customer to demonstrate the issue they are trying to\n        resolve and then confirm whether this job is a match for you\n      </div>\n      <StepButtonStyled onClick={handleMatchConfirm}>Yes</StepButtonStyled>\n      <StepButtonStyled onClick={handleNotConfirm} type=\"back\">\n        No\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nConfirmMatch.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(ConfirmMatch);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\ConfirmMatch.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmWithCustomer.js",
                                                                    "fileData": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\nimport StepButton from '../../../../components/StepButton';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst ConfirmWithCustomer = ({ setCurrentStep, estimateTime }) => {\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  const handleContinue = () => {\n     // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023 \n    // socket.emit('confirm-with-customer', { id: jobId, time: estimateTime });\n    setCurrentStep(14);\n  };\n\n  return (\n    <div>\n      <h2>Confirm With Customer</h2>\n      <p>Please explain the need to update to the customer and click confirm</p>\n      <StepButtonStyled onClick={handleContinue}>Confirm</StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nConfirmWithCustomer.propTypes = {\n  setCurrentStep: PropTypes.func,\n  estimateTime: PropTypes.number,\n};\n\nexport default memo(ConfirmWithCustomer);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\ConfirmWithCustomer.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SelectRightCategory.js",
                                                                    "fileData": "import React, { memo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nimport Select from '../../../../components/common/Select';\nimport StepButton from '../../../../components/StepButton';\nimport { openNotificationWithIcon } from '../../../../utils';\n\nconst { Option } = Select;\n\nconst SelectRightCategory = () => {\n  const history = useHistory();\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const handleContinue = () => {\n    if (selectedCategory === '') {\n      openNotificationWithIcon(\n        'error',\n        'Validation Error',\n        'Please select a category',\n      );\n      return;\n    }\n    history.replace('/dashboard');\n  };\n\n  const handleChange = value => {\n    setSelectedCategory(value);\n  };\n\n  return (\n    <div>\n      <h2>Please select the right category</h2>\n      <SelectStyled defaultValue=\"lucy\" onChange={handleChange}>\n        <Option value=\"jack\">Jack</Option>\n        <Option value=\"lucy\">Lucy</Option>\n        <Option value=\"Yiminghe\">yiminghe</Option>\n      </SelectStyled>\n      <StepButtonStyled onClick={handleContinue}>Done</StepButtonStyled>\n    </div>\n  );\n};\n\nconst SelectStyled = styled(Select)`\n  width: -webkit-fill-available;\n`;\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nSelectRightCategory.propTypes = {};\nexport default memo(SelectRightCategory);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\SelectRightCategory.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SignOffWithCustomer.js",
                                                                    "fileData": "import { FileOutlined } from '@ant-design/icons';\nimport { Typography } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Title, Text } = Typography;\n\nconst SignOffWithCustomer = ({ setCurrentStep, solutions }) => {\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  const handleConfirm = () => {\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('summarize-solution', { id: jobId, solutions });\n    setCurrentStep(12);\n  };\n\n  const handleCancel = () => {};\n\n  return (\n    <div>\n      <Title level={3}>Sign off with customer</Title>\n      <ListWrapper>\n        <ListItem>\n          <Text>Confirm resolution is ok</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Remember to save your work!</Text>\n        </ListItem>\n      </ListWrapper>\n      <StepButtonStyled onClick={handleCancel}>\n        Resolve another issue\n      </StepButtonStyled>\n      <StepButtonStyled type=\"back\" onClick={handleConfirm}>\n        Sign Off\n      </StepButtonStyled>\n\n      <Title level={3} onClick={handleConfirm}>\n        Sign off with customer\n      </Title>\n      <FilesUploadWrapper>\n        <FileUploadItem>\n          <FileOutlined style={{ fontSize: '30px' }} />\n          <Text strong style={{ marginLeft: '5px' }}>\n            final-documents.zip\n            <br />\n            <span>01/01/2021, 10:25AM</span>\n          </Text>\n        </FileUploadItem>\n        <FileUploadItem>\n          <FileOutlined style={{ fontSize: '30px' }} />\n          <Text strong style={{ marginLeft: '5px' }}>\n            final-documents.zip\n            <br />\n            <span>01/01/2021, 10:25AM</span>\n          </Text>\n        </FileUploadItem>\n        <FileUploadItem>\n          <FileOutlined style={{ fontSize: '30px' }} />\n          <Text strong style={{ marginLeft: '5px' }}>\n            final-documents.zip\n            <br />\n            <span>01/01/2021, 10:25AM</span>\n          </Text>\n        </FileUploadItem>\n        <FileUploadItem>\n          <FileOutlined style={{ fontSize: '30px' }} />\n          <Text strong style={{ marginLeft: '5px' }}>\n            final-documents.zip\n            <br />\n            <span>01/01/2021, 10:25AM</span>\n          </Text>\n        </FileUploadItem>\n        <FileUploadItem>\n          <FileOutlined style={{ fontSize: '30px' }} />\n          <Text strong style={{ marginLeft: '5px' }}>\n            final-documents.zip\n            <br />\n            <span>01/01/2021, 10:25AM</span>\n          </Text>\n        </FileUploadItem>\n      </FilesUploadWrapper>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst ListWrapper = styled.ol`\n  padding-left: 15px;\n  margin: 30px 0;\n`;\n\nconst ListItem = styled.li`\n  margin: 10px 0;\n  font-size: initial;\n`;\n\nconst FilesUploadWrapper = styled.div`\n  border: 1px solid black;\n  height: 300px;\n  padding: 10px;\n  overflow: auto;\n`;\n\nconst FileUploadItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n`;\n\nSignOffWithCustomer.propTypes = {\n  setCurrentStep: PropTypes.func,\n  solutions: PropTypes.array,\n};\n\nexport default memo(SignOffWithCustomer);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\SignOffWithCustomer.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "SummarizeSolution.js",
                                                                    "fileData": "import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Checkbox from '../../../../components/common/CheckBox';\nimport StepButton from '../../../../components/StepButton';\nimport TextArea from '../../../../components/TextArea';\n\nconst SummarizeSolution = ({ setCurrentStep, solutions, setSolutions }) => {\n  const [editMode, setEditMode] = useState(false);\n  const [curSolution, setCurSolution] = useState('');\n  const [suggestSolutions, setSuggestSolutions] = useState([\n    'Praesent gravida dui eu lacinia bibendum',\n    'Fusce porta id enim',\n    'porttitor ornare',\n    'Nulla quis quam at nisl pharetra molestie at aget donec ac ante eget est pulviar accumsan ut sit amet nisifinibus tellus',\n  ]);\n\n  const history = useHistory();\n\n  const handleChangeSolutions = (e, solution) => {\n    if (e.target.checked) {\n      setSolutions([...solutions, solution]);\n    } else {\n      setSolutions(solutions.filter(item => item !== solution));\n    }\n  };\n\n  const handleConfirm = () => {\n    setCurrentStep(13);\n  };\n\n  const handleCancel = () => {\n    history.replace('/dashboard');\n  };\n\n  const handleSaveSolution = () => {\n    setSuggestSolutions([...suggestSolutions, curSolution]);\n    setCurSolution('');\n    setEditMode(false);\n  };\n\n  return (\n    <div>\n      <h2>Summarize the solution</h2>\n\n      <JobItemsWrapper>\n        {suggestSolutions.map(item => (\n          <CheckboxStyled\n            key={item}\n            onChange={e => handleChangeSolutions(e, item)}\n          >\n            {item}\n          </CheckboxStyled>\n        ))}\n      </JobItemsWrapper>\n      {editMode && (\n        <TextAreaStyled\n          value={curSolution}\n          onChange={e => setCurSolution(e.target.value)}\n        />\n      )}\n      {!editMode ? (\n        <StepButtonStyled onClick={() => setEditMode(true)}>\n          Add\n        </StepButtonStyled>\n      ) : (\n        <>\n          <StepButtonStyled onClick={handleSaveSolution}>Save</StepButtonStyled>\n          <StepButtonStyled onClick={() => setEditMode(false)} type=\"back\">\n            Cancel\n          </StepButtonStyled>\n        </>\n      )}\n      <StepButtonStyled onClick={handleConfirm}>Confirm</StepButtonStyled>\n      <StepButtonStyled onClick={handleCancel} type=\"back\">\n        Cancel Job\n      </StepButtonStyled>\n    </div>\n  );\n};\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nconst CheckboxStyled = styled(Checkbox)`\n  margin-bottom: 20px;\n\n  margin-left: 0px !important;\n  .ant-checkbox-checked .ant-checkbox-inner {\n    background-color: ${props => props.theme.primary};\n    border-color: ${props => props.theme.primary};\n    &:focus {\n      border-color: ${props => props.theme.primary};\n    }\n    &:hover {\n      border-color: ${props => props.theme.primary};\n    }\n  }\n`;\n\nconst JobItemsWrapper = styled.div`\n  margin-top: 30px;\n`;\n\nconst TextAreaStyled = styled(TextArea)`\n  margin-top: 20px;\n  resize: none;\n  height: 70%;\n`;\n\nSummarizeSolution.propTypes = {\n  setCurrentStep: PropTypes.func,\n  solutions: PropTypes.array,\n  setSolutions: PropTypes.func,\n};\n\nexport default memo(SummarizeSolution);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\SummarizeSolution.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "TechJobInProgress.js",
                                                                    "fileData": "import React, { memo } from 'react';\n\nconst TechJobInProgress = () => <div></div>;\n\nTechJobInProgress.propTypes = {};\n\nexport default memo(TechJobInProgress);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\TechJobInProgress.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "TimeAccurate.js",
                                                                    "fileData": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport StepButton from '../../../../components/StepButton';\n\nconst TimeAccurate = ({ setCurrentStep }) => {\n  const handleYes = () => {\n    setCurrentStep(2);\n  };\n  const handleNo = () => {\n    setCurrentStep(5);\n  };\n\n  return (\n    <div>\n      <h2>Is the time estimate accurate?</h2>\n      <StepButtonStyled onClick={handleYes}>Yes</StepButtonStyled>\n      <StepButtonStyled onClick={handleNo} type=\"back\">\n        No\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nTimeAccurate.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(TimeAccurate);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\TimeAccurate.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "UpdateTimeEstimate.js",
                                                                    "fileData": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Select from '../../../../components/common/Select';\nimport StepButton from '../../../../components/StepButton';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst { Option } = Select;\n\nconst UpdateTimeEstimate = ({ setCurrentStep, estimateTime, onUpdate }) => {\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  const handleContinue = () => {\n    if (!estimateTime) {\n      openNotificationWithIcon(\n        'error',\n        'validation',\n        'Please select a time entry',\n      );\n      return;\n    }\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.emit('update-time-confirmation', { id: jobId, time: estimateTime });\n    setCurrentStep(6);\n  };\n\n  const handleChange = value => {\n    onUpdate(value);\n  };\n\n  return (\n    <div>\n      <h2>\n        Please update the time estimate and submit to customer for confirmation\n      </h2>\n      <SelectStyled onChange={handleChange}>\n        <Option value={30}>30 mins</Option>\n        <Option value={40}>40 mins</Option>\n        <Option value={50}>50 mins</Option>\n      </SelectStyled>\n      <StepButtonStyled onClick={handleContinue}>Done</StepButtonStyled>\n    </div>\n  );\n};\n\nconst SelectStyled = styled(Select)`\n  width: -webkit-fill-available;\n`;\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nUpdateTimeEstimate.propTypes = {\n  setCurrentStep: PropTypes.func,\n  onUpdate: PropTypes.func,\n  estimateTime: PropTypes.number,\n};\n\nexport default memo(UpdateTimeEstimate);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\UpdateTimeEstimate.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WaitForIssueSummaryConfirmation.js",
                                                                    "fileData": "import React, { memo, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Progress } from 'antd';\nimport styled from 'styled-components';\nimport { useSocket } from '../../../../context/socketContext';\nimport { useJob } from '../../../../context/jobContext';\n\nconst WaitForIssueSummaryConfirmation = ({ setCurrentStep }) => {\n  const history = useHistory();\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n  const { fetchJob } = useJob();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.on('confirm-issue-summary', async (confirmed) => {\n    //   if (confirmed) {\n    //     await fetchJob(jobId);\n    //     setCurrentStep(11);\n    //   } else {\n    //     history.replace('/dashboard');\n    //   }\n    // });\n  }, [fetchJob, history, jobId, setCurrentStep, socket]);\n\n  return (\n    <div>\n      <h2>Wait for customer to confirm the solution</h2>\n      <ProgressStyled percent={80} showInfo={false} />\n    </div>\n  );\n};\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\nWaitForIssueSummaryConfirmation.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(WaitForIssueSummaryConfirmation);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\WaitForIssueSummaryConfirmation.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WaitForSolutionConfirmation.js",
                                                                    "fileData": "import React, { memo, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Progress } from 'antd';\nimport styled from 'styled-components';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst WaitForSolutionConfirmation = () => {\n  const history = useHistory();\n  const { jobId } = useParams();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.on('confirm-solution', confirmed => {\n    //   if (confirmed) {\n    //     openNotificationWithIcon(\n    //       'success',\n    //       'Success',\n    //       'Customer confirmed your solution',\n    //     );\n    //   } else {\n    //     history.replace('/dashboard');\n    //   }\n    // });\n  }, [history, jobId, socket]);\n\n  return (\n    <div>\n      <h2>Wait for customer to confirm the solution</h2>\n      <ProgressStyled percent={80} showInfo={false} />\n    </div>\n  );\n};\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\nWaitForSolutionConfirmation.propTypes = {};\n\nexport default memo(WaitForSolutionConfirmation);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\WaitForSolutionConfirmation.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WaitForTimeEstimateApprove.js",
                                                                    "fileData": "import React, { memo, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Progress } from 'antd';\nimport styled from 'styled-components';\nimport { useJob } from '../../../../context/jobContext';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst WaitForTimeEstimateApprove = ({ setCurrentStep }) => {\n  const history = useHistory();\n  const { jobId } = useParams();\n  const { fetchJob } = useJob();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    socket.emit('join', jobId);\n    // NOTE  : This socket is commented by Jagroop under ticket GK-171  : 28-04-2023\n    // socket.on('time-estimate-approve', async approved => {\n    //   if (approved) {\n    //     await fetchJob(jobId);\n    //     setCurrentStep(2);\n    //   } else {\n    //     history.replace('/dashboard');\n    //   }\n    // });\n  }, [fetchJob, history, jobId, setCurrentStep, socket]);\n\n  return (\n    <div>\n      <h2>Wait for customer to confirm the time</h2>\n      <ProgressStyled percent={80} showInfo={false} />\n    </div>\n  );\n};\nconst ProgressStyled = styled(Progress)`\n  .ant-progress-success-bg,\n  .ant-progress-bg {\n    background-color: #464646;\n  }\n  .ant-progress-text {\n    color: white !important;\n  }\n`;\nWaitForTimeEstimateApprove.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(WaitForTimeEstimateApprove);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\WaitForTimeEstimateApprove.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WrongCategory.js",
                                                                    "fileData": "import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Checkbox from '../../../../components/common/CheckBox';\n\nimport StepButton from '../../../../components/StepButton';\nimport { openNotificationWithIcon } from '../../../../utils';\n\nconst WrongCategory = ({ setCurrentStep }) => {\n  const history = useHistory();\n  const [tier2, settier2] = useState(false);\n  const [wrongCategory, setWrongCategory] = useState(false);\n\n  const handleContinue = () => {\n    if (!tier2 && !wrongCategory) {\n      openNotificationWithIcon(\n        'error',\n        'Validation error',\n        'Please select at least one option',\n      );\n      return;\n    }\n\n    if (wrongCategory) {\n      setCurrentStep(4);\n      return;\n    }\n    history.replace('/dashboard');\n  };\n\n  return (\n    <div>\n      <h2>Please select the right category</h2>\n      <div>\n        <CheckboxStyled name=\"toer2\" onChange={e => settier2(e.target.checked)}>\n          Tier 2 Job\n        </CheckboxStyled>\n      </div>\n      <div>\n        <CheckboxStyled\n          name=\"wrongCategory\"\n          onChange={e => setWrongCategory(e.target.checked)}\n        >\n          Wrong category\n        </CheckboxStyled>\n      </div>\n      <StepButtonStyled htmlType=\"submit\" onClick={handleContinue}>\n        Continue\n      </StepButtonStyled>\n    </div>\n  );\n};\n\nconst CheckboxStyled = styled(Checkbox)`\n  .ant-checkbox-checked .ant-checkbox-inner {\n    background-color: ${props => props.theme.primary};\n    border-color: ${props => props.theme.primary};\n    &:focus {\n      border-color: ${props => props.theme.primary};\n    }\n    &:hover {\n      border-color: ${props => props.theme.primary};\n    }\n  }\n`;\n\nconst StepButtonStyled = styled(StepButton)`\n  width: -webkit-fill-available;\n  margin-left: 0px !important;\n  margin-top: 30px !important;\n`;\n\nWrongCategory.propTypes = {\n  setCurrentStep: PropTypes.func,\n};\n\nexport default memo(WrongCategory);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\JobProgress\\steps\\WrongCategory.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Profile",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useState } from 'react';\nimport { Col, Tabs, Tab } from 'react-bootstrap';\nimport { useUser } from '../../../context/useContext';\n\nimport ScreenSteps from '../../../components/ScreenSteps';\nimport ProfileReview from './step/profileReview';\nimport CompleteProfile from './step/completeProfile';\nimport WatchVideo from './step/watchVideo';\nimport TestQuiz from './step/testQuiz';\n// import LeftSidebar from '../../../components/Sidebar/LeftSidebar';\nimport Loader from '../../../components/Loader';\n\nconst TechnicianProfile = ({estimatedWaitTime, setEstimatedWaitTime}) => {\n  const { user, refetch, isLoading } = useUser();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [showLoader, setShowLoader] = useState(false);\n  const onNext = () => {\n    if (currentStep === 3) {\n      // history.push('./dashboard');\n    }\n    setCurrentStep(currentStep + 1);\n    setShowLoader(false);\n  };\n  const onPrev = () => {\n    setCurrentStep(currentStep - 1);\n  };\n\n  const steps = [{\n    title: 'profileReview',\n    content: <ProfileReview user={user} estimatedWaitTime={estimatedWaitTime} setEstimatedWaitTime={setEstimatedWaitTime} />,\n  },\n  {\n    title: 'completeProfile',\n    content: (\n      <CompleteProfile onPrev={onPrev} onNext={onNext} userInfo={user} />\n    ),\n  },\n  {\n    title: 'watchVideo',\n    content: <WatchVideo onNext={onNext} onPrev={onPrev} />,\n  },\n  {\n    title: 'testQuiz',\n    content: <TestQuiz onNext={onNext} onPrev={onPrev} userInfo={user} />,\n  }];\n\n  useEffect(() => {\n    refetch();\n  }, []);\n\n  if (!user || isLoading) return (<></>);\n\n  return (\n\n        <>\n          \n            <Loader height=\"100%\" className={(showLoader ? 'loader-outer' : 'd-none')} />\n\n            <Col md=\"12\" className=\"py-4 mt-1\">\n              <Col xs=\"12\" className=\"p-0\">\n                <Tabs defaultActiveKey=\"Manage Account\" id=\"uncontrolled-tab-example\" className=\"mb-3 tabs-outer\">\n                  <Tab eventKey=\"Manage Account\" title=\"Manage Account\" className=\"col-md-12 p-0\">\n                    <ScreenSteps stepsContent={steps[0].content} />\n                  </Tab>\n                  <Tab eventKey=\"Profile Settings\" title=\"Profile Settings\" className=\"col-md-12 p-0\">\n                    <ScreenSteps stepsContent={steps[1].content} />\n                  </Tab>\n                  {/*<Tab eventKey=\"Payment Settings\" title=\"Payment Settings\" className=\"col-md-12 p-0\">\n                    <h3 className=\"text-center\">Coming soon...</h3>\n                  </Tab>*/}\n                </Tabs>\n\n              </Col>\n            </Col>\n        </>\n  );\n};\n\nexport default TechnicianProfile;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\index.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "messages.js",
                                                            "fileData": "import { defineMessages } from 'react-intl';\n\nexport const scope = 'app.containers.CompleteTechProfilePage';\nexport const form = 'app.form.error';\n\nexport default defineMessages({\n  email: {\n    id: `${form}.email`,\n    defaultMessage: 'Please input your E-mail.',\n  },\n  emailVail: {\n    id: `${form}.emailVail`,\n    defaultMessage: 'Check the format of the email you entered.',\n  },\n  address: {\n    id: `${form}.address`,\n    defaultMessage: 'Please input your address.',\n  },\n  city: {\n    id: `${form}.city`,\n    defaultMessage: 'Please input your city.',\n  },\n  state: {\n    id: `${form}.state`,\n    defaultMessage: 'Please input your state.',\n  },\n  zip: {\n    id: `${form}.zip`,\n    defaultMessage: 'Please input your zip.',\n  },\n  phoneNumber: {\n    id: `${form}.phoneNumber`,\n    defaultMessage: 'Please input your Phone Number.',\n  },\n  dd: {\n    id: `${form}.phoneNumber`,\n    defaultMessage: 'Please input your Driver Licence Number.',\n  },\n  routingNumber: {\n    id: `${form}.routingNumber`,\n    defaultMessage: 'Please input your routing number.',\n  },\n  accountNumber: {\n    id: `${form}.accountNumber`,\n    defaultMessage: 'Please input your account number.',\n  },\n  profileDescription:{\n    id: `${form}.profileDescription`,\n    defaultMessage: 'Please input your profile description.', \n  },\n  profileDescExceedsLimit:{\n    id: `${form}.profileDescExceedsLimit`,\n    defaultMessage: 'You can enter less than or equal to 800 characters.', \n  }\n});\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\messages.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "step",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "completeProfile.js",
                                                                    "fileData": "import { Row } from 'antd';\n// import PropTypes from 'prop-types';\nimport React, {\n  memo, useState,\n} from 'react';\nimport styled from 'styled-components';\n// import { Button } from 'react-bootstrap';\nimport Collapse from '../../../../components/Collapse';\n// import StepButton from '../../../../components/StepButton';\n// import { StepActionContainer } from './style';\n// import Agreement from './Component/agreement';\nimport AlertPreference from './Component/alertPreferences';\nimport BankAccountInfo from './Component/bankAccountInfo';\nimport ConfirmId from './Component/confirmId';\nimport ConfirmAddress from './Component/address';\nimport ConfirmYourSchedule from './Component/ConfirmYourSchedule';\nimport ReviewGuide from './Component/reviewGuide';\nimport SystemRequirement from './Component/systemRequirement';\n// import UploadFile from './Component/upload';\nimport EditResume from './Component/resume';\nimport UploadAvatar from './Component/uploadAvatar';\nimport ProfileDescription from './Component/ProfileDescription';\n// import * as TechnicianApi from '../../../../api/technician.api';\n\n// import { useUser } from '../../../../context/useContext';\n\n/*const profileSectionMap = [\n  {\n    label: 'Upload Profile Photo',\n    value: 'profileImage',\n  },\n  {\n    label: 'Confirm your ID',\n    value: 'confirmId',\n  },\n  {\n    label: 'Bank Account Info',\n    value: 'bankAccount',\n  },\n  {\n    label: 'Confirm Your Schedule',\n    value: 'schedule',\n  },\n  {\n    label: 'System Requirements Test',\n    value: 'systemRequirement',\n  },\n  {\n    label: 'Set Your Alert Preferences',\n    value: 'alertPreference',\n  },\n  {\n    label: 'Review Guidlines and Best Practices',\n    value: 'reviewGuide',\n  },\n];*/\n\nfunction CompleteProfile(props) {\n  // const { onNext } = props;\n  // const { user } = useUser();\n\n  const [techProfile, setTechProfile] = useState({\n    profileImage: {\n      complete: false,\n    },\n    profileDescription:{\n      complete: false,\n    },\n    confirmId: {\n      complete: false,\n    },\n    bankAccount: {\n      complete: false,\n    },\n    schedule: {\n      complete: false,\n    },\n    systemRequirement: {\n      complete: false,\n    },\n    alertPreference: {\n      complete: false,\n    },\n    reviewGuide: {\n      complete: false,\n    },\n  });\n\n  /*const openNotificationWithIcon = (type, header, message) => {\n    notification[type]({\n      message: header,\n      description: message,\n    });\n  };*/\n\n  /*const handleConfirm = useCallback(async () => {\n    const uncompletedProfiles = [];\n    let validateProfile = true;\n    Object.keys(techProfile).forEach(item => {\n      if (!techProfile[item].complete) {\n        validateProfile = false;\n        uncompletedProfiles.push(\n          profileSectionMap.find(m => m.value === item).label,\n        );\n      }\n    });\n    if (validateProfile) {\n      try {\n        await TechnicianApi.updateTechnician(user?.technician?.id, techProfile);\n        openNotificationWithIcon(\n          'success',\n          'Success',\n          'Profile created successfully',\n        );\n        setTimeout(() => {\n          onNext();\n        }, 1000);\n      } catch (e) {\n        openNotificationWithIcon('error', 'Error', 'Failed create profile.');\n      }\n    } else {\n      openNotificationWithIcon(\n        'error',\n        'The following steps are not completed:',\n        <div>\n          {uncompletedProfiles.map(item => (\n            <div key={item}>\n              {item}\n              .\n            </div>\n          ))}\n        </div>,\n      );\n    }\n  }, [onNext, techProfile, user]);*/\n\n  const profileSections = {\n    'Choose Image Profile': {\n      complete: techProfile.profileImage.complete,\n      children: (\n        <UploadAvatar\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'Profile Description': {\n      complete: techProfile.profileDescription.complete,\n      children: (\n      <ProfileDescription\n      setTechProfile={setTechProfile}\n      techProfile={techProfile}\n      />\n       ),\n    },\n    \n    'Confirm your ID': {\n      complete: techProfile.confirmId.complete,\n      children: (\n        <ConfirmId setTechProfile={setTechProfile} techProfile={techProfile} />\n      ),\n    },\n    'Confirm your Address': {\n      complete: techProfile.confirmId.complete,\n      children: (\n        <ConfirmAddress setTechProfile={setTechProfile} techProfile={techProfile} />\n      ),\n    },\n    'Bank Account Info': {\n      complete: techProfile.bankAccount.complete,\n      children: (\n        <BankAccountInfo\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'Confirm Your Schedule': {\n      complete: techProfile.schedule.complete,\n      children: (\n        <ConfirmYourSchedule\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'System Requirements Test': {\n      complete: techProfile.systemRequirement.complete,\n      children: (\n        <SystemRequirement\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'Modify Alert Notifications': {\n      complete: techProfile.alertPreference.complete,\n      children: (\n        <AlertPreference\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'Review Guidelines and Best Practices': {\n      complete: techProfile.reviewGuide.complete,\n      children: (\n        <ReviewGuide\n          setTechProfile={setTechProfile}\n          techProfile={techProfile}\n        />\n      ),\n    },\n    'Your Resume': {\n      complete: techProfile.resume != \"\",\n      children: (\n        <EditResume/>\n      ),\n    },\n  };\n\n  const initStep = step => {\n    console.log(\"asd\",step)\n    const index = Object.keys(profileSections).indexOf(step);\n    if (index === -1) return;\n\n    const key = Object.keys(techProfile)[index];\n\n    setTechProfile({\n      ...techProfile,\n      [key]: {\n        completed: false,\n      },\n    });\n  };\n\n  return (\n    <Container>\n      <BodyContainer>\n        {Object.keys(profileSections).map(item => (\n          <Section key={item}>\n           \n            <Collapse\n              defaultActiveKey={['1']}\n              headerTitle={item}\n              initStep={() => initStep(item)}\n              complete = {profileSections[item].complete}\n            >\n              {profileSections[item].children}\n            </Collapse>\n          </Section>\n        ))}\n      </BodyContainer>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  \n`;\n\nconst BodyContainer = styled.div`\n  \n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 40px;\n  flex: 1;\n`;\n\nconst Section = styled(Row)`\n  width: 100%;\n  margin-bottom: 30px;\n`;\nCompleteProfile.propTypes = {\n  // onNext: PropTypes.func,\n  // onPrev: PropTypes.func,\n};\n\nexport default memo(CompleteProfile);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\completeProfile.js"
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "Component",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "address.js",
                                                                            "fileData": "import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Row, Col, Form } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from 'react-bootstrap';\nimport messages from '../../messages';\nimport ItemLabel from '../../../../../components/ItemLabel';\n// import StepButton from '../../../../../components/StepButton';\nimport AuthInput from '../../../../../components/AuthLayout/Input';\nimport FormItem from '../../../../../components/FormItem';\nimport CheckBox from '../../../../../components/common/CheckBox';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport UploadFile from './upload';\n// import Box from '../../../../../components/common/Box';\nimport { useUser } from '../../../../../context/useContext';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport {\n  CitySelect,\n  CountrySelect,\n  StateSelect,\n  LanguageSelect,\n  GetCountries,\n  GetState,\n  GetCity,\n  GetLanguages,\n} from \"react-country-state-city\";\nimport \"react-country-state-city/dist/react-country-state-city.css\";\n\nfunction ConfirmAddress(props) {\n  // const [initialData, setInitialData] = useState({});\n  const confirmRef = useRef();\n\n  const { setTechProfile, techProfile } = props;\n  const { user } = useUser();\n  const [addressLine1, setAddressLine1] = useState(user.technician.profile.confirmId.address1 ? user.technician.profile.confirmId.address1 : \"\")\n  const [addressLine2, setAddressLine2] = useState(user.technician.profile.confirmId.address2 ? user.technician.profile.confirmId.address2 : \"\")\n  const [zipcode, setZipcode] = useState( user.technician.profile.confirmId.zip ? user.technician.profile.confirmId.zip : \"\")\n  const [city, setCity] = useState(user.technician.profile.confirmId.cityObject ? user.technician.profile.confirmId.cityObject.name : \"\")\n  const [cityObject, setCityObject] = useState(user.technician.profile.confirmId.cityObject ? user.technician.profile.confirmId.cityObject : {})\n  const [state, setState] = useState(user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject.name : \"\")\n  const [stateObject, setStateObject] = useState(user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject : {})\n  const [country, setCountry] = useState(user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject.name : \"\")\n  const [countryObject, setCountryObject] = useState(user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject : {})\n  const [countryid, setCountryid] = useState(user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject.id : 0);\n  const [stateid, setstateid] = useState(user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject.id : 0);\n\n  useEffect(()=>{\n    console.log(\"My conosle for checking values\", {addressLine1, addressLine2, country, state, city, zipcode})\n  },[addressLine1, addressLine2, country, state, city, zipcode])\n\n  useEffect(() => {\n    if (user.technician.profile.confirmId) {\n      confirmRef.current.setFieldsValue(user.technician.profile.confirmId);\n      // setInitialData(user.technician.profile.confirmId);\n    }\n\n    const temptechProfile = { ...techProfile };\n    temptechProfile.confirmId.complete = true;\n    setTechProfile(temptechProfile);\n\n  }, []);\n\n  const handleComplete = e => {\n\n    if(addressLine1 === \"\"){\n      openNotificationWithIcon('error','Error','Please provide your address to submit data.')\n      return\n    }\n    \n    if(country === \"\"){\n      openNotificationWithIcon('error','Error','Please enter your country to submit data.')\n      return\n    }\n\n    const tempVal = { ...e, \n                      imageUrl: user.technician.profile.confirmId.imageUrl,\n                      address1 : addressLine1,\n                      address2 : addressLine2,\n                      city : city,\n                      cityObject : cityObject,\n                      zip : zipcode,\n                      state : state,\n                      stateObject : stateObject,\n                      country : country,\n                      countryObject : countryObject\n                    };\n    console.log('tempVal>>>>>>>>>>>>>>>>>>',tempVal)\n    TechnicianApi.updateTechnician(user.technician.id, { profileImage: false, confirmId: { ...tempVal } });\n    setTechProfile(prev => ({\n      ...prev,\n      confirmId: {\n        ...prev.confirmId,\n        ...e,\n        complete:\n          // !!techProfile.confirmId.confirmed && !!techProfile.confirmId.imageUrl,\n          !!techProfile.confirmId.address1,\n      },\n    }));\n    openNotificationWithIcon('success', 'Success', 'Information Submitted');\n  };\n\n  return (\n    <Container>\n      <ItemLabel>\n        {`Please submit your address.\n        This is for our records, and to ensure everything is in order.`}\n      </ItemLabel>\n      <Form onFinish={handleComplete} ref={confirmRef}>\n        <FormContainer>\n          <FormSection gutter={16}>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>Address Line 1 *</label>\n              <input\n                type=\"text\"\n                name=\"address\"\n                className='settings-address-input'\n                onChange={(e)=>setAddressLine1(e.target.value.trim())}\n                defaultValue={user.technician.profile.confirmId.address1}\n              />\n              {/* <ItemLabel>Your Address</ItemLabel>\n              <FormItem\n                name=\"address\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.address} />,\n                  },\n                ]}\n              >\n                <AuthInput\n                  name=\"address\"\n                  size=\"large\"\n                  placeholder=\"Your Address\"\n                />\n              </FormItem> */}\n            </Col>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>Address Line 2</label>\n              <input\n                type=\"text\"\n                className='settings-address-input'\n                onChange={(e)=>setAddressLine2(e.target.value.trim())}\n                defaultValue={user.technician.profile.confirmId.address2}\n              />\n            </Col>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>Country *</label>\n              <CountrySelect\n                containerClassName=\"mb-24\"\n                inputClassName=\"country-select-input\"\n                onChange={(e) => {\n                  setCountryid(e.id);\n                  setCountry(e.name)\n                  setCountryObject(e)\n                  console.log(\"Country selected\", e)\n                }}\n                name=\"country\"\n                placeHolder=\"Select Country\"\n                defaultValue={user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject : \"\"}\n              />\n            </Col>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>State</label>\n              <StateSelect\n                containerClassName=\"mb-24\"\n                inputClassName=\"country-select-input\"\n                countryid={countryid}\n                onChange={(e) => {\n                  setstateid(e.id);\n                  setState(e.name)\n                  setStateObject(e)\n                  console.log(\"State selected\", e)\n                }}\n                name=\"state\"\n                placeHolder=\"Select State\"\n                defaultValue={user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject : \"\"}\n              />\n            </Col>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>City</label>\n              <CitySelect\n                containerClassName=\"mb-24\"\n                inputClassName=\"country-select-input\"\n                countryid={countryid}\n                stateid={stateid}\n                onChange={(e) => {\n                  setCity(e.name)\n                  setCityObject(e)\n                  console.log(\"City selected\", e)\n                }}\n                name=\"city\"\n                placeHolder=\"Select City\"\n                defaultValue={user.technician.profile.confirmId.cityObject ? user.technician.profile.confirmId.cityObject : \"\"}\n              />\n            </Col>\n            <Col span={12} className=\"d-flex flex-column\">\n              <label className='mb-10'>Zip</label>\n              <input\n                type=\"text\"\n                name='zip'\n                className='settings-address-input'\n                onChange={(e)=>setZipcode(e.target.value.trim())}\n                defaultValue={user.technician.profile.confirmId.zip ? user.technician.profile.confirmId.zip : \"\" }\n              />\n            </Col>\n          </FormSection>\n            {/* <Col span={12}>\n              <ItemLabel>City</ItemLabel>\n              <FormItem\n                name=\"city\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.city} />,\n                  },\n                ]}\n              >\n                <AuthInput name=\"city\" size=\"large\" placeholder=\"City\" />\n              </FormItem>\n            </Col>\n          <FormSection gutter={16}>\n            <Col span={12}>\n              <FormItem\n                name=\"state\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.state} />,\n                  },\n                ]}\n              >\n                <AuthInput name=\"state\" size=\"large\" placeholder=\"State\" />\n              </FormItem>\n            </Col>\n            <Col span={12}>\n              <FormItem\n                name=\"zip\"\n                placeholder=\"ZIP\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.zip} />,\n                  },\n                ]}\n              >\n                <AuthInput name=\"zip\" size=\"large\" placeholder=\"ZIP\" />\n              </FormItem>\n            </Col>\n          </FormSection> */}\n        </FormContainer>\n        <Button type=\"submit\" className=\"btn app-btn\">\n          <span />\n          Save\n        </Button>\n\n      </Form>\n    </Container>\n  );\n}\n\nConfirmAddress.propTypes = {\n  setTechProfile: PropTypes.func,\n  techProfile: PropTypes.object,\n};\n\nConfirmAddress.defaultProps = {\n  setTechProfile: () => {},\n  techProfile: {},\n};\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n`;\nconst FormSection = styled(Row)`\n  width: 100%;\n  margin: 20px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst ConfirmContainer = styled.div`\n  padding-top: 20px;\n  padding-bottom: 30px;\n`;\nexport default ConfirmAddress;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\address.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "agreement.js",
                                                                            "fileData": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Row, Col, Typography, Modal, Space,\n} from 'antd';\nimport {Button} from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport ItemLabel from '../../../../../components/ItemLabel';\nimport CheckBox from '../../../../../components/common/CheckBox';\n// import StepButton from '../../../../../components/StepButton';\nimport InputNumber from '../../../../../components/common/InputNumber';\nimport TechImages from '../../../../../components/TechImages';\nimport Box from '../../../../../components/common/Box';\nimport * as SoftwareService from '../../../../../api/software.api';\nconst { Text } = Typography;\nfunction Agreement(props) {\n  const { user, setTechProfile, techProfile } = props;\n  const [rates, setRates] = useState({});\n  console.log(\"user in agreement :: \",user)\n  const { technician: { expertise = [] } = {} } = user;\n\n  const handleAgreement = () => {\n    setTechProfile(prev => ({\n      ...prev,\n      agreement: {\n        ...prev.agreement,\n        complete: true,\n        rates,\n      },\n    }));\n  };\n\n  return (\n    <Container>\n      <Label>YOUR RATES & TIERS</Label>\n      <Row>\n        {expertise.map((item, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Box display=\"flex\" key={index} width=\"50%\" marginTop={30}>\n             {  item.software_id \n              ?\n                <SoftwareTabs item={item} /> \n             :\n              <></> }\n          </Box>\n        ))}\n        <LicenseeText>\n          The Licensee may permit its employees to use the Asset for the\n          purposes described in Item 8, provided that the Licensee takes all\n          necessary steps and imposes the necessary conditions to ensure that\n          all employees using the Asset do not commercialize or disclose the\n          contents of it to any third person, or use it other than in accordance\n          with the terms of this Agreement. The Licensee acknowledges and agrees\n          that neither Licensor nor its board members, officers, employees or\n          agents, will be liable for any loss or damage arising out of or\n          resulting from Licensor\u2019s provision of the Asset under this Agreement,\n          or any use of the Asset by the Licensee or its employees; and Licensee\n          hereby releases Licensor to the fullest extent from any such\n          liability, loss, damage or claim.\n        </LicenseeText>\n        <Link to=\"/full-agreement\">\n          <Label> Read Full Agreement Here</Label>\n        </Link>\n        <LicenseeCheckContainer span={24}>\n          <CheckBox\n            onChange={e => {\n              setTechProfile(prev => ({\n                ...prev,\n                agreement: {\n                  ...prev.agreement,\n                  acceptTerms: e.target.checked,\n                  complete: e.target.checked ? prev.agreement.complete : false,\n                },\n              }));\n            }}\n          >\n            I accept Terms and Conditions\n          </CheckBox>\n        </LicenseeCheckContainer>\n        <Box display=\"flex\" justifyContent=\"flex-end\" width=\"100%\" marginTop={30}>\n          <Button\n            disabled={!techProfile.agreement.acceptTerms}\n            onClick={handleAgreement}\n            className=\"btn app-btn\"\n          >\n            <span></span>\n            Accept\n          </Button>\n        </Box>\n      </Row>\n    </Container>\n  );\n}\n\nconst SpecialItems = props => {\n  const {\n    itemIndex, image, experience, expertise, setRates, rates,\n  } = props;\n  const [modalView, setModalView] = useState(false);\n  const ratesCloned = JSON.parse(JSON.stringify(rates));\n  const softwareName = experience?.software?.name;\n\n  const handleChangeRate = value => {\n    if (!ratesCloned[softwareName]) {\n      ratesCloned[softwareName] = {\n        [expertise?.expertise?.name]: {\n          price: value,\n        },\n      };\n    } else if (!ratesCloned[softwareName][expertise?.expertise?.name]) {\n      ratesCloned[softwareName] = {\n        ...ratesCloned[softwareName],\n        [expertise?.expertise?.name]: {\n          price: value,\n        },\n      };\n    } else {\n      ratesCloned[softwareName][expertise?.expertise?.name].price = value;\n    }\n  };\n\n  return (\n    <SoftwareRightContainer>\n      <RoundNumber>{itemIndex + 1}</RoundNumber>\n      <AmountContainer>\n        <Amount>\n          $\n          {(rates && rates[softwareName]\n            && rates[softwareName][expertise?.expertise?.name]\n            && rates[softwareName][expertise?.expertise?.name].price)\n            || 35}\n        </Amount>\n        <Mins>/15 mins</Mins>\n      </AmountContainer>\n      <EditImage src={image} onClick={() => setModalView(true)} />\n\n      <Modal\n        title={`${experience?.software?.name} (${expertise?.expertise?.name})`}\n        centered\n        visible={modalView}\n        onOk={() => {\n          setModalView(false);\n          setRates(ratesCloned);\n        }}\n        onCancel={() => setModalView(false)}\n      >\n        <ItemLabel>Rate:</ItemLabel>\n        <Space style={{ width: '100%' }} align=\"center\">\n          <InputNumber\n            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n            style={{ width: '100%' }}\n            defaultValue={\n              rates[softwareName]\n              && rates[softwareName][expertise?.expertise?.name]\n              && rates[softwareName][expertise?.expertise?.name].price || 35\n            }\n            onChange={handleChangeRate}\n          />\n          <ItemLabel>/15 mins</ItemLabel>\n        </Space>\n      </Modal>\n    </SoftwareRightContainer>\n  );\n};\n\nSpecialItems.propTypes = {\n  itemIndex: PropTypes.number,\n  image: PropTypes.string,\n  experience: PropTypes.string,\n  software: PropTypes.string,\n  setRates: PropTypes.func,\n  rates: PropTypes.object,\n};\n\nSpecialItems.defaultProps = {\n  itemIndex: '',\n  image: '',\n  experience: '',\n  software: '',\n  rates: {},\n};\n\nAgreement.propTypes = {\n  user: PropTypes.object,\n  setTechProfile: PropTypes.func,\n  techProfile: PropTypes.object,\n};\n\nAgreement.defaultProps = {\n  user: {},\n  techProfile: {},\n};\n\n\n\nconst SoftwareTabs = async (props)=>{\n  console.log(props.item)\n\n  const software = await SoftwareService.retrievesoftware(props.item.software_id)\n  console.log()\n  // software.then((res)=>{\n  //   return <h1>{res.name}</h1>\n  // })\n  \n   // <SoftwareImage\n   //            src={TechImages[props.item.parent] || TechImages.otherSoftware}\n   //          /> :  <SoftwareImage\n   //          src={\"\"}\n   //        /> \n}\n\nconst Label = styled(ItemLabel)`\n  font-weight: bold;\n  color: #868383;\n`;\nconst LicenseeText = styled(ItemLabel)`\n  margin-top: 50px;\n  line-height: 30px;\n`;\nconst Amount = styled(Text)`\n  font-size: 23px;\n  font-weight: bold;\n`;\nconst LicenseeCheckContainer = styled(Col)`\n  margin-top: 30px;\n`;\nconst Mins = styled(Text)`\n  font-size: 16px;\n`;\nconst AmountContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  margin-left: 20px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst SoftwareImage = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\nconst EditImage = styled.img`\n  width: 20px;\n  height: 20px;\n  margin-left: 30px;\n  cursor: pointer;\n`;\n\nconst SoftwareRightContainer = styled.div`\n  display: flex;\n  margin-left: 40px;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 30px;\n`;\nconst RoundNumber = styled(Text)`\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background: #d0d0d0;\n  display: flex;\n  margin: 0;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n`;\n\nexport default Agreement;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\agreement.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "alertPreferences.js",
                                                                            "fileData": "import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n\tCol,\n\tSwitch,\n\tRow,\n\tTypography,\n\tSpace,\n\tnotification,\n\tForm,\n} from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from 'react-bootstrap';\nimport ItemLabel from '../../../../../components/ItemLabel';\n// import StepButton from '../../../../../components/StepButton';\nimport AuthInput from '../../../../../components/AuthLayout/Input';\nimport FormItem from '../../../../../components/FormItem';\nimport messages from '../../messages';\nimport Box from '../../../../../components/common/Box';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport { useUser } from '../../../../../context/useContext';\nimport PhoneInput from 'react-phone-input-2';\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\n\n\nconst { Text } = Typography;\nfunction AlertPreference({ setTechProfile, techProfile }) {\n\tconst { user } = useUser();\n\n\tconst openNotificationWithIcon = (type, header, message) => {\n\t\tnotification[type]({\n\t\t\tmessage: header,\n\t\t\tdescription: message,\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (user.technician.profile.alertPreference) {\n\t\t\tconst demoObj = user.technician.profile.alertPreference;\n\t\t\tif (demoObj && Object.keys(demoObj).length > 0) {\n\t\t\t\tconst temptechProfile = { ...techProfile };\n\t\t\t\ttemptechProfile.alertPreference.complete = true;\n\t\t\t\tsetTechProfile(temptechProfile);\n\t\t\t\tsetSettings(user.technician.profile.alertPreference.settings);\n\t\t\t}\n\t\t}\n\t}, [user.technician.profile.alertPreference]);\n\n\tconst [isNoOneSelected, setIsNoOneSelected] = useState(false);\n\n\tconst setPhone = (value, data, event, formattedValue) => {\n\t\tif(event.target){\n\t\t\tconst keys = event.target.name.split('|')[0];\n\t\t\tconst setting_val = event.target.name.split('|')[1];\n\t\t\tconst duplDict = { ...settings };\n\t    \tduplDict[keys][setting_val].value = value;\n\t    \tsetSettings(duplDict);\n\t\t}\n\t};\n\tconst setEmail = (e) => {\n\t\tconst keys = e.target.name.split('|')[0];\n\t\tconst setting_val = e.target.name.split('|')[1];\n\n\t\tconst duplDict = { ...settings };\n\t\tduplDict[keys][setting_val].value = e.target.value;\n\t\tsetSettings(duplDict);\n\t};\n\tconst [settings, setSettings] = useState({\n\t\tJob: {\n\t\t\tBrowser: {\n\t\t\t\ttoggle: true,\n\t\t\t\tvalue: true,\n\t\t\t\ttype: 'button',\n\t\t\t\terror: null,\n\t\t\t},\n\t\t\tEmail: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'email',\n\t\t\t\terror: null,\n\t\t\t},\n\t\t\tText: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'number',\n\t\t\t\terror: null,\n\t\t\t},\n\t\t\tWhatsapp: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'number',\n\t\t\t\terror: null,\n\t\t\t},\n\t\t},\n\t\tTechs: {\n\t\t\tBrowser: {\n\t\t\t\ttoggle: true,\n\t\t\t\tvalue: true,\n\t\t\t\ttype: 'button',\n\t\t\t},\n\t\t\tEmail: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'email',\n\t\t\t},\n\t\t\tText: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'number',\n\t\t\t},\n\t\t\tWhatsapp: {\n\t\t\t\ttoggle: false,\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'number',\n\t\t\t},\n\t\t},\n\t});\n\tconst handleChangeSetting = (e, type, item) => {\n\t\tsetSettings(prev => ({\n\t\t\t...prev,\n\t\t\t[type]: {\n\t\t\t\t...prev[type],\n\t\t\t\t[item]: {\n\t\t\t\t\t...prev[type][item],\n\t\t\t\t\ttoggle: e,\n\t\t\t\t},\n\t\t\t},\n\t\t}));\n\t};\n\n\tuseEffect(() => {\n\n\t\tif (settings) {\n\t\t\tconst filterJob = Object.keys(settings.Job).filter(\n\t\t\t\titem => settings.Job[item].toggle === false,\n\t\t\t);\n\t\t\tconst filterTech = Object.keys(settings.Techs).filter(\n\t\t\t\titem => settings.Techs[item].toggle === false,\n\t\t\t);\n\t\t\tif (filterJob.length === 4 && filterTech.length === 4) {\n\t\t\t\topenNotificationWithIcon('error', 'error', 'Lorem ipsum for now...');\n\t\t\t\tsetIsNoOneSelected(true);\n\t\t\t} else {\n\t\t\t\tsetIsNoOneSelected(false);\n\t\t\t}\n\t\t}\n\t}, [settings]);\n\n\tconst handleBrowserPermission = (value, type, item) => {\n\t\tconst callback = res => {\n\t\t\tif (res === 'denied') {\n\t\t\t\topenNotificationWithIcon(\n\t\t\t\t\t'error',\n\t\t\t\t\t'error',\n\t\t\t\t\t'Permission Denied. Please enable for browser\\'s setting...',\n\t\t\t\t);\n\t\t\t\tsetSettings(prev => ({\n\t\t\t\t\t...prev,\n\t\t\t\t\t[type]: {\n\t\t\t\t\t\t...prev[type],\n\t\t\t\t\t\t[item]: {\n\t\t\t\t\t\t\t...prev[type][item],\n\t\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tsetSettings(prev => ({\n\t\t\t\t\t...prev,\n\t\t\t\t\t[type]: {\n\t\t\t\t\t\t...prev[type],\n\t\t\t\t\t\t[item]: {\n\t\t\t\t\t\t\t...prev[type][item],\n\t\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\t\t\t}\n\t\t};\n\t\tNotification.requestPermission(callback);\n\t};\n\n\tconst switchItemsElements = (type, item) => {\n\t\tswitch (settings[type][item].type) {\n\t\t\tcase 'number':\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FormItem\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<InputWithLabel background={\"#EDF4FA\"}>\n\t\t\t\t\t\t\t\t\t<PhoneInput \n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tvalue={settings[type][item].value} \n\t\t\t\t\t\t\t\t\t\t\tcountryCodeEditable={false} \n\t\t\t\t\t\t\t\t\t\t\tonChange={setPhone} \n\t\t\t\t\t\t\t\t\t\t\tcountry=\"us\" \n\t\t\t\t\t\t\t\t\t\t\tonlyCountries={['in', 'gr', 'us', 'ca', 'gb', 'ph', 'il']}\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t\t\t\t\tname:`${type}|${item}`,\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\tcase 'email':\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FormItem\n\n\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'email',\n\t\t\t\t\t\t\t\t\tmessage: <FormattedMessage {...messages.emailVail} />,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tmessage: <FormattedMessage {...messages.email} />,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() => ({\n\t\t\t\t\t\t\t\t\tvalidator(_, value) {\n\t\t\t\t\t\t\t\t\t\tif (value && value.length > 70) {\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\t\t\t\t\t\tnew Error('Maximum length is 70 characters.'),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t\t<AuthInput\n\t\t\t\t\t\t\t\tname={`${type}|${item}`}\n\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t\tonChange={(e) => { setEmail(e); }}\n\t\t\t\t\t\t\t\tvalue={settings[type][item].value}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\tcase 'button':\n\t\t\t\treturn (\n\t\t\t\t\t<EnableButton\n\t\t\t\t\tstyle={{cursor: 'not-allowed',background: settings[type][item].value ? '#97ABB6' : ''}}\n\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tonClick={() => handleBrowserPermission(!settings[type][item].value, type, item)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{settings[type][item].value ? 'Enabled' : 'Enable Browser'}\n\t\t\t\t\t</EnableButton>\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst isValid = () => {\n\t\tif (settings.Job.Browser.toggle && !settings.Job.Browser.value) {\n\t\t\topenNotificationWithIcon(\n\t\t\t\t'error',\n\t\t\t\t'error',\n\t\t\t\t'Please enable browser notification...',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t\tif (settings.Techs.Browser.toggle && !settings.Techs.Browser.value) {\n\t\t\topenNotificationWithIcon(\n\t\t\t\t'error',\n\t\t\t\t'error',\n\t\t\t\t'Please enable browser notification...',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\tif(settings.Job.Text.toggle && settings.Job.Text.type == \"number\"){\n\t\t\tlet numValue = settings.Job.Text.value\n\t\t\tlet numHavePlus = false;\n\t\t\tif(numValue.indexOf('+') >= 0) numHavePlus = true;\n\t\t\tif (isPossiblePhoneNumber(`${numHavePlus ? '' : '+'}`+numValue) === false && isValidPhoneNumber(`${numHavePlus ? '' : '+'}`+numValue)  === false) {\n\t\t\t\t\topenNotificationWithIcon(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\t'Phone number for text is not valid.',\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif(settings.Techs.Text.toggle && settings.Techs.Text.type == \"number\"){\n\t\t\tlet numValue = settings.Job.Text.value\n\t\t\tlet numHavePlus = false;\n\t\t\tif(numValue.indexOf( '+') >= 0) numHavePlus = true;\n\t\t\tif (isPossiblePhoneNumber(`${numHavePlus ? '' : '+'}`+numValue)  === false && isValidPhoneNumber(`${numHavePlus ? '' : '+'}`+numValue)  === false) {\n\t\t\t\t\topenNotificationWithIcon(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\t'Phone number for text is not valid.',\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif(settings.Techs.Email.toggle && settings.Techs.Email.value === ''){\n\t\t\topenNotificationWithIcon(\n\t\t\t\t'error',\n\t\t\t\t'error',\n\t\t\t\t'Email cant be blank.',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\tif(settings.Job.Email.toggle && settings.Job.Email.value === ''){\n\t\t\topenNotificationWithIcon(\n\t\t\t\t'error',\n\t\t\t\t'error',\n\t\t\t\t'Email cant be blank.',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\n\t\treturn true;\n\t};\n\n\tconst handleSave = () => {\n\n\t\tif (!isValid()) {\n\t\t\tsetTechProfile(prev => ({\n\t\t\t\t...prev,\n\t\t\t\talertPreference: {\n\t\t\t\t\tcomplete: false,\n\t\t\t\t},\n\t\t\t}));\n\t\t\treturn false;\n\t\t}\n\t\tif (isNoOneSelected) {\n\t\t\tsetTechProfile(prev => ({\n\t\t\t\t...prev,\n\t\t\t\talertPreference: {\n\t\t\t\t\tcomplete: false,\n\t\t\t\t},\n\t\t\t}));\n\t\t\treturn openNotificationWithIcon(\n\t\t\t\t'error',\n\t\t\t\t'Validation Error',\n\t\t\t\t'Please select atleast one option...',\n\t\t\t);\n\t\t}\n\t\tsetTechProfile(prev => ({\n\t\t\t...prev,\n\t\t\talertPreference: {\n\t\t\t\tcomplete: true,\n\t\t\t\tsettings,\n\t\t\t},\n\t\t}));\n\n\t\t\n\t\tTechnicianApi.updateTechnician(user.technician.id, { profileImage: false, alertPreference: { settings, complete: true } });\n\t\topenNotificationWithIcon('success', 'Success', 'Information Submitted');\n\t\treturn true;\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Form onFinish={handleSave}>\n\t\t\t\t<Label>When Available</Label>\n\t\t\t\t{/*<ItemLabel style={{ marginBottom: 20 }}>\n\t\t\t\t\tFor when you are logged in an active and receive a job assignment\n\t\t\t\t</ItemLabel>*/}\n\t\t\t\t<Row gutter={[20, 20]}>\n\t\t\t\t\t{Object.keys(settings.Job).map(item => (\n\t\t\t\t\t\t<Col key={item} xs={24} md={6}>\n\t\t\t\t\t\t\t<Space size={20} direction=\"vertical\">\n\t\t\t\t\t\t\t\t<Space size={10}>\n\t\t\t\t\t\t\t\t\t<CheckSwitch\n\t\t\t\t\t\t\t\t\t\tid={item}\n\t\t\t\t\t\t\t\t\t\tdisabled={item === 'Browser' || item=== 'Whatsapp' ? true: false}\n\t\t\t\t\t\t\t\t\t\tchecked={settings.Job[item].toggle}\n\t\t\t\t\t\t\t\t\t\tonChange={e => handleChangeSetting(e, 'Job', item)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text>{item}</Text>\n\t\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t\t\t{settings.Job[item].toggle && switchItemsElements('Job', item)}\n\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Label style={{ marginTop: 20 }}>\n\t\t\t\tWhen Not Available\n\t\t\t\t</Label>\n\t\t\t\t<Row gutter={[20, 20]}>\n\t\t\t\t\t{Object.keys(settings.Techs).map(item => (\n\t\t\t\t\t\t<Col key={item} xs={24} md={6}>\n\t\t\t\t\t\t\t<Space size={20} direction=\"vertical\">\n\t\t\t\t\t\t\t\t<Space size={10}>\n\t\t\t\t\t\t\t\t\t<CheckSwitch\n\t\t\t\t\t\t\t\t\t\tid={item}\n\t\t\t\t\t\t\t\t\t\tdisabled={item === 'Browser' || item=== 'Whatsapp' ? true: false}\n\t\t\t\t\t\t\t\t\t\tchecked={settings.Techs[item].toggle}\n\t\t\t\t\t\t\t\t\t\tonChange={e => handleChangeSetting(e, 'Techs', item)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text>{item}</Text>\n\t\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t\t\t{settings.Techs[item].toggle\n\t\t\t\t\t\t\t\t\t&& switchItemsElements('Techs', item)}\n\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Box display=\"flex\" justifyContent=\"flex-end\" marginTop={30}>\n\t\t\t\t\t<Button className=\"btn app-btn\" type=\"submit\">\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\tSave\n\t\t\t\t\t</Button>\n\t\t\t\t</Box>\n\t\t\t</Form>\n\t\t</Container>\n\t);\n}\n\nAlertPreference.propTypes = {\n\tsetTechProfile: PropTypes.func,\n};\nAlertPreference.propTypes = {\n\tsetTechProfile: () => {},\n};\n\nconst CheckSwitch = styled(Switch)``;\nconst Label = styled(ItemLabel)`\n\tfont-weight: bold;\n\tcolor: #868383;\n`;\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nconst EnableButton = styled(Button)`\n\theight: 50px;\n\tborder: none; /* Add this line to remove the border color */\n\tborder-radius: 10px;\n\t&:focus {\n\t\tbox-shadow: unset;\n\t}\n\t&::placeholder {\n\t\tcolor: #999;\n\t}\n`;\n\n\nconst InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  marginRight: 30px;\n  position: relative;\n  &:last-child {\n    marginRight: 0;\n  }\n\n\n\n  & input{\n    height:50px;\n    padding:10px;\n   \n    margin-top: 15px;\n    \n    margin-top:15px;\n    margin-left:50px;\n  }\n  & .react-tel-input .form-control {\n    height:50px; \n    border:0px none;\n    width:80% !important;\n    background:transparent;\n    border-radius: 0px;\n    border-bottom : 2px solid #B2B7BC; \n  }\n\n  & .react-tel-input .selected-flag {\n    background:${props => props.background}\n    border: 1px solid #B2B7BC;\n    border-left: none;\n    border-right: none;\n    border-top: none;\n  }\n  }\n  & .react-tel-input .flag-dropdown {\n    background:transparent;\n    border: 0px none;\n    bottom :1px;\n  }\n\n`;\n\nexport default AlertPreference;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\alertPreferences.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "bankAccountInfo.js",
                                                                            "fileData": "import React,{useEffect,useState,useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Row, Col, Form } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../messages';\nimport ItemLabel from '../../../../../components/ItemLabel';\n// import StepButton from '../../../../../components/StepButton';\nimport {Button} from \"react-bootstrap\";\nimport AuthInput from '../../../../../components/AuthLayout/Input';\nimport FormItem from '../../../../../components/FormItem';\n// import Box from '../../../../../components/common/Box';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport {useUser} from '../../../../../context/useContext';\nfunction BankAccountInfo(props) {\n  const { setTechProfile,techProfile } = props;\n  const BankformRef = useRef()\n  const [bankDetails,setBankDetails] = useState({});\n  const {user} = useUser()\n  const handleComplete = e => {\n    console.log(e,\">>>>>>\")\n    TechnicianApi.updateTechnician(user.technician.id,{profileImage:false,bankAccount:{...e}})\n    setTechProfile(prev => ({\n\n      ...prev,\n      bankAccount: {\n        ...prev.bankAccount,\n        ...e,\n        complete: true,\n      },\n    }));\n\n       openNotificationWithIcon(\"success\",\"Success\",\"Information Submitted\")\n\n  };\n\n\n\n\n  useEffect(()=>{\n\n    setBankDetails(user.technician.profile.bankAccount)\n  },[])\n\n  useEffect(()=>{\n    BankformRef.current.setFieldsValue(bankDetails)\n    // console.log(\"bankDetails ::: \",bankDetails)\n    // console.log(\"condition :::: \",Object.keys(bankDetails).length > 0)\n    if(bankDetails && Object.keys(bankDetails).length > 0){\n      let temptechProfile = {...techProfile}\n      temptechProfile['bankAccount']['complete'] = true\n      setTechProfile(temptechProfile)\n    }\n     \n  },[bankDetails])\n\n\n\n  return (\n    <Container>\n      <Form onFinish={handleComplete} initialValues = {bankDetails} ref={BankformRef}>\n        <FormContainer>\n          <FormSection gutter={16}>\n            <Col span={12}>\n              <ItemLabel>Account Number</ItemLabel>\n              <FormItem\n                name=\"accountNumber\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.accountNumber} />,\n                  },\n                ]}\n              >\n                <AuthInput\n                  name=\"accountNumber\"\n                  id=\"accountNumber\"\n                  size=\"large\"\n                  type=\"number\"\n                  placeholder=\"Account Number\"\n                />\n              </FormItem>\n            </Col>\n            <Col span={12}>\n              <ItemLabel>Routing Number</ItemLabel>\n              <FormItem\n                name=\"routingNumber\"\n                rules={[\n                  {\n                    required: true,\n                    message: <FormattedMessage {...messages.routingNumber} />,\n                  },\n                ]}\n              >\n                <AuthInput\n                  name=\"routingNumber\"\n                  id=\"routingNumber\"\n                  size=\"large\"\n                  type=\"number\"\n                  placeholder=\"Routing Number\"\n                />\n              </FormItem>\n            </Col>\n             <Button type=\"submit\" className=\"btn app-btn\"><span></span>Save</Button>\n          </FormSection>\n\n          \n            \n          \n\n        </FormContainer>\n        \n      </Form>\n    </Container>\n  );\n}\n\nBankAccountInfo.propTypes = {\n  setTechProfile: PropTypes.func,\n  techProfile: PropTypes.object,\n};\n\nBankAccountInfo.defaultProps = {\n  setTechProfile: () => {},\n  techProfile: {},\n};\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n`;\nconst FormSection = styled(Row)`\n  width: 100%;\n  margin: 20px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport default BankAccountInfo;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\bankAccountInfo.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "confirmId.js",
                                                                            "fileData": "import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Row, Col, Form } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from 'react-bootstrap';\nimport messages from '../../messages';\nimport ItemLabel from '../../../../../components/ItemLabel';\n// import StepButton from '../../../../../components/StepButton';\nimport AuthInput from '../../../../../components/AuthLayout/Input';\nimport FormItem from '../../../../../components/FormItem';\nimport CheckBox from '../../../../../components/common/CheckBox';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport UploadFile from './upload';\n// import Box from '../../../../../components/common/Box';\nimport { useUser } from '../../../../../context/useContext';\nimport * as TechnicianApi from '../../../../../api/technician.api';\n\nfunction ConfirmId(props) {\n  // const [initialData, setInitialData] = useState({});\n  const confirmRef = useRef();\n\n  const { setTechProfile, techProfile } = props;\n  const { user } = useUser();\n\n  useEffect(() => {\n    if (user.technician.profile.confirmId) {\n      confirmRef.current.setFieldsValue(user.technician.profile.confirmId);\n      // setInitialData(user.technician.profile.confirmId);\n    }\n\n    const temptechProfile = { ...techProfile };\n    temptechProfile.confirmId.complete = true;\n    setTechProfile(temptechProfile);\n\n  }, []);\n\n  const handleComplete = e => {\n\n    const tempVal = { ...e, \n                      imageUrl: user.technician.profile.confirmId.imageUrl,\n                    };\n    console.log('tempVal>>>>>>>>>>>>>>>>>>',tempVal)\n    TechnicianApi.updateTechnician(user.technician.id, { profileImage: false, confirmId: { ...tempVal } });\n    setTechProfile(prev => ({\n      ...prev,\n      confirmId: {\n        ...prev.confirmId,\n        ...e,\n        complete:\n          !!techProfile.confirmId.confirmed && !!techProfile.confirmId.imageUrl,\n      },\n    }));\n    openNotificationWithIcon('success', 'Success', 'Information Submitted');\n  };\n\n  const handleChangeChecked = e => {\n    const { checked } = e.target;\n    setTechProfile(prev => ({\n      ...prev,\n      confirmId: {\n        ...prev.confirmId,\n        confirmed: checked,\n      },\n    }));\n  };\n  return (\n    <Container>\n      <ItemLabel>\n        {`Please submit your ID.\n        This is for our records, and to ensure everything is in order.`}\n      </ItemLabel>\n      <Form onFinish={handleComplete} ref={confirmRef}>\n        <FormContainer>\n          <FormSection gutter={16}>\n            <Col span={12}>\n              <ItemLabel>Your DD (Driver Licence Number)</ItemLabel>\n              <FormItem\n                name=\"DD\"\n                size=\"large\"\n                placeholder=\"Driver Licence Number\"\n              >\n                <AuthInput\n                  name=\"DD\"\n                  size=\"large\"\n                  placeholder=\"Driver Licence Number\"\n                />\n              </FormItem>\n            </Col>\n          </FormSection>\n        </FormContainer>\n        <UploadFile\n          title=\"Drag & Drop or Upload ID\"\n          description=\"Please upload front side of your driver licence or another ID document\"\n          type=\"confirmId\"\n          setTechProfile={setTechProfile}\n          sectionName=\"confirmId\"\n        />\n        <ConfirmContainer span={24}>\n          <CheckBox onChange={handleChangeChecked}>\n            I confirm that this is my valid ID document\n          </CheckBox>\n        </ConfirmContainer>\n        <Button type=\"submit\" className=\"btn app-btn\">\n          <span />\n          Save\n        </Button>\n\n      </Form>\n    </Container>\n  );\n}\n\nConfirmId.propTypes = {\n  setTechProfile: PropTypes.func,\n  techProfile: PropTypes.object,\n};\n\nConfirmId.defaultProps = {\n  setTechProfile: () => {},\n  techProfile: {},\n};\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n`;\nconst FormSection = styled(Row)`\n  width: 100%;\n  margin: 20px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst ConfirmContainer = styled.div`\n  padding-top: 20px;\n  padding-bottom: 30px;\n`;\nexport default ConfirmId;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\confirmId.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "ConfirmYourSchedule.js",
                                                                            "fileData": "import {\n  Col, Row, Space, TimePicker, Typography,\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\nimport moment from 'moment';\nimport Select from '../../../../../components/common/Select';\nimport ItemLabel from '../../../../../components/ItemLabel';\nimport CheckBox from '../../../../../components/common/CheckBox';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport Box from '../../../../../components/common/Box';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport { useUser } from '../../../../../context/useContext';\nimport TimezoneSelect, { allTimezones } from \"react-timezone-select\";\nimport AvailableDatePicker from \"react-datepicker\";\nimport {updateUser} from '../../../../../api/users.api';\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nconst initSelectedTimes = [\n  'startTime',\n  'endTime'\n]\n\nconst days = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\nconst initAvailableTimes = {\n  Sunday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Monday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Tuesday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Wednesday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Thursday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Friday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n  Saturday: {\n    available: false,\n    startTime: '',\n    endTime: '',\n    timeZone: '',\n  },\n};\n\nfunction ConfirmYourSchedule({ setTechProfile, techProfile }) {\n  const { user } = useUser();\n  const [timezone, setTimezone] = useState(\"\");\n  const [availableTimes, setAvailableTimes] = useState({ ...initAvailableTimes });\n  const [selectedTimes, setSelectedTimes] = useState({ ...initSelectedTimes });\n  const [indeterminate, setIndeterminate] = React.useState(false);\n  const [checkAll, setCheckAll] = React.useState(false);\n  const [timezoneError, setTimezonError] = useState(null);\n  const [selectedDaysError, setSelectedDaysError] = useState(null);\n  const [selectedTime, setSelectedTime] = useState(\"00:00\");\n  const [endselectedTime, setEndSelectedTime] = useState(\"00:00\");\n\n  useEffect(() => {\n    if (user && user.technician && user.technician.profile && user.technician.profile.schedule && user.technician.profile.schedule.availableTimes) {\n      const tempTchProfile = { ...techProfile };\n      const demoObj = user.technician.profile.schedule;\n      if (demoObj && Object.keys(demoObj).length > 0) {\n        tempTchProfile.schedule.complete = true;\n        setTechProfile(tempTchProfile);\n        setAvailableTimes(user.technician.profile.schedule.availableTimes);\n      }\n      // if(bankDetails != undefined && Object.keys(bankDetails).length > 0)\n    }\n    console.log(\"usesr\",user)\n    if(user && user.timezone){\n      setTimezone(user.timezone);\n    }else{\n        setTimezone(Intl.DateTimeFormat().resolvedOptions().timeZone)\n      }  \n  }, [ user]);\n\n  // [setTechProfile, techProfile, user]); commented by manibha 6:07pm\n\n  const onCheckChange = e => {\n    const { checked, id } = e.target;\n    let checkedCount = checked ? 1 : -1;\n    Object.keys(availableTimes).forEach(item => {\n      if (availableTimes[item].available) checkedCount += 1;\n    });\n    setIndeterminate(!!(checkedCount > 0 && checkedCount < 7));\n    setCheckAll(checkedCount === 7);\n\n    const tempAvailabletimes = { ...availableTimes };\n    tempAvailabletimes[id].available = checked;\n    if (!checked) {\n      tempAvailabletimes[id].startTime = '';\n      tempAvailabletimes[id].endTime = '';\n      tempAvailabletimes[id].timeZone = '';\n    }\n    setAvailableTimes(tempAvailabletimes);\n    // setAvailableTimes(prev => ({\n    //   ...prev,\n    //   [id]: {\n    //     ...prev[id],\n    //     available: checked,\n    //   },\n    // }));\n    setSelectedDaysError('');\n  };\n  const onCheckAllChange = e => {\n    let updateAvailableTimes = { ...availableTimes };\n    Object.keys(availableTimes).forEach(item => {\n      updateAvailableTimes = {\n        ...updateAvailableTimes,\n        [item]: {\n          ...updateAvailableTimes[item],\n          available: e.target.checked,\n        },\n      };\n    });\n    setAvailableTimes(updateAvailableTimes);\n    setIndeterminate(false);\n    setCheckAll(e.target.checked);\n  };\n\n  const ifSelectedDays = () => {\n    const selectedDays = Object.keys(availableTimes).filter(\n      item => availableTimes[item].available,\n    );\n    return selectedDays.length;\n  };\n\n  const validateTime = () => {\n    const selectedDays = Object.keys(availableTimes).filter(item => {\n      if (availableTimes[item].available) {\n        if (\n          availableTimes[item].startTime === ''\n          || availableTimes[item].endTime === ''\n        ) {\n          return item;\n        }\n      }\n      return undefined;\n    });\n    return selectedDays.length;\n  };\n\n  const handleComplete = async (e) => {\n    setTechProfile(prev => ({\n      ...prev,\n      schedule: {\n        complete: false,\n      },\n    }));\n\n    if (!timezone || timezone === \"\") {\n      setTimezonError('No Timezone Selected.');\n    } else if (!ifSelectedDays()) {\n      setSelectedDaysError('No days Selected.');\n    } else if (validateTime()) {\n      openNotificationWithIcon(\n        'error',\n        'Time is missing',\n        'Please add time correctly',\n\n      );\n    } else if (validateStartEndTime()) {\n      openNotificationWithIcon(\n        'error',\n        'Invalid time',\n        'Start and End Date is invalid',\n      );\n    } else {\n      setTechProfile(prev => ({\n        ...prev,\n        schedule: {\n          ...prev.schedule,\n          complete: true,\n          timezone,\n          availableTimes,\n        },\n      }));\n\n      TechnicianApi.updateTechnician(user.technician.id, { profileImage: false, schedule: { timezone:timezone.value, availableTimes: { ...availableTimes } } });\n      await updateUser({userId:user.id,timezone:timezone.value})\n\n      openNotificationWithIcon(\n        'success',\n        'Success',\n        'Time updated Successfully',\n      );\n    }\n  };\n\n  /*const zoneList = Object.keys(timezoneList).map(d => (\n    <Option key={`zone-${d}`} style={{ textAlign: 'left' }} value={d}>\n      {d}\n    </Option>\n  ));*/\n  const handleChangeTimeZone = value => {\n    setTimezone(value);\n    setTimezonError('');\n  };\n\n  const deselectAll = () => {\n    let updateAvailableTimes = { ...availableTimes };\n    Object.keys(availableTimes).forEach(item => {\n      updateAvailableTimes = {\n        ...updateAvailableTimes,\n        [item]: {\n          ...updateAvailableTimes[item],\n          available: false,\n        },\n      };\n    });\n    setAvailableTimes(updateAvailableTimes);\n    setIndeterminate(false);\n    setCheckAll(false);\n  };\n\n  const validateStartEndTime = () => {\n    let isFailed = false;\n    Object.keys(availableTimes).filter(key => {\n      if (availableTimes[key].available) {\n        if (\n\n          moment(availableTimes[key].endTime).isBefore(moment(availableTimes[key].startTime))\n        ) {\n          isFailed = true;\n          return key;\n        }\n      }\n      return undefined;\n    });\n    return isFailed;\n  };\n\n  const onTimeSelect = (type, typeDay, time) => {\n    (type == \"startTime\")?setSelectedTime(time):setEndSelectedTime(time);\n    if (typeDay === 'checkAll') {\n      setSelectedTimes(prev => ({\n        ...prev,\n        [type]:time,\n      }))\n      Object.keys(availableTimes).map(key => {\n        setAvailableTimes(prev => ({\n          ...prev,\n          [key]: { ...availableTimes[key], [type]: time },\n        }));\n        return key;\n      });\n    } else {\n      setAvailableTimes(prev => ({\n        ...prev,\n        [typeDay]: { ...availableTimes[typeDay], [type]: time },\n      }));\n    }\n    console.log(\"availableTimes :::::::\", availableTimes);\n  };\n\n  return (\n    <Container>\n      <ItemLabel>\n        {`Please check off all days you are available. This helps us help you, and send you appropriate jobs within your chosen timeframes and days. If you select all days, this notifies us that you are available throughout the 7 days of the week.`}\n      </ItemLabel>\n      <Label>DAYS AVAILABLE</Label>\n\n      <Row gutter={[40, 40]}>\n        <Col span={24}>\n          <CheckBox\n            indeterminate={indeterminate}\n            onChange={onCheckAllChange}\n            checked={checkAll}\n          >\n            All Days\n          </CheckBox>\n          <AlertError>{selectedDaysError}</AlertError>\n        </Col>\n        {checkAll ? (\n          <Row gutter={[20, 0]} className=\"availableDatePicker\">\n            <Col span={24}><ItemLabel style={{ marginBottom:0 }}>Select hours available</ItemLabel></Col>\n            <Col xs={24} md={11}>\n              \n              <AvailableDatePicker\n                selected={selectedTimes.startTime !== '' ? selectedTimes.startTime : ''}\n                onChange={date => onTimeSelect('startTime', 'checkAll', date)}\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={60}\n                placeholderText=\"Start\"\n                timeCaption=\"Start Time\"\n                dateFormat=\"h aa\"\n                />\n            </Col>\n            <Col xs={24} md={11}>\n              <AvailableDatePicker\n                selected={selectedTimes.endTime !== '' ? selectedTimes.endTime : ''}\n                onChange={date => onTimeSelect('endTime', 'checkAll', date)}\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={60}\n                placeholderText=\"End\"\n                timeCaption=\"End Time\"\n                dateFormat=\"h aa\"\n                />\n            </Col>\n          </Row>\n        ) : (\n          days.map(item => (\n            <DaySection\n              key={item}\n              name={item}\n              onCheckChange={onCheckChange}\n              values={{ ...availableTimes }}\n              onTimeSelect={onTimeSelect}\n            />\n          ))\n        )}\n        <Col col={6}>\n          <DeSelectText onClick={deselectAll}>Deselect ALL</DeSelectText>\n        </Col>\n      </Row>\n      <Label>SELECT TIMEZONE *</Label>\n      {/*<Select\n        id=\"select_year\"\n        showSearch\n        style={{ width: '50%' }}\n        placeholder=\"Select TimeZone\"\n        showArrow\n        value={timezone}\n        optionFilterProp=\"children\"\n        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n        onChange={handleChangeTimeZone}\n      >\n        {zoneList}\n      </Select>*/}\n      <TimezoneSelect\n          value={timezone}\n          onChange={setTimezone}\n          timezones={{\n              ...allTimezones\n          }}\n          className = \"mb-1 \"\n          id=\"tech-timezone\"\n          style={{ width: '50%' }}\n      />\n      <AlertError>{timezoneError}</AlertError>\n      <Box display=\"flex\" justifyContent=\"flex-end\" marginTop={30}>\n        <Button className=\"btn app-btn\" onClick={handleComplete}>\n          <span />\n          Save\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nconst DaySection = props => {\n  const {\n    name, onCheckChange, values, onTimeSelect,\n  } = props;\n\n  return (\n    <Col xs={24} md={6}>\n      <Space direction=\"vertical\" size={15}>\n        <CheckBox\n          id={name}\n          checked={values[name].available}\n          onChange={onCheckChange}\n        >\n          {name}\n        </CheckBox>\n        \n        {values[name].available && (\n          <Row><ItemLabel style={{ marginBottom:0 }}>Select hours available</ItemLabel>\n          <Row gutter={[20, 0]} className=\"availableDatePicker\">\n\n            <Col xs={24} md={11}>\n              <AvailableDatePicker\n                value={values[name].startTime !== '' ? new Date(values[name].startTime) : ''}\n                selected={values[name].startTime !== '' ? new Date(values[name].startTime) : ''}\n                onChange={time => onTimeSelect('startTime', name, time)}\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={60}\n                timeCaption=\"Start Time\"\n                placeholderText=\"Start Time\"\n                dateFormat=\"h aa\"\n              />\n              {/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"Start\"\n                defaultValue={values[name].startTime !== '' ? moment(values[name].startTime) : ''}\n                onSelect={time => onTimeSelect('startTime', name, time)}\n              /> */}\n            </Col>\n            <Col span={11}>\n              <AvailableDatePicker\n                value={values[name].endTime !== '' ? new Date(values[name].endTime) : ''}\n                selected={values[name].endTime !== '' ? new Date(values[name].endTime) : ''}\n                onChange={time => onTimeSelect('endTime', name, time)}\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={60}\n                timeCaption=\"End Time\"\n                placeholderText=\"End Time\"\n                dateFormat=\"h aa\"\n              />\n              {/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"End\"\n                defaultValue={values[name].endTime !== '' ? moment(values[name].endTime) : ''}\n                onSelect={time => onTimeSelect('endTime', name, time)}\n              /> */}\n              \n            </Col>\n          </Row></Row>\n        )}\n      </Space>\n    </Col>\n  );\n};\n\nDaySection.propTypes = {\n  name: PropTypes.string,\n  values: PropTypes.object,\n  onCheckChange: PropTypes.func,\n  onTimeSelect: PropTypes.func,\n};\n\nDaySection.defaultProps = {\n  name: 'Monday',\n};\nConfirmYourSchedule.propTypes = {\n  setTechProfile: PropTypes.func,\n};\n\nConfirmYourSchedule.defaultProps = {\n  setTechProfile: () => {},\n};\n\nconst AlertError = styled.div`\n  color: red;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst AvailableTimePicker = styled(TimePicker)`\n  height: 50px;\n  border-radius: 10px;\n`;\nconst Label = styled(ItemLabel)`\n  font-weight: bold;\n  color: #868383;\n  padding-top: 30px;\n  padding-bottom: 20px;\n`;\nconst DeSelectText = styled(Text)`\n  font-size: 15px;\n  font-weight: bold;\n  color: #8c8989;\n  text-decoration: underline;\n  padding-top: 20px;\n  cursor: pointer;\n`;\nexport default ConfirmYourSchedule;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\ConfirmYourSchedule.js"
                                                                        },
                                                                        {
                                                                            "type": "folder",
                                                                            "name": "FullAgreement",
                                                                            "children": [
                                                                                {
                                                                                    "type": "file",
                                                                                    "name": "index.js",
                                                                                    "fileData": "import React from 'react';\n\nconst FullAgreement = () => <div>Full Agreement</div>;\n\nexport default FullAgreement;\n",
                                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\FullAgreement\\index.js"
                                                                                },
                                                                                {
                                                                                    "type": "file",
                                                                                    "name": "Loadable.js",
                                                                                    "fileData": "import React from 'react';\nimport loadable from 'utils/loadable';\nimport Loader from '../../../../../../components/Loader';\n\nexport default loadable(() => import('./index'), {\n  fallback: <Loader />,\n});\n",
                                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\FullAgreement\\Loadable.js"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Mictest.js",
                                                                            "fileData": "import React from 'react';\nimport { ReactMic } from 'react-mic';\nimport { PropTypes } from 'prop-types';\n\nfunction MicTest({ record, stopStatus }) {\n  return (\n    <ReactMic\n      width=\"509\"\n      style={{ paddingLeft: '20px' }}\n      record={record}\n      visualSetting=\"sinewave\"\n      onStop={stopStatus}\n      strokeColor=\"black\"\n      backgroundColor=\"grey\"\n      mimeType=\"audio/webm\"\n      bitRate={256000}\n      sampleRate={96000}\n      timeSlice={3000}\n    />\n  );\n}\n\nMicTest.propTypes = {\n  record: PropTypes.bool,\n  stopStatus: PropTypes.bool,\n};\n\nMicTest.defaultProps = {\n  record: false,\n  stopStatus: true,\n};\n\nexport default MicTest;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\Mictest.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "modalPopUp.js",
                                                                            "fileData": "import React, { useEffect } from 'react';\nimport { Modal, Row, Col } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { ReactMic } from 'react-mic';\n\nconst ModalPopUp = ({\n  micModal,\n  toggleMicModal,\n  record,\n  stopStatus,\n  micTest,\n}) => {\n  useEffect(() => {\n    if (micModal) micTest();\n  }, [micModal]);\n\n  const handleCloseMic = () => {\n    toggleMicModal();\n    micTest();\n  };\n\n  return (\n    <Modal\n      visible={micModal}\n      title=\"Built-in Microphone\"\n      onOk={handleCloseMic}\n      cancelButtonProps={{ style: { display: 'none' } }}\n      className=\"app-confirm-modal\"\n      closable={false}\n    >\n      <FormSection>\n        <TestSection>\n          <TestMic record={record} stopStatus={stopStatus} />\n        </TestSection>\n      </FormSection>\n    </Modal>\n  );\n};\n\nModalPopUp.propTypes = {\n  micModal: PropTypes.bool,\n  toggleMicModal: PropTypes.func,\n  record: PropTypes.any,\n  stopStatus: PropTypes.bool,\n  micTest: PropTypes.func,\n};\n\nModalPopUp.defaultProps = {\n  micModal: false,\n  toggleMicModal: () => {},\n  record: {},\n  stopStatus: false,\n  micTest: () => {},\n};\n\nconst TestMic = styled(ReactMic)`\n  display: flex;\n  flex-direction: column;\n  max-width: 100%;\n`;\n\nconst TestSection = styled(Col)`\n  background: #f8f8f8;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst FormSection = styled(Row)`\n  width: 100%;\n  padding: 20px;\n`;\n\nexport default ModalPopUp;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\modalPopUp.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "ProfileDescription.js",
                                                                            "fileData": "import React, { useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport mixpanel from 'mixpanel-browser';\nimport messages from '../../messages';\nimport { Row, Col, Form } from 'antd';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport { useUser } from '../../../../../context/useContext';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport BasicButton from 'components/common/Button/BasicButton';\nimport ReactQuill from 'react-quill'\nimport 'quill/dist/quill.snow.css'\nfunction ProfileDescription(props) {\n    const digitRegex = /(\\d{801,})|([A-Za-z]{801,})/;\n    const { setTechProfile, techProfile } = props;\n    const { user } = useUser();\n    const [technicianProfileDesc, setTechnicianProfileDesc] = useState('');\n    const [isTechReview, setIsTechReview] = useState(false)\n    const [exceedsLimit, setExceedsLimit] = useState(false)\n    const [showSpinner, setShowSpinner] = useState(false);\n    const quillRef = useRef(null);\n    useEffect(() => {\n        const temptechProfile = { ...techProfile };\n        temptechProfile.profileDescription.complete = true;\n        setTechProfile(temptechProfile);\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            if (user && user.id) {\n                const TechdData = await TechnicianApi.retrieveTechnicianBysomeParams({ \"user\": user.id });\n                if(TechdData && TechdData.length > 0 && TechdData[0]?.profileDescription){\n                    setTechnicianProfileDesc(TechdData[0].profileDescription);\n                }\n            }\n        })()\n    }, [user]);\n\n\n    const validateContent = (content) => {\n        if (digitRegex.test(content)) {\n            setExceedsLimit(true);\n        } else {\n            setExceedsLimit(false);\n        }\n    };\n\n\n    const handlePaste = (event) => {\n        const clipboardData = event.clipboardData || window.clipboardData;\n        const pastedText = clipboardData.getData('text');\n        if (digitRegex.test(pastedText)) {\n            setExceedsLimit(true);\n        } else {\n            setExceedsLimit(false);\n        }\n    };\n\n    const handleComplete = async () => {\n        try {\n            if (user && user.email) {\n                mixpanel.identify(user.email);\n                mixpanel.track('Technician - Update profile description');\n            }\n            if (quillRef.current) {\n                const quillEditor = quillRef.current?.getEditor();\n                const htmlContent = quillEditor?.root.innerHTML;\n                // Convert HTML to plain text\n                const parser = new DOMParser();\n                const parsedHtml = parser.parseFromString(htmlContent, 'text/html');\n                const plainText = parsedHtml.body.textContent || '';\n                const enterText = plainText.trim()\n                console.log(\"enter text length>>\",enterText.length)\n                if (enterText == '') {\n                    setIsTechReview(true);\n                } else {\n                    setIsTechReview(false)\n                    if (enterText.length > 800) {\n                        setExceedsLimit(true);\n                    } else {\n                        setExceedsLimit(false);\n                        setShowSpinner(true)\n                        await TechnicianApi.updateTechnician(user.technician.id, { profileImage: false, profileDescription: technicianProfileDesc }).then((res) => {\n                            if (res) {\n                                setTimeout(() => {\n                                    setShowSpinner(false);\n                                    setTechProfile(prev => ({\n                                        ...prev,\n                                        profileDescription: {\n                                            ...prev.profileDescription,\n                                            complete: true,\n                                        },\n                                    }));\n                                    openNotificationWithIcon('success', 'Success', 'Profile review submitted successfully.');\n                                }, 800)\n                            }\n                        });\n                    }\n                };\n            };\n        } catch (e) {\n            console.log(\"Error occurs while technician submit his profile description.\", e)\n        };\n    };\n\n    let modules = {\n        toolbar: [\n            [{ size: [\"small\", false, \"large\", \"huge\"] }],\n            [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n            [{ list: \"ordered\" }, { list: \"bullet\" }],\n            [\"link\"],\n            [\n                { list: \"ordered\" },\n                { list: \"bullet\" },\n                { indent: \"-1\" },\n                { indent: \"+1\" },\n                { align: [] }\n            ],\n            [{ \"color\": [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\", 'custom-color'] }],\n        ]\n    };\n\n    let formats = [\n        \"header\", \"height\", \"bold\", \"italic\",\n        \"underline\", \"strike\", \"blockquote\",\n        \"list\", \"color\", \"bullet\", \"indent\",\n        \"link\", \"align\", \"size\",\n    ];\n\n    return (\n        <>\n            <Form>\n                <div className='w-100 mb-3'>\n                    <Row>\n                        <Col className='w-100'>\n                            <ReactQuill\n                                ref={quillRef}\n                                theme=\"snow\"\n                                value={technicianProfileDesc}\n                                modules={modules}\n                                formats={formats}\n                                placeholder=\"write your profile description..\"\n                                onChange={(text) => {\n                                    setTechnicianProfileDesc(text);\n                                    validateContent(text);\n                                }}\n                                onPaste={handlePaste}\n                            />\n                        </Col>\n                    </Row>\n                    {isTechReview && (\n                        <div className=\"error-message\" style={{ color: \"red\" }}>\n                            <FormattedMessage {...messages.profileDescription} />\n                        </div>\n                    )}\n                    {exceedsLimit && (\n                        <div className=\"error-message\" style={{ color: \"red\" }}>\n                            <FormattedMessage {...messages.profileDescExceedsLimit} />\n                        </div>\n                    )}\n                </div>\n                <BasicButton disable={showSpinner} onClick={handleComplete} btnTitle={\"Save\"} height={\"50px\"} width={\"166px\"} background={\"#01D4D5\"} color={\"#FFFFFF\"} showSpinner={showSpinner} />\n            </Form>\n        </>\n    );\n};\n\nexport default ProfileDescription;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\ProfileDescription.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "resume.js",
                                                                            "fileData": "import { Upload, message,notification,} from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport React, { useState, useEffect } from 'react';\nimport {  Button } from 'react-bootstrap';\nimport { useUser } from '../../../../../context/useContext';\nimport { SERVER_URL } from '../../../../../constants';\nimport * as TechnicianService from '../../../../..//api/technician.api';\nimport { useAuth } from '../../../../../context/authContext';\nconst EditResume = ()=>{\n  const {user} = useUser();\n  const {refetch} = useAuth();\n  const [showEditor,setShowEditor] = useState(false)\n  const [haveResume,setHaveResume] = useState(true)\n  const [fileList, setFileList] = useState([]);\n  const openNotificationWithIcon = (nType, header, nMessage) => {\n    notification[nType]({\n      message: header,\n      description: nMessage,\n    });\n  };\n\n  useEffect(()=>{\n    if(user){\n      console.log(\"user.technician.resume :::::::\",user.technician.resume)\n      console.log(\"condition :::::\",user.technician.resume != undefined && user.technician.resume === \"\")\n      if(user.technician.resume === undefined){\n        console.log(\"inside if\")\n          setShowEditor(true)\n          setHaveResume(false)\n      }\n    }\n  },[user])\n  const fileTypes = '.png, .jpg, .jpeg, .pdf, .doc';\n  const { Dragger } = Upload;\n  let fileName = `${user.id}_resume`\n\n  const props = {\n    name: 'file',\n    multiple: false,\n    fileList:fileList,\n    accept:fileTypes,\n    action: `${SERVER_URL}/api/uploads`,\n    data:{\"user\":`${fileName}` },\n    maxCount :1,\n    beforeUpload: file => {\n      if(fileList.length >= 1){\n        openNotificationWithIcon('error', 'Warning', 'Only one file is allowed. Please delete remove the previous one first');\n        return false;\n      }\n      if (\n        !(\n          file.type === 'image/jpg'\n          || file.type === 'application/pdf'\n          || file.type === 'image/png'\n          || file.type === 'image/jpeg'\n          || file.type === 'application/msword'\n        )\n      ) {\n        openNotificationWithIcon('error', 'Warning', 'File Type Not Supported');\n        return false;\n      }\n\n      if (file.size / 1048576 > 10) {\n        openNotificationWithIcon('error', 'Warning', 'file should be smaller than 10mb');\n        return false;\n      }\n    },\n    async onChange(info) {\n\n      \n      const { status } = info.file;\n      console.log(\"info.file ::::::\",info.file)\n      if (status !== 'uploading') {\n\n        console.log(info.file, info.fileList);\n      }\n      if (status === 'uploading') {\n        setFileList([info.file]);\n      }\n      if (status === 'done') {\n          console.log(\">>>>>>>>>>>>>>file name :::\" ,fileName)\n          openNotificationWithIcon('success','Success',`${info.file.name} file uploaded successfully.`);\n          await TechnicianService.updateTechnician(user.technician.id,{resume:`${fileName}-.${info.file.name.split('.').pop()}`})\n          await refetch()\n          \n          setShowEditor(false)\n          setHaveResume(true)\n          // window.location.href = \"/\"\n      } else if (status === 'error') {\n        setFileList([])\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n    onRemove (){\n      setFileList([])\n    }\n  };\n\n  return (\n      <>\n        <div className=\"col-12 mx-auto\">\n        {!showEditor ? \n        <div className='row'>\n        <div className=\"col-md-6 col-xs-6 d-flex justify-content-around mt-2\">\n          <h6>\n            <a href={`${SERVER_URL}/images/${user.technician.resume}`} download=\"myresume\">\n              Download your resume\n            </a>\n          </h6>\n          </div>\n\n          <div className='col-md-6 col-xs-6'>\n          <Button onClick={()=>{setShowEditor(true)}} className=\"btn app-btn app-btn-super-small\">\n            Edit Resume\n          </Button>\n          </div>\n        </div>\n        :<><Dragger {...props}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">Click this area to upload your resume</p>\n            </Dragger>\n            <div className=\"mt-2\">\n              {haveResume && <Button onClick={()=>{setShowEditor(!showEditor)}} className=\"btn app-btn app-btn-small\" > Cancel </Button>}\n            </div>\n            </>\n         }\n             \n        </div>\n      </>\n    )\n\n}\nexport default EditResume;",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\resume.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "reviewGuide.js",
                                                                            "fileData": "import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Row, Col, Typography } from 'antd';\nimport { PlayCircleFilled } from '@ant-design/icons';\nimport ItemLabel from '../../../../../components/ItemLabel';\nimport CompleteIcon from '../../../../../assets/images/complete_icon.png';\nimport NotCompleteIcon from '../../../../../assets/images/not_complete_icon.png';\nimport VideoPopup from './videoPopup';\nimport {getVideos} from '../../../../../api/video.api';\nimport {useUser} from '../../../../../context/useContext';\nconst { Text } = Typography;\n\nfunction ReviewGuide({ setTechProfile }) {\n  const {user} = useUser()\n  const [submitDetails,setSubmitDetails] = useState(false)\n  const [guideLines, setGuideLines] = useState({\n    'Protecting Customer Data1': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data2': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data3': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data4': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n  });\n\n\n    useEffect(()=>{\n    const links = getVideos()\n    \n    links.then((res)=>{\n      let temp = {}\n      for(var k in res.data){\n        temp[res.data[k].title] = {\"play\":false,url:res.data[k].videoUrl,isComplete:true, title:res.data[k].title}\n      }\n      // console.log(\"temp :: \",temp)\n      setGuideLines(temp)\n    })\n  },[])\n\n\n\n  const [selectedVideo, setSelectedVideo] = useState({});\n  const [selectedTitle, setSelectedTitle] = useState('');\n\n  const handleClickVideo = (video, title) => {\n    const payload = {\n      ...video,\n      play: true,\n      isComplete: false,\n      title:title,\n    };\n    setSelectedTitle(title);\n    setSelectedVideo(payload);\n    setGuideLines(prev => ({\n      ...prev,\n      [title]: payload,\n    }));\n    setSubmitDetails(true)\n  };\n\n  useEffect(() => {\n    if (selectedVideo.isComplete) {\n      setGuideLines(prev => ({\n        ...prev,\n        [selectedTitle]: {\n          ...selectedVideo,\n          isComplete: true,\n        },\n      }));\n      setSelectedTitle('');\n      setSelectedVideo('');\n    }\n  }, [selectedTitle, selectedVideo]);\n\n  useEffect(() => {\n    if (guideLines && submitDetails) {\n      const filter = Object.values(guideLines).filter(\n        item => item.isComplete === false,\n      );\n      if (filter.length === 0) {\n        setTechProfile(prev => ({\n          ...prev,\n          reviewGuide: {\n            ...prev.reviewGuide,\n            complete: true,\n          },\n        }));\n      }\n      // TechnicianApi.updateTechnician(user.technician.id,{profileImage:false,reviewGuide:{complete:true}})\n      console.log(\"user?.technician?.profile.image :::::::::\",user.technician.profile.image)\n      // TechnicianApi.updateTechnician(user.technician.id, { profileImage: user?.technician?.profile.image ? user?.technician?.profile.image : '', reviewGuide: { complete: true } });\n\n    }\n  }, [guideLines, setTechProfile,user]);\n  return (\n    <Container>\n      <ItemLabel>\n        {`\n        Please make sure to review our Geeker Guidelines and watch the Onboarding video. Once done, it will be marked \"Complete\".`}\n      </ItemLabel>\n      <ListContainer>\n        <VideoPopup\n          selectedVideo={selectedVideo}\n          setSelectedVideo={setSelectedVideo}\n        />\n        {Object.keys(guideLines).map(item => (\n          <Row align=\"middle\" gutter={[30, 30]} key={item}>\n            <Col span={8}>\n              <GuideTitle>{item}</GuideTitle>\n            </Col>\n            <MidSection\n              span={11}\n              onClick={() => handleClickVideo(guideLines[item], item)}\n            >\n              <PlayCircleFilled style={{ fontSize: 20, float:'left' }} />\n              <GuideVideoTitle>\n                {guideLines[item].isComplete\n                  ? 'Watch Video again'\n                  : 'Watch Video'}\n              </GuideVideoTitle>\n            </MidSection>\n            <Col spn={4}>\n              <RightIcon\n                src={\n                  guideLines[item].isComplete ? CompleteIcon : NotCompleteIcon\n                }\n              />\n              <Text>\n                {guideLines[item].isComplete ? 'Completed' : 'Not Completed'}\n              </Text>\n            </Col>\n          </Row>\n        ))}\n      </ListContainer>\n      <Row />\n    </Container>\n  );\n}\n\nReviewGuide.propTypes = {\n  setTechProfile: PropTypes.func,\n};\n\nReviewGuide.defaultProps = {\n  setTechProfile: () => {},\n};\n\nconst GuideTitle = styled(Text)`\n  font-size: 18px;\n`;\nconst GuideVideoTitle = styled(Text)`\n  font-size: 16px;\n  font-weight: bold;\n  padding-left: 10px;\n`;\nconst MidSection = styled(Col)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\nconst ListContainer = styled.div`\n  padding-top: 30px;\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst RightIcon = styled.img`\n  width: 20px;\n  marginRight: 10px;\n`;\nexport default ReviewGuide;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\reviewGuide.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "systemRequirement.js",
                                                                            "fileData": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Row, Col, Typography } from 'antd';\nimport PropTypes from 'prop-types';\n// import StepButton from '../../../../../components/StepButton';\nimport { Button } from 'react-bootstrap';\nimport SpeakerIcon from '../../../../../assets/images/speaker_icon.png';\nimport MicroPhoneIcon from '../../../../../assets/images/microphone_icon.png';\nimport ModalPopUp from './modalPopUp';\nimport Box from '../../../../../components/common/Box';\nimport * as TechnicianApi from '../../../../../api/technician.api';\nimport { useUser } from '../../../../../context/useContext';\nimport { openNotificationWithIcon } from '../../../../../utils';\nimport 'antd/dist/antd.css';\n\nconst { Text } = Typography;\n\nconst useAudio = url => {\n  const [audio] = useState(new Audio(url));\n\n  const [playing, setPlaying] = useState(false);\n  const [isTest, setIsTest] = useState(false);\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n    if (playing) {\n      if (audio.play()) {\n        setIsTest(true);\n      }\n    } else {\n      audio.pause();\n    }\n  }, [audio, playing]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n  return [playing, toggle, isTest];\n};\n\nconst audioSrc = 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3';\n\nfunction SystemRequirement({ setTechProfile, techProfile }) {\n  const { user } = useUser();\n  const [micText, setMicText] = useState('Test Microphone');\n  const [record, setRecord] = useState(false);\n  const [stopStatus, setStopStatus] = useState(true);\n  const [errorMic, setErrorMic] = useState('');\n  const [errorSpeaker, setErrorSpeaker] = useState('');\n  const [playing, toggle, isTest] = useAudio(audioSrc);\n\n  const [isMicTest, setIsMicTest] = useState(false);\n  const [micModal, setMicModal] = useState(false);\n\n  const checkIfMicAvailable = () => navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .then(() => {\n      setErrorMic('');\n      return true;\n    })\n    .catch(() => {\n      setErrorMic('Error Occurred. Please Check Your Device!');\n      return false;\n    });\n\n  const micTest = async () => {\n    if (await checkIfMicAvailable()) {\n      setRecord(!record);\n      setStopStatus(!stopStatus);\n      setMicText(stopStatus ? 'Stop' : 'Test Microphone');\n      setIsMicTest(true);\n    }\n  };\n\n  const toggleMicModal = async () => {\n    if (await checkIfMicAvailable()) {\n      setMicModal(prev => !prev);\n    }\n  };\n\n  useEffect(() => {\n    if (isTest) {\n      setErrorSpeaker('');\n    }\n  }, [isTest]);\n\n  useEffect(() => {\n    if (user.technician.profile.systemRequirement) {\n      const demoObj = user.technician.profile.systemRequirement;\n      if (demoObj && Object.keys(demoObj).length > 0) {\n        const temptechProfile = { ...techProfile };\n        temptechProfile.systemRequirement.complete = true;\n        setTechProfile(temptechProfile);\n      }\n\n      // setSettings(user.technician.profile.alertPreference.settings)\n    }\n  }, [user.technician.profile.systemRequirement]);\n\n  const handleSystemReqSave = () => {\n    if (!isMicTest) {\n      setErrorMic('Please Check Microphone.');\n    }\n    if (!isTest) {\n      setErrorSpeaker('Please Check Speakers.');\n    }\n\n    if (isMicTest && isTest) {\n      setTechProfile(prev => ({\n        ...prev,\n        systemRequirement: {\n          ...prev.systemRequirement,\n          complete: true,\n        },\n      }));\n      setErrorMic('');\n      setErrorSpeaker('');\n    }\n\n    TechnicianApi.updateTechnician(user.technician.id, { profileImage: false, systemRequirement: { complete: true } });\n    openNotificationWithIcon('success', 'Success', 'Information Submitted');\n  };\n\n  return (\n    <Container>\n      <FormContainer>\n        <FormSection justify=\"space-around\">\n          <TestSection xs={24} md={11}>\n            <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n              <SystemIcon src={MicroPhoneIcon} />\n              <TypeTitle>Built-in Microphone</TypeTitle>\n            </Box>\n            <TestText onClick={toggleMicModal}>{micText}</TestText>\n            <AlertError>{errorMic}</AlertError>\n          </TestSection>\n          <ModalPopUp\n            micModal={micModal}\n            toggleMicModal={toggleMicModal}\n            micTest={micTest}\n            record={record}\n            status={micText}\n            stopStatus={stopStatus}\n          />\n          <TestSection xs={24} md={11}>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n              <SystemIcon src={SpeakerIcon} />\n              <TypeTitle>Attached or external Speakers</TypeTitle>\n            </Box>\n            <TestText onClick={toggle}>\n              {playing ? 'Stop' : 'Test Speakers'}\n            </TestText>\n            <AlertError>{errorSpeaker}</AlertError>\n          </TestSection>\n        </FormSection>\n      </FormContainer>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" marginTop={30}>\n        <Button className=\"btn app-btn\" onClick={handleSystemReqSave}>\n          <span />\n          Save\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nSystemRequirement.propTypes = {\n  setTechProfile: PropTypes.func,\n};\n\nSystemRequirement.defaultProps = {\n  setTechProfile: () => {},\n};\n\nconst AlertError = styled.span`\n  color: red;\n  font-size: 14px;\n  position: absolute;\n  bottom: -24px;\n  left: 0;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n`;\n\nconst FormSection = styled(Row)`\n  width: 100%;\n  margin: 20px;\n`;\n\nconst SystemIcon = styled.img`\n  width: 30px;\n`;\n\nconst TestSection = styled(Col)`\n  background: #f8f8f8;\n  padding: 20px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TestText = styled(Text)`\n  text-decoration: underline;\n  cursor: pointer;\n`;\n\nconst TypeTitle = styled(Text)`\n  padding-left: 10px;\n  font-weight: bold;\n  font-size: 16px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default SystemRequirement;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\systemRequirement.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "upload.js",
                                                                            "fileData": "import React, { useState, useEffect } from 'react';\nimport {\n  Upload, message, Space, notification,\n} from 'antd';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { InboxOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { SERVER_URL } from '../../../../../constants';\nimport {useUser} from '../../../../../context/useContext';\nimport * as TechnicianService from '../../../../../api/technician.api';\nconst { Dragger } = Upload;\n\nconst UploadFile = props => {\n  const {user} = useUser()\n  const {\n    title, description, type, setTechProfile, sectionName\n  } = props;\n\n\n  // const the_date = Math.random()\n  const [defaultImage,setDefaultImage] = useState('')\n  const [fileList, setFileList] = useState([]);\n  const imageFileTypes = '.png, .jpg, .jpeg, .gif';\n  const openNotificationWithIcon = (nType, header, nMessage) => {\n    notification[nType]({\n      message: header,\n      description: nMessage,\n    });\n  };\n\n\n\n  useEffect(()=>{\n\n    if(sectionName === \"confirmId\"){\n      // console.log(\">>>user.technician.\",user.technician)\n      setDefaultImage(user.technician.profile.confirmId.imageUrl)\n      // console.log(\">this is the image url -----------\",String(user.technician.profile.confirmId.imageUrl))\n      // setFileList([user.technician.profile.confirmId.imageUrl])\n    }\n\n  },[])\n\n  useEffect(() => {\n    if (sectionName === 'profileImage') {\n      setTechProfile(prev => ({\n        ...prev,\n        [sectionName]: {\n          ...prev[sectionName],\n          imageUrl: fileList[0]\n            ? `${SERVER_URL}/images/${fileList[0].response}`\n            : null,\n          complete: fileList.length > 0,\n        },\n      }));\n    } else {\n      setTechProfile(prev => ({\n        ...prev,\n        [sectionName]: {\n          ...prev[sectionName],\n          imageUrl: fileList[0]\n            ? `${SERVER_URL}/images/${fileList[0].response}`\n            : null,\n        },\n      }));\n    }\n  }, [fileList, sectionName, setTechProfile]);\n\n  const fileName = `${user.id}`\n\n  const uploadProps = {\n    name: 'file',\n    multiple: false,\n    accept: imageFileTypes,\n    fileList,\n    action: `${SERVER_URL}/api/uploads`,\n    data:{\"user\":( sectionName===\"confirmId\"?`${fileName}-license` :`${fileName}` )},\n    beforeUpload: file => {\n      if (\n        !(\n          file.type === 'image/jpeg'\n          || file.type === 'image/jpg'\n          || file.type === 'image/gif'\n          || file.type === 'image/png'\n          || file.type === ''\n        )\n      ) {\n        openNotificationWithIcon('error', 'Warning', 'Please upload a document of type JPEG, JPG, GIF, or PNG.');\n        return false;\n      }\n\n      if (file.size / 1048576 > 10) {\n        message.error('Image must be smaller than 10MB!');\n        return false;\n      }\n\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.addEventListener('load', async event => {\n          const loadedImageUrl = event.target.result;\n          const image = document.createElement('img');\n          image.src = loadedImageUrl;\n          await new Promise((imageLoadResolve) => {\n            image.addEventListener('load', () => {\n              const { width, height } = image;\n              if (width < 160 || width > 5000 || height < 160 || height > 5000) {\n                openNotificationWithIcon(\n                  'error',\n                  'Warning',\n                  'Please upload a document with dimensions between 160px and 5000px.',\n                );\n                reject();\n              } else {\n                resolve();\n              }\n              imageLoadResolve();\n            });\n          });\n        });\n      });\n    },\n    onChange(info) {\n      const { status } = info.file;\n      console.log(info.file,\">>>.my infor\")\n\n      setFileList([info.file]);\n      if (status === 'removed') {\n        setFileList([]);\n      }\n      if (status === 'done') {\n        console.log(\">>>>>>>>fileName>>>>>\",fileName)\n        if(sectionName === \"profileImage\"){\n            TechnicianService.updateTechnician(user.technician.id,{profileImage:{imageUrl:`${fileName}.${info.file.name.split('.').pop()}`}})\n        }\n        else if (sectionName === \"confirmId\"){\n           TechnicianService.updateTechnician(user.technician.id,{profileImage:false,confirmId:{imageUrl:`${fileName}-license-.${info.file.name.split('.').pop()}`}})\n\n          // TechnicianService.updateTechnician(user.technician.id,{profileImage:{imageUrl:false}},profile:{image:imageUrl:fileName+'.'+`${info.file.name.split('.').pop()}`})\n        }\n        \n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === 'error') {\n        setFileList([]);\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n\n  };\n  return (\n    <DraggerContainer {...uploadProps}>\n\n      {defaultImage && sectionName === \"confirmId\" ? (\n        <UploadedImage\n\n          src={`${SERVER_URL}/images/${defaultImage}`}\n          type={type}\n        />\n      ) : (\n        <Space direction=\"vertical\" align=\"center\">\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">{title}</p>\n          <p className=\"ant-upload-hint\">{description}</p>\n          <Button className=\"btn app-btn\"><span></span>Upload</Button>\n        </Space>\n      )}\n    </DraggerContainer>\n  );\n};\n\nUploadFile.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  type: PropTypes.string,\n  setTechProfile: PropTypes.func,\n  techProfile: PropTypes.object,\n  sectionName: PropTypes.string,\n};\n\nUploadFile.defaultProps = {\n  title: 'Drag & Drop or Upload Photo',\n  description: 'Please upload photo.',\n  type: 'profile',\n  setTechProfile: () => {},\n  techProfile: {},\n  sectionName: 'profileImage',\n};\n\nconst DraggerContainer = styled(Dragger)`\n  background: #fff;\n  .ant-upload .ant-upload-drag-container {\n    justify-content: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\nconst UploadedImage = styled.img`\n  width: ${props => (props.type === 'profile' ? '250px' : '50%')};\n  height: ${props => (props.type === 'profile' ? '250px' : '50%')};\n  object-fit: cover;\n  border-radius: ${props => (props.type === 'profile' ? '50%' : 'none')};\n`;\n\n\nexport default UploadFile;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\upload.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "uploadAvatar.js",
                                                                            "fileData": "import { Upload, message,notification,} from 'antd';\nimport { InboxOutlined,} from '@ant-design/icons';\nimport React, { useState, useEffect } from 'react';\nimport { FaUserCircle } from \"react-icons/fa\"\nimport {  Button } from 'react-bootstrap';\nimport { useUser } from '../../../../../context/useContext';\nimport { SERVER_URL } from '../../../../../constants';\nimport * as TechnicianService from '../../../../../api/technician.api';\nimport { useSocket } from '../../../../../context/socketContext';\nimport { useAuth } from '../../../../../context/authContext';\nimport { useTools } from 'context/toolContext';\nlet r = (Math.random() + 1).toString(36).substring(7);\nconst UploadAvatar =({setTechProfile,techProfile,setProfilePicUpdated}) => {\n\n  const {user,setUser} = useUser();\n  const {refetch} = useAuth();\n  const { socket } = useSocket();\n  const [showEditor,setShowEditor] = useState(false)\n  const [geekImage,setGeekImage] = useState();\n  const [profileImage,setProfileImage]= useState(true)\n  const [fileList, setFileList] = useState([]);\n  const {imageupload, \n\t\tsetImageupload,imageChange, setImageChange} = useTools();\n \n  const openNotificationWithIcon = (nType, header, nMessage) => {\n    notification[nType]({\n      message: header,\n      description: nMessage,\n    });\n  };\n  useEffect(()=>{\n    if(user && user?.technician?.profile?.image)\n    setGeekImage(user && user.technician.profile.image.length > 0 ? user.technician.profile.image : \"\" )\n  },[user])\n  const fileTypes = '.png, .jpg, .jpeg';\n  const { Dragger } = Upload;\n  let  fileNameImage = `${user.id}_userProfile_${r}`;\n\n  const props = {\n    name: 'file',\n    multiple: false,\n    fileList:fileList,\n    accept:fileTypes,\n    action: `${SERVER_URL}/api/uploads`,\n    data:{\"user\":`${fileNameImage}` },\n    maxCount :1,\n    beforeUpload: file => {\n      if(fileList.length > 0){\n        openNotificationWithIcon('error', 'Warning', 'Only one file is allowed.Please delete remove the previous one first');\n        return false;\n      }\n      if (\n        !(\n          file.type === 'image/jpg'\n          || file.type === 'image/png'\n          || file.type === 'image/jpeg'\n        )\n      ) {\n        openNotificationWithIcon('error', 'Warning', 'File Type Not Supported');\n        return false;\n      }\n\n      if (file.size / 1048576 > 10) {\n        openNotificationWithIcon('error', 'Warning', 'file should be smaller than 10mb');\n        return false;\n      }\n    },\n    async onChange(info) {\n\n      \n      const { status } = info.file;\n      console.log(\"info.file ::::::\",info.file)\n      if (status !== 'uploading') {\n\n        console.log(info.file, info.fileList);\n      }\n      if (status === 'uploading') {\n        setFileList([info.file]);\n      }\n      if (status === 'done') {\n        openNotificationWithIcon('success','Success',`${info.file.name} file uploaded successfully.`);\n        let finalImage = `${fileNameImage}-.${info.file.type.split('/').pop()}`;\n        console.log(\">>>>>>>>>>>>>>file name :::\" ,finalImage)\n          let techUpdate = await TechnicianService.updateTechnicianWithParams( user.technician.id ,{\"profile.image\":`${SERVER_URL}/images/${finalImage}`})\n          setImageupload(true);\n          setImageChange(`${SERVER_URL}/images/${finalImage}`);\n          setFileList([info.file]);\n          setGeekImage(`${SERVER_URL}/images/${finalImage}`)\n          setShowEditor(false)\n          setProfileImage(true);\n         \n      } else if (status === 'error') {\n        setFileList([])\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n    async onRemove (){\n      setFileList([])\n      setImageChange(\"\");\n      setImageupload(false);\n      setGeekImage(\"\")\n      let techUpdate = await TechnicianService.updateTechnicianWithParams( user.technician.id ,{\"profile.image\":\"\"})\n       refetch()\n      r = (Math.random() + 1).toString(36).substring(7);\n         \n    }\n  };\n\n  return (\n    <div className=\"col-12 mx-auto\">\n      \n        <><Dragger {...props}>\n          \n        { geekImage ? \n          <img src={geekImage}  className=\"geekImageSetting\"></img>\n          :\n          <FaUserCircle className=\"geekImageSetting\" />\n        }\n              <p className=\"ant-upload-text\">Click this area to upload your Image</p>\n            </Dragger>\n          \n            </>\n         \n             \n        </div>\n  );\n};\n\n\n\nexport default UploadAvatar;",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\uploadAvatar.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "videoPopup.js",
                                                                            "fileData": "import React from 'react';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ReactPlayer from 'react-player/lazy';\n\nconst VideoPopup = ({ selectedVideo, setSelectedVideo }) => {\n  const handleCloseVideo = () => {\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n    });\n  };\n\n  const handleEnd = () => {\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n      isComplete: true,\n    });\n  };\n  const handleCancel = () => {\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n      isComplete: false,\n    });\n  };\n\n  return (\n    <Modal\n      className = \"video-modal\"\n      visible={selectedVideo.play}\n      title={selectedVideo.title}\n      onOk={handleCloseVideo}\n      onCancel={handleCancel}\n      cancelButtonProps={{ style: { display: 'none' } }}\n    >\n      <VideoPlayer\n        url={selectedVideo.url}\n        controls=\"true\"\n        onEnded={handleEnd}\n      />\n    </Modal>\n  );\n};\n\nVideoPopup.propTypes = {\n  selectedVideo: PropTypes.object,\n  setSelectedVideo: PropTypes.func,\n};\n\nVideoPopup.defaultProps = {\n  selectedVideo: {},\n  setSelectedVideo: () => {},\n};\n\nconst VideoPlayer = styled(ReactPlayer)`\n  width: 100% !important;\n  height: 100% !important;\n  position: relative;\n  padding-bottom: 56%;\n  padding-top: 10px;\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nexport default VideoPopup;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\Component\\videoPopup.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "profileReview.js",
                                                                    "fileData": "import React, { memo, useState, useEffect } from \"react\";\nimport { Row, Typography, Select, Col, Modal, Spin, notification } from \"antd\";\n// import HeadingAndSubHeading from \"components/HeadingAndSubHeading\";\n// import { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport {Button,InputGroup,Form} from  'react-bootstrap';\nimport styled from \"styled-components\";\nimport { openNotificationWithIcon } from \"../../../../utils\";\n// import { faEye } from \"@fortawesome/free-regular-svg-icons\";\nimport { ItemContainer, ItemTitle } from \"./style\";\nimport PhoneInput from \"react-phone-input-2\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faCheckCircle,faCopy} from \"@fortawesome/free-solid-svg-icons\";\n// import TechImages from \"../../../../components/TechImages\";\nimport H4 from \"../../../../components/common/H4\";\nimport { getFullName } from \"../../../../utils\";\nimport editIcon from \"../../../../assets/images/edit.png\";\nimport Input from \"../../../../components/AuthLayout/Input\";\nimport { languages,QUICKBOOK_SOFTWARE_ID,APP_URL } from \"../../../../constants\";\nimport { useAuth } from \"../../../../context/authContext\";\n// import Checkbox from \"../../../../components/common/CheckBox\";\nimport * as TechnicianService from \"../../../../api/technician.api\";\nimport ItemLabel from \"../../../../components/ItemLabel\";\n// import * as ExperienceService from \"../../../../api/experience.api\";\nimport * as SoftwareApi from '../../../../api/software.api';\nimport CheckBox from '../../../../components/common/CheckBox';\nimport {useSocket} from '../../../../context/socketContext';\nimport Loader from '../../../../components/Loader';\nimport { Steps } from \"antd\";\n// import { ConsoleSqlOutlined, InfoCircleOutlined, WindowsFilled } from '@ant-design/icons';\nimport {EmailOutlook} from \"../../../../constants\"\nimport * as InterviewQuestionApi from '../../../../api/interview.api';\nimport MCQ from \"components/MCQ\"\nimport ExamLoader from \"../../Register/steps/ExamLoader\"\n// let count =  1 ;\n\nconst { Step } = Steps;\nconst { Text } = Typography;\nconst { Option } = Select;\nconst ratingScale = [\n\t\"1Beginner\",\n\t\"2Basic knowledge but never used professionally\",\n\t\"3Pretty fluent & limited use professionally\",\n\t\"4Very fluent and a lot of use professionally\",\n\t\"5Complete mastery with extensive professional use\",\n];\n\nfunction SoftwareDetailSection({\n\tsoftware,\n\ttitle,\n\texperience,\n\tsetExperience,\n\tparent,\n\ttouchPointsList,\n\tsoftwareExperienceList,\n\tuser,\n\tactiveSoftwareIds,\n\tsavedSoftwareExperience,\n\tsavedCheckboxOptions,\n\tsavedTouchPoints,\n\tpreSavedOjectFormat,\n\trefetch,\n\tsoftwareSwitchChecked,\n\tsetSoftwareSwitchChecked,\n\tsocket\n\n}){\n\t// console.log(\"software\",software)\n\t// console.log(\"parent\",parent)\n\t// console.log(\"touchPointsList\",touchPointsList)\n\t// console.log(\"softwareExperienceList\",softwareExperienceList)\n\t// console.log(\"title\",title)\n\t// console.log(\"experience\",experience)\n\t// console.log('activeSoftwareIds',activeSoftwareIds)\n\t// console.log('savedSoftwareExperience',savedSoftwareExperience)\n\n\t// const [experienceYearArea, setExperienceYearArea] = useState('');\n\t// const [expertises, setExpertises] = useState([]);\n\t// const [dataToSave, setDataToSave] = useState([])\n\tconst [softwareExperience, setSoftwareExperience] = useState(savedSoftwareExperience)\n\tconst [touchPoints, setTouchPoints] = useState(preSavedOjectFormat)\n\tconst [touchPointsSelected, setTouchPointsSelected] = useState(savedTouchPoints)\n\tconst [checkboxOptions, setCheckboxOptions] = useState(savedCheckboxOptions);\n\tconst [saveSoftwareProgress,setSaveSoftwareProgress] = useState([]);\n\t// const [alertMessageAdditionalLanguage, setAlertMessageAdditionalLanguage] = useState('')\n\t// const [submittedAdditionalLanguage,setAdditionalLanguage] = useState([])\n\t\n\tconst experiencesYearAreas = softwareExperienceList.map((d) => {\n\t\tif(d.status.toLowerCase() === 'active'){\n\t\t\treturn (\n\t\t\t\t<Option key={`others-${d['id']}`} style={{ textAlign: 'left' }} value={`${d['id']}`}>\n\t\t\t\t\t{d['expr_from']} - {d['expr_to']}\n\t\t\t\t</Option>\n\t\t\t)\n\t\t}\n\t\treturn null;\n\t});\n\n\t// useEffect(() => {\n    //     (async () => {\n    //         let ques = [];\n    //             const quest = await InterviewQuestionApi.getQuestionList(s.testId);\n           \t \t\n    //     })();\n    // }, []);\n\tuseEffect(() => {\n\t\tif (experience) {\n\t\t\t// setExperienceYearArea(experience.experienceYearArea);\n\t\t\t// setExpertises(experience.expertises);\n\t\t}\n\t}, [experience]);\n\n\n\tuseEffect(() => {\n\t\tsetSoftwareExperience(savedSoftwareExperience)\n\t\tsetCheckboxOptions(savedCheckboxOptions)\n\t}, [savedSoftwareExperience,savedCheckboxOptions]);\n\n\t/*const isExist = (expertise) => {\n\t\tif(expertises !==  undefined){\n\t\t\treturn !!expertises.find(item => item.expertise === expertise.id)\n\t\t}\n\t\telse{\n\t\t\treturn false\n\t\t}\n\t\n\n\t};*/\n\t// const findExpertise = (expertise) => expertises.find(item => item.expertise === expertise.id);\n   \n\t/*const handleChangeLevel = (expertise, rate) => {\n\t\tconst newExpertises = isExist(expertise)\n\t\t? expertises.map(item => item.expertise === expertise.id ? { ...item, rate } : item)\n\t\t: [...expertises, { expertise: expertise.id, rate }];\n\n\t\tsetExpertises(newExpertises);\n\t\tsetExperience({\n\t\t\tsoftware: software.id,\n\t\t\texperienceYearArea,\n\t\t\texpertises: newExpertises,\n\t\t});\n\t};*/\n\n\tconst handleCheckBoxStatus = (sid, e) => {\n\t\tlet checkOptions = {...checkboxOptions};\n\t\tif(!e.target.checked){\n\t\t\tlet idxItem = checkOptions[sid].indexOf(e.target.value)\n\t\t\tif(idxItem !== -1){\n\t\t\t\tcheckOptions[sid].splice(idxItem,1)\n\t\t\t}\n\t\t\tsetCheckboxOptions(checkOptions);\n\n\t\t\tlet temp_selected = {...touchPointsSelected};\n\t\t\ttemp_selected[software.id+'_'+e.target.value] = -1\n\t\t\tsetTouchPointsSelected(temp_selected)\n\t\t}else{\n\t\t\tif(checkOptions[sid] === undefined){\n\t\t\t\tcheckOptions[sid] = [];\n\t\t\t}\n\t\t\tcheckOptions[sid].push(e.target.value)\n\t\t\tsetCheckboxOptions(checkOptions);\n\n\t\t}\n\t};\n\n\tconst handleTouchPoints = (current, optionName) => {\n\t\t// console.log('current',current)\n\t\tif(touchPointsList[current]){\n\n\t\t\tlet sid = software.id;\n\t\t\t\n\t\t\tlet temp_selected = {...touchPointsSelected};\n\t\t\ttemp_selected[sid+'_'+optionName] = current\n\t\t\tsetTouchPointsSelected(temp_selected)\n\n\t\t\tlet t_obj = touchPoints;\n\t\t\tlet t_arr = (t_obj[sid] ? t_obj[sid] : [])\n\n\t\t\tif(t_arr.length > 0){\n\t\t\t\tlet idx = t_arr.findIndex(o => o.option === optionName);\n\t\t\t\tif(idx !== -1){\n\t\t\t\t\tt_arr.splice(idx,1)\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet temp_obj = {\n\t\t\t\t'option':optionName,\n\t\t\t\t'touch_point': touchPointsList[current].level,\n\t\t\t\t'touch_point_id': touchPointsList[current].id,\n\t\t\t\t'current_num':current\n\t\t\t}\n\t\t\ttemp_obj[optionName] = current\n\t\t\tt_arr.push(temp_obj)\n\t\t\tt_obj[sid] = t_arr;\n\t\t\tsetTouchPoints(t_obj);\n\t\t\t// console.log('tc',touchPoints)\n\t\t\t\n\t\t}\n\t}\n\tconst saveSoftwareData = async(s)=> {\n\t\t// console.log(\"s\",s)\n\t\tlet sp = [...saveSoftwareProgress]\n\t\tsp.push(s.id)\n\t\tsetSaveSoftwareProgress(sp)\n\n\t\tlet techData = await TechnicianService.retrieveTechnician(user.technician.id)\n\t\t// console.log(\"techData\",techData)\n\t\tlet dataToSave = {}\n\t\tdataToSave['software_id'] = s.id\n\t\tdataToSave['experience'] = (softwareExperience[s.id] ? softwareExperience[s.id] : '')\n\t\tdataToSave['sub_options'] = (touchPoints[s.id] ? touchPoints[s.id] : [])\n\t\tdataToSave['parent'] = (s.parent ? s.parent : '')\n\t\t// console.log(\"dataToSave\",dataToSave)\n\n\t\tvar dataArr = [];\n\t\tif(techData && techData.expertise){\n\t\t\tdataArr = [...techData.expertise];\n\t\t\t// console.log(\"Before data arr::\",dataArr)\n\t\t\tlet idx = dataArr.findIndex(o => o.software_id === s.id);\n\t\t\t// console.log(\"idx ::: \",idx)\n\t\t\tif(idx !== -1){\n\t\t\t\tdataArr.splice(idx,1)\n\t\t\t}\n\t\t\t\n\t\t\tdataArr.push(dataToSave)\n\t\t\t// console.log(\"After data arr::\",dataArr)\n\t\t}else{\n\t\t\tdataArr.push(dataToSave)\n\t\t}\n\t\tlet res = await TechnicianService.updateTechnician(techData.id,{\n\t\t  expertise:dataArr,\n\t\t  profileImage:{imageUrl:false}\n\t\t})\n\n\t\tif(res && res.id){\n\t\t\tnotification.success({\n\t\t\t\tmessage: 'Experience saved successfully.',\n\t\t\t});\n\t\t\tlet checkedIds = [...softwareSwitchChecked]\n\t\t\tcheckedIds.push(s.id)\n\t\t\tsetSoftwareSwitchChecked(checkedIds)\n\n\t\t}else{\n\t\t\tnotification.error({\n\t\t\t\tmessage: 'Faild to save data. Please reload your page and try again.',\n\t\t\t});\n\t\t}\n\t\tsp = [...saveSoftwareProgress]\n\t\tsp.splice(sp.indexOf(s.id),1)\n\t\tsetSaveSoftwareProgress(sp)\n\n\t\trefetch()\n\n\t\tsetTimeout(function(){\n\t\t\tsocket.emit(\"loggedOut\",{userId:user.id, userType:user.userType})\n\t\t\tsetTimeout(function(){\n\t\t\t\tsocket.emit(\"loggedIn\",{userId:user.id,userType:user.userType,user:user})                    \n\t\t\t},1000)\n\t\t},1000)\n\n\t};\n\n\treturn (\n\t\t<SoftwareContainer className={(activeSoftwareIds.indexOf(software.id) !== -1 ? \"\" : \"d-none\")}>\n\t\t\t{/*<SectionImage src={TechImages[software.name]} />*/}\n\t\t\t<SectionTitle >{`How many years of experience do you have with ${(software.parent === undefined || software.parent === '0' ? title : software.name+' ('+parent.name+')')}?`}</SectionTitle>\n\t\t\t<SelectYearContainer>\n\t\t\t\t<ItemLabel className=\"Tech-label\" style={{ textAlign: 'initial' }}>Select the years</ItemLabel>\n\t\t\t\t<TechSelect\n\t\t\t\t\tid=\"select_year\"\n\t\t\t\t\tshowSearch\n\t\t\t\t\tclassName = \"select-boxes-tech\"\n\t\t\t\t\tplaceholder=\"Select the years\"\n\t\t\t\t\tshowArrow\n\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\tfilterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n\t\t\t\t\tvalue={softwareExperience[software.id]}\n\t\t\t\t\tonChange={(value,e) => {\n\t\t\t\t\t\tlet d = {...softwareExperience}\n\t\t\t\t\t\td[software.id] = value\n\t\t\t\t\t\tsetSoftwareExperience(d)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{experiencesYearAreas}\n\t\t\t\t</TechSelect>\n\t\t\t</SelectYearContainer>\n\n\t\t\t{software.sub_option && \n\t\t\t\tsoftware.sub_option.map(item => (\n\t\t\t\t<AreaContainer key={`areaCheck-${item}`}>\n\t\t\t\t\t<CheckBox\n\t\t\t\t\t\tid={item}\n\t\t\t\t\t\tchecked={ (checkboxOptions[software.id] && checkboxOptions[software.id].indexOf(item) !== -1 ? true : false) }\n\t\t\t\t\t\tonChange={(e) => handleCheckBoxStatus(software.id, e)}\n\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t</CheckBox>\n\t\t\t\t\t{ checkboxOptions[software.id] && checkboxOptions[software.id].indexOf(item) !== -1 && (\n\t\t\t\t\t\t<RateSelectBody span={24}>\n\t\t\t\t\t\t\t<ItemLabel>Please rate your level of experience</ItemLabel>\n\t\t\t\t\t\t\t<RateTabContainer>\n\t\t\t\t\t\t\t\t<RateStepsTab\n\t\t\t\t\t\t\t\t\tprogressDot\n\t\t\t\t\t\t\t\t\tcurrent={(touchPointsSelected[software.id+'_'+item] >= 0 ? touchPointsSelected[software.id+'_'+item] : -1)}\n\t\t\t\t\t\t\t\t\tonChange={(current) => {\n\t\t\t\t\t\t\t\t\t\thandleTouchPoints(current,item)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttouchPointsList.map((rItem) => {\n\t\t\t\t\t\t\t\t\t\t\tif(rItem.status && rItem.status.toLowerCase() === 'active'){\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RateStep\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`${rItem.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription={rItem.level}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</RateStepsTab>\n\t\t\t\t\t\t\t</RateTabContainer>\n\t\t\t\t\t\t</RateSelectBody>\n\t\t\t\t\t)}\n\t\t\t\t</AreaContainer>\n\t\t\t))}\n\t\t\t<Col className=\"w-100 text-right mt-4\">\n\t\t\t\t{(saveSoftwareProgress.indexOf(software.id) === -1 \n\t\t\t\t\t? \n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tclassName=\"btn app-btn\"\n\t\t\t\t\t\t\tonClick={()=>saveSoftwareData(software)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span></span>Save\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t:\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tclassName=\"btn app-btn app-btn-transparent\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span/><Spin/>\n\t\t\t\t\t\t</Button>   \n\t\t\t\t)}\n\t\t\t</Col>\n\t\t</SoftwareContainer>\n\t)};\n\n\n\n\tfunction ProfileReview({ user, estimatedWaitTime, setEstimatedWaitTime}) {\n\n\t\tlet count =  1 ;\n\t\tconsole.log('user>>>>>>>>>>>>ProfileReview',user)\n\t\tconst [isLoading, setIsLoading] = useState(true);\n\t\tconst { updateUserInfo,refetch } = useAuth();\n\t\tconst {socket} = useSocket()\n\t\t// const [showPassword, setShowPassword] = useState(false);\n\t\tconst [newdisplayInput, setdisplayInput] = useState(false);\n\t\tconst [expInput, setexpInput] = useState(false);\n\t\tconst [showLanguageInput, setshowLanguageInput] = useState(false);\n\t\tconst [showAddLanguageInput, setshowAddLanguageInput] = useState(false);\n\n\t\tconst [showLevelEditor, setShowLevelEditor] = useState(false);\n\t\tconst [experienceNum, setExperience] = useState(\"5\");\n\t\tconst [showNameEditor, setshowNameEditor] = useState(false);\n\t\tconst [phoneNumber, setPhoneNumber] = useState(\"\");\n\t\tconst [otherSoftwareList,setOtherSoftwareList] = useState([])\n\t\tconst [selectedOtherSoftwareList,setSelectedOtherSoftwareList] = useState([])\n\t\t// const [extension, setExtension] = useState(\"\");\n\t\t// const [current, setcurrent] = useState(1);\n\t\tconst [displaySoftwareEditor, setdisplaySoftwareEditor] = useState({});\n\t\t// const [subSoftware, setSubSoftware] = useState([]);\n\t\tconst [softwareList, setSoftwareList] = useState([]);\n\t\tconst [touchPointsList, setTouchPointsList] = useState([]);\n\t\tconst [softwareExperienceList, setSoftwareExperienceList] = useState([]);\n\t\tconst [currentSoftware, setcurrentSoftware] = useState({});\n\t\tconst [editexperiences, setEditexperiences] = useState([]);\n\t\tconst [certifiedSoftwares,setCertifiedSoftwares] = useState([])\n\t\tconst [certifiedStatus,setCertifiedStatus] = useState(false);\n\t\tconst demoArr = []; //user.technician.experiences.map((item) => item.software.id);\n\t\tconst demoArr2 = []; /*user.technician.experiences.map((item) => {\n\t\t\treturn { software: item.software.id, rate: item.rating };\n\t\t});*/\n\t\tlet questions \n\t\t// const experienceYearsList = [\"5 - 10\", \"10 - 15\", \"15 - 20\", \"20 - 25\"];\n\t\t// const [softwareActive, setSoftwareActive] = useState(false);\n\t\tconst [activeSoftwareIds, setActiveSoftwareIds] = useState([])\n\t\tconst [softwareSwitchChecked, setSoftwareSwitchChecked] = useState([])\n\t\tconst [savedSoftwareExperience, setSavedSoftwareExperience] = useState({})\n\t\tconst [savedCheckboxOptions, setSavedCheckboxOptions] = useState({});\n\t\tconst [savedTouchPoints, setSavedTouchPoints] = useState({});\n\t\tconst [preSavedOjectFormat, setPreSavedObjectFormat] = useState({});\n\t\tconst [emailAlertStatus, setEmailAlertStatus] = useState(false)\n\t\tconst [showEmailAlertEditor, setShowEmailAlertEditor] = useState(false);\n\t\tconst [showOtherSoftwareEditor,setShowOtherSoftwareEditor] = useState(false);\n\t\tconst [updateCertification,setUpdateCertification] = useState(false)\n\t\tconst [softwareUpdate,setSoftwareUpdate] = useState(false)\n\t\t// const [marks, setMarks] = useState(0);\n\t\tconst [testId,setTestId] = useState();\n\t\tconst [result, setResult] = useState('loader');\n\t\tconst [progressBarPercentage,setProgressBarPercentage] = useState();\n\t\tconst [previousTestSubmit, setPreviousTestSubmit] = useState(0);\n\t\tconst [showProgress,setShowProgress] = useState(false);\n\t\tconst [showFooter,setShowFooter] = useState(true)\n\t\tconst [showResultPage, setShowResultPage] = useState(false);\n\t\tconst [callHandleComplete, setCallHandleComplete] = useState(false)\n\t\tconst [handleNextButton,setHandleNextButton] = useState(true)\n\t\t// const [disableButton,setDisableButton] = useState(false)\n\t\tconst [question, setQuestion] = useState();\n\t\tconst [selectedSoftwares, setSelectedSoftwares] = useState({});\n\t\tconst [softSelected, setSoftSelected] = useState(false);\n\t\tconst [techProfileLink,setTechProfileLink] = useState('');\n\n\t\t// const [inputs, setInputs] = useState(false);\n\t\t\n\t\tconst [dialCode, setDialCode] =useState(\"\")\n\t\tuseEffect(() => {\n\t\t\tif (user.technician.certifiedIn.length > 0){\n\t\t\t\tsetCertifiedStatus(true)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsetCertifiedStatus(false)\n\t\t\t}\n\t\t\tsetPhoneNumber(user.technician.profile.confirmId.phoneNumber)\n\t\t\tsetTechProfileLink(`${APP_URL}/technician-details-setup?technicianId=${user.id}&medium=technician-profile`)\n\t\t}, [user]);\n\n\t\tconst HandlePhoneNumber = (e, data) => {\n\t\t\tsetPhoneNumber(`+${e}`);\n\t\t\tsetDialCode(data.dialCode)\n\t\t};\n\n\t\tuseEffect(()=>{\n\t\t\tif(updateCertification){\n\t\t\t\tif (!certifiedStatus){\n\t\t\t\t\tlet certifiedIn = [...certifiedSoftwares]\n\t\t\t\t\tcertifiedIn = certifiedIn.filter(item => item.id != QUICKBOOK_SOFTWARE_ID)\n\t\t\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\t\tcertifiedIn: certifiedIn,\n\t\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlet softwares = [...softwareList]\n\t\t\t\t\tlet certifiedIn = softwares.filter(item => item.id == QUICKBOOK_SOFTWARE_ID)\n\t\t\t\t\tcertifiedIn = certifiedIn.map(item => item.id)\n\t\t\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\t\tcertifiedIn: certifiedIn,\n\t\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tsetUpdateCertification(!setUpdateCertification)\n\t\t},[updateCertification])\n\n\t\tconst updateCertifiedStatus = async(e)=>{\n\t\t\t\tsetCertifiedStatus(!certifiedStatus)\n\t\t\t\tsetUpdateCertification(true)\t\t\n\t\t}\n\t\tuseEffect(() => {\n\n\t\t\t(async () => {\n\t\t\t\tif(user && user.technician && user.technician.profile && user.technician.profile.confirmId){\n\t\t\t\t\tsetPhoneNumber(user.technician.profile.confirmId.phoneNumber)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(user && user.technician && user.technician.expertise){\n\t\t\t\t\tlet activeSoftwares = []\n\t\t\t\t\tlet savedExperience = {};\n\t\t\t\t\tlet savedCheckboxOptions = {};\n\t\t\t\t\tlet savedTouchPointsOptions = {}\n\t\t\t\t\tlet t_obj = {}\n\n\t\t\t\t\tif(user.technician.expertise){\n\t\t\t\t\t\tconsole.log('111 user technicianexpertise',user.technician)\n\n\t\t\t\t\t\tuser.technician.expertise.map((v,i)=>{\n\t\t\t\t\t\t\tlet t_arr = []\n\t\t\t\t\t\t\tactiveSoftwares.push(v.software_id)\n\t\t\t\t\t\t\tsavedExperience[v.software_id] = (v.experience ? v.experience : '')\n\t\t\t\t\t\t\t// console.log(\"idx::::\",i+1, user.technician.expertise.length)\n\n\t\t\t\t\t\t\tif(savedCheckboxOptions[v.software_id] === undefined){\n\t\t\t\t\t\t\t\tsavedCheckboxOptions[v.software_id] = []\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(v.sub_options){\n\t\t\t\t\t\t\t\tsavedCheckboxOptions[v.software_id] = v.sub_options.map(a => a.option);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tv.sub_options.map((so,si)=>{\n\t\t\t\t\t\t\t\t\tsavedTouchPointsOptions[v.software_id+'_'+so.option] = (so.current_num ? so.current_num : -1)\n\n\t\t\t\t\t\t\t\t\tlet temp_obj = {}\n\t\t\t\t\t\t\t\t\ttemp_obj['option'] = so.option\n\t\t\t\t\t\t\t\t\ttemp_obj['touch_point'] = so.touch_point\n\t\t\t\t\t\t\t\t\ttemp_obj['touch_point_id'] = so.touch_point_id\n\t\t\t\t\t\t\t\t\ttemp_obj['current_num'] = so.current_num\n\t\t\t\t\t\t\t\t\tt_arr.push(temp_obj)\n\t\t\t\t\t\t\t\t\tt_obj[v.software_id] = t_arr;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(v.sub_options.length === si+1){\n\t\t\t\t\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t\t\t\t\tsetPreSavedObjectFormat(t_obj)\n\t\t\t\t\t\t\t\t\t\t\tsetSavedTouchPoints(savedTouchPointsOptions);\n\t\t\t\t\t\t\t\t\t\t},10)                            \n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tsavedCheckboxOptions[v.software_id] = []\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(user.technician.expertise.length === i+1){\n\t\t\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t\t\tconsole.log('1111 active software',activeSoftwares)\n\t\t\t\t\t\t\t\t\tsetSoftwareSwitchChecked(activeSoftwares);\n\t\t\t\t\t\t\t\t\tsetSavedSoftwareExperience(savedExperience);\n\t\t\t\t\t\t\t\t\tsetSavedCheckboxOptions(savedCheckboxOptions);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t},10)                            \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(user && user.technician && user.technician.general){\n\t\t\t\t\tseteditedEnglishLevel((user.technician.general.englishLevel ? user.technician.general.englishLevel : 0))\n\t\t\t\t}\n\t\t\t\tif(user && user.technician && user.technician.emailAlertsWithoutLogin){\n\t\t\t\t\tsetEmailAlertStatus(user.technician.emailAlertsWithoutLogin)\n\t\t\t\t}\n\t\t\t\tconst res = await SoftwareApi.getSoftwareList();\n\n\t\t\t\tif (res && res.data) {\n\t\t\t\t\tconsole.log(\"res.data\",res.data)\n\t\t\t\t\tsetSoftwareList(res.data);\n\t\t\t\t\tconst resTouchPoints = await SoftwareApi.getTouchPointsList();\n\t\t\t\t\t// console.log(\"resTouchPoints\",resTouchPoints)\n\t\t\t\t\tif (resTouchPoints && resTouchPoints.data) {\n\t\t\t\t\t\tresTouchPoints.data.sort(function(a, b) {\n\t\t\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetTouchPointsList(resTouchPoints.data)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resSoftwareExperience = await SoftwareApi.getSoftwareExperiencesList();\n\t\t\t\t\t// console.log(\"resSoftwareExperience\",resSoftwareExperience)\n\t\t\t\t\tif (resSoftwareExperience && resSoftwareExperience.data) {\n\t\t\t\t\t\tresSoftwareExperience.data.sort(function(a, b) {\n\t\t\t\t\t\t\treturn a.expr_from - b.expr_from;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetSoftwareExperienceList(resSoftwareExperience.data)\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tsetIsLoading(false)   \n\t\t\t\t\t},800)\n\t\t\t\t}else{\n\t\t\t\t\tsetIsLoading(false)                       \n\t\t\t\t}\n\t\t\t})();\n\t\t}, [user]);\n\n\t\tuseEffect(() => {\n\t\t\t// console.log(\"softwareList >>>\",softwareList)\n\t\t\t// console.log(\"currentSoftware >>>\",currentSoftware)\n\t\t\tif (softwareList.length !== 0) {\n\t\t\t\tObject.keys(currentSoftware).forEach((e) => {\n\t\t\t\t\t// console.log(\"e ::\",e)\n\t\t\t\t\tlet index = softwareList.findIndex((i) => i.id === e);\n\t\t\t\t\t// console.log(\"index ::\",index)\n\t\t\t\t\t// setSubSoftware(softwareList[index]);\n\t\t\t\t})\n\t\t\t}\n\t\t}, [softwareList]);\n\t\tconst fetchOtherSoftwareList = async()=>{\n\t\t\tconst software_response = await SoftwareApi.getOtherSoftwareList()\n\t\t\tlet temp_arr = software_response.data\n\t\t\tlet software_arr = []\n\t\t\tlet user_selected_softwareIds = user.technician.otherSoftwares\n\t\t\tif(temp_arr.length > 0){\n\t\t\t\tsoftware_arr = temp_arr.filter(item=> user_selected_softwareIds.includes(item.id))\n\t\t\t\tsoftware_arr = software_arr.map((item) => {return {\"name\":item.name,\"value\":item.id}})\n\t\t\t}\n\t\t\tsetSelectedOtherSoftwareList(software_arr)\n\t\t\tsetOtherSoftwareList(temp_arr)\n\t\t}\n\t\tuseEffect(()=>{\n\t\t\tfetchOtherSoftwareList()\n\t\t},[])\n\t\t// const handleChangeLevel = (expertise, rate) => {};\n\t\t\n\t\t\t\n\t\tuseEffect(() => {\n\t\t\tlet demoOb1 = {};\n\t\t\tlet demoOb2 = {};\n\t\t\t// console.log(\"demoArr :::\",demoArr)\n\n\t\t\tfor (var k in demoArr) {\n\t\t\t\tif (demoArr2[k].rate === undefined) {\n\t\t\t\t\tdemoOb1[String(demoArr[k])] = 0;\n\t\t\t\t\tdemoOb2[String(demoArr[k])] = false;\n\t\t\t\t} else {\n\t\t\t\t\tdemoOb1[String(demoArr[k])] = demoArr2[k].rate;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(\"demoOb1 :::\",demoOb1)\n\t\t\tsetcurrentSoftware(demoOb1);\n\t\t\tsetdisplaySoftwareEditor(demoOb1);\n\t\t}, []);\n\t\t\n\t\tconst EditHandler = (value) => {\n\t\t\tif (value === \"experience\") {\n\t\t\t\tsetexpInput(!expInput);\n\t\t\t}\n\t\t\tif (value === \"language\") {\n\t\t\t\tsetLanguage(user.technician.language)\n\t\t\t\tsetshowLanguageInput(!showLanguageInput);\n\t\t\t}\n\t\t\tif (value === \"phoneNumber\") {\n\t\t\t\tsetPhoneNumber(user.technician.profile.confirmId.phoneNumber)\n\t\t\t\tsetdisplayInput(!newdisplayInput);\n\t\t\t}\n\t\t\tif (value === \"name\") {\n\t\t\t\tsetfirstName(user.firstName)\n\t\t\t\tsetlastName(user.lastName)\n\t\t\t\tsetshowNameEditor(!showNameEditor);\n\t\t\t}\n\t\t\tif(value === \"add_language\"){\n\t\t\t\tsetAddLanguage(user.technician.additionalLanguage)\n\t\t\t\tsetshowAddLanguageInput(!showAddLanguageInput)\n\t\t\t}\n\t\t\tif(value === 'emailAlert'){\n\t\t\t\tsetShowEmailAlertEditor(!showEmailAlertEditor)\n\t\t\t}\n\t\t\tif(value === 'other_softwares'){\n\t\t\t\tsetShowOtherSoftwareEditor(true)\n\t\t\t}\n\t\t\tif (value === \"level\") {\n\t\t\t\tsetShowLevelEditor(!showLevelEditor);\n\t\t\t} else {\n\t\t\t\tlet temp = { ...displaySoftwareEditor };\n\t\t\t\ttemp[value] = !temp[value];\n\t\t\t\tsetdisplaySoftwareEditor(temp);\n\t\t\t}\n\t\t\t\trefetch()\n\t\t};\n\t\n       \n       \n\t\tconst handleNameEdit = () => {\n\t    let valid =\t/^[a-zA-Z ]*$/;\n\t    if(!valid.test(String(firstName))){\n\t    \treturn openNotificationWithIcon(\"error\",\"Error\", \"No numbers & special characters are allowed.\")\n\t    }\n\t    if(!valid.test(String(lastName))){\n\t    \treturn openNotificationWithIcon(\"error\",\"Error\", \"No numbers & special characters are allowed.\")\n\t    }\n\t\tconst trimmedValue1 = firstName.trim()\n\t\tif(trimmedValue1.split(\" \").length > 1){\n\t\t\treturn openNotificationWithIcon(\"error\", \"Error\", \"No empty space allowed in First Name.\")\n\t\t}\n\t\tconst trimmedValue2 = lastName.trim()\n\t\tif(trimmedValue2.split(\" \").length > 1){\n\t\t\treturn openNotificationWithIcon(\"error\", \"Error\", \"No empty space allowed in Last Name.\")\n\t\t}\t\n\t   \n\t    if(trimmedValue1 !== \"\" && trimmedValue2 !== \"\"){\n\t    \t\tupdateUserInfo({\n\t\t\t\tuserId: user.id,\n\t\t\t\tfirstName: firstName.replace(/\\s/g, ''),\n\t\t\t\tlastName: lastName.replace(/\\s/g, ''),\n\t\t\t});\n\t\t\tsetshowNameEditor(!showNameEditor);\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Name Changed Successfully.\"\n\t\t\t);\n\t    }else{\n\t    \treturn openNotificationWithIcon(\"error\",\"Error\",\"Please input your name.\");\n\t    }\n\t\t};\n\n\t  \tconst handleOtherSoftwareEdit = ()=>{\n\t  \t\tconsole.log(\"setSelectedOtherSoftwareList :::\",selectedOtherSoftwareList)\n\t  \t\tlet temp_arr = [...selectedOtherSoftwareList]\n\t  \t\tlet softwareIdList = temp_arr.map(item => item.value)\n\t  \t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\totherSoftwares: softwareIdList,\n\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t});\n\t\t\tsetShowOtherSoftwareEditor(false)\n\t  \t\tconsole.log(\"software edit func working\")\n\t  \t}\n\t \n\t  \t\n\t\tconst handleLanguageEdit = () => {\n\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\tlanguage: editlanguage,\n\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Language Changed Successfully.\"\n\t\t\t);\n\t\t\tsetshowLanguageInput(!showLanguageInput);\n\t\t};\n\n\t\tconst handleAddLanguageEdit = () => {\n\t\t\tconsole.log(\"additonalLanguage :::::::: \",additonalLanguage)\n\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\tadditionalLanguage: additonalLanguage,\n\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Additional Language Changed Successfully.\"\n\t\t\t);\n\t\t\tsetshowAddLanguageInput(!showAddLanguageInput);\n\t\t};\n\n\n\t\tconst handlePhoneEdit = () => {\n\t\t\tif(phoneNumber ===  \"\" || phoneNumber.length === (dialCode.length+1)){\n\t\t\t\treturn openNotificationWithIcon('error', 'Error', \"Phone Number is required\" )\n\t\t\t}else if(phoneNumber.length < (11 + dialCode.length)){\n\t\t\t\treturn openNotificationWithIcon('error', 'Error', \"Phone Number is invalid\" )                \n\t\t\t}\n\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\tconfirmId: { phoneNumber: phoneNumber },\n\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Phone Number Changed Successfully.\"\n\t\t\t);\n\t\t\tsetdisplayInput(!newdisplayInput);\n\t\t};\n\n\t\tconst handleFirstName = (e) => {\n\t\t\tsetfirstName(e.target.value);\n\t\t};\n\n\t\tconst handleLastName = (e) => {\n\t\t\tsetlastName(e.target.value);\n\t\t};\n\n\t\tconst handleProgressChange = (value) => {\n\t\t\tseteditedEnglishLevel(value);\n\t\t\tTechnicianService.updateTechnician(user.technician.id, {\n\t\t\t\tgeneral: { englishLevel: value },\n\t\t\t\tprofileImage: { imageUrl: false },\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"English level Changed Successfully.\"\n\t\t\t);\n\t\t\tsetShowLevelEditor(!showLevelEditor);\n\t\t};\n\n\t\t/*const handleSoftwareYears = (e, software) => {\n\t\t\tlet softwareId = software.software;\n\t\t\tExperienceService.updateExperience(software.experience, {\n\t\t\t\tsoftware: softwareId,\n\t\t\t\texperienceYearArea: e,\n\t\t\t\trating: currentSoftware[softwareId],\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Experience changed Successfully.\"\n\t\t\t);\n\t\t};*/\n\t\t/*const handleFormulas = (e) => {\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Experience changed Successfully.\"\n\t\t\t);\n\t\t};*/\n\n\t\t/*const handleSoftwareStepChange = (e, value) => {\n\t\t\tlet d = { ...currentSoftware };\n\t\t\tif (demoArr.indexOf(value.soft) != -1) {\n\t\t\t\tlet ind = demoArr.indexOf(value.soft);\n\t\t\t\td[value.soft] = e;\n\t\t\t\tsetcurrentSoftware(d);\n\t\t\t}\n\t\t\tExperienceService.updateExperience(value.exp, {\n\t\t\t\trating: e,\n\t\t\t});\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"success\",\n\t\t\t\t\"Success\",\n\t\t\t\t\"Experience changed Successfully.\"\n\t\t\t);\n\t\t};*/\n\t\tconst {\n\t\t\temail,\n\t\t\ttechnician: {\n\t\t\t\texperiences,\n\t\t\t\tlanguage,\n\t\t\t\tadditionalLanguage,\n\t\t\t\tgeneral: {\n\t\t\t\t\totherLangList,\n\t\t\t\t\tcertifications,\n\t\t\t\t} = {},\n\n\t\t\t\t// profile: { confirmId } = {},\n\t\t\t} = {},\n\t\t} = user;\n\n\t\tuseEffect(() => {\n\t\t\t// console.log(\"All experiences are\",experiences)\n\t\t\tsetEditexperiences(experiences);\n\t\t}, [experiences]);\n\n\t\tuseEffect(() => {\n\t\t\tconsole.log(\"000 All experiences are useeffect \",softwareSwitchChecked)\n\t\t\t\n\t\t}, [softwareSwitchChecked]);\n\n\t\tconst averageLevel = (experience) => {\n\t\t\t// const sum = 1;\n\t\t};\n\n\t\t/*const isExist = (expertise) => {\n\t\t\tif (editexperiences.expertises) {\n\t\t\t\treturn !!editexperiences.expertises.find(\n\t\t\t\t\t(item) => item.expertise === expertise.id\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};*/\n\n\t\tconst [editedEnglishLevel, seteditedEnglishLevel] = useState(\n\t\t\tuser?.technician?.general?.englishLevel\n\t\t);\n\t\tconst [editlanguage, setLanguage] = useState(language);\n\t\tconst [additonalLanguage, setAddLanguage] = useState(additionalLanguage);\n\t\tconst [firstName, setfirstName] = useState(user.firstName);\n\t\tconst [lastName, setlastName] = useState(user.lastName);\n\t\tconst user1 = { firstName: firstName, lastName: lastName };\n\t\tconst onChangeExperience = (data) => {\n\t\t\tconst editexperiencesSet = editexperiences;\n\t\t\tconst isExist = !!editexperiencesSet.find(item => item.software === data.software);\n\t\t\tif (isExist) {\n\t\t\t\tconst newOne = editexperiencesSet.map(item => item.software === data.software ? data : item);\n\t\t\t\tsetEditexperiences(newOne);\n\t\t\t} else {\n\t\t\t\tsetEditexperiences([...editexperiences, data]);\n\t\t\t}\n\t\t};\n\n\t\t/*const handlesoftwareEdit = () => {\n\t\t\tlet editexperiencesSet = editexperiences;\n\t\t\teditexperiences.forEach((e) => {\n\t\t\t\tif (typeof e.software === 'string') {\n\t\t\t\t\teditexperiences.forEach((ee, index) => {\n\t\t\t\t\t\tif (ee.software.id === e.software) {\n\t\t\t\t\t\t\teditexperiencesSet[index] = Object.assign(ee, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t  \n\t\t\tconst fineData = [];\n\t\t\texperiences.forEach((set) => {\n\t\t\t\tfineData.push(set);\n\t\t\t});\n\t\t\tExperienceService.updateSoftware(fineData);\n\t\t\tsetEditexperiences(editexperiencesSet);    \n\t\t}*/\n\n\t\t/**\n\t\t * Check if technician already passed the exam or not\n\t\t * @param techTestHistory (Type:Object)\n\t\t * @param softid (Type:string) \n\t\t * @returns boolean\n\t\t * @author Nafees\n\t\t */\n\t\tconst isTechSoftwareHave = async(techTestHistory,softid)=> {\n\t\t\tconsole.log('isTechSoftwareHave',techTestHistory,softid)\n\t\t\tlet alreadyPassed = techTestHistory.find(e=>e.software_id === softid && e.result === 'Pass')\n\t\t\tconsole.log('check filter data>>',alreadyPassed);\n\t\t\treturn alreadyPassed ? true : false;\n\t\t}\n\t\t\n\n\t\t/**\n\t\t * Save data in technician expertise column\n\t\t * @param software (Type:Object)\n\t\t * @returns boolean\n\t\t * @author Nafees\n\t\t */\n\t\tconst saveExpertiseData = async(software)=> {\n\t\t\ttry{\n\t\t\t\tlet techData = await TechnicianService.retrieveTechnician(user.technician.id);\n\t\t\t\tlet dataArr = [];\n\t\t\t\tlet dataToSave = {}\n\t\t\t\tdataToSave['software_id'] = software.id\n\t\t\t\tdataToSave['experience'] = ''\n\t\t\t\tdataToSave['sub_options'] = []\n\t\t\t\tdataToSave['parent'] = (software.parent ? software.parent : '')\n\n\t\t\t\tif(techData && techData.expertise){\n\t\t\t\t\tdataArr = [...techData.expertise];\t\t\t\t\t\n\t\t\t\t\tdataArr.push(dataToSave)\n\t\t\t\t}else{\n\t\t\t\t\tdataArr.push(dataToSave)\n\t\t\t\t}\n\n\t\t\t\tTechnicianService.updateTechnician(techData.id,{\n\t\t\t\t\texpertise:dataArr,\n\t\t\t\t})\n\t\t\t\treloadData(software.id);\n\t\t\t\t// notification.success({\n\t\t\t\t// \tmessage: 'Software active successfully.',\n\t\t\t\t// });\n\n\t\t\t}catch(err){\n\t\t\t\tconsole.log(\"error in saveExpertiseData \",err)\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst softwareSwtichChange = async(s) => {\n\t\t\tsetSoftSelected(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetSoftSelected(false);\n\t\t\t},1000)\n\t\t\tconsole.log(\"softwaresss:::\",s)\n\t\t\tlet softObj = []\n\t\t\tsoftObj.push(s)\n\t\t\tsetTestId(s.test)\n\t\t\tconsole.log('softwareData',selectedSoftwares);\n\t\t\tlet alreadyPassed = await isTechSoftwareHave(user.technician.testHistory,s.id) \n\t\t\tconsole.log('check alreadyPassed',alreadyPassed);\n\t\t\tif(!alreadyPassed){\n\t\t\t\tconsole.log(\"My console to check test history arr\", user.technician.testHistory)\n\t\t\t\tconst currentSoftwareInTestHistory = user.technician.testHistory.filter(item => item.software_id === s.id)\n\t\t\t\tconsole.log(\"My console to check test history arr 2\", currentSoftwareInTestHistory)\n\t\t\t\tif(currentSoftwareInTestHistory.length > 0 && currentSoftwareInTestHistory[0].result === \"Fail\"){\n\t\t\t\t\tModal.confirm({\n\t\t\t\t\t\ttitle: 'You already failed this exam. Unfortunately, you cannot try again!',\n\t\t\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\t\t\tonOk : () => {\n\t\t\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonCancel : ()=>{\n\t\t\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}else{\n\t\t\t\t\t questions = await InterviewQuestionApi.getQuestionList(s.test);\n\t\t\t\t\t console.log('111queastion>>>>',questions)\n\t\t\t\t\t setSelectedSoftwares(softObj)\n\t\t\t\t\t setQuestion(questions)\n\t\t\t\t\t setSoftwareUpdate(true)\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tlet techData = await TechnicianService.retrieveTechnician(user.technician.id);\n\t\t\t\tconsole.log('techdata inside softwareSwtichChange',softwareSwitchChecked);\n\t\t\t\tlet dataArr = [];\n\t\t\t\tlet dataToSave = {}\n\t\t\t\tdataToSave['software_id'] = s.id\n\t\t\t\tdataToSave['experience'] = ''\n\t\t\t\tdataToSave['sub_options'] = []\n\t\t\t\tdataToSave['parent'] = (s.parent ? s.parent : '')\n\n\t\t\t\tif(softwareSwitchChecked.indexOf(s.id) !== -1){\n\t\t\t\t\tModal.confirm({\n\t\t\t\t\t\ttitle: 'Your saved options will be removed, if you disable this software.',\n\t\t\t\t\t\tokText :\"Proceed\",\n\t\t\t\t\t\tonCancel : ()=>{\n\t\t\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcancelText:\"Cancel\",\n\t\t\t\t\t\tclassName:'app-confirm-modal',\n\t\t\t\t\t\tonOk : ()=>{ \n\t\t\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t\t\t\tlet check_if_another_soft_exist = 0\n\t\t\t\t\t\t\tlet ids = [...softwareSwitchChecked];\n\t\t\t\t\t\t\tlet idIdx = ids.indexOf(s.id)\n\t\t\t\t\t\t\tif(idIdx != -1){\n\t\t\t\t\t\t\t\tids.splice(idIdx,1)\n\t\t\t\t\t\t\t\tsetSoftwareSwitchChecked(ids)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateHeaderOptions(s, ids)\n\t\t\t\t\t\t\tif(techData.expertise && s.parent !== \"0\"){\n\t\t\t\t\t\t\t\t// checking if another software exist of same parent of selected software or not.(MJ)\n\t\t\t\t\t\t\t\tlet newsoftArr = [...techData.expertise];\n\t\t\t\t\t\t\t\tfor(let i=0; i < newsoftArr.length ; i++){\n\t\t\t\t\t\t\t\t\t// console.log('newsoftArr[i].>>>>>>>>',newsoftArr[i])\n\t\t\t\t\t\t\t\t\tif(newsoftArr[i].parent !== \"0\" && newsoftArr[i].parent === s.parent){\n\t\t\t\t\t\t\t\t\t\tcheck_if_another_soft_exist++\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// console.log('check_if_another_soft_exist.>>>>>>>>',check_if_another_soft_exist)\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\tif(techData && techData.expertise){\n\t\t\t\t\t\t\t\tdataArr = [...techData.expertise];\n\t\t\t\t\t\t\t\tlet idx = dataArr.findIndex(o => o.software_id === s.id);\n\t\t\t\t\t\t\t\tif(idx !== -1){\n\t\t\t\t\t\t\t\t\tdataArr.splice(idx,1)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(check_if_another_soft_exist === 1){\n\t\t\t\t\t\t\t\t\t// checking if another software does not exist of same parent then remove parent also.(MJ)\n\t\t\t\t\t\t\t\t\tlet idx = dataArr.findIndex(o => o.software_id === s.parent);\n\t\t\t\t\t\t\t\t\tif(idx !== -1){\n\t\t\t\t\t\t\t\t\t\tdataArr.splice(idx,1)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// console.log('dataArr>>>>>>>>>',dataArr)\n\t\t\t\t\t\t\t\tTechnicianService.updateTechnician(techData.id,{\n\t\t\t\t\t\t\t\t\texpertise:dataArr\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\treloadData(s.id);\n\t\t\t\t\t\t\t\tlet activeIds = [...activeSoftwareIds]\n\t\t\t\t\t\t\t\tif(activeIds.indexOf(s.id) != -1){\n\t\t\t\t\t\t\t\t\tactiveIds.splice(activeIds.indexOf(s.id),1)\n\t\t\t\t\t\t\t\t\tsetActiveSoftwareIds(activeIds)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tids = (ids && ids.length > 0 ? ids : [...softwareSwitchChecked]);\n\t\t\t\t\t\t\t\tidx = ids.findIndex(o => o.software_id === s.id);\n\t\t\t\t\t\t\t\tif(idx != -1){\n\t\t\t\t\t\t\t\t\tids.splice(idx,1);\n\t\t\t\t\t\t\t\t\tconsole.log(\"000 ids 33>> \",ids)\n\t\t\t\t\t\t\t\t\tsetSoftwareSwitchChecked(ids);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tupdateHeaderOptions(s, ids)\n\t\t\t\t\t\t\t\tnotification.success({\n\t\t\t\t\t\t\t\t\tmessage: 'Software inactive successfully.',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t\n\t\t\t\t\t// setSoftwareUpdate(true)\n\t\t\t\t\tlet ids = [...softwareSwitchChecked];\n\t\t\t\t\tids.push(s.id);\n\t\t\t\t\tsetSoftwareSwitchChecked(ids);\n\t\t\t\t\tupdateHeaderOptions(s, ids)\n\n\t\t\t\t\tif(techData && techData.expertise){\n\t\t\t\t\t\tdataArr = [...techData.expertise];\n\t\t\t\t\t\tlet idx = dataArr.findIndex(o => o.software_id === s.id);\n\t\t\t\t\t\tif(idx !== -1){\n\t\t\t\t\t\t\tdataArr.splice(idx,1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tdataArr.push(dataToSave)\n\t\t\t\t\t}else{\n\t\t\t\t\t\tdataArr.push(dataToSave)\n\t\t\t\t\t}\n\n\t\t\t\t// \tif(dataToSave['parent'] !== ''){\n\t\t\t\t// \t\t // adding its parent if subsofware added and its parent does not exist\n\t\t\t\t// \t\tlet shouldAddParent = true\n\t\t\t\t// \t\tlet newsoftArr = [...techData.expertise];\n\t\t\t\t// \t\tfor(let i=0; i < newsoftArr.length ; i++){\n\t\t\t\t// \t\t\t// console.log('newsoftArr[i].>>>>>>>>',newsoftArr[i])\n\t\t\t\t// \t\t\tif(newsoftArr[i].software_id === dataToSave['parent']){\n\t\t\t\t// \t\t\t\tshouldAddParent = false\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t}\n\n\n\t\t\t\t// \t\tif(shouldAddParent){\n\t\t\t\t// \t\t\tlet dataToSave = {}\n\t\t\t\t// \t\t\tdataToSave['software_id'] = s.parent\n\t\t\t\t// \t\t\tdataToSave['parent'] = 0\n\t\t\t\t// \t\t\tdataToSave['sub_options'] = []\n\t\t\t\t// \t\t\tdataArr.push(dataToSave)\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\n\t\t\t\t\tconsole.log('dataArr :::',dataArr)\n\t\t\t\t\tTechnicianService.updateTechnician(techData.id,{\n\t\t\t\t\t\texpertise:dataArr,\n\t\t\t\t\t})\n\t\t\t\t\treloadData(s.id);\n\t\t\t\t\tnotification.success({\n\t\t\t\t\t\tmessage: 'Software active successfully.',\n\t\t\t\t\t});\n\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tconst EditSoftwareHandler = (sid) => {\n\t\t\tlet ids = [...activeSoftwareIds];\n\t\t\tif(ids.indexOf(sid) === -1){\n\t\t\t\tids.push(sid)\n\t\t\t}else{\n\t\t\t\tids.splice(ids.indexOf(sid),1)\n\t\t\t}\n\t\t\tsetActiveSoftwareIds(ids)\n\t\t}\n\t\t/*const handleBlobImage =(blob)=>{\n\t\t\t// let base64ToString = Buffer.from(base64data, \"base64\").toString()\n\t\t\tconst file =blob;\n\t\t\tconst reader = new FileReader();\n\t\t\treader.readAsDataURL(file);\n\t\t\treader.onloadend = () => {\n\t\t\t\tlet image = URL.createObjectURL(file)\n\t\t\t\treturn image\n\t\t\t};\n\n\n\t\t}*/\n\t\tconst reloadData = async(sid) => {\n\t\t\tlet savedExperience = {};\n\t\t\tlet savedCheckboxOptions = {};            \n\n\t\t\tsavedExperience[sid] = '';\n\t\t\tsavedCheckboxOptions[sid] = [];\n\t\t\tsetSavedSoftwareExperience(savedExperience);\n\t\t\tsetSavedCheckboxOptions(savedCheckboxOptions);\n\t\t\tsetTimeout(function(){\n\t\t\t\tsocket.emit(\"loggedOut\",{userId:user.id,userType:user.userType})\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tsocket.emit(\"loggedIn\",{userId:user.id,userType:user.userType,user:user})                    \n\t\t\t\t},1000)\n\t\t\t},1000)\n\n\t\t}\n\n\t\tconst updateHeaderOptions = (s, checkedSoftwares) => {\n\t\t\tif(checkedSoftwares.length > 0){\n\t\t\t\tif(s && s.estimatedWait){\n\t\t\t\t\tlet sTime = s.estimatedWait.split('-')[0]\n\t\t\t\t\tif(estimatedWaitTime === 'NA' || sTime > estimatedWaitTime){\n\t\t\t\t\t\tsetEstimatedWaitTime(sTime)                    \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsetEstimatedWaitTime('NA');\n\t\t\t}\n\t\t}\n\n\t\tconst copiedTechLink = async () => {\n\t\t\ttry {\n\t\t\t\tawait navigator.clipboard.writeText(techProfileLink)\n\t\t\t\topenNotificationWithIcon('success', 'Link copied.', 'You can share this technician profile link with anybody.');\n\t\t\t} catch (err) {\n\t\t\t\topenNotificationWithIcon('error', 'Copy Failed', 'Sorry, there was an error copying the link.');\n\t\t\t}\n\t\t};\n\n\t\t// const updateTechnicianEmailAlertStatus = () => {\n\t\t// \tTechnicianService.updateTechnician(user.technician.id, {\n\t\t// \t\temailAlertsWithoutLogin: !emailAlertStatus\n\t\t// \t});\n\t\t// \topenNotificationWithIcon(\n\t\t// \t\t\"success\",\n\t\t// \t\t\"Success\",\n\t\t// \t\t(emailAlertStatus ? 'Email alert disabled successfully.' : 'Email alert active successfully.')\n\t\t// \t);\n\t\t// \tsetEmailAlertStatus(!emailAlertStatus);\n\t\t// }\n\n\tif (isLoading) return <Col md=\"12\" className=\"px-4 py-5\"> \n\t\t<Row>\n\t\t\t<Loader height=\"100%\" className={\"mt-5 \"+(isLoading ? \"loader-outer\" : \"d-none\")} />\n\t\t</Row>   \n\n\t</Col>;\n\t\n\treturn (\n\t\t<>\n\t\t<Container className=\"settings-screen\">\n\t\t\t<BodyContainer>\n\t\t\t\t<Section>\n\t\t\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t\t\t\t<ItemTitle>NAME</ItemTitle>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t{showNameEditor ? (\n\t\t\t\t\t\t\t\t<React.Fragment key=\"info\">\n\t\t\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t\t<RegInput\n\t\t\t\t\t\t\t\t\t\t\tname=\"first Name\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\" ml-2 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={firstName}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleFirstName}\n\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t<RegInput\n\t\t\t\t\t\t\t\t\t\t\tname=\"last Name\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\" ml-2 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={lastName}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleLastName}\n\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-2 small-btn btn \"\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleNameEdit}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<H4>{getFullName(user1)}</H4>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<div className=\"EditIcons\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t\t\tonClick={() => EditHandler(\"name\")}\n\t\t\t\t\t\t\t\t\tsrc={editIcon}\n\t\t\t\t\t\t\t\t\twidth=\"20px\"\n\t\t\t\t\t\t\t\t\theight=\"20px\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</ItemContainer>\n\n\t\t\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t\t\t\t<ItemTitle>EMAIL</ItemTitle>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<H4>{email}</H4>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</ItemContainer>\n\t\t\t\t</Section>\n\t\t\t\t<Section>\n\t\t\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t\t\t\t<ItemTitle>SHARE YOUR PROFILE</ItemTitle>\n\t\t\t\t\t\t<Row className=\"w-100\">\n\t\t\t\t\t\t\t\t<div className=\"col-12 input-group mb-3\">\n\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\" form-control\" readOnly value={techProfileLink} aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\"/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"input-group-append\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-text copiedLink\" title='Copy' id=\"basic-addon2\" onClick={copiedTechLink}><FontAwesomeIcon icon={faCopy}/></span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</ItemContainer>\n\t\t\t\t</Section>\n\n\t\t\t\t{softwareList \n\n\t\t\t\t\t? softwareList.map((experience, index) => {\t\t\t\t\t\t\n\n\t\t\t\t\t\tif((experience.subSoftware.length > 0 || experience.parent !== \"0\")){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\texperience.subSoftware.map((subSoft)=>{\n\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Section>\n\t\t\t\t\t\t\t\t\t\t\t<ItemContainer\n\t\t\t\t\t\t\t\t\t\t\t\tkey={subSoft.id}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"editContainer\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<ItemTitle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t  SOFTWARE {count++}                                          \n\t\t\t\t\t\t\t\t\t\t\t\t</ItemTitle>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<Row className=\"card-view-software\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SoftwareImage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={subSoft.blob_image}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SoftwareRightSection>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<H4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{subSoft.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</H4>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LevelDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ratingScale[averageLevel(subSoft)]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</LevelDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</SoftwareRightSection>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"EditIcons software-switch\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/*<Switch\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  checkedChildren={<CheckOutlined />}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  unCheckedChildren={<CloseOutlined />}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  defaultChecked={(softwareSwitchChecked.indexOf(subSoft.id) != -1 ? true : false)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mr-3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(checked)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareSwtichChange(subSoft.id,checked)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>*/}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{console.log('softSelected if ',softSelected)} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span                                                           \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>softwareSwtichChange(subSoft)}  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"tech-software-edit \"+(softwareSwitchChecked.indexOf(subSoft.id) !== -1 ? 'active-software ' : '')+(softSelected ? 'disabledButton' :'')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={(softwareSwitchChecked.indexOf(subSoft.id) !== -1 ? 'Active' : 'Inactive')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheckCircle} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt=\"edit-icon\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEditSoftwareHandler(`${subSoft.id}`);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={editIcon}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"20px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"20px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t{/*<div className=\"EditIcons\" style={{ top: '15px', right: '50px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-2 small-btn btn \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handlesoftwareEdit}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>       \n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>*/}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SoftwareDetailSection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`software-${index}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftware={subSoft}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={subSoft.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texperience={editexperiences.find(exp => exp.software === subSoft.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetExperience={onChangeExperience}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent={experience}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttouchPointsList={touchPointsList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareExperienceList={softwareExperienceList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tactiveSoftwareIds={activeSoftwareIds}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsavedSoftwareExperience={savedSoftwareExperience}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsavedCheckboxOptions={savedCheckboxOptions}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsavedTouchPoints={savedTouchPoints}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreSavedOjectFormat={preSavedOjectFormat}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trefetch = {refetch}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareSwitchChecked={softwareSwitchChecked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSoftwareSwitchChecked={setSoftwareSwitchChecked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsocket={socket}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t{/***/}\n\t\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</ItemContainer>\n\t\t\t\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tif(experience.id !== EmailOutlook){\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Section key={experience.id}>\n\t\t\t\t\t\t\t\t\t<ItemContainer\n\t\t\t\t\t\t\t\t\t\tkey={experience.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"editContainer\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ItemTitle>\n\t\t\t\t\t\t\t\t\t\t\tSOFTWARE {count++}                                          \n\t\t\t\t\t\t\t\t\t\t</ItemTitle>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<Row className=\"card-view-software\">\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t<SoftwareImage \n\t\t\t\t\t\t\t\t\t\t\t\tsrc={experience.blob_image}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t<SoftwareRightSection>\n\t\t\t\t\t\t\t\t\t\t\t\t<H4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{experience.name}\n\t\t\t\t\t\t\t\t\t\t\t\t</H4>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<LevelDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ratingScale[averageLevel(experience)]}\n\t\t\t\t\t\t\t\t\t\t\t\t</LevelDescription>\n\t\t\t\t\t\t\t\t\t\t\t</SoftwareRightSection>\n\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"EditIcons software-switch\">\n\t\t\t\t\t\t\t\t\t\t\t\t{/*<Switch\n\t\t\t\t\t\t\t\t\t\t\t\t  checkedChildren={<CheckOutlined />}\n\t\t\t\t\t\t\t\t\t\t\t\t  unCheckedChildren={<CloseOutlined />}\n\t\t\t\t\t\t\t\t\t\t\t\t  defaultChecked={(softwareSwitchChecked.indexOf(experience.id) != -1 ? true : false)}\n\t\t\t\t\t\t\t\t\t\t\t\t  className=\"mr-3\"\n\t\t\t\t\t\t\t\t\t\t\t\t  onChange={(checked)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsoftwareSwtichChange(experience.id,checked)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>*/}\n\t\t\t\t\t\t\t\t\t\t\t\t{console.log('softSelected else',softSelected)} \n\t\t\t\t\t\t\t\t\t\t\t\t<span                                                      \n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>softwareSwtichChange(experience)} \n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\"tech-software-edit \"+((softwareSwitchChecked.indexOf(experience.id) !== -1) ? 'active-software ' : '')+(softSelected ? 'disabledButton' : '')}\t\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={((softwareSwitchChecked.indexOf(experience.id) !== -1) ? 'Active' : 'Inactive')}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t// className={\"tech-software-edit \"+(softwareSwitchChecked.indexOf(experience.id) !== -1 ? 'active-software' : '')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t// title={(softwareSwitchChecked.indexOf(experience.id) !== -1 ? 'Active' : 'Inactive')}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheckCircle} />\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t{(softwareSwitchChecked.indexOf(experience.id) !== -1) &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt=\"edit-icon\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEditSoftwareHandler(`${experience.id}`);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={editIcon}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"20px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"20px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t {/*\n\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"EditIcons\" style={{ top: '15px', right: '50px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-2 small-btn btn \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handlesoftwareEdit}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>       \n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t*/}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t<SoftwareDetailSection\n\t\t\t\t\t\t\t\t\t\t\t\tkey={`software-${index}`}\n\t\t\t\t\t\t\t\t\t\t\t\tsoftware={experience}\n\t\t\t\t\t\t\t\t\t\t\t\ttitle={experience.name}\n\t\t\t\t\t\t\t\t\t\t\t\texperience={editexperiences.find(exp => exp.software === experience.id)}\n\t\t\t\t\t\t\t\t\t\t\t\tsetExperience={onChangeExperience}\n\t\t\t\t\t\t\t\t\t\t\t\tparent={false}\n\t\t\t\t\t\t\t\t\t\t\t\ttouchPointsList={touchPointsList}\n\t\t\t\t\t\t\t\t\t\t\t\tsoftwareExperienceList={softwareExperienceList}\n\t\t\t\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\t\t\t\tactiveSoftwareIds={activeSoftwareIds}\n\t\t\t\t\t\t\t\t\t\t\t\tsavedSoftwareExperience={savedSoftwareExperience}\n\t\t\t\t\t\t\t\t\t\t\t\tsavedCheckboxOptions={savedCheckboxOptions}\n\t\t\t\t\t\t\t\t\t\t\t\tsavedTouchPoints={savedTouchPoints}\n\t\t\t\t\t\t\t\t\t\t\t\tpreSavedOjectFormat={preSavedOjectFormat}\n\t\t\t\t\t\t\t\t\t\t\t\trefetch = {refetch}\n\t\t\t\t\t\t\t\t\t\t\t\tsoftwareSwitchChecked={softwareSwitchChecked}\n\t\t\t\t\t\t\t\t\t\t\t\tsetSoftwareSwitchChecked={setSoftwareSwitchChecked}\n\t\t\t\t\t\t\t\t\t\t\t\tsocket={socket}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t{/***/}\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</ItemContainer>\n\t\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t: \"\"\n\t\t\t\t}\n\t\t<Section>\n\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t  <ItemTitle>Other Softwares</ItemTitle>\n\t\t\t  \n\t\t\t\t{showOtherSoftwareEditor\n\t\t\t\t\t?\n\t\t\t\t\t\t<Row >\n\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t<MultipleSelect\n\t\t\t\t\t\t\t\t\tshowSearch\n\t\t\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: 200 }}\n\t\t\t\t\t\t\t\t\tdefaultValue = {selectedOtherSoftwareList.map(item => item.name)}\n\t\t\t\t\t\t\t\t\tfilterOption={(input, option) =>\n\t\t\t\t\t\t\t\t\t\toption.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={(value,option)=>{\n\t\t\t\t\t\t\t\t\t\tlet otherSoftwares = [...selectedOtherSoftwareList]\n\t\t\t\t\t\t\t\t\t\tlet nameValues = otherSoftwares.map(element => element.value)\n\t\t\t\t\t\t\t\t\t\toption.forEach(element => {\n\t\t\t\t\t\t\t\t\t\t\tif(!nameValues.includes(element.value) && element.children != null && element.value != null){\n\t\t\t\t\t\t\t\t\t\t\t\totherSoftwares.push({\"name\":element.children,\"value\":element.value})\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tsetSelectedOtherSoftwareList(otherSoftwares)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tonDeselect = {(string,number,labelValue)=>{\n\t\t\t\t\t\t\t\t\t\tlet otherSoftwares = [...selectedOtherSoftwareList];\n\t\t\t\t\t\t\t\t\t\totherSoftwares = otherSoftwares.filter(element => (element.name != string) && (element != null) && (element != undefined))\n\t\t\t\t\t\t\t\t\t\tsetSelectedOtherSoftwareList(otherSoftwares)\n\t\t\t\t\t\t\t\t\t}}\n\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{otherSoftwareList.map((item,index)=>{\n\t\t\t\t\t\t\t\t\t\treturn <Option value={item.id}>{item.name}</Option>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</MultipleSelect>{\" \"}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col d-flex justify-content-end align-items-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"small-btn btn ml-3\"\n\t\t\t\t\t\t\t\t\tonClick={handleOtherSoftwareEdit}\n\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t\t\t\t\t</button>{\" \"}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t </Row>\n\t\t\t\t\t:<>\n\t\t\t\t\t\t{\tselectedOtherSoftwareList.length === 0?<span className=\"label-value\">None</span>\n\t\t\t\t\t\t\t:<div className=\"d-flex flex-wrap\">\n\t\t\t\t\t\t\t\t{selectedOtherSoftwareList.map((element,index)=>{\n\t\t\t\t\t\t\t\t\treturn <div key={index} className=\"labelBox ml-2\"><span className=\"\">{element.name}</span></div>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t \n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"other_softwares\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</ItemContainer>\n\t\t</Section>\n\t\t<Section>\n\t\t  <ItemContainer className=\"editContainer\">\n\t\t\t<ItemTitle>Phone Number</ItemTitle>\n\t\t\t<Row>\n\t\t\t  {newdisplayInput ? (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t  <InputWithLabel>\n\t\t\t\t\t<PhoneInput\n\t\t\t\t\t  value={phoneNumber}\n\t\t\t\t\t  countryCodeEditable={false}\n\t\t\t\t\t  onChange={HandlePhoneNumber}\n\t\t\t\t\t  country=\"us\"\n\t\t\t\t\t  onlyCountries={[\"in\", \"gr\", \"us\", \"ca\", \"gb\", \"ph\", \"il\"]}\n\t\t\t\t\t/>\n\t\t\t\t  </InputWithLabel>{\" \"}\n\t\t\t\t  <button\n\t\t\t\t\tclassName=\"mt-2 small-btn btn ml-3\"\n\t\t\t\t\tonClick={handlePhoneEdit}\n\t\t\t\t  >\n\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t  </button>{\" \"}\n\t\t\t\t</div>\n\t\t\t  ) : (\n\t\t\t\t<H4>{phoneNumber}</H4>\n\t\t\t  )}\n\n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"phoneNumber\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</Row>\n\t\t  </ItemContainer>\n\n\t\t  <ItemContainer className=\"editContainer\">\n\t\t\t<ItemTitle>Years of Experience</ItemTitle>\n\t\t\t<Row>\n\t\t\t  {expInput ? (\n\t\t\t\t<RegInput\n\t\t\t\t  name=\"experience\"\n\t\t\t\t  size=\"large\"\n\t\t\t\t  placeholder={\"5\"}\n\t\t\t\t  type=\"Number\"\n\t\t\t\t  value={experienceNum}\n\t\t\t\t  onChange={(e) => {\n\t\t\t\t\tsetExperience(e.target.value);\n\t\t\t\t  }}\n\t\t\t\t/>\n\t\t\t  ) : (\n\t\t\t\t<H4>{experienceNum} years</H4>\n\t\t\t  )}\n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"experience\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</Row>\n\t\t  </ItemContainer>\n\t\t</Section>\n\n\t\t<Section>\n\t\t  <ItemContainer className=\"editContainer\">\n\t\t\t<ItemTitle>Primary Language</ItemTitle>\n\t\t\t<Row>\n\t\t\t  {showLanguageInput ? (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t  <LanguageSelect\n\t\t\t\t\tshowSearch\n\t\t\t\t\tstyle={{ width: 200, textAlign: \"left\" }}\n\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\tdefaultValue={editlanguage}\n\t\t\t\t\tfilterOption={(input, option) =>\n\t\t\t\t\t  option.children\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.indexOf(input.toLowerCase()) >= 0\n\t\t\t\t\t}\n\t\t\t\t\tonChange={(value, option) => {\n\t\t\t\t\t  setLanguage(option.children);\n\t\t\t\t\t}}\n\t\t\t\t  >\n\t\t\t\t\t{languages.map((item, index) => {\n\t\t\t\t\t  if (index === 2) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t  <Option key={`lang_${index}`} value={index}>\n\t\t\t\t\t\t\t{item[0]}\n\t\t\t\t\t\t  </Option>\n\t\t\t\t\t\t);\n\t\t\t\t\t  } else {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t  <Option key={`lang_${index}`} value={index}>\n\t\t\t\t\t\t\t{item[0]}\n\t\t\t\t\t\t  </Option>\n\t\t\t\t\t\t);\n\t\t\t\t\t  }\n\t\t\t\t\t})}\n\t\t\t\t  </LanguageSelect>{\" \"}\n\t\t\t\t  <button\n\t\t\t\t\tclassName=\"small-btn btn ml-3\"\n\t\t\t\t\tonClick={handleLanguageEdit}\n\t\t\t\t  >\n\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t  </button>{\" \"}\n\t\t\t\t</div>\n\t\t\t  ) : (\n\t\t\t\t<H4>{editlanguage}</H4>\n\t\t\t  )}\n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"language\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</Row>\n\t\t  </ItemContainer>\n\t\t\n\t\t  <ItemContainer className=\"editContainer\">\n\t\t\t<ItemTitle>Additional Language</ItemTitle>\n\t\t\t<Row>\n\t\t\t  {showAddLanguageInput ? (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<MultipleSelect\n\t\t\t\t\t\t\tshowSearch\n\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\tdefaultValue = {additonalLanguage}\n\t\t\t\t\t\t\tstyle={{ width: 200 }}\n\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\tfilterOption={(input, option) =>\n\t\t\t\t\t\t\t\toption.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonChange = {(value,option)=>{\n\t\t\t\t\t\t\t\tlet allAdditionalLanguage = [...additonalLanguage];\n\t\t\t\t\t\t\t\tif(option.children && option.children === additionalLanguage){\n\t\t\t\t\t\t\t\t\tconsole.log(\"ygyab\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toption.forEach(element => {\n\t\t\t\t\t\t\t\t\tif(!allAdditionalLanguage.includes(element.children)){\n\t\t\t\t\t\t\t\t\t\tallAdditionalLanguage.push(element.children)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});  \n\t\t\t\t\t\t\t\tsetAddLanguage(allAdditionalLanguage)                      \n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonDeselect = {(string,number,labelValue)=>{\n\t\t\t\t\t\t\t\tlet allAdditionalLanguage = [...additonalLanguage];\n\t\t\t\t\t\t\t\tallAdditionalLanguage = allAdditionalLanguage.filter(element => (element != string) && (element != null) && (element != undefined))\n\t\t\t\t\t\t\t\tsetAddLanguage(allAdditionalLanguage)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfilterSort={(optionA, optionB) =>\n\t\t\t\t\t\t\t\toptionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{languages.map((item,index)=>{\n\t\t\t\t\t\t\t\treturn <Option value={index}>{item[0]}</Option>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</MultipleSelect> {\" \"}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t  <button\n\t\t\t\t\t\tclassName=\"small-btn btn ml-3\"\n\t\t\t\t\t\tonClick={handleAddLanguageEdit}\n\t\t\t\t\t  >\n\t\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\n\t\t\t\t\t  </button>{\" \"}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t  ) : (<>\n\t\t\t   {\n\t\t\t   \tadditonalLanguage.length === 0?<span className=\"label-value\">None</span>\n\t\t\t   \t:<div className=\"d-flex flex-wrap\">\n\t\t\t   \t\t{additonalLanguage.map((element,index)=>{\n\t\t\t   \t\t\t\t\treturn <div className=\"labelBox ml-2\"><span className=\"\">{element}</span></div>\n\t\t\t   \t\t})}\n\t\t\t   \t</div>\n\t\t\t\t}\n\t\t\t\t</>\n\t\t\t  )}\n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"add_language\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</Row>\n\t\t  </ItemContainer>\n\t\t</Section>\n\n\t\t<Section>\n\t\t  {engilshLevels[editedEnglishLevel] !== -1 ? (\n\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t  <ItemTitle>FLUENCY LEVEL</ItemTitle>\n\t\t\t  <Row className=\"col-12\">\n\t\t\t\t{!showLevelEditor ? (\n\t\t\t\t  <H4>{engilshLevels[editedEnglishLevel]}</H4>\n\t\t\t\t) : (\n\t\t\t\t  <div className=\"rate-fluency-level\">\n\t\t\t\t\t<RateTabContainer>\n\t\t\t\t\t  <RateStepsTab\n\t\t\t\t\t\tprogressDot\n\t\t\t\t\t\tonChange={handleProgressChange}\n\t\t\t\t\t\tcurrent={parseInt(editedEnglishLevel)}\n\t\t\t\t\t  >\n\t\t\t\t\t\t{engilshLevels.map((rItem, index) => (\n\t\t\t\t\t\t  <RateStep key={index} description={rItem} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t  </RateStepsTab>\n\t\t\t\t\t</RateTabContainer>\n\t\t\t\t  </div>\n\t\t\t\t)}\n\t\t\t  </Row>\n\t\t\t  <div className=\"EditIcons\">\n\t\t\t\t<img\n\t\t\t\t  alt=\"\"\n\t\t\t\t  onClick={() => {\n\t\t\t\t\tEditHandler(\"level\");\n\t\t\t\t  }}\n\t\t\t\t  src={editIcon}\n\t\t\t\t  width=\"20px\"\n\t\t\t\t  height=\"20px\"\n\t\t\t\t/>\n\t\t\t  </div>\n\t\t\t</ItemContainer>\n\t\t  ) : (\n\t\t\t\"\"\n\t\t  )}\n\t\t</Section>\n\t\t<Section>\n\t\t  {certifications\n\t\t\t? certifications.length > 0 && (\n\t\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t\t  <ItemTitle>CERTIFICATIONS</ItemTitle>\n\t\t\t\t  {certifications.map((item, index) => (\n\t\t\t\t\t<Row key={index}>{item !== \"\" ? <H4>{item}</H4> : \"\"}</Row>\n\t\t\t\t  ))}\n\t\t\t\t</ItemContainer>\n\t\t\t  )\n\t\t\t: \"\"}\n\t\t</Section>\n\n\t\t<Section>\n\t\t  {otherLangList?.length > 0 && (\n\t\t\t<ItemContainer className=\"editContainer\">\n\t\t\t  <ItemTitle>OTHER LANGUAGES</ItemTitle>\n\t\t\t  {otherLangList.map((item) => (\n\t\t\t\t<OtherLan direction=\"horizontal\" key={item.name} size={10}>\n\t\t\t\t  <Row>\n\t\t\t\t\t<H4>{item.name}</H4>\n\t\t\t\t  </Row>\n\t\t\t\t  <OtherLangLevel>\n\t\t\t\t\t{`(${engilshLevels[item.level]}) Level: ${item.level}`}\n\t\t\t\t  </OtherLangLevel>\n\t\t\t\t</OtherLan>\n\t\t\t  ))}\n\t\t\t</ItemContainer>\n\t\t  )}\n\t\t</Section>\n\n\t\t<Section>\n\t\t<ItemContainer className=\"editContainer reset-password-container\">\n\t\t\t\t<ItemTitle>Are you certified in quickbooks ?</ItemTitle>\n\t\t\t\t<Row>\n\t\t\t\t\t<CardItem  onSwitchClick={updateCertifiedStatus} title=\"STATUS\" switchText={certifiedStatus ? \"Yes\" : \"No\"} isSwitchActive={certifiedStatus} />\n\t\t\t\t</Row>\n\t\t\t</ItemContainer>\n\t\t\t{/*<ItemContainer className=\"editContainer reset-password-container\">\n\t\t\t\t<ItemTitle>Password</ItemTitle>\n\t\t\t\t<Row>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t{!showPassword ? (\n\t\t\t\t\t\t\t<span className=\"\">********</span>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span className=\"\">Coming soon...</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</h5>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={() => false}\n\t\t\t\t\t\tclassName=\"edit-link\"\n\t\t\t\t\t\tonClick={() => {}}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset Password?\n\t\t\t\t\t</a>\n\t\t\t\t\t<div className=\"EditIcons\">\n\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\ticon={faEye}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetShowPassword(!showPassword);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Row>\n\t\t\t</ItemContainer>*/}\n\n\t\t\t{/* <ItemContainer className=\"editContainer\">\n\t\t\t\t<div className=\"d-flex flex-row\">\n\t\t\t\t\t<Popover className=\"mt-1\" content={<p>If you're not logged in to Geeker, you won't receive emails about scheduled jobs coming up.<br/>This setting allows you to receive emails about regular and scheduled jobs in case you <br/>haven't logged in yet.</p>}>\n\t\t\t\t\t\t<InfoCircleOutlined style={{ fontSize: \"20px\" }} />\n\t\t\t\t\t</Popover>\n\t\t\t\t\t<ItemTitle>Allow email alerts without being logged in</ItemTitle>\n\t\t\t\t</div>\n\t\t\t\t<Row>\n\t\t\t\t\t{showEmailAlertEditor ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t<CardItem onSwitchClick={updateTechnicianEmailAlertStatus} title=\"STATUS\" switchText={emailAlertStatus ? \"Active\" : \"Inactive\"} isSwitchActive={emailAlertStatus} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<H4>{emailAlertStatus ? \"Active\" : \"Inactive\"}</H4>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<div className=\"EditIcons\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\tonClick={() => EditHandler(\"emailAlert\")}\n\t\t\t\t\t\t\tsrc={editIcon}\n\t\t\t\t\t\t\twidth=\"20px\"\n\t\t\t\t\t\t\theight=\"20px\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Row>\n\t\t\t</ItemContainer> */}\n\t\t</Section>\n\n\t</BodyContainer>\n\t</Container>\n\t<Modal \n\tafterClose={()=> {setShowResultPage(false);setShowFooter(true)}}\n\tonCancel={() => {setSoftwareUpdate(false);\n\t\tsetSoftSelected(false)\n\t}}\n\tvisible={softwareUpdate}\n\twidth={'fit-content'}\n\tcentered={true}\n\tfooter={ showFooter ? \n\n\t\t\t [\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"btn app-btn app-btn-light-blue app-btn-small declne-job-btn\"\t\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetSoftwareUpdate(false);\n\t\t\t\t\t\t\tsetSoftSelected(false);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span></span>Close\n\t\t\t\t\t</Button>,\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={\"btn app-btn app-btn-small declne-job-btn \" }\n\t\t\t\t\t\tonClick = {()=>setCallHandleComplete(true)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span></span>Submit\n\t\t\t\t\t</Button>,\n\t\t\t  ] : null\n\t\t\t}\n\t>\n\n\t\t{ showResultPage === false &&\n\t\t\t<MCQ selectedSoftwares={selectedSoftwares} question={question} testId={testId} register={user} setProgressBarPercentage={setProgressBarPercentage} setResult={setResult} setShowFooter={setShowFooter} setShowResultPage={setShowResultPage} callHandleComplete={callHandleComplete} setCallHandleComplete={setCallHandleComplete} handleNextButton={handleNextButton} refetch={refetch} />\n\t\t}\n\t\t{ showResultPage === true &&\n\t\t\t<ExamLoader setShowProgress={setShowProgress} previousTestSubmit={previousTestSubmit} setPreviousTestSubmit={setPreviousTestSubmit} setShowResultPage={false} result={result} setResult={setResult} testComplete={true} register={user}/>\n\t\t}\n\t</Modal>\n\t</>\n  );\n\n}\n\nconst CardItem = ({ switchText, style, showSwitch = true, isSwitchActive, onSwitchClick }) => {\n\treturn (\n\t\t<div style={{ flex: 1, marginLeft: \"30px\", ...style }}>\n\t\t\t<Switch onSwitchClick={onSwitchClick} text={switchText} showSwitch={showSwitch} isSwitchActive={isSwitchActive} />\n\t\t</div>\n\t)\n}\nconst Switch = ({ text, showSwitch, isSwitchActive, onSwitchClick }) => {\n\treturn (\n\t\t<div style={{ display: \"flex\", alignItems: \"center\", }}>\n\t\t\t{showSwitch && <div\n\t\t\t\tonClick={onSwitchClick}\n\t\t\t\tstyle={{\n\t\t\t\t\tcursor: \"pointer\",\n\t\t\t\t\tbackground: isSwitchActive ? \"#1bd4d5\" : \"#D6D6D6\",\n\t\t\t\t\tjustifyContent: isSwitchActive ? \"flex-end\" : \"flex-start\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\theight: \"30px\", borderRadius: \"24px\", width: \"60px\", padding: \"0.2rem\"\n\t\t\t\t}}>\n\t\t\t\t<div style={{\n\t\t\t\t\twidth: \"45%\", background: isSwitchActive ? \"#ffffff\" : \"#D6D6D6\", borderRadius: \"50%\", height: \"100%\",\n\t\t\t\t\tboxShadow: !isSwitchActive && \"0px 0px 1px 2px rgb(170 170 170 / 75%)\"\n\t\t\t\t}}></div>\n\t\t\t</div>\n\t\t\t}\n\t\t\t<h5 style={{\n\t\t\t\tfontSize: \"15px\", color: isSwitchActive ? \"#1fc7c8\" : \"#72838d\", fontWeight: \"bold\", marginLeft: showSwitch ? \"20px\" : 0, marginBottom: 0,\n\n\t\t\t\tmarginTop: showSwitch ? 0 : \"0.5rem\"\n\t\t\t}}>{text}</h5>\n\t\t</div>\n\t)\n}\n/*const CheckboxStyled = styled(Checkbox)`\n  margin-bottom: 20px;\n   display: inline-flex;\n\t color: blue;\n  \n\tspan {\n\t  margin-top: -7px;\n\t}\n\t.ant-checkbox{\n\t  margin-top: 0px;\n\t} \n\n  margin-left: 0px !important;\n  .ant-checkbox-checked .ant-checkbox-inner {\n\tbackground-color: ${props => props.theme.primary};\n\tborder-color: ${props => props.theme.primary};\n\t&:focus {\n\t  border-color: ${props => props.theme.primary};\n\t}\n\t&:hover {\n\t  border-color: ${props => props.theme.primary};\n\t}\n  }\n`;*/\nconst Container = styled.div``;\n// const LevelText = styled(Text)`\n//   font-size: 15;\n//   font-weight: bold;\n//   text-align: left;\n// `;\nconst OtherLangLevel = styled(Text)`\n  font-size: 15;\n  font-weight: bold;\n  text-align: left;\n  margin-bottom: 10px;\n  padding-left: 10px;\n`;\nconst LevelDescription = styled(Text)`\n  font-style: italic;\n  padding-top: 15px;\n`;\nconst BodyContainer = styled.div`\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex: 1;\n`;\nconst OtherLan = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst SoftwareRightSection = styled.div`\n  padding-left: 30px;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\nconst SoftwareImage = styled.img`\n  width: 50px;\n  height: auto;\n`;\nconst Section = styled(Row)`\n  width: 100%;\n`;\n\nconst RegInput = styled(Input)`\n  border: 0px none !important;\n  border-radius: 0px none !important;\n  border-bottom: 1px solid black !important;\n  padding: 15px 20px;\n  width: 30%;\n  background: transparent !important;\n  border-radius: initial;\n  font-family: \"Open-Sans\", sans-serif;\n`;\n\nconst LanguageSelect = styled(Select)`\n  border: 0px none;\n  color: black;\n  border-bottom: 1px solid black !important;\n`;\n\nconst AreaContainer = styled(Col)`\n  background: white;\n  overflow: auto;\n  padding: 20px;\n  width: 100%;\n  justify-content: flex-start;\n  display: flex;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n  align-items: flex-start;\n  font-family: initial;\n`;\nconst RateSelectBody = styled(Row)`\n  padding: 30px;\n`;\n\nconst RateTabContainer = styled.div`\n  width: 100%;\n  margin-top: 30px;\n`;\n\nconst MultipleSelect = styled(Select)`\n\n  border:0px none;\n  border-bottom:1px solid #72828f;\n  \n\n  & .ant-select-selection-search {\n\twidth:360px;\n\t@media screen and (max-width: 763px) {\n\t\twidth:260px;\n\t}\n  }\n\n`\n\nconst RateStepsTab = styled(Steps)``;\nconst RateStep = styled(Step)`\n  .ant-steps-item-content {\n\tdisplay: flex;\n\tjustify-content: center;\n\tline-height: 17px;\n  }\n  .ant-steps-item-description {\n\tfont-size: 14px;\n  }\n`;\nconst SelectYearContainer = styled(Col)`\n  padding-top: 25px;\n`;\n\nexport const InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  &:last-child {\n\tmarginRight: 0;\n  }\n  & input{\n\theight:50px;\n\tpadding:10px;\n\tpadding: 15px 20px;\n\twidth:30%;\n\tborder-radius: 10px;\n\tmargin-top: 15px;\n\n\tborder : 0px none !important;\n\tborder-radius:0px none !important;\n\tborder-bottom : 1px solid black !important;\n\t padding: 15px 20px;\n\t  width:30%;\n\tbackground:transparent !important;\n\tmargin-top:15px;\n\tmargin-left:20px;\n  }\n  & .react-tel-input .flag-dropdown{\n\tbackground-color:transparent;\n\tborder: 0px none;\n  }\n  & .react-tel-input .form-control {\n\theight:50px;  \n\tborder : 0px none !important;\n\tborder-radius:0px none !important;\n\twidth:100%;\n\tborder-bottom : 1px solid black !important;\n`;\n\nconst TechSelect = styled(Select)`\n  .ant-select-selector {\n\tmin-width: 300px !important;\n\theight: 45px !important;\n\tborder: 0px none !important;\n\tbackground-color: transparent !important;\n\n\talign-items: center;\n\tborder-bottom: 1px solid #7a8994 !important;\n  }\n  .ant-select-selection-item {\n\tdisplay: flex;\n\tcursor: pointer !important;\n  }\n  .ant-select-selection-search {\n\tdisplay: flex;\n\talign-items: center;\n\tcursor: pointer !important;\n  }\n  .ant-select-selection-placeholder {\n\ttext-align: left;\n\tcolor: #7a8994 !important;\n\tcursor: pointer !important;\n  }\n`;\n/*const StepTitle = styled.div`\n\ttext-align:center !important;\n\tpadding-bottom:20px;\n\t& p{\n\t\twidth : ${props => props.width ?props.width :\"100%\"}\n\t\tmargin : ${props => props.margin ?props.margin :\"\"}\n\t\tfont-weight : bold;\n\t\tfont-size: ${props => props.font_size? props.font_size :\"45px\"};\n  }\n\n`;*/\nconst SoftwareContainer = styled.div`\n\tbackground: #F6FBFF;\n\tmargin-bottom: 50px;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: inherit;\n\talign-items: flex-start;\n\tpadding: 40px;\n`;\nconst engilshLevels = [\n\t\"Beginner\",\n\t\"Intermediate\",\n\t\"Advanced\",\n\t\"Fluent\",\n\t\"Native\",\n];\n/*const StepActionContainer = styled.div`\n\twidth: 100%;\n\tmargin-top: 40px;\n\tdisplay: flex;\n\tjustify-content: center;\n\n\t&.steps-action {\n\t\tmargin-right :90px;\n\t}\n`;*/\nconst SectionTitle = styled(Text)`\n\tfont-size: 24px;\n\tfont-weight: bold;\n`;\n/*const SectionImage = styled.img`\n\twidth: 60px;\n\tmargin-bottom: 25px;\n`;*/\n// const experienceYearsList = ['5 - 10', '10 - 15', '15 - 20', '20 - 25'];\nexport default memo(ProfileReview);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\profileReview.js"
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "quizSteps",
                                                                    "children": [
                                                                        {
                                                                            "type": "file",
                                                                            "name": "Quiz.js",
                                                                            "fileData": "import React, { useEffect, useState, useCallback } from 'react';\nimport Styled from 'styled-components';\nimport {\n  Card,\n  Layout,\n  Row,\n  Col,\n  Space,\n  Radio,\n  Typography,\n  Divider,\n  Button,\n} from 'antd';\nimport ReactHtmlParser from 'react-html-parser';\n\nimport QuizResult from './QuizResult';\nimport { useQuiz } from '../../../../../context/quizContext';\n\nexport default function Quiz({\n  questions, quizStartTime, _id, submissionId,\n}) {\n  const { submitQuiz } = useQuiz();\n  const [radioValue, setRadioValue] = useState(0);\n  const [quesStartTime, setQuesStartTime] = useState(0);\n  const [showContinue, setShowContinue] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  useEffect(() => {\n    if (quizStartTime) {\n      setCurrentQuestionIndex(0);\n      setQuesStartTime(quizStartTime);\n      setShowResult(false);\n    }\n  }, [quizStartTime]);\n\n  const nextQuestion = () => {\n    if (currentQuestionIndex + 1 >= questions.length) {\n      setShowResult(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n    setShowContinue(false);\n  };\n\n  const submitQuestion = async () => {\n    const data = {\n      _id,\n      submissionId,\n      questionId: questions[currentQuestionIndex].id,\n      answerId: radioValue,\n    };\n    submitQuiz(data).then(submitRes => {\n      nextQuestion();\n      setQuesStartTime(submitRes.data.start_time);\n    });\n  };\n\n  // eslint-disable-next-line no-shadow\n  const Timer = ({ nextQuestion }) => {\n    const calculateTimeLeft = useCallback(() => {\n      const difference = +new Date(quesStartTime + 2 * 60 * 1000) - +new Date(Date.now());\n\n      let timeLeftObj = {};\n      if (difference > 0) {\n        timeLeftObj = {\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60),\n        };\n      } else {\n        setQuesStartTime(Date.now());\n        setTimeout(() => nextQuestion(), 500);\n      }\n\n      return timeLeftObj;\n    });\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n    useEffect(() => {\n      const timer = setTimeout(() => {\n        setTimeLeft(calculateTimeLeft());\n      }, 1000);\n      return () => clearTimeout(timer);\n    }, [calculateTimeLeft]);\n\n    return (\n      <h5>\n        {timeLeft.minutes}\n        {' '}\n        mins,\n        {timeLeft.seconds}\n        {' '}\n        sec\n        {' '}\n      </h5>\n    );\n  };\n\n  const onRadioChange = e => {\n    setRadioValue(e.target.value);\n    setShowContinue(true);\n  };\n\n  return (\n    <Row>\n      {showResult ? (\n        <Col span={24}>\n          <div style={{ textAlign: 'center' }}>\n            <h2>Quiz Result</h2>\n            <Divider />\n\n            <QuizResult _id={_id} submissionId={submissionId} />\n          </div>\n        </Col>\n      ) : (\n        <Col span={24} style={{ marginBottom: '20px' }}>\n          {questions && questions.length > 0 ? (\n            <Card style={{ textAlign: 'left' }}>\n              <Typography>\n                <div style={{ textAlign: 'right' }}>\n                  {quesStartTime ? <Timer nextQuestion={nextQuestion} /> : ''}\n                </div>\n                <h4>{`Question ${currentQuestionIndex + 1}`}</h4>\n                <p className=\"quiz_question_text\">\n                  {ReactHtmlParser(\n                    questions[currentQuestionIndex].question_text,\n                  )}\n                </p>\n              </Typography>\n              <Divider />\n              <Radio.Group onChange={onRadioChange} value={radioValue}>\n                <Space direction=\"vertical\">\n                  {questions[currentQuestionIndex].answers.map(\n                    (answer, index) => (\n                      // eslint-disable-next-line react/no-array-index-key\n                      <Radio key={index} value={answer.id}>\n                        {answer.text}\n                      </Radio>\n                    ),\n                  )}\n                </Space>\n              </Radio.Group>\n              <BottomSection>\n                <Button disabled={!showContinue} onClick={submitQuestion}>\n                  Continue\n                </Button>\n              </BottomSection>\n            </Card>\n          ) : (\n            ''\n          )}\n        </Col>\n      )}\n    </Row>\n  );\n}\n\nconst BottomSection = Styled(Layout)`\ndisplay: flex;\njustify-content: right;\nalign-items: flex-end;\nbackground: transparent;\n`;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\quizSteps\\Quiz.js"
                                                                        },
                                                                        {
                                                                            "type": "file",
                                                                            "name": "QuizResult.js",
                                                                            "fileData": "import React, { useState, useEffect } from 'react';\nimport {\n  Layout, Table, Tag, Button,\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport Styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport * as Antd from 'antd';\nimport { useAuth } from '../../../../../context/authContext';\nimport { useQuiz } from '../../../../../context/quizContext';\n\nconst columns = [\n  {\n    title: 'Score',\n    dataIndex: 'score',\n    key: 'score',\n  },\n  {\n    title: 'Max Score',\n    dataIndex: 'max_score',\n    key: 'max_score',\n  },\n  {\n    title: 'Percentage',\n    dataIndex: 'percent',\n    key: 'percent',\n    render: percent => percent.toFixed(2),\n  },\n  {\n    title: 'Submitted At',\n    dataIndex: 'submitted_at',\n    key: 'submitted_at',\n  },\n  {\n    title: 'Grade',\n    key: 'percent',\n    dataIndex: 'percent',\n    render: percent => {\n      let color = '';\n      let text = '';\n\n      if (percent >= 80) {\n        color = 'green';\n        text = 'tier 2';\n      } else if (percent >= 60 && percent < 80) {\n        color = 'geekblue';\n        text = 'tier 1';\n      } else {\n        color = 'volcano';\n        text = 'failed';\n      }\n\n      return (\n        <span>\n          <Tag color={color} key={percent}>\n            {text.toUpperCase()}\n          </Tag>\n        </span>\n      );\n    },\n  },\n  // {\n  //   title: 'Action',\n  //   key: 'action',\n  //   render: (text, record) => (\n  //     <Space size=\"middle\">\n  //       <a>Invite {record.name}</a>\n  //       <a>Delete</a>\n  //     </Space>\n  //   ),\n  // },\n];\n\n// const { Option } = Select;\n\nexport default function QuizResult({ _id, submissionId }) {\n  const history = useHistory();\n  const { logout } = useAuth();\n  const { getQuizResult } = useQuiz();\n\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const data = {\n          _id,\n          submissionId,\n        };\n        getQuizResult(data).then(submitResultRes => {\n          setResult([submitResultRes.data]);\n        });\n      } catch (err) {\n        Antd.notification.error({\n          message: 'Error',\n          description: err,\n        });\n      }\n    };\n    fetchResults();\n  }, []);\n\n  const onNextFunc = () => {\n    const { percent } = result[0];\n    if (percent > 80) {\n      history.push('/dashboard');\n    } else if (percent > 60) {\n      logout();\n    } else {\n      logout();\n    }\n  };\n\n  return (\n    <QuizResultContainer>\n      <Table columns={columns} dataSource={result} />\n      <Button onClick={() => onNextFunc()}>Next</Button>\n    </QuizResultContainer>\n  );\n}\n\nQuizResult.protoTypes = {\n  resultOpen: PropTypes.arrayOf(\n    PropTypes.shape({\n      quiz_id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      max_score: PropTypes.number.isRequired,\n    }).isRequired,\n  ),\n  setResultOpen: PropTypes.func.isRequired,\n};\n\nconst QuizResultContainer = Styled(Layout)`\nmargin: 20px 0;\npadding: 20px;\n`;\n",
                                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\quizSteps\\QuizResult.js"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "style.js",
                                                                    "fileData": "import styled from 'styled-components';\nimport { Col, Typography } from 'antd';\n\nconst { Text, Title } = Typography;\n\nconst PageTitle = styled(Title)`\n  padding-bottom: 20px;\n  text-align: left;\n`;\n\nconst DescriptionText = styled(Text)`\n  margin-bottom: 10px;\n  display: block;\n  font-size: 15px;\n  text-align: left;\n`;\n\nconst StepActionContainer = styled.div`\n  width: 100%;\n  margin-top: 24px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ItemContainer = styled(Col)`\n  background: white;\n  padding: 20px;\n  justify-content: flex-start;\n  display: flex;\n  border-radius: 10px;\n  margin: 10px;\n  flex-direction: column;\n  min-width: 45%;\n  flex: 1;\n  align-items: flex-start;\n`;\n\nconst ItemTitle = styled(Text)`\n  font-size: 15px;\n  color: #8c8989;\n  letter-spacing: 3px;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\nexport {\n  PageTitle,\n  DescriptionText,\n  ItemContainer,\n  ItemTitle,\n  StepActionContainer,\n};\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\style.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "testQuiz.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Layout } from 'antd';\n\nimport Quiz from './quizSteps/Quiz';\nimport QuizResult from './quizSteps/QuizResult';\n\nimport Loader from '../../../../components/Loader';\nimport { useQuiz } from '../../../../context/quizContext';\n\nconst { Content } = Layout;\nconst softwareMap = {\n  Excel: 2,\n  'Quickbooks Online': 4,\n  'Microsoft Word': 5,\n  Word: 5,\n  'Google Sheets': 6,\n  'Excel VBA': 7,\n  'Microsoft Office': 2,\n  'IT Technical Support': 2,\n  Quickbooks: 4,\n};\n\nfunction TestQuiz(props) {\n  const { userInfo } = props;\n  // const { onNext } = props;\n  const { fetchQuiz, getQuiz } = useQuiz();\n\n  const [quizData, setQuizData] = useState(null);\n  const [submissionData, setSubmissionData] = useState(null);\n  const [resultOpen, setResultOpen] = useState([false, null]);\n\n  const takeQuizHandler = async transData => {\n    if (!transData.quizId) {\n      return;\n    }\n\n    getQuiz(transData).then(getQuizRes => {\n      setSubmissionData(getQuizRes.data);\n    });\n  };\n\n  useEffect(() => {\n    const courseId = softwareMap[Object.keys(userInfo?.technician?.experiences)[0]?.software?.name] || 2;\n    fetchQuiz(courseId).then(quizArrRes => {\n      if (quizArrRes.data.length > 0) {\n        setQuizData({ ...quizArrRes.data[0] });\n        const transData = {\n          courseId,\n          quizId: quizArrRes.data[0].id,\n        };\n        takeQuizHandler(transData);\n      }\n    });\n  }, []);\n\n  return (\n    <Container>\n      <Layout className=\"layout\">\n        <Content style={{ padding: '40px 50px', margin: '40px' }}>\n          {quizData ? (\n            <Quiz\n              questions={\n                submissionData && submissionData.questions\n                  ? submissionData.questions\n                  : []\n              }\n              quizStartTime={submissionData && submissionData.start_time}\n              submissionId={submissionData && submissionData.submission_id}\n              _id={submissionData && submissionData._id}\n            />\n          ) : (\n            <Loader />\n          )}\n        </Content>\n        {resultOpen[0] === true ? (\n          <QuizResult resultOpen={resultOpen} setResultOpen={setResultOpen} />\n        ) : (\n          ''\n        )}\n      </Layout>\n    </Container>\n  );\n}\n\nTestQuiz.propTypes = {\n  // onNext: PropTypes.func,\n  userInfo: PropTypes.object,\n};\n\nTestQuiz.defaultProps = {\n  // onNext: () => {},\n  userInfo: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    experience: {\n      special: {},\n      other: '',\n      general: {\n        freelancerProfiles: [],\n        employmentProfiles: [],\n        availableProfile: { employment: false, freelancer: false },\n        otherLangList: [],\n        englishLevel: 0,\n        certifications: [],\n        validOtherLang: true,\n      },\n    },\n  },\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default TestQuiz;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\testQuiz.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "watchVideo.js",
                                                                    "fileData": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Row, Col, Form } from 'antd';\nimport ReactPlayer from 'react-player/lazy';\nimport StepButton from '../../../../components/StepButton';\nimport H2 from '../../../../components/common/H2';\nimport H4 from '../../../../components/common/H4';\nimport playButton from '../../../../assets/images/playButton.png';\n\nfunction WatchVideo(props) {\n  const { onNext } = props;\n\n  const [guideLines, setGuideLines] = useState({\n    play: false,\n    playing: false,\n    urls: [],\n    isComplete: false,\n  });\n\n\n\n\n  const handleEnd = () => {\n    setGuideLines({\n      ...guideLines,\n      play: false,\n      isComplete: true,\n    });\n  };\n\n  return (\n    <Container>\n      <Form>\n        <FormContainer>\n          <FormSection gutter={16}>\n            <Col span={24}>\n              <StepTitle>Your Account is created!</StepTitle>\n            </Col>\n          </FormSection>\n          <FormSection gutter={16}>\n            <Col span={11}>\n              <StepSubTile>\n                Watch video about rules and regulations to proceed to quiz\n              </StepSubTile>\n              <Paragraph>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum is simply dummy text of the printing\n              </Paragraph>\n              <br />\n              <Paragraph>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum is simply dummy text of the printing.\n              </Paragraph>\n              <ButtonContainer className=\"steps-action\">\n                <DisabledButton\n                  type=\"button\"\n                  onClick={() => {\n                    setGuideLines({ ...guideLines, playing: true });\n                  }}\n                >\n                  <SystemIcon src={playButton} />\n                  Watch Video\n                </DisabledButton>\n                <DisabledButton\n                  type=\"button\"\n                  disabled={!guideLines.isComplete}\n                  onClick={() => {\n                    // eslint-disable-next-line no-unused-expressions\n                    guideLines.isComplete ? onNext() : null;\n                  }}\n                >\n                  Proceed to software quiz\n                </DisabledButton>\n              </ButtonContainer>\n            </Col>\n            <Col span={11} offset={1}>\n              <VideoPlayer\n                url={guideLines.urls[0]}\n                playing={guideLines.playing}\n                controls=\"true\"\n                onEnded={handleEnd}\n              />\n            </Col>\n          </FormSection>\n        </FormContainer>\n      </Form>\n    </Container>\n  );\n}\n\nWatchVideo.propTypes = {\n  onNext: PropTypes.func,\n};\n\nWatchVideo.defaultProps = {\n  onNext: () => {},\n};\n\nconst ButtonContainer = styled.div`\n  width: 100%;\n  margin-top: 24px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n`;\nconst FormSection = styled(Row)`\n  width: 100%;\n  margin: 20px 0px;\n`;\n\nconst DisabledButton = styled(StepButton)`\n  &:disabled {\n    background: #dddddd;\n    color: ${props => (props.type === 'back' ? '#464646' : '#fff')};\n  }\n  width: 45%;\n  margin: 0px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SystemIcon = styled.img`\n  width: 30px;\n  marginRight: 15px;\n`;\n\nconst StepTitle = styled(H2)`\n  margin-bottom: 60px;\n`;\n\nconst StepSubTile = styled(H4)`\n  padding-bottom: 50px;\n  line-height: 2.2;\n  font-size: 22px;\n`;\n\nconst Paragraph = styled.div`\n  text-align: left;\n  color: #a0a0a0;\n  line-height: 2;\n`;\n\nconst VideoPlayer = styled(ReactPlayer)`\n  width: 100% !important;\n  height: 100% !important;\n  position: relative;\n  padding-bottom: 56%;\n  padding-top: 10px;\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 20px;\n    filter: grayscale(1.5);\n  }\n`;\n\nexport default WatchVideo;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Profile\\step\\watchVideo.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "Register",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useState, useEffect } from 'react';\n\nimport { useLocation } from 'react-router';\n// import TechSignup from './steps/techSignup';\nimport { LayoutMax } from '../../../components/Layout';\nimport Header from '../../../components/NewHeader';\nimport WelcomeToGeekerTwo from './steps/WelcomeToGeekerTwo';\nimport ScreenSteps from '../../../components/ScreenSteps';\n// import SelectExpertise from './steps/selectExpertise';\n// import SelectOtherExpertise from './steps/selectOtherExpertise';\n// import ConfirmYourSchedule from './steps/ConfirmYourSchedule';\nimport { useUser } from '../../../context/useContext';\n// import UploadResume from './steps/UploadResume';\n// import RateExpertise from './steps/rateExpertise';\n// import ApplicationSubmitted from './steps/applicationSubmitted';\n// import PreviousExpertise from './steps/previousExpertise';\n// import * as TechnicianApi from '../../../api/technician.api';\n// import * as AuthApi from '../../../api/auth.api';\n// import { openNotificationWithIcon } from '../../../utils';\nimport { useAuth } from '../../../context/authContext';\nimport { LANDING_PAGE_URL } from '../../../constants';\nimport TechRegister from './steps/techRegister';\nimport WhatIsYourSpeciality from './steps/WhatIsYourSpeciality';\nimport WhatIsYourSpeciality2 from './steps/WhatIsYourSpeciality2';\nimport ProgressBarTechOnboarding from 'components/ProgressBarTechOnboarding';\nimport DaysAvailable from './steps/DaysAvailable';\nimport DemoVideo from './steps/DemoVideo';\n// import AllYouNeedToKnow from './steps/AllYouNeedToKnow';\nimport ScheduleInterview from './steps/ScheduleInterview';\nimport Exam from './steps/Exam';\n// import ExamFail from './steps/ExamFail'\nimport FinaliseYourProfile from './steps/FinaliseYourProfile';\nimport { weekDataObj } from 'constants/other';\n// import { useHistory } from 'react-router';\nconst TechnicianRegister = () => {\n  const [userInfo, setUserInfo] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    phoneNumber: '',\n    language:'',\n    additionalLanguage:'',\n    referred_code:''\n  });\n  const [userLangInfo,setUserLangInfo] = useState({\n    language: null,\n    additionalLanguage: []\n  })\n\n  // --------START----------Days Availability Variables and states----------START---------\n  let allWeekObj = {\n    value: \"allDays\",\n    available: true,\n    startTime: \"\",\n    endTime: \"\",\n    timeStartValue: \"--:--\",\n    timeEndValue: \"--:--\",\n    otherTimes: [],\n  };\n  \n  let daysArr = [\n    { day: \"Monday\", selected: false },\n    { day: \"Tuesday\", selected: false },\n    { day: \"Wednesday\", selected: false },\n    { day: \"Thursday\", selected: false },\n    { day: \"Friday\", selected: false },\n    { day: \"Saturday\", selected: false },\n    { day: \"Sunday\", selected: false },\n  ];\n  \n  const [customization, setCustomization] = useState(false);\n  const [checkScheduleInterview,setCheckScheduleInterview] = useState(false);\n  const [allWeek, setAllWeek] = useState(allWeekObj);\n  const [weekDays, setWeekDays] = useState(weekDataObj);\n  const [weekDaysArr, setWeekDaysArr] = useState([]);\n  const [days, setDays] = useState(daysArr);\n  // --------END----------Days Availability Variables and states----------END---------\n  \n  \n  // const [experiences, setExperiences] = useState([]);\n  // const [expertise, setexpertise] = useState([]);\n  const [register, setRegister] = useState([]);\n  // const [certifiedIn,setCertifiedIn] = useState([])\n  const [reff_by,setReff_by] = useState(\"other\");\n  // const [submitUser, setSubmitUser] = useState(false);\n  // const [generalInfo, setGeneralInfo] = useState({\n  //   freelancerProfiles: [],\n  //   employmentProfiles: [],\n  //   otherLangList: [],\n  //   englishLevel: 'Beginner',\n  //   certifications: [],\n  // });\n  const { user, refetch } = useUser();\n  const [language, setLanguage] = useState('');\n  const [additionalLanguage, setAdditionalLanguage] = useState([]);\n  const [languageDropdownValue, setLanguageDropdownValue] = useState([\"English\"]);\n  // const [technicianRate, setTechnicianRate] = useState(null);\n  // const [otherLangCheck, setOtherLangCheck] = useState(false);\n  // const [showFreelancer, setShowFreelancer] = useState(false);\n  // const [showEmployee, setShowEmployee] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  // const [softwares, setSoftwares] = useState([]);\n  // const history = useHistory();\n  const [registerRes, setRegisterRes] = useState(null);\n  // const [mainSoftware, setmainSoftware] = useState();\n  const { setUserToken, verificationEmailHandler } = useAuth();\n  const [timezone, setTimezone] = useState(\n    Intl.DateTimeFormat().resolvedOptions().timeZone,\n  );\n  const [otherSoftwareSelected, setOtherSoftwareSelected] = useState([]);\n  const [absentSoftwareSelected, setAbsentSoftwareSelected] = useState([]);\n  const [expertiseArrselected, setExpertiseArrselected]= useState([]);\n  const location = useLocation();\n  const [showProgress, setShowProgress] = useState(false)\n  const [progressBarPercentage, setProgressBarPercentage ] = useState(0)\n  const [expertiseLevel, setExpertiseLevel] = useState([]);\n\n  useEffect(() => {\n    if(user){\n      // console.log(\"My console from user\", user)\n      setRegister(user);\n    }\n    let urlParams = new URLSearchParams(location.search)\n    console.log(\"urlParams :::::::::\", urlParams.get(\"t\"));\n\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"update_technician\") {\n      setCurrentStep(1);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"select_softwares\") {\n\n      setCurrentStep(2);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"level_of_expertise\") {\n\n      setCurrentStep(3);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"availability\") {\n\n      setCurrentStep(4);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"demo_video\") {\n\n      setCurrentStep(5);\n    }\n    // if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"instructions\") {\n\n    //   setCurrentStep();\n    // }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"exam\") {\n      setCurrentStep(6);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"exam_fail\") {\n\n      setCurrentStep(6);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"finalize_profile\") {\n      setCurrentStep(7);\n    }\n    if (urlParams.get(\"t\") && urlParams.get(\"t\") == \"schedule_interview\") {\n      setCurrentStep(8);\n    }\n    if(user && \n       user.technician && \n       user.technician.registrationStatus && \n       (user.technician.registrationStatus === \"interview_result\" ||\n        user.technician.registrationStatus === \"incomplete_profile\" ||\n        user.technician.registrationStatus === \"complete\"\n       )){\n        window.location.href=\"/\"\n    }\n  },[]);\n  useEffect(() => {\n    if (registerRes != null) {\n      console.log(registerRes);\n      setUserToken(registerRes);\n      window.location.href = '/?newTech=true';\n      // history.push(\"/\")\n    }\n  }, [registerRes, setUserToken]);\n  \n  const onNext = async () => {\n    //if (currentStep === 0) {\n      window.history.replaceState({},\"title\",\"/\");\n      \n      if(currentStep >= 9){\n        setCurrentStep(0);\n      }else{\n        setCurrentStep(currentStep + 1);\n      }\n   // }\n     console.log(\"currentStep inside the onNext function ::\",currentStep)\n  };\n\n  const setTimezoneValue = (e) => {\n    setTimezone(e.value);\n  };\n  \n  const onPrev = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const steps = [\n    \n\n    // First component for new tech-onboarding-design by Milan\n    {\n      title: 'Signup',\n      content: (\n        <TechRegister\n        onNext={onNext}\n        setShowProgress={setShowProgress}\n        userInfo={userInfo}\n        setUserInfo={setUserInfo}\n        setProgressBarPercentage={setProgressBarPercentage}\n        setRegister={setRegister}\n        user={user}\n        />\n      ),\n     },\n     \n    // Second component for new tech-onboarding-design by Kartar \n    {\n      title: 'WelcomeToGeekerTwo',\n      content: (<WelcomeToGeekerTwo \n        onNext={onNext}\n        onPrev={onPrev}\n        setShowProgress={setShowProgress}\n        showProgress={showProgress}\n        timezone={timezone}\n        setTimezone={setTimezone}\n        setTimezoneValue={setTimezoneValue}\n        userInfo={userInfo}\n        setUserInfo={setUserInfo}\n        language={language}\n        additionalLanguage={additionalLanguage}\n        setLanguage={setLanguage}\n        setAdditionalLanguage={setAdditionalLanguage}\n        setProgressBarPercentage={setProgressBarPercentage}\n        reff_by={reff_by}\n        setReff_by={setReff_by}\n        setLanguageDropdownValue={setLanguageDropdownValue}\n        languageDropdownValue={languageDropdownValue}\n        user={user}\n        refetch={refetch}\n        />\n      ),\n    },\n    \n    // Third component for new tech-onboarding-design\n    {\n      title: 'Speciality',\n      content: (<WhatIsYourSpeciality \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage} \n        setOtherSoftwareSelected={setOtherSoftwareSelected}\n        absentSoftwareSelected={absentSoftwareSelected}\n        setAbsentSoftwareSelected={setAbsentSoftwareSelected}\n        setExpertiseArrselected={setExpertiseArrselected}\n        otherSoftwareSelected={otherSoftwareSelected}\n        register={register}\n        expertiseArrselected={expertiseArrselected}\n        user={user}\n        refetch={refetch}\n        setCurrentStep={setCurrentStep}\n        />\n      ),\n    },\n     \n    // Fourth component for new tech-onboarding-design\n    {\n      title: 'Speciality 2',\n      content: (<WhatIsYourSpeciality2 \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        setExpertiseArrselected={setExpertiseArrselected}\n        expertiseArrselected={expertiseArrselected}\n        register={register}\n        expertiseLevel={expertiseLevel}\n        setExpertiseLevel={setExpertiseLevel}\n        user={user}\n        refetch={refetch}\n        />\n      ),\n    },\n    // Fifth component for new tech-onboarding-design\n    {\n      title: 'Days Available',\n      content: (<DaysAvailable \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        register={register}\n        customization = {customization}\n        setCustomization = {setCustomization}\n        allWeek = {allWeek}\n        setAllWeek = {setAllWeek}\n        weekDays = {weekDays}\n        setWeekDays = {setWeekDays}\n        weekDaysArr = {weekDaysArr}\n        setWeekDaysArr = {setWeekDaysArr}\n        days = {days}\n        setDays = {setDays}\n        user={user}\n        refetch={refetch}\n        />\n      ),\n    },\n     // Sixth component for new tech-onboarding-design\n     {\n      title: 'Demo Video',\n        content: (<DemoVideo \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        register={register}\n        user={user}\n        setCurrentStep={setCurrentStep}\n        />\n      ),\n    },\n   \n    // Seventh component for new tech-onboarding-design\n    // {\n    //   title: 'All you need to know',\n    //   content: (<AllYouNeedToKnow \n    //     onNext={onNext} \n    //     onPrev={onPrev} \n    //     setShowProgress={setShowProgress} \n    //     showProgress={showProgress} \n    //     setProgressBarPercentage={setProgressBarPercentage}\n    //     register={register}\n    //     />\n    //   ),\n    // }, \n    // Eighth component for new tech-onboarding-design\n    {\n      title: 'Exam',\n      content: (<Exam \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        register={register}\n        />\n      ),\n    },\n     // Ninth component for new tech-onboarding-design\n     {\n      title: 'Finalise your profile',\n      content: (<FinaliseYourProfile \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        expertiseArrselected={expertiseArrselected}\n        setCurrentStep={setCurrentStep}\n        user={user}\n        refetch={refetch}\n        checkScheduleInterview={checkScheduleInterview}\n        setCheckScheduleInterview={setCheckScheduleInterview}\n        />\n      ),\n    },\n   \n    // Tenth component for new tech-onboarding-design\n    {\n      title: 'Schedule Interview',\n      content: (<ScheduleInterview \n        onNext={onNext} \n        onPrev={onPrev} \n        setShowProgress={setShowProgress} \n        showProgress={showProgress} \n        setProgressBarPercentage={setProgressBarPercentage}\n        register={register}\n        user={user}\n        refetch={refetch}\n        checkScheduleInterview={checkScheduleInterview}\n        setCheckScheduleInterview={setCheckScheduleInterview}\n        />\n      ),\n    },\n   \n    // {\n    //   title: 'Signup',\n    //   content: (\n    //     <TechSignup\n    //       onNext={onNext}\n    //       userInfo={userInfo}\n    //       setUserInfo={setUserInfo}\n    //       setTechnicianRate={setTechnicianRate}\n    //       setLanguage={setLanguage}\n    //       language={language}\n    //       technicianRate={technicianRate}\n    //       setAdditionalLanguage={setAdditionalLanguage}\n    //       additionalLanguage={additionalLanguage}\n    //       timezone={timezone}\n    //       setTimezoneValue={setTimezoneValue}\n    //       verificationEmailHandler={verificationEmailHandler}\n    //       setSubmitUser={setSubmitUser}\n    //       setRegisterRes={setRegisterRes}\n    //       register={register}\n    //       setRegister={setRegister}\n    //       certifiedIn={certifiedIn}\n    //       setCertifiedIn = {setCertifiedIn}\n    //     />\n    //   ),\n    // },\n    // {\n    //   title: 'Select Software',\n    //   content: (\n    //     <SelectExpertise\n    //       onPrev={onPrev}\n    //       onNext={onNext}\n    //       softwares={softwares}\n    //       setSoftwares={setSoftwares}\n    //       setExperiences={setExperiences}\n    //       setmainSoftware={setmainSoftware}\n    //       setexpertise={setexpertise}\n    //       expertiseArrselected={expertiseArrselected}\n    //       setExpertiseArrselected={setExpertiseArrselected}\n    //       timezone={timezone}\n    //       register={register}\n    //       certifiedIn={certifiedIn}\n    //       setCertifiedIn = {setCertifiedIn}\n    //     />),\n    // },\n    // {\n    //   title: 'Select Other Software',\n    //   content: (\n    //     <SelectOtherExpertise\n    //       onPrev={onPrev}\n    //       onNext={onNext}\n    //       otherSoftwareSelected={otherSoftwareSelected}\n    //       setOtherSoftwareSelected={setOtherSoftwareSelected}\n    //       timezone={timezone}\n    //       register={register}\n    //     />),\n    // },\n    // {\n    //   title: 'Confirm Your Schedule',\n    //   content: (\n    //     <ConfirmYourSchedule\n    //       onPrev={onPrev}\n    //       onNext={onNext}\n    //       timezone={timezone}\n    //       register={register}\n    //     />),\n    // },\n    // {\n    //   title: 'Upload Resume',\n    //   content: (\n    //     <UploadResume\n    //       onPrev={onPrev}\n    //       onNext={onNext}\n    //       timezone={timezone}\n    //       register={register}\n    //     />),\n    // },\n\n  ];\n  // console.log(steps);\n  return (\n    <div className=\"w-85 mb-3\" id=\"LightTheme\">\n      <LayoutMax className=\"background-transparent box-shadow-none font-nova\" bg=\"transparent\">\n        <Header link={LANDING_PAGE_URL} />\n        <div className='new_tech_onboarding_container font-nova'>\n          {showProgress && <ProgressBarTechOnboarding progressBarPercentage={progressBarPercentage} currentStep={currentStep} />}\n          <ScreenSteps\n            stepsContent={steps[currentStep].content}\n            current={currentStep}\n            steps={steps}\n            />\n        </div>\n      </LayoutMax>\n    </div>\n  );\n};\nexport default TechnicianRegister;\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\index.js"
                                                        },
                                                        {
                                                            "type": "file",
                                                            "name": "messages.js",
                                                            "fileData": "import { defineMessages } from 'react-intl';\n\nexport const scope = 'app.containers.expertise';\n\nexport const form = 'app.form.error';\n\nexport default defineMessages({\n  email: {\n    id: `${form}.email`,\n    defaultMessage: 'Please input your E-mail.',\n  },\n  emailVail: {\n    id: `${form}.emailVail`,\n    defaultMessage: 'Check the format of the email you entered.',\n  },\n  firstName: {\n    id: `${form}.firstName`,\n    defaultMessage: 'Please add your first name.',\n  },\n  lastName: {\n    id: `${form}.lastName`,\n    defaultMessage: 'Please add your last name.',\n  },\n  password: {\n    id: `${form}.password`,\n    defaultMessage: 'Please input your Password!',\n  },\n  btnFacebook: {\n    id: `${scope}.signUpFacebook`,\n    defaultMessage: 'Sign Up with Facebook',\n  },\n  btnGoogle: {\n    id: `${scope}.signUpGoogle`,\n    defaultMessage: 'Sign Up with Google',\n  },\n  btnCreateAccount: {\n    id: `${scope}.btnCreateAccount`,\n    defaultMessage: 'Create Account',\n  },\n  registered: {\n    id: `${scope}.registered`,\n    defaultMessage: 'Already Registered?',\n  },\n  login: {\n    id: `${scope}.login`,\n    defaultMessage: 'Login',\n  },\n  technicianRate: {\n    id: `${form}.rate`,\n    defaultMessage: 'Please add your rate.',\n  },\n});\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\messages.js"
                                                        },
                                                        {
                                                            "type": "folder",
                                                            "name": "steps",
                                                            "children": [
                                                                {
                                                                    "type": "file",
                                                                    "name": "AllYouNeedToKnow.js",
                                                                    "fileData": "import React, { useState, useEffect } from \"react\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport NewSquareBtn from \"components/NewSquareBtn\"\nimport Instructions from \"./instructions\"\nimport { openNotificationWithIcon } from '../../../../utils';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { Spin } from 'antd';\n\nconst AllYouNeedToKnow = ({onPrev, onNext, setShowProgress, setProgressBarPercentage, register}) => {\n\n    const[disableCompleteBtn, setDisableCompleteBtn] =useState(false)\n    const [isChecked, setIsChecked] = useState(false);\n\n    useEffect(()=>{\n        setShowProgress(true)\n        setProgressBarPercentage(60)\n    },[])\n    \n    useEffect(()=>{\n    },[isChecked])\n\n    const handleComplete = async ()=>{\n        if(!isChecked){\n            openNotificationWithIcon('error', 'Error', 'Please read the instructions first.') ;\n            return\n        }\n        setDisableCompleteBtn(true)\n        await TechnicianApi.updateTechnician(register.technician.id, {registrationStatus:\"exam\"})\n        onNext()\n    }\n\n    return<div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <HeadingAndSubHeading heading={\"All you need to know\"} subHeading={\"Please read the information below\"} />\n\n        <div className=\"details-div justify-content-start instructions-text\">\n            <div className=\"instructions-heading-div\">\n                <span className=\"\">Onboarding for Techs - How it Works</span>\n            </div>\n            <hr />\n            <Instructions \n            isChecked={isChecked}\n            setIsChecked={setIsChecked}\n            />\n        </div>\n\n        <div className=\"btn-footer d-flex justify-content-between align-items-center\">\n            <NewSquareBtn type={\"previous\"} onPrev={onPrev} />\n\n            \n            <button \n                className={\"green-btn\"}\n                style={{opacity: disableCompleteBtn ? \"0.3\" : \"1\"}}\n                disabled={disableCompleteBtn}\n                onClick={handleComplete}\n            >\n                <spam className=\"green-btn-span\">\n                {(disableCompleteBtn \n                    ?\n                    <Spin className=\"spinner\"/>\n                    :\n                    <>Complete</>\n                )}\n                </spam>\n            </button>\n        </div>\n    </div>\n}\n\nexport default AllYouNeedToKnow",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\AllYouNeedToKnow.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "applicationSubmitted.js",
                                                                    "fileData": "import React from 'react';\nimport { Row, Col, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { StepActionContainer } from './style';\nimport RightImage from '../../../../assets/images/submit.png';\nimport H2 from '../../../../components/common/H2';\nimport H4 from '../../../../components/common/H4';\nimport StepButton from '../../../../components/StepButton';\n// import { useAuth } from '../../../../context/authContext';\n// const { Text } = Typography;\n\n\nfunction ApplicationSubmitted({ onNext }) {\n  \n  // const history = useHistory();\n\n\n  return (\n    <Row>\n      <Container span={15}>\n        <StepTitle>Your application has been submitted!</StepTitle>\n        <StepActionContainer\n          style={{ justifyContent: 'flex-start' }}\n          className=\"steps-action\"\n        >\n          <StepButton type=\"primary\">Go to dashboard</StepButton>\n        </StepActionContainer>\n      </Container>\n      <Col span={9}>\n        <Image src={RightImage} alt=\"on-boarding\" />\n      </Col>\n    </Row>\n  );\n}\n\nconst Container = styled(Col)`\n  display: flex;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n`;\nconst Image = styled.img`\n  margin-left: 30px;\n`;\n\nconst StepTitle = styled(H2)`\n  padding-bottom: 50px;\n`;\n// const StepSubTile = styled(H4)`\n//   padding-bottom: 50px;\n// `;\nApplicationSubmitted.propTypes = {};\n\nApplicationSubmitted.defaultProps = {};\n\nexport default ApplicationSubmitted;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\applicationSubmitted.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ConfirmYourSchedule.js",
                                                                    "fileData": "import { Col, Row, Space, TimePicker, Typography, Modal, Radio } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { PlayCircleFilled } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport { Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport TimezoneSelect, { allTimezones } from \"react-timezone-select\";\nimport AvailableDatePicker from \"react-datepicker\";\nimport { StepActionContainer, StepTitle } from \"./style\";\nimport Select from \"../../../../components/common/Select\";\nimport ItemLabel from \"../../../../components/ItemLabel\";\n// import StepButton from '../../../../components/StepButton';\nimport CheckBox from \"../../../../components/common/CheckBox\";\nimport * as AuthApi from \"../../../../api/auth.api\";\nimport mixpanel from \"mixpanel-browser\";\n// import { timezoneList } from '../../../../constants';\nimport { WarningText } from \"../../../Customer/ProfileSetup/steps/style\";\nimport { openNotificationWithIcon } from \"../../../../utils\";\nimport Box from \"../../../../components/common/Box\";\nimport * as TechnicianApi from \"../../../../api/technician.api\";\nimport { useUser } from \"../../../../context/useContext\";\nimport VideoPopup from \"./videoPopup\";\nimport { getVideos } from \"../../../../api/video.api\";\nimport CompleteIcon from \"../../../../assets/images/complete_icon.png\";\nimport NotCompleteIcon from \"../../../../assets/images/not_complete_icon.png\";\n// import onBoardingTechn from \"./onBoardingTech\";\n// import styles from \"./modal.module.css\";\nimport Instructions from \"./instructions\";\nconst { Option } = Select;\n\nconst { Text } = Typography;\nconst initSelectedTimes = [\"startTime\", \"endTime\"];\nconst days = [\n\t\"Sunday\",\n\t\"Monday\",\n\t\"Tuesday\",\n\t\"Wednesday\",\n\t\"Thursday\",\n\t\"Friday\",\n\t\"Saturday\",\n];\nconst initAvailableTimes = {\n\tSunday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tMonday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tTuesday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tWednesday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tThursday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tFriday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n\tSaturday: {\n\t\tavailable: false,\n\t\tstartTime: \"\",\n\t\tendTime: \"\",\n\t\ttimeZone: \"\",\n\t},\n};\n\nfunction ConfirmYourSchedule({\n  onPrev,\n  onNext,\n  register,\n  timezone\n}) {\n  // const [timezone, setTimezone] = useState('');\n  const [availableTimes, setAvailableTimes] = useState({ ...initAvailableTimes });\n  const [selectedTimes, setSelectedTimes] = useState({ ...initSelectedTimes });\n  const [indeterminate, setIndeterminate] = React.useState(false);\n  const [showError, setShowError] = useState(false);\n  const [checkAll, setCheckAll] = React.useState(false);\n  const [timezoneError, setTimezonError] = useState(null);\n  const [selectedDaysError, setSelectedDaysError] = useState(null);\n  const [nextBtnDisabled, setNextBtnDisabled] = React.useState(false);\n  const [alertMessageVideoWatched, setAlertMessageVideoWatched] = useState('');\n  \n  \t// @author : Utkarsh Dixit\n\tconst [modal1Visible, setModal1Visible] = useState(false);\n\tconst [scrollBottom, setScrollBottom] = useState(false);\n  const [techFeedWhereToCome, setTechFeedWhereToCome] = useState('');\n  // const [whereHeComeFrom, setWhereHeComeFrom] = useState('');\n  const [otherComeFeedBack, setOtherComeFeedBack] = useState('');\n  const [showWhereToFieldError, setShowWhereToFieldError] = useState(false);\n  const { user } = useUser();\n  const [techProfile, setTechProfile] = useState({\n    profileImage: {\n      complete: false,\n    },\n    confirmId: {\n      complete: false,\n    },\n    bankAccount: {\n      complete: false,\n    },\n    schedule: {\n      complete: false,\n    },\n    systemRequirement: {\n      complete: false,\n    },\n    alertPreference: {\n      complete: false,\n    },\n    reviewGuide: {\n      complete: false,\n    },\n    technicianSource:\"\",\n  });\n\n  const [guideLines, setGuideLines] = useState({\n    'Protecting Customer Data1': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data2': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data3': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n    'Protecting Customer Data4': {\n      play: false,\n      url: 'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n      isComplete: false,\n    },\n  });\n\n  useEffect(() => {\n    const links = getVideos();\n\n    links.then((res) => {\n      const temp = {};\n      for (const k in res.data) {\n        temp[res.data[k].title] = { play: false, url: res.data[k].videoUrl, isComplete: false };\n      }\n      // console.log(\"temp :: \",temp)\n      setGuideLines(temp);\n    });\n  }, []);\n\n  const [selectedVideo, setSelectedVideo] = useState('');\n  const [selectedTitle, setSelectedTitle] = useState('');\n\n  const handleClickVideo = (video, title) => {\n    console.log('Handle video click called....');\n    const payload = {\n      ...video,\n      play: true,\n      isComplete: false,\n      title,\n    };\n    setSelectedTitle(title);\n    setSelectedVideo(payload);\n    setGuideLines(prev => ({\n      ...prev,\n      [title]: payload,\n    }));\n  };\n  const handleWatchAgainClickVideo = (video, title) => {\n    console.log('Handle video click called....');\n    const payload = {\n      ...video,\n      play: true,\n      isComplete: true,\n      title,\n    };\n    setSelectedTitle(title);\n    setSelectedVideo(payload);\n    setGuideLines(prev => ({\n      ...prev,\n      [title]: payload,\n    }));\n  };\n\n  useEffect(() => {\n    console.log('<>>>>>>>selectedVideo ', selectedVideo);\n    if (selectedVideo.isComplete) {\n      setGuideLines(prev => ({\n        ...prev,\n        [selectedTitle]: {\n          ...selectedVideo,\n          isComplete: true,\n        },\n      }));\n      // setSelectedTitle('');\n      // setSelectedVideo('');\n    }\n  }, [selectedTitle, selectedVideo]);\n\n  // [setTechProfile, techProfile, register]); commented by manibha 6:07pm\n\n  const onCheckChange = e => {\n    const { checked, id } = e.target;\n    let checkedCount = checked ? 1 : -1;\n    Object.keys(availableTimes).forEach(item => {\n      if (availableTimes[item].available) checkedCount += 1;\n    });\n    setIndeterminate(!!(checkedCount > 0 && checkedCount < 7));\n    setCheckAll(checkedCount === 7);\n\n    const tempAvailabletimes = { ...availableTimes };\n    tempAvailabletimes[id].available = checked;\n    if (!checked) {\n      tempAvailabletimes[id].startTime = '';\n      tempAvailabletimes[id].endTime = '';\n      tempAvailabletimes[id].timeZone = '';\n    }\n    setAvailableTimes(tempAvailabletimes);\n    // setAvailableTimes(prev => ({\n    //   ...prev,\n    //   [id]: {\n    //     ...prev[id],\n    //     available: checked,\n    //   },\n    // }));\n    setSelectedDaysError('');\n  };\n  const onCheckAllChange = e => {\n    let updateAvailableTimes = { ...availableTimes };\n    Object.keys(availableTimes).forEach(item => {\n      updateAvailableTimes = {\n        ...updateAvailableTimes,\n        [item]: {\n          ...updateAvailableTimes[item],\n          available: e.target.checked,\n        },\n      };\n    });\n    setAvailableTimes(updateAvailableTimes);\n    setIndeterminate(false);\n    setCheckAll(e.target.checked);\n  };\n\n  const ifSelectedDays = () => {\n    const selectedDays = Object.keys(availableTimes).filter(\n      item => availableTimes[item].available,\n    );\n    return selectedDays.length;\n  };\n\n  const validateTime = () => {\n    const selectedDays = Object.keys(availableTimes).filter(item => {\n      if (availableTimes[item].available) {\n        if (\n          availableTimes[item].startTime === ''\n          || availableTimes[item].endTime === ''\n        ) {\n          return item;\n        }\n      }\n      return undefined;\n    });\n    return selectedDays.length;\n  };\n\n  const handleComplete = async (value) => {\n    /* if (!setTimezone || setTimezone === \"\") {\n      // setTimezonError('No Timezone Selected.');\n      // setShowError(true)\n      openNotificationWithIcon(\n        'error',\n        'Timezone empty',\n        'No Timezone Selected.',\n      );\n      return false;\n    } else */\n    \n\t\tif (!ifSelectedDays()) {\n\t\t\t// setSelectedDaysError('No days Selected.');\n\t\t\t// setShowError(true)\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"error\",\n\t\t\t\t\"No days Selected\",\n\t\t\t\t\"Please select any day before proceed.\"\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t\tif (validateTime()) {\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"error\",\n\t\t\t\t\"Time is missing\",\n\t\t\t\t\"Please add time correctly\"\n\t\t\t);\n\t\t\t// setShowError(true)\n\t\t\treturn false;\n\t\t}\n\t\tif (validateStartEndTime()) {\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"error\",\n\t\t\t\t\"Invalid time\",\n\t\t\t\t\"Start and End Date is invalid\"\n\t\t\t);\n\t\t\t// setShowError(true)\n\t\t\treturn false;\n\t\t}\n\t\t/* console.log(\">>>>>>> timezone\",timezone.value)\n    if(!timezone.value || timezone.value === ''){\n      openNotificationWithIcon(\n        'error',\n        'Timezone',\n        'Please Select a Timezone',\n      );\n      setShowError(true)\n      return false;\n    } */\n\n    if(!selectedVideo || selectedVideo === ''){\n      openNotificationWithIcon(\n        'error',\n        'Watch Video',\n        'Please Watch Video First',\n      );\n      // setShowError(true)\n      return false;\n     }\n     \n     \t//@ author : Utkarsh Dixit\n\t\tif (!scrollBottom) {\n\t\t\t// setSelectedDaysError('No days Selected.');\n\t\t\t// setShowError(true)\n\t\t\topenNotificationWithIcon(\n\t\t\t\t\"error\",\n\t\t\t\t\"Read Document\",\n\t\t\t\t\"Please read the document before proceeding.\"\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n    let whereto = await handleWhereToCome();\n    let whereHeComeFrom;\n    if(whereto.userReference && whereto.userReference!=''){\n      whereHeComeFrom = whereto.userReference;\n    }\n    if(!whereto.success){\n         return false;\n    }        \n    if (register) {\n      setTechProfile(prev => ({\n        ...prev,\n        schedule: {\n          ...prev.schedule,\n          complete: true,\n          timezone,\n          availableTimes,\n        },\n        reviewGuide: {\n          ...prev.reviewGuide,\n          complete: true,\n        },\n        technicianSource:whereHeComeFrom,\n      }));\n      await TechnicianApi.updateTechnician(register.technician.id, {\n        profileImage: false,\n        schedule: { timezone: timezone, availableTimes: { ...availableTimes } },\n        reviewGuide: { complete: true },\n        technicianSource:whereHeComeFrom,\n        registrationStatus: 'upload_resume',\n      });\n\n      // mixpanel code//\n      mixpanel.identify(value.email);\n      mixpanel.track('Technician - Saved time of availability');\n      // mixpanel code\n\n      onNext();\n      // window.location.href=\"/dashboard\";\n      openNotificationWithIcon(\n        'success',\n        'Success',\n        'Time updated Successfully',\n      );\n      // setOpenModal(true)\n    }\n  };\n\n  /* const zoneList = Object.keys(timezoneList).map(d => (\n    <Option key={`zone-${d}`} style={{ textAlign: 'left' }} value={d}>\n      {d}\n    </Option>\n  )); */\n\n  // const handleChangeTimeZone = value => {\n  //   setTimezone(value);\n  //   setTimezonError('');\n  // };\n\n  const deselectAll = () => {\n    let updateAvailableTimes = { ...availableTimes };\n    Object.keys(availableTimes).forEach(item => {\n      updateAvailableTimes = {\n        ...updateAvailableTimes,\n        [item]: {\n          ...updateAvailableTimes[item],\n          available: false,\n        },\n      };\n    });\n    setAvailableTimes(updateAvailableTimes);\n    setIndeterminate(false);\n    setCheckAll(false);\n  };\n\n  const validateStartEndTime = () => {\n    let isFailed = false;\n    Object.keys(availableTimes).filter(key => {\n      if (availableTimes[key].available) {\n        if (\n\n          moment(availableTimes[key].endTime).isBefore(moment(availableTimes[key].startTime))\n        ) {\n          isFailed = true;\n          return key;\n        }\n      }\n      return undefined;\n    });\n    return isFailed;\n  };\n\n  const onTimeSelect = (type, typeDay, time) => {\n    if (typeDay === 'checkAll') {\n      setSelectedTimes(prev => ({\n        ...prev,\n        [type]: time,\n      }));\n      Object.keys(availableTimes).map(key => {\n        setAvailableTimes(prev => ({\n          ...prev,\n          [key]: { ...availableTimes[key], [type]: time },\n        }));\n        return key;\n      });\n    } else {\n      setAvailableTimes(prev => ({\n        ...prev,\n        [typeDay]: { ...availableTimes[typeDay], [type]: time },\n      }));\n    }\n  };\n  \n  \tconst handleAnchor = (e) => {\n\t\tsetModal1Visible(true);\n\t\t// setDocVisible(true);\n\t\t// console.log(\"visibility set \" + docVisible);\n\t};\n\n  // @autor Utkarsh\n  //This fuction set value for radio buttons\n\tconst handleTechFeed = e => {\n\t\tsetTechFeedWhereToCome(e.target.value);\n\t};\n\n  // @autor Utkarsh\n  //this function hadle validation for technician source after submition\n  const handleWhereToCome = async () => {\n    let whereHeComeFrom;\n\t\tif (techFeedWhereToCome == '') {\n\t\t\topenNotificationWithIcon('error', 'Error', 'Please select an option');\n\t\t\treturn false;\n\t\t}\n\t\telse if (techFeedWhereToCome == 'Others' && otherComeFeedBack == '') {\n\t\t\tsetShowWhereToFieldError(true);\n\t\t\t// setWhereHeComeFrom('');\n\t\t\treturn false;\n\t\t}else {\n      if(techFeedWhereToCome == 'Others'){\n        whereHeComeFrom = otherComeFeedBack;\n        // setWhereHeComeFrom(otherComeFeedBack);\n      }else{\n        whereHeComeFrom = techFeedWhereToCome;\n        // setWhereHeComeFrom(techFeedWhereToCome);\n      }\n\t\t}\n    return ({success :true,userReference:whereHeComeFrom});\t\n\t\t\n\t};\n\n  return (\n    <Container className=\"w-50 m-auto p-4 tech-register-step-3\">\n      {/* <StepTitle >\n        {`The Licensee may permit its employees to use the Asset for the\n        purposes described in Item 8, provided that the Licensee takes all\n        necessary steps and imposes the necessary conditions to ensure that\n        all employees using the Asset do not commercialize or disclose the\n        contents of it to any third person, or use it other than in accordance\n        with the terms of this Agreement. The Licensee acknowledges and agrees\n        that neither Licensor nor its board members, officers, employees or\n        agents, will be liable for any loss or damage arising out of or\n        resulting from Licensor\u2019s provision of the Asset under this Agreement,\n        or any use of the Asset by the Licensee or its employees; and Licensee\n        hereby releases Licensor to the fullest extent from any such\n        liability, loss, damage or claim.`}\n      </StepTitle> */}\n\t\t\t<p>\n\t\t\t\t<h4>\n\t\t\t\t\t<b>What days are you available?</b>\n\t\t\t\t</h4>\n\t\t\t</p>\n\t\t\t<Row gutter={[40, 40]} className=\"justify-content-center\">\n\t\t\t\t<Col span={24}>\n\t\t\t\t\t<CheckBox\n\t\t\t\t\t\tindeterminate={indeterminate}\n\t\t\t\t\t\tonChange={onCheckAllChange}\n\t\t\t\t\t\tchecked={checkAll}\n\t\t\t\t\t>\n\t\t\t\t\t\tAll days of the week\n\t\t\t\t\t</CheckBox>\n\t\t\t\t\t{/* <AlertError>{selectedDaysError}</AlertError> */}\n\t\t\t\t</Col>\n\t\t\t\t{checkAll ? (\n\t\t\t\t\t<Row gutter={[20, 0]} className=\"text-center availableDatePicker\">\n\t\t\t\t\t\t<Col span={24}>\n\t\t\t\t\t\t\t<ItemLabel style={{ marginBottom: 0 }}>\n\t\t\t\t\t\t\t\tSelect hours available\n\t\t\t\t\t\t\t</ItemLabel>\n\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t<Col xs={24} md={11}>\n\t\t\t\t\t\t\t<AvailableDatePicker\n\t\t\t\t\t\t\t\tselected={\n\t\t\t\t\t\t\t\t\tselectedTimes.startTime !== \"\" ? selectedTimes.startTime : \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonChange={(date) => onTimeSelect(\"startTime\", \"checkAll\", date)}\n\t\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\t\tshowTimeSelectOnly\n\t\t\t\t\t\t\t\ttimeIntervals={60}\n\t\t\t\t\t\t\t\ttimeCaption=\"Start Time\"\n\t\t\t\t\t\t\t\tplaceholderText=\"Start\"\n\t\t\t\t\t\t\t\tdateFormat=\"h aa\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"Start\"\n                onSelect={time => onTimeSelect('startTime', 'checkAll', time)}\n              /> */}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs={24} md={11}>\n\t\t\t\t\t\t\t<AvailableDatePicker\n\t\t\t\t\t\t\t\tselected={\n\t\t\t\t\t\t\t\t\tselectedTimes.endTime !== \"\" ? selectedTimes.endTime : \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonChange={(date) => onTimeSelect(\"endTime\", \"checkAll\", date)}\n\t\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\t\tshowTimeSelectOnly\n\t\t\t\t\t\t\t\ttimeIntervals={60}\n\t\t\t\t\t\t\t\ttimeCaption=\"End Time\"\n\t\t\t\t\t\t\t\tplaceholderText=\"End\"\n\t\t\t\t\t\t\t\tdateFormat=\"h aa\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"End\"\n                onSelect={time => onTimeSelect('endTime', 'checkAll', time)}\n                // value={availableTimes['Monday']['endTime']}\n              /> */}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t) : (\n\t\t\t\t\tdays.map((item) => (\n\t\t\t\t\t\t<DaySection\n\t\t\t\t\t\t\tkey={item}\n\t\t\t\t\t\t\tname={item}\n\t\t\t\t\t\t\tonCheckChange={onCheckChange}\n\t\t\t\t\t\t\tvalues={{ ...availableTimes }}\n\t\t\t\t\t\t\tonTimeSelect={onTimeSelect}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t\t<Col col={6}>\n\t\t\t\t\t<DeSelectText onClick={deselectAll}>Deselect ALL</DeSelectText>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t{/* <Row gutter={[30, 30]}>\n      <Col span={8} className=\"mt-4\">\n        <label className=\"pt-2\"><b>SELECT TIMEZONE *</b></label>\n      </Col>\n\n      <Col span={8} className=\"text-left mt-4\">\n      <TimezoneSelect\n          value={timezone}\n          onChange={setTimezone}\n          timezones={{\n              ...allTimezones\n          }}\n          className = \"mb-2 \"\n          id=\"tech-timezone\"\n          style={{ width: '50%' }}\n      /></Col>\n      </Row> */}\n\n\t\t\t{/* <Label >\n        {`\n        When you receive an invitation to peer review, you should be sent a copy\n        of the paper's abstract to help you decide whether you wish to do the\n        review. Try to respond to invitations promptly - it will prevent delays.\n        It is also important at this stage to declare any potential Conflict of\n        Interest.`}\n      </Label> */}\n\n\t\t\t<p style={{ borderTop: \"solid 1px #CCC\", paddingTop: \"30px\" }}>\n\t\t\t\t<h4>\n\t\t\t\t\t<b>Get started by the video below!</b>\n\t\t\t\t</h4>\n\t\t\t</p>\n\t\t\t<ListContainer>\n\t\t\t\t<VideoPopup\n\t\t\t\t\tselectedVideo={selectedVideo}\n\t\t\t\t\tsetSelectedVideo={setSelectedVideo}\n\t\t\t\t/>\n\t\t\t\t{Object.keys(guideLines).map((item) => (\n\t\t\t\t\t<Row align=\"middle\" gutter={[30, 30]} key={item}>\n\t\t\t\t\t\t<Col span={8}>\n\t\t\t\t\t\t\t<GuideTitle>\n\t\t\t\t\t\t\t\t{/* <b>{item}</b> */}\n\t\t\t\t\t\t\t</GuideTitle>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<MidSection\n\t\t\t\t\t\t\tspan={11}\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tguideLines[item].isComplete\n\t\t\t\t\t\t\t\t\t? handleWatchAgainClickVideo(guideLines[item], item)\n\t\t\t\t\t\t\t\t\t: handleClickVideo(guideLines[item], item)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<PlayCircleFilled style={{ fontSize: 20, float: \"left\" }} />\n\t\t\t\t\t\t\t<GuideVideoTitle>\n\t\t\t\t\t\t\t\t{guideLines[item].isComplete\n\t\t\t\t\t\t\t\t\t? \"Watch Video again\"\n\t\t\t\t\t\t\t\t\t: \"Watch Video\"}\n\t\t\t\t\t\t\t</GuideVideoTitle>\n\t\t\t\t\t\t</MidSection>\n\t\t\t\t\t\t<Col spn={4}>\n\t\t\t\t\t\t\t<RightIcon\n\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\tguideLines[item].isComplete ? CompleteIcon : NotCompleteIcon\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName=\"float-left\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text className=\"float-left\">\n\t\t\t\t\t\t\t\t{guideLines[item].isComplete ? \"Completed\" : \"Not Completed\"}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t))}\n\t\t\t</ListContainer>\n\n\t\t\t<em style={{textAlign: \"center\", fontWeight:\"bold\", fontSize:\"25px\", color:\"black\"}}> Read how it works.{\" \"}\t\n        <span style={{ color: \"blue\" }} onClick={handleAnchor}>Click</span>\n        <span style={{ color: \"red\" }}>*</span>\n      </em>\n\n\t\t\t{/* // @author Utkarsh dixit */}\n\t\t\t<Modal\n\t\t\t\ttitle=\"Onboarding for Techs - How it Works\"\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: 20,\n\t\t\t\t}}\n        width={1000}\n\t\t\t\tvisible={modal1Visible}\n\t\t\t\tonOk={() => setModal1Visible(false)}\n\t\t\t\tonCancel={() => setModal1Visible(false)}\n\t\t\t\tfooter={false}\n        closable={false}\n\t\t\t>\n\t\t\t\t<Instructions setScrollBottom={setScrollBottom} setModal1Visible={setModal1Visible} />\n\t\t\t</Modal>\n\n      <p style={{ borderTop: \"solid 1px #CCC\", paddingTop: \"30px\", marginTop:\"20px\" }}>\n\t\t\t\t<h4>\n\t\t\t\t\t<b>How did you hear about us ? </b>\n          <span style={{ color: \"red\" }}>*</span>\n\t\t\t\t</h4>\n\t\t\t</p>\n      <Row>\n        <Col>\n        <Radio.Group onChange={handleTechFeed} className=\"radioBoxes\" value={techFeedWhereToCome} style={{textAlign:\"left\",paddingLeft:\"1rem\"}}>\n              <Radio value=\"Facebook\">\n              Facebook\n              </Radio>\n                        <br />\n              <Radio value=\"Twitter\">\n              Twitter\n              </Radio>\n                        <br />\n              <Radio value=\"LinkedIn\">\n              LinkedIns\n              </Radio>\n                        <br />\n              <Radio value=\"friend\">\n              Friend\n              </Radio>\n                        <br />\n              <Radio value=\"Others\">\n              Others please specify\n              </Radio>\n\t\t\t</Radio.Group>\n      { techFeedWhereToCome == 'Others' && (\n\t\t\t\t\t\t\t\t\t<div className=\"section_five\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"section_sub_five col-12 ml-0 p-0 mt-4 form-group\">\n\t\t\t\t\t\t\t\t\t\t\t<input spellCheck rows={4} className=\"form-control\" onChange={(e) => { setShowWhereToFieldError(false); setOtherComeFeedBack(e.target.value); }} id=\"textarea\" />\n\t\t\t\t\t\t\t\t\t\t\t{showWhereToFieldError && <p className=\"m-0 p-0\" style={{ color: 'red' }}> Required Field</p> }\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n        </Col>\n      </Row>\n      \n\n\t\t\t<AlertError>{timezoneError}</AlertError>\n\t\t\t{showError && <WarningText>All fields are required.</WarningText>}\n\t\t\t<StepActionContainer className=\"steps-action\">\n\t\t\t\t<Box display=\"flex\" justifyContent=\"flex-end\" marginTop={30}>\n\t\t\t\t\t<Button className=\"btn app-btn\" onClick={handleComplete}>\n\t\t\t\t\t\t<span />\n\t\t\t\t\t\tSave\n\t\t\t\t\t</Button>\n\t\t\t\t</Box>\n\t\t\t</StepActionContainer>\n\t\t\t<Row />\n\t\t</Container>\n\t);\n}\n\nconst DaySection = (props) => {\n\tconst { name, onCheckChange, values, onTimeSelect } = props;\n\t// const [name.'Start', setStartDate] = useState(new Date());\n\t// const [name.'End', setEndDate] = useState(null);\n\t// const startDate = Array.from(\n\t//   { length: 4 },\n\t//   setStartDate\n\t// );\n\t// const endDate = Array.from(\n\t//   { length: 4 },\n\t//   setStartDate\n\t// );\n\n\treturn (\n\t\t<Col xs={24} md={6}>\n\t\t\t<Space direction=\"vertical\" size={15}>\n\t\t\t\t<CheckBox\n\t\t\t\t\tid={name}\n\t\t\t\t\tchecked={values[name].available}\n\t\t\t\t\tonChange={onCheckChange}\n\t\t\t\t>\n\t\t\t\t\t{name}\n\t\t\t\t</CheckBox>\n\t\t\t\t{values[name].available && (\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<ItemLabel style={{ marginBottom: 0 }}>\n\t\t\t\t\t\t\tSelect hours available\n\t\t\t\t\t\t</ItemLabel>\n\t\t\t\t\t\t<Row gutter={[20, 0]} className=\"availableDatePicker\">\n\t\t\t\t\t\t\t<Col xs={24} md={11}>\n\t\t\t\t\t\t\t\t<AvailableDatePicker\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tvalues[name].startTime !== \"\" ? values[name].startTime : \"\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tselected={\n\t\t\t\t\t\t\t\t\t\tvalues[name].startTime !== \"\" ? values[name].startTime : \"\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={(date) => onTimeSelect(\"startTime\", name, date)}\n\t\t\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\t\t\tshowTimeSelectOnly\n\t\t\t\t\t\t\t\t\ttimeIntervals={60}\n\t\t\t\t\t\t\t\t\ttimeCaption=\"Start Time\"\n\t\t\t\t\t\t\t\t\tplaceholderText=\"Start\"\n\t\t\t\t\t\t\t\t\tdateFormat=\"h aa\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"Start\"\n                defaultValue={values[name].startTime !== '' ? moment(values[name].startTime) : ''}\n                onSelect={time => onTimeSelect('startTime', name, time)}\n              /> */}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col span={11}>\n\t\t\t\t\t\t\t\t<AvailableDatePicker\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tvalues[name].endTime !== \"\" ? values[name].endTime : \"\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tselected={\n\t\t\t\t\t\t\t\t\t\tvalues[name].endTime !== \"\" ? values[name].endTime : \"\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={(time) => onTimeSelect(\"endTime\", name, time)}\n\t\t\t\t\t\t\t\t\tshowTimeSelect\n\t\t\t\t\t\t\t\t\tshowTimeSelectOnly\n\t\t\t\t\t\t\t\t\ttimeIntervals={60}\n\t\t\t\t\t\t\t\t\ttimeCaption=\"End Time\"\n\t\t\t\t\t\t\t\t\tplaceholderText=\"End\"\n\t\t\t\t\t\t\t\t\tdateFormat=\"h aa\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{/* <AvailableTimePicker\n                use12Hours\n                allowClear={false}\n                format=\"h A\"\n                placeholder=\"End\"\n                defaultValue={values[name].endTime !== '' ? moment(values[name].endTime) : ''}\n                onSelect={time => onTimeSelect('endTime', name, time)}\n              /> */}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Row>\n\t\t\t\t)}\n\t\t\t</Space>\n\t\t</Col>\n    \n\t);\n};\n\nDaySection.propTypes = {\n\tname: PropTypes.string,\n\tvalues: PropTypes.object,\n\tonCheckChange: PropTypes.func,\n\tonTimeSelect: PropTypes.func,\n};\n\nDaySection.defaultProps = {\n\tname: \"Monday\",\n};\nConfirmYourSchedule.propTypes = {\n\tsetTechProfile: PropTypes.func,\n};\n\nConfirmYourSchedule.defaultProps = {\n\tsetTechProfile: () => {},\n};\n\nconst GuideTitle = styled(Text)`\n\tfont-size: 18px;\n`;\nconst GuideVideoTitle = styled(Text)`\n\tfont-size: 16px;\n\tfont-weight: bold;\n\tpadding-left: 10px;\n\tfloat: left;\n`;\nconst MidSection = styled(Col)`\n\tdisplay: flex;\n\talign-items: center;\n\tcursor: pointer;\n`;\nconst ListContainer = styled.div`\n\tpadding-top: 30px;\n`;\n\nconst RightIcon = styled.img`\n\twidth: 20px;\n  marginRight: 10px;\n`;\n\nconst AlertError = styled.div`\n\tcolor: red;\n`;\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground-color: #fff;\n`;\nconst AvailableTimePicker = styled(TimePicker)`\n\theight: 50px;\n\tborder-radius: 10px;\n`;\nconst Label = styled(ItemLabel)`\n\tfont-weight: bold;\n\tcolor: #868383;\n\tpadding-top: 30px;\n\tpadding-bottom: 20px;\n\tborder-bottom: 0px;\n`;\nconst DeSelectText = styled(Text)`\n\tfont-size: 15px;\n\tfont-weight: bold;\n\tcolor: #8c8989;\n\ttext-decoration: underline;\n\tpadding-top: 20px;\n\tcursor: pointer;\n`;\nexport default ConfirmYourSchedule;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\ConfirmYourSchedule.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "DaysAvailable.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\";\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\";\nimport FooterBtns from \"components/FooterBtns\";\nimport RoundSelectorBtn from \"components/RoundSelectorBtn\";\nimport AvailabilityTimeRange from \"components/AvailabilityTimeRange\";\nimport { openNotificationWithIcon } from \"../../../../utils\";\nimport * as TechnicianApi from \"../../../../api/technician.api\";\nimport mixpanel from \"mixpanel-browser\";\nimport { weekDataObj } from \"constants/other\";\n\nconst DaysAvailable = ({\n  onPrev,\n  onNext,\n  setShowProgress,\n  setProgressBarPercentage,\n  register,\n  customization,\n  setCustomization,\n  allWeek,\n  setAllWeek,\n  weekDays,\n  setWeekDays,\n  weekDaysArr,\n  setWeekDaysArr,\n  days,\n  setDays,\n  user,\n  refetch,\n}) => {\n  const [showSpinner, setShowSpinner] = useState(false);\n  useEffect(() => {\n    setShowProgress(true);\n    setProgressBarPercentage(60);\n    onSetWeekDaysArr();\n    refetch();\n  }, []);\n\n  useEffect(() => {\n    fetchPreviousValues();\n  }, [user]);\n\n  useEffect(() => {\n    onSetWeekDaysArr();\n  }, [weekDays]);\n\n  const fetchPreviousValues = async () => {\n    setCustomization(user.technician.profile.schedule.customization);\n    let availableTimes = user.technician.profile.schedule.availableTimes;\n    let tempDays = [];\n    let tempObj = { ...weekDays };\n    for (let property in availableTimes) {\n      tempDays.push({\n        day: property,\n        selected: availableTimes[property].available,\n      });\n      tempObj[property] = {\n        ...tempObj[property],\n        available: availableTimes[property].available,\n      };\n    }\n    setDays(tempDays);\n    setWeekDays(tempObj);\n    onSetWeekDaysArr();\n    if (!user.technician.profile.schedule.customization) {\n      for (let property in availableTimes) {\n        if (availableTimes[property].available === true) {\n          setAllWeek({ ...availableTimes[property], value: \"allDays\" });\n          break;\n        }\n      }\n      return;\n    }\n    if (user.technician.profile.schedule.customization) {\n      setWeekDays(availableTimes);\n    }\n  };\n\n  const onSetWeekDaysArr = async () => {\n    let newArr = [];\n    for (let property in weekDays) {\n      newArr.push(weekDays[property]);\n    }\n    setWeekDaysArr(newArr);\n  };\n\n  const onChangeCustomization = async (dayOfTheWeek, customStatus) => {\n    let noDaySelected = true;\n    days.forEach(day => {\n      if(day.selected === true) {\n        noDaySelected = false;\n        return;\n      }\n    })\n    if(noDaySelected) return openNotificationWithIcon(\n      \"error\",\n      \"Error\",\n      \"Please select atleast one day.\"\n    );\n    if (!customStatus) {\n      setAllWeek({ ...dayOfTheWeek, value: \"allDays\" });\n      setCustomization(customStatus);\n    }\n    if (customStatus) {\n      let tempObj = { ...weekDays };\n      setWeekDays(weekDataObj);\n      for (let property in tempObj) {\n        if (tempObj[property].available) {\n          let tempArr = [];\n          allWeek.otherTimes.forEach((item) => {\n            tempArr.push({ ...item, value: property });\n          });\n          tempObj[property] = {\n            ...tempObj[property],\n            startTime: allWeek.startTime,\n            endTime : allWeek.endTime,\n            timeEndValue: allWeek.timeEndValue,\n            timeStartValue: allWeek.timeStartValue,\n            value: tempObj[property].value,\n            otherTimes: tempArr,\n          };\n        }\n      }\n      setWeekDays(tempObj);\n      setCustomization(customStatus);\n    }\n  };\n\n  const selectDayHandler = async (day) => {\n    let newDayArr = [];\n    for (let i = 0; i < days.length; i++) {\n      if (days[i].day === day)\n        newDayArr.push({\n          day: days[i].day,\n          selected: !days[i].selected,\n        });\n      else newDayArr.push(days[i]);\n    }\n    let tempObj = { ...weekDays };\n    tempObj[day].available = !tempObj[day].available;\n    tempObj[day].startTime = \"\";\n    tempObj[day].endTime = \"\";\n    tempObj[day].timeStartValue = \"--:--\";\n    tempObj[day].timeEndValue = \"--:--\";\n    tempObj[day].otherTimes = [];\n    setDays(newDayArr);\n    setWeekDays(tempObj);\n  };\n\n  const moreTimeHandler = async (day) => {\n    if (customization) {\n      let emptyFieldError = false;\n      if (weekDays[day].timeEndValue === \"--:--\") emptyFieldError = true;\n\n      if (weekDays[day].otherTimes.length > 0)\n        if (\n          weekDays[day].otherTimes[weekDays[day].otherTimes.length - 1]\n            .timeEndValue === \"--:--\"\n        )\n          emptyFieldError = true;\n\n      if (emptyFieldError)\n        return openNotificationWithIcon(\n          \"error\",\n          \"Error\",\n          \"Please fill up the last empty fields.\"\n        );\n\n      let tempObj = weekDays;\n      tempObj[day].otherTimes.push({\n        startTime: \"\",\n        endTime: \"\",\n        timeStartValue: \"--:--\",\n        timeEndValue: \"--:--\",\n        value: day,\n      });\n      setWeekDays(tempObj);\n      onSetWeekDaysArr();\n    }\n    if (!customization) {\n      let emptyFieldError = false;\n      if (allWeek.timeEndValue === \"--:--\") emptyFieldError = true;\n\n      if (allWeek.otherTimes.length > 0)\n        if (\n          allWeek.otherTimes[allWeek.otherTimes.length - 1].timeEndValue ===\n          \"--:--\"\n        )\n          emptyFieldError = true;\n\n      if (emptyFieldError)\n        return openNotificationWithIcon(\n          \"error\",\n          \"Error\",\n          \"Please fill up the empty fields to get more fields.\"\n        );\n      let tempAllWeekObj = { ...allWeek };\n      tempAllWeekObj.otherTimes.push({\n        startTime: \"\",\n        endTime: \"\",\n        timeStartValue: \"--:--\",\n        timeEndValue: \"--:--\",\n      });\n      setAllWeek(tempAllWeekObj);\n    }\n  };\n\n  const lessTimeHandler = async (day, dayOfTheWeek) => {\n    if (customization) {\n      let tempObj = weekDays;\n      if (tempObj[day].otherTimes.length === 0) {\n        tempObj[day].startTime = \"\";\n        tempObj[day].endTime = \"\";\n        tempObj[day].timeStartValue = \"--:--\";\n        tempObj[day].timeEndValue = \"--:--\";\n        tempObj[day].available = false;\n\n        let newDayArr = [];\n        for (let i = 0; i < days.length; i++) {\n          if (days[i].day === day)\n            newDayArr.push({\n              day: days[i].day,\n              selected: false,\n            });\n          else newDayArr.push(days[i]);\n        }\n        setDays(newDayArr);\n      } else tempObj[day].otherTimes.pop();\n      setWeekDays(tempObj);\n      onSetWeekDaysArr();\n    }\n    if (!customization) {\n      let tempTimesArr = allWeek.otherTimes;\n      tempTimesArr.pop();\n      setAllWeek({ ...allWeek, otherTimes: tempTimesArr });\n    }\n  };\n\n  const onSelectTime = async (value, day, type, available, position) => {\n    let date = new Date();\n    date.setHours(value);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    date = new Date(date).toISOString();\n    if (customization) {\n      if (available) {\n        let tempObj = weekDays;\n        for (let property in tempObj) {\n          if (property === day) {\n            tempObj[property].timeStartValue =\n              type === \"start\" ? value : tempObj[property].timeStartValue;\n            tempObj[property].timeEndValue =\n              type === \"end\" ? value : tempObj[property].timeEndValue;\n            tempObj[property].startTime =\n              type === \"start\" ? date : tempObj[property].startTime === \"\" ? \"\" : (new Date(tempObj[property].startTime).toISOString());\n            tempObj[property].endTime =\n              type === \"end\" ? date : tempObj[property].endTime === \"\" ? \"\" : (new Date(tempObj[property].endTime).toISOString());\n          }\n        }\n        setWeekDays(tempObj);\n        onSetWeekDaysArr();\n      }\n      if (!available) {\n        let tempObj = weekDays;\n        for (let property in tempObj) {\n          if (property === day) {\n            tempObj[property].otherTimes[position] = {\n              value: day,\n              timeStartValue:\n                type === \"start\"\n                  ? value\n                  : tempObj[property].otherTimes[position].timeStartValue,\n              timeEndValue:\n                type === \"end\"\n                  ? value\n                  : tempObj[property].otherTimes[position].timeEndValue,\n              startTime:\n                type === \"start\"\n                  ? date\n                  : tempObj[property].otherTimes[position].startTime === \"\" ? \"\" : (new Date(tempObj[property].otherTimes[position].startTime).toISOString()),\n              endTime:\n                type === \"end\"\n                  ? date\n                  : tempObj[property].otherTimes[position].endTime === \"\" ? \"\" : (new Date(tempObj[property].otherTimes[position].endTime).toISOString()),\n            };\n          }\n        }\n        setWeekDays(tempObj);\n        onSetWeekDaysArr();\n      }\n    }\n    if (!customization) {\n      if (available) {\n        setAllWeek({\n          ...allWeek,\n          timeStartValue: type === \"start\" ? value : allWeek.timeStartValue,\n          timeEndValue: type === \"end\" ? value : allWeek.timeEndValue,\n          startTime: type === \"start\" ? date : allWeek.startTime === \"\" ? \"\" : (new Date(allWeek.startTime).toISOString()),\n          endTime: type === \"end\" ? date : allWeek.endTime === \"\" ? \"\" : (new Date(allWeek.endTime).toISOString()),\n        });\n      }\n      if (!available) {\n        let tempOtherTimes = allWeek.otherTimes;\n        tempOtherTimes[position] = {\n          timeStartValue:\n            type === \"start\" ? value : tempOtherTimes[position].timeStartValue,\n          timeEndValue:\n            type === \"end\" ? value : tempOtherTimes[position].timeEndValue,\n          startTime:\n            type === \"start\" ? date : tempOtherTimes[position].startTime === \"\" ? \"\" :(new Date(tempOtherTimes[position].startTime).toISOString()),\n          endTime: type === \"end\" ? date : tempOtherTimes[position].endTime === \"\" ? \"\" :(new Date(tempOtherTimes[position].endTime).toISOString()),\n        };\n        setAllWeek({\n          ...allWeek,\n          otherTimes: tempOtherTimes,\n        });\n      }\n    }\n  };\n\n  const submitHandler = async () => {\n    let error = false;\n    let minOneSelected = false;\n    if (!customization) {\n      if (allWeek.startTime.length === 0 || allWeek.endTime.length === 0) {\n        error = true;\n      }\n      if (allWeek.otherTimes.length > 0) {\n        allWeek.otherTimes.forEach((item) => {\n          if (item.startTime === \"\" || item.endTime === \"\") {\n            error = true;\n          }\n        });\n      }\n    }\n    if (customization) {\n      for (let property in weekDays) {\n        if (weekDays[property].available) {\n          minOneSelected = true;\n          if (\n            weekDays[property].startTime === \"\" ||\n            weekDays[property].endTime === \"\"\n          ) {\n            error = true;\n            break;\n          }\n          if (weekDays[property].otherTimes.length > 0) {\n            weekDays[property].otherTimes.forEach((item) => {\n              if (item.startTime === \"\" || item.endTime === \"\") {\n                error = true;\n              }\n            });\n          }\n        }\n      }\n    }\n\n    if (!customization) {\n      let dataObj = { ...weekDays };\n      for (let property in dataObj) {\n        if (dataObj[property].available === true) {\n          minOneSelected = true;\n          dataObj[property].value = dataObj[property].value;\n          dataObj[property].startTime = allWeek.startTime;\n          dataObj[property].endTime = allWeek.endTime;\n          dataObj[property].timeStartValue = allWeek.timeStartValue;\n          dataObj[property].timeEndValue = allWeek.timeEndValue;\n          dataObj[property].available = allWeek.available;\n          dataObj[property].otherTimes = allWeek.otherTimes;\n        }\n      }\n      setWeekDays(dataObj);\n    }\n    if (!minOneSelected) {\n      openNotificationWithIcon(\n        \"error\",\n        \"Error\",\n        \"Please select atleast one day.\"\n      );\n      return;\n    }\n\n    if (error) {\n      openNotificationWithIcon(\n        \"error\",\n        \"Error\",\n        \"Please select time in the empty field.\"\n      );\n      return;\n    }\n    setShowSpinner(true);\n    const response = await TechnicianApi.updateTechnician(\n      register.technician.id,\n      {\n        schedule: {\n          availableTimes: weekDays,\n          timezone: register.timezone ? register.timezone : \"\",\n          customization: customization,\n        },\n        registrationStatus: \"demo_video\",\n      }\n    );\n    if (response) {\n      openNotificationWithIcon(\n        \"success\",\n        \"Success\",\n        \"Availability time saved.\"\n      );\n      // mixpanel code//\n      mixpanel.identify(user.email);\n      mixpanel.track(\n        \"Technician - submitted availability time and proceeded to next form\"\n      );\n      // mixpanel code//\n      onNext();\n    }\n  };\n\n  const saveForLater = async () => {\n    const response = await TechnicianApi.updateTechnician(\n      register.technician.id,\n      {\n        schedule: {\n          availableTimes: weekDays,\n          timezone: register.timezone ? register.timezone : \"\",\n        },\n      }\n    );\n    if (response) {\n      openNotificationWithIcon(\n        \"success\",\n        \"Success\",\n        \"Availability time saved for later.\"\n      );\n      // mixpanel code//\n      mixpanel.identify(user.email);\n      mixpanel.track(\"Technician - saved availability time (if any) for later\");\n      // mixpanel code//\n    }\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center align-items-center flex-column\">\n      <HeadingAndSubHeading\n        heading={\"Days Available\"}\n        subHeading={\n          \"Yes. This is real! Pick the days and hours you would like to work. It\u2019s that easy.\"\n        }\n        incSubHeadingFontSize={true}\n      />\n      <div className=\"d-flex justify-content-around w-70p mb-40 flex-wrap\">\n        {days.map((dayObj, i) => (\n          <RoundSelectorBtn\n            btnTitle={dayObj.day.substring(0, 3)}\n            clickHandler={() => selectDayHandler(dayObj.day)}\n            selected={days[i].selected}\n            btnName={\"weekdays\"}\n            key={i}\n          />\n        ))}\n      </div>\n\n      <div className=\"d-flex flex-column time-range-div\">\n        {customization ? (\n          <>\n            {weekDaysArr\n              .filter((dayObj) => dayObj.available)\n              .map((dayObj, i) => (\n                <React.Fragment key={i}>\n                  <AvailabilityTimeRange\n                    key={i}\n                    position={i}\n                    nextStartValue={dayObj.otherTimes.length > 0 ? dayObj.otherTimes[0].timeStartValue : undefined }\n                    dayOfTheWeek={dayObj}\n                    showDayOfTheWeek={true}\n                    onChangeCustomization={onChangeCustomization}\n                    customization={customization}\n                    moreTimeHandler={moreTimeHandler}\n                    lessTimeHandler={lessTimeHandler}\n                    onSelectTime={onSelectTime}\n                    />\n                  {dayObj.otherTimes.map((otherTime, j) => (\n                    <AvailabilityTimeRange\n                    key={j}\n                    length={dayObj.otherTimes.length}\n                    position={j}\n                    lastEndValue={\n                      j === 0\n                      ? dayObj.timeEndValue\n                      : dayObj.otherTimes[j - 1].timeEndValue\n                    }\n                    nextStartValue={dayObj.otherTimes[j+1] ? dayObj.otherTimes[j+1].timeStartValue : undefined }\n                    dayOfTheWeek={otherTime}\n                    showDayOfTheWeek={false}\n                    onChangeCustomization={onChangeCustomization}\n                    customization={customization}\n                    moreTimeHandler={moreTimeHandler}\n                    lessTimeHandler={lessTimeHandler}\n                    onSelectTime={onSelectTime}\n                    />\n                  ))}\n              </React.Fragment>\n              ))}\n          </>\n        ) : (\n          <>\n            {[allWeek].map((dataObj, i) => (\n             <React.Fragment key={i}>\n                <AvailabilityTimeRange\n                  key={i}\n                  dayOfTheWeek={dataObj}\n                  showDayOfTheWeek={false}\n                  nextStartValue={dataObj.otherTimes.length > 0 ? dataObj.otherTimes[0].timeStartValue : undefined }\n                  showCustomize={true}\n                  onChangeCustomization={onChangeCustomization}\n                  customization={customization}\n                  moreTimeHandler={moreTimeHandler}\n                  lessTimeHandler={lessTimeHandler}\n                  onSelectTime={onSelectTime}\n                />\n                {allWeek.otherTimes.map((otherTime, j) => (\n                  <AvailabilityTimeRange\n                    key={j}\n                    length={dataObj.otherTimes.length}\n                    position={j}\n                    lastEndValue={\n                      j === 0\n                        ? dataObj.timeEndValue\n                        : dataObj.otherTimes[j - 1].timeEndValue\n                    }\n                    nextStartValue={allWeek.otherTimes[j+1] ? allWeek.otherTimes[j+1].timeStartValue : undefined }\n                    dayOfTheWeek={otherTime}\n                    showDayOfTheWeek={false}\n                    showCustomize={false}\n                    onChangeCustomization={onChangeCustomization}\n                    customization={customization}\n                    moreTimeHandler={moreTimeHandler}\n                    lessTimeHandler={lessTimeHandler}\n                    onSelectTime={onSelectTime}\n                  />\n                ))}\n              </React.Fragment>\n            ))}\n          </>\n        )}\n      </div>\n\n      <FooterBtns\n        onPrev={onPrev}\n        onNext={submitHandler}\n        footerNote={\n          \"You will be able to further customize your availability later on\"\n        }\n        showSpinner={showSpinner}\n        availabilityPage={true}\n        saveForLater={saveForLater}\n      />\n    </div>\n  );\n};\n\nexport default DaysAvailable;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\DaysAvailable.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "DemoVideo.js",
                                                                    "fileData": "import React, {useEffect ,useState} from \"react\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport FooterBtns from \"components/FooterBtns\"\nimport ReactPlayer from 'react-player/lazy';\nimport { FaPlay } from \"react-icons/fa\";\nimport { openNotificationWithIcon } from \"../../../../utils\"\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport mixpanel from 'mixpanel-browser';\nimport { EmailOutlook } from \"../../../../constants\"\n\nconst DemoVideo = ({onPrev, onNext, setShowProgress, setProgressBarPercentage, register, user, setCurrentStep}) => {\n\n    const[playBtn,setPlayBtn] = useState(false);\n    const[playButton,setPlayButton] = useState(false);\n    const [showSpinner, setShowSpinner] = useState(false)\n\n    useEffect(()=>{\n        setShowProgress(true)\n        setProgressBarPercentage(70)\n    },[])\n\n    const handleOnNext = async () => {\n\n        // console.log(\"My console from demo video\", user.technician.expertise)\n        let temp =[]\n        for (let x in user.technician.expertise){\n            // console.log(\"My console from demo video\", user.technician.expertise[x].software_id)\n            if(user.technician.expertise[x].software_id !== EmailOutlook){\n                temp.push(user.technician.expertise[x].result)\n            }\n            // user.technician.expertise[x].find(item)\n        }\n        // console.log(\"My console from demo video\", temp, temp.includes(undefined))\n        if(temp.includes(undefined)){\n            // console.log(\"My console in else\")\n            setShowSpinner(true)\n            await TechnicianApi.updateTechnician(register.technician.id, {registrationStatus:\"exam\"})\n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician - watched video and proceeded to next form');\n            // mixpanel code//\n            onNext()\n        }else{   \n            // console.log(\"My console in if\")\n            setShowSpinner(true)\n            await TechnicianApi.updateTechnician(register.technician.id, {registrationStatus:\"finalize_profile\"})\n            setCurrentStep(7)\n        }\n    }\n\n    return<div className=\"d-flex justify-content-center align-items-center flex-column\">\n    <HeadingAndSubHeading heading={\"Please watch the video's below. \ud83d\udd11\"} subHeading={\"These video's shows you how the system works, it\u2019s very important.\"} />\n\n    <div className=\"d-flex justify-content-center align-items-center flex-wrap\">\n        <div className=\"d-flex mr-20 media-mr\">\n        <div className=\"demo-video mb-50 mt-20\">\n           <div className={!playBtn ? \"demoDivContainer\" : \"demoDivContainer2\"}>\n                <div className=\"react-demoDiv\">\n                { !playBtn &&\n                     <button onClick={()=>{setPlayBtn(true) }} className=\"play-button\">\n                      <FaPlay className=\"play-btn\" />\n                    </button>\n                } \n                </div>\n            </div>\n                <ReactPlayer  \n                     url='https://www.youtube.com/watch?v=vDn5vaDfIek' \n                     className=\"react-player\"\n                     playing={playBtn}\n                     controls\n                />\n                \n        </div>\n        </div>\n\n        <div className=\"\">\n        <div className=\"demo-video mb-50 mt-20\">\n           <div className={!playButton ? \"demoDivContainer\" : \"demoDivContainer2\"}>\n                <div className=\"react-demoDiv\">\n                { !playButton &&\n                     <button onClick={()=>{setPlayButton(true) }} className=\"play-button\">\n                      <FaPlay className=\"play-btn\" />\n                    </button>\n                } \n                </div>\n            </div>\n                <ReactPlayer  \n                     url='https://www.youtube.com/watch?v=r5QDWtxBtSo' \n                     className=\"react-player\"\n                     playing={playButton}\n                     controls\n                />\n                \n        </div>\n        </div>\n    </div>\n        <span className=\"video-span\">Do you want to know on how it looks on the user's end? <a href=\"https://www.youtube.com/watch?v=vDn5vaDfIek\" target=\"_blank\">Watch this</a></span>\n\n    <FooterBtns onPrev={onPrev} showSpinner={showSpinner} hideSaveForLater={true} onNext={playBtn && playButton ? handleOnNext : ()=>{ openNotificationWithIcon('error', 'Error', 'Please Play Video') ; } } />\n\n</div>\n}\n\nexport default DemoVideo",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\DemoVideo.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "Exam.js",
                                                                    "fileData": "import React, { useState, useEffect } from \"react\"\nimport FooterBtns from \"components/FooterBtns\"\nimport MCQ from \"components/MCQ\"\nimport PreInterviewScreen from \"components/PreInterviewScreen\"\nimport ExamLoader from \"./ExamLoader\"\nimport * as InterviewQuestionApi from '../../../../api/interview.api';\nimport * as SoftwareApi from '../../../../api/software.api';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { useUser } from '../../../../context/useContext';\nimport { useAuth } from '../../../../context/authContext';\nimport Loader from \"../../../../components/Loader\";\nimport {EmailOutlook} from \"../../../../constants\"\nimport ExamFail from \"./ExamFail\";\nimport { useGTMDispatch } from '@elgorditosalsero/react-gtm-hook'\n\nconst Exam = ({ register, onPrev, onNext, setShowProgress, setProgressBarPercentage}) => {\n    const [showPreInterview, setShowPreInterview] = useState(true);\n    const [previousTestSubmit, setPreviousTestSubmit] = useState(0);\n    const [showResultPage, setShowResultPage] = useState(false);\n    const [testComplete, setTestComplete] = useState(false);\n    const [result, setResult] = useState('loader');\n    const [question, setQuestion] = useState();\n    const [selectedSoftwares, setSelectedSoftwares] = useState();\n    const [test, setTest] = useState(0);\n    // const [isLoading, setIsLoading] = useState(true);\n    const [fail, setFail] = useState(false);\n    const { user } = useUser();\n    const { refetch } = useAuth();\n    const [showLoader, setShowLoader] = useState(true);\n    const sendDataToGTM = useGTMDispatch()\n\n    useEffect(() => {\n        setShowProgress(true)\n        setProgressBarPercentage(75)\n    }, [])\n    \n    useEffect(() => {\n        (async ()=>{\n            if(register.technician.registrationStatus === 'exam'){     \n                let technician = await TechnicianApi.retrieveTechnician(register.technician.id)\n                let testHistoryData  =  technician.testHistory.filter(item => item.software_id !== EmailOutlook);\n                let temp = []\n                for(let x in testHistoryData){\n                    temp.push(testHistoryData[x][\"result\"])\n                }\n                if(!temp.includes(undefined)){        \n                    let check = await checkAllSoftwaresTest(technician.expertise,technician.testHistory)       \n                    if(check){\n                        if(temp.includes(\"Pass\")){\n                            await TechnicianApi.updateTechnician(register.technician.id, {\n                                registrationStatus: \"finalize_profile\",\n                            })\n                            window.location.href='/dashboard'\n                        }else{\n                            await TechnicianApi.updateTechnician(register.technician.id, {\n                                registrationStatus: \"exam_fail\",\n                            });\n                            window.location.href='/dashboard'\n                        }\n                    }     \n                }\n            }\n            // if(register.technician.registrationStatus === 'finalize_profile' || register.technician.registrationStatus === 'exam_fail'){\n            if(register.technician.registrationStatus === 'finalize_profile'){\n                window.location.href='/dashboard'\n            }\n        })()\n    }, [register])\n\n    const checkAllSoftwaresTest = async (arr,target) =>{\n        let new_arr = arr.filter((item) => item.software_id !== EmailOutlook);  \n        let checkcond;\n        if(new_arr.length > 0){\n            let temp = [];\n            for(let j in target){\n                let match_id = target[j].software_id\n                temp.push(match_id)\n            }\n            for(let i in new_arr){\n                let check_id = new_arr[i].software_id\n                checkcond = temp.includes(check_id)\n            }         \n            return checkcond;\n        }else{\n            return true;\n        }\n      \n    }\n    useEffect(() => {\n        (async () => {\n            let technician = await TechnicianApi.retrieveTechnician(register.technician.id)\n            let softwares = technician.expertise.filter(item => item.software_id !== EmailOutlook);\n            let testHistoryData  =  technician.testHistory.filter(item => item.software_id !== EmailOutlook);\n            console.log(\"testHistoryData arr\", testHistoryData)\n            if(testHistoryData.length > 0){\n                let checkFail = testHistoryData.every(el => el.result === \"Fail\");\n                if (checkFail) {\n                    setFail(true)\n                }\n            }\n            if (softwares.some(el => el.result)) {\n                setShowPreInterview(false)\n            }\n            let resp = [];\n            let ques = [];\n            let soft = [];\n            for (let i = 0; i < softwares.length; i++) {\n                if (softwares[i].result === null || softwares[i].result === undefined) {\n                    const software = await SoftwareApi.retrievesoftware(softwares[i].software_id);\n                    soft.push(software)\n                    if (resp.includes(software.test)) {\n                        continue\n                    }\n                    else {\n                        resp.push(software.test)\n                    }\n                }\n            }\n            resp=resp.filter(item => item !== \"\")\n            for (let n = 0; n < resp.length; n++) {\n                const quest = await InterviewQuestionApi.getQuestionList(resp[n]);\n                ques.push(quest)\n            }\n            // if (ques.length > 0 === soft.length > 0) {\n            //     setTimeout(function () {\n            //         setIsLoading(false)\n            //     }, 2000)\n            // }\n            // console.log(\"Question Array//////////\", ques, soft)\n            setQuestion(ques)\n            setSelectedSoftwares(soft)\n            setShowLoader(false)\n            // console.log(\"showResultPage>>>>>>>>\", showResultPage)\n        })();\n    }, []);\n\n\n    // useEffect(() => {\n    //   setTimeout(function () {\n    //     setIsLoading(false)\n    //   }, 4000)\n    // }, [isLoading])\n\n    useEffect(() => {\n        if (question && question !== undefined) {\n            // console.log(\"Here is ques length\", question.length - 1, test)\n        }\n        if (showResultPage === true && question && question !== undefined && (question.length - 1) === test) {\n            setTestComplete(true);\n        }\n    }, [question, test, showResultPage])\n\n    useEffect(() => {\n        if (previousTestSubmit > test) {\n            setTest(test + 1);\n        }\n    }, [previousTestSubmit])\n\n    /**\n    * Function that handles the next button after completion of all tests & updates the registration status of the technician accordingly\n    * @author : Kartik\n    **/\n    const handleNext = async (value) => {\n        console.log(\"Interview Complete>>>>>>>>>\")\n        let technician = await TechnicianApi.retrieveTechnician(register.technician.id)\n        let softwares = technician.expertise.filter(item => item.software_id !== EmailOutlook);\n        let testHistoryData  =  technician.testHistory.filter(item => item.software_id !== EmailOutlook);\n        let checkFail = testHistoryData.every(el => el.result === \"Fail\");\n        console.log(\"checkFail:::>>>\",checkFail)\n        if (checkFail) {\n            setFail(true)\n            await TechnicianApi.updateTechnician(register.technician.id, {\n                registrationStatus: \"exam_fail\",\n            },);\n            await refetch()\n            window.location.reload(true)\n        }\n        else {\n\n            // Sending GA4 tag\n            sendDataToGTM({ \n                event: 'tech_passed_exam',\n                tech_id: register.technician.id, \n                environment: process.env.REACT_APP_URL.split(\"/\")[2] \n            })\n\n            await TechnicianApi.updateTechnician(register.technician.id, {\n                registrationStatus: \"finalize_profile\",\n            });\n            await refetch()\n            onNext()\n        }\n    }\n\n    if(showLoader) return (<Loader />) \n    return <div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <div className=\"w-100p\">\n            {\n                fail\n                    ? <>\n                        {setShowProgress(false)}\n                        <ExamFail />\n                    </>\n                    : showPreInterview\n                        ? <PreInterviewScreen onPrev={onPrev} setShowPreInterview={setShowPreInterview} user={user} setShowLoader={setShowLoader} />\n                        : <>\n                            {showResultPage === false && question && question !== undefined && selectedSoftwares !== undefined && question[test] && question[test].testId &&\n                                <MCQ question={question[test]} testId={question[test].testId} selectedSoftwares={selectedSoftwares} previousTestSubmit={previousTestSubmit} setShowResultPage={setShowResultPage} setResult={setResult} register={register} setShowProgress={setShowProgress} setProgressBarPercentage={setProgressBarPercentage} setShowLoader={setShowLoader} />\n                            }\n                            {showResultPage === true &&\n                                <ExamLoader setShowProgress={setShowProgress} previousTestSubmit={previousTestSubmit} setPreviousTestSubmit={setPreviousTestSubmit} setShowResultPage={setShowResultPage} result={result} setResult={setResult} testComplete={testComplete} register={register}/>\n                            }\n                            {\n                                testComplete && result !== \"loader\"\n                                    ? <FooterBtns hidePrevBtn=\"yes\" hideSaveForLater={true} onNext={handleNext} />\n                                    : <></>\n                            }\n                        </>\n            }\n        </div>\n    </div>\n}\n\nexport default Exam\n\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\Exam.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ExamFail.js",
                                                                    "fileData": "import React, { useCallback,useEffect, useState } from \"react\"\nimport { Modal } from 'antd';\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport {useAuth} from '../../../../context/authContext'\nimport * as SoftwareApi from '../../../../api/software.api';\n\nconst ExamFail = () => {\n    const {logout} =  useAuth()\n    const [additionalSoftwareList,setAdditionalSoftwareList]= useState([]);\n\n    /**\n    * Return All active additional softwarelist\n    * @author : Mritunjay Chaurasia\n    **/\n    useEffect(()=>{\n        (async () => {\n            const additionalSoftwareListResponse = await SoftwareApi.getOtherSoftwareList();\n            console.log('Addtional Software List : ',additionalSoftwareListResponse)\n            if (additionalSoftwareListResponse && additionalSoftwareListResponse?.data) {\n                setAdditionalSoftwareList(additionalSoftwareListResponse?.data.filter((software) => software.status === 'Active'))   \n            }\n          })();\n    },[])\n\n    /**\n    * Function that handles the logout button to logout the user\n    * @author : Kartik\n    **/\n     const Logout = useCallback(() => {\n        Modal.confirm({\n            title: 'Logout Now?',\n            okText: 'Logout',\n            cancelText: 'Cancel',\n            className: \"logout-modal\",\n            onOk() {\n                logout();\n            },\n        });\n    }, [logout]);\n\n    return(\n        <>\n            <div className=\"w-100p\">\n                <div className=\"exam-fail-logout-btn-div w-100p d-flex justify-content-end\">\n                    <a href=\"#\" onClick={Logout} className=\"logout-btn\">\n                        Logout\n                    </a>\n                </div>\n                <div className=\"exam-fail-animation-div w-100p\">\n                    <Player\n                        autoplay\n                        keepLastFrame={true}\n                        src=\"https://assets9.lottiefiles.com/packages/lf20_ckcn4hvm.json\"\n                        className=\"exam-fail-animation\"\n                    >\n                    </Player>\n                </div>\n                <div className=\"exam-fail-message-div w-100p\">\n                    <h1 className=\"mt-0 mb-2 \">Thanks for taking the time to join Geeker!!</h1>\n                    <h5>Unfortunately, you can't proceed further as you didn't cleared our first round of interview.</h5>\n                </div>\n                <div className=\"exam-fail-message-div w-100p mt-5\">\n                    <div>\n                        <h5 className=\"mb-3\">You can try to qualify for a different area.</h5>\n                        <div className='additionalSoftwaresList'>\n                            {additionalSoftwareList && additionalSoftwareList.length > 0 && additionalSoftwareList.map((additionalSoftwareList, i) => {\n                                return (\n                                    <img\n                                        className=\"additionalSoftwareImage\"\n                                        alt={additionalSoftwareList.name}\n                                        src={additionalSoftwareList.blob_image}\n                                        title={additionalSoftwareList?.name}\n                                    />\n                                )\n                            })}\n                        </div>\n                    </div>\n                    <h5 className=\"mt-5\">For additional details, please contact{\" \"} \n                        <a href=\"mailto:info@Geeker.co\">\n                            <span className=\"geekerMailInfo\">info@Geeker.co</span>\n                        </a>. All the best!</h5>\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nexport default ExamFail\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\ExamFail.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ExamLoader.js",
                                                                    "fileData": "import React, { useEffect } from \"react\"\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport loader from \"../../../../assets/animations/Checking Exam.json\"\nimport pass from \"../../../../assets/animations/Pass.json\"\nimport fail from \"../../../../assets/animations/Fail.json\"\nimport FooterBtns from \"../../../../components/FooterBtns\"\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport {EmailOutlook} from \"../../../../constants\"\n\nconst ExamLoader = ({ setShowProgress, previousTestSubmit, setPreviousTestSubmit, setShowResultPage, result, setResult, testComplete, register }) => {\n\n    useEffect(() => {\n        setShowProgress(false)\n    }, [])\n\n    /**\n    * Function that handles the next button to proceed to the next test and hide the result page\n    * @author : Kartik\n    **/\n   console.log('result exam',result);\n    const handleNext = (e) => {\n        setPreviousTestSubmit(previousTestSubmit + 1);\n        setShowResultPage(false)\n        setResult('loader')\n        // setIsLoading(true)\n    }\n\n    const loaderHeading = `Hang on we are checking your Exam`\n    const passHeading = \"Congrats! You passed\"\n    const failHeading = \"You failed. Thank you for trying\"\n\n    return <div className=\"text-center\">\n        <span className=\"tech-on-boarding-heading\">\n            {result === \"loader\" ? loaderHeading\n                : result === \"pass\" ? passHeading\n                    : result === \"fail\" ? failHeading\n                        : \"\"\n            }\n        </span>\n        <Player\n            autoplay\n            keepLastFrame={true}\n            src={result === \"loader\" ? loader\n                : result === \"pass\" ? pass\n                    : result === \"fail\" ? fail\n                        : \"\"\n            }\n            style={result === \"fail\" ? { height: '60%', width: '60%' } : { height: '80%', width: '80%' }}\n        >\n        </Player>\n        {\n            result === \"loader\" || testComplete\n                ? <></>\n                : <FooterBtns onNext={handleNext} hideSaveForLater={true} hidePrevBtn=\"yes\" />\n        }\n    </div>\n}\n\nexport default ExamLoader",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\ExamLoader.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "FinaliseYourProfile.js",
                                                                    "fileData": "import React, {useState,useEffect} from \"react\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport FooterBtns from \"components/FooterBtns\"\nimport CheckInCircle from \"components/CheckInCircle\"\nimport EditIcon from \"components/EditIcon\"\nimport { FaUserCircle } from \"react-icons/fa\"\nimport * as SoftwareApi from '../../../../api/software.api';\nimport { Upload, message , Space, notification,} from 'antd';\nimport { EmailOutlook, SERVER_URL } from '../../../../constants';\nimport * as TechnicianService from '../../../../api/technician.api';\nimport { FaCloudUploadAlt } from \"react-icons/fa\";\nimport * as Techapi from '../../../../api/technician.api';\nimport mixpanel from 'mixpanel-browser';\nimport { WindowsFilled } from \"@ant-design/icons\"\nimport { Button } from 'antd';\nimport {\n  CitySelect,\n  CountrySelect,\n  StateSelect,\n  LanguageSelect,\n  GetCountries,\n  GetState,\n  GetCity,\n  GetLanguages,\n} from \"react-country-state-city\";\nimport \"react-country-state-city/dist/react-country-state-city.css\";\n\nlet r = (Math.random() + 1).toString(36).substring(7);\nconst FinaliseYourProfile = ({onPrev, onNext, setShowProgress, setProgressBarPercentage, expertiseArrselected, setCurrentStep, user, refetch,checkScheduleInterview,\n  setCheckScheduleInterview\n}) => {\n    const [fileList, setFileList] = useState([]);\n    const [fileListImage, setFileListImage] = useState([]);\n    const [selectedsoftwareList, setSelectedSoftwareList] = useState([]);\n    const [showSpinner, setShowSpinner] = useState(false)\n    const [geekImage,setGeekImage] = useState();\n    const [disable,setDisable] = useState(false);\n    const [imageUploaded,setImageUploaded] = useState(false);\n    const [showRedBorderforAddressLine1,setShowRedBorderforAddressLine1] = useState(false);\n    const [showRedBorderforZip,setShowRedBorderforZip] = useState(false);\n    const [addressLine1, setAddressLine1] = useState(user.technician.profile.confirmId.address1 ? user.technician.profile.confirmId.address1 : \"\")\n    const [addressLine2, setAddressLine2] = useState(user.technician.profile.confirmId.address2 ? user.technician.profile.confirmId.address2 : \"\")\n    const [zipcode, setZipcode] = useState( user.technician.profile.confirmId.zip ? user.technician.profile.confirmId.zip : \"\")\n    const [city, setCity] = useState(user.technician.profile.confirmId.city ? user.technician.profile.confirmId.city : \"\")\n    const [cityObject, setCityObject] = useState(user.technician.profile.confirmId.cityObject ? user.technician.profile.confirmId.cityObject : {})\n    const [state, setState] = useState(user.technician.profile.confirmId.state ? user.technician.profile.confirmId.state : \"\")\n    const [stateObject, setStateObject] = useState(user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject : {})\n    const [country, setCountry] = useState(user.technician.profile.confirmId.country ? user.technician.profile.confirmId.country : \"\")\n    const [countryObject, setCountryObject] = useState(user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject : {})\n    const [countryid, setCountryid] = useState(user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject.id : 0);\n    const [stateid, setstateid] = useState(user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject.id : 0);\n    let finalSoftwares = []\n    let selectedSoftware = []\n\n    useEffect(()=>{\n      console.log(\"My conosle for address\", {addressLine1, addressLine2, city, zipcode, state, country, user : user.technician.profile.confirmId})\n    },[addressLine1, addressLine2, city, zipcode, state, country])\n\n    useEffect(()=>{\n      if(user){\n        console.log(\"My conosle for user\", {user})\n        setAddressLine1(user.technician.profile.confirmId.address1 ? user.technician.profile.confirmId.address1 : \"\")\n        setAddressLine2(user.technician.profile.confirmId.address2 ? user.technician.profile.confirmId.address2 : \"\")\n        setZipcode(user.technician.profile.confirmId.zip ? user.technician.profile.confirmId.zip : \"\")\n        setCountry(user.technician.profile.confirmId.country ? user.technician.profile.confirmId.country : \"\")\n        setState(user.technician.profile.confirmId.state ? user.technician.profile.confirmId.state : \"\")\n        setCity(user.technician.profile.confirmId.city ? user.technician.profile.confirmId.city : \"\")\n      }\n    },[user])\n\n    useEffect(()=>{\n      GetState(countryid).then((allStates)=>{\n        if(allStates.length === 0){\n          setState(\"NA\")\n          setCity(\"NA\")\n        }else{\n          setState(\"\")\n          setCity(\"\")\n        }\n      })\n    },[countryid])\n    \n    useEffect(()=>{\n      (async ()=>{\n        console.log('inside finalize>>>',checkScheduleInterview)\n        const techDataRes = await Techapi.retrieveTechnician(user.technician.id)\n        finalSoftwares = techDataRes.expertise.filter(item => item.software_id !== EmailOutlook)\n        console.log('Before filter finalSoftwares>>>',finalSoftwares)\n        // finalSoftwares = techDataRes.expertise.filter(item => item.result === \"Pass\")\n        // finalSoftwares = techDataRes.testHistory.filter(item => item.software_id !== EmailOutlook)\n        // let finalSoftwaresIds = techDataRes.testHistory.filter(item => item.result === \"Pass\")\n        let passedSoftwares = techDataRes.testHistory.filter(function (item) {\n\n          return item.result === \"Pass\";\n  \n      }).map(function (item) {\n  \n          return item.software_id;\n  \n      })\n      console.log('filter passedSoftwares>>>',passedSoftwares)\n        finalSoftwares = techDataRes.expertise.filter(item => passedSoftwares.includes(item.software_id))\n        console.log('filter finalSoftwares>>>',finalSoftwares)\n\n        const softwareListResponse = await SoftwareApi.getSoftwareList()\n            if(softwareListResponse && softwareListResponse.data){\n              for (var x in finalSoftwares){\n                  for (var y in softwareListResponse.data){\n                      let temp = {}\n                      if(softwareListResponse.data[y].id === finalSoftwares[x].software_id){\n                          temp = softwareListResponse.data[y]\n                          selectedSoftware.push(temp)\n                      }\n                  }\n              }\n              setSelectedSoftwareList(selectedSoftware)\n        }\n      //  await Techapi.updateTechnicianWithParams(user.technician.id, {expertise:finalSoftwares})\n\n      })()\n      //   (async () => { \n      //     const softwareListResponse = await SoftwareApi.getSoftwareList()\n      //     if(softwareListResponse && softwareListResponse.data){\n      //         for (var x in finalSoftwares){\n      //             for (var y in softwareListResponse.data){\n      //                 let temp = {}\n      //                 if(softwareListResponse.data[y].id === finalSoftwares[x].software_id){\n      //                     temp = softwareListResponse.data[y]\n      //                     selectedSoftware.push(temp)\n      //                 }\n      //             }\n      //         }\n      //         console.log(\"My console to see\", selectedSoftware, expertiseArrselected)\n      //         setSelectedSoftwareList(selectedSoftware)\n      //     }\n      // })();\n        setShowProgress(true)\n        setProgressBarPercentage(95)\n        refetch()\n    },[])\n\n    useEffect(()=>{\n\n      console.log(\"My console for user days available\", user.technician.profile)\n      setGeekImage(user && user.technician.profile.image.length > 0 ? user.technician.profile.image : \"\" )\n      if (user && user?.technician?.profile && user?.technician?.profile?.image && user?.technician?.profile?.image?.length > 0) {\n        setImageUploaded(true);\n      } else {\n        setImageUploaded(false);\n      }\n    },[user])\n\n    const deleteImage = async () => {\n      let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{\n                                                                                      \"profile.image\":\"\",\n                                                                                      registrationStatus: 'finalize_profile'\n                                                                                    })\n      openNotificationWithIcon('success','Success','Image deleted succesfully',)\n      setFileListImage([])\n      setGeekImage(\"\")\n      refetch()\n    }\n\n    const deleteResume = async () => {\n      let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{\"resume\":\"\"})\n      openNotificationWithIcon('success','Success','Resume deleted succesfully',)\n      refetch()\n    }\n\n    const handleNext = async()=>{\n      if(imageUploaded){\n\n        if(addressLine1 === \"\"){\n          openNotificationWithIcon('error','Error','Please provide your address to proceed further.')\n          return\n        }\n        \n        if(country === \"\"){\n          openNotificationWithIcon('error','Error','Please enter your country to proceed further.')\n          return\n        }\n\n        if(state === \"\"){\n          openNotificationWithIcon('error','Error','Please enter your state to proceed further.')\n          return\n        }\n\n        if(city === \"\"){\n          openNotificationWithIcon('error','Error','Please enter your city to proceed further.')\n          return\n        }\n        \n        if(zipcode === \"\"){\n          openNotificationWithIcon('error','Error','Please enter your zipcode to proceed further.')\n          return\n        }\n\n        setShowSpinner(true)\n        await Techapi.updateTechnicianWithParams(user.technician.id, \n                                                { registrationStatus: 'schedule_interview', \n                                                  profile:{confirmId : {\n                                                                          address1 : addressLine1,\n                                                                          address2 : addressLine2,\n                                                                          city : city,\n                                                                          cityObject : cityObject,\n                                                                          zip : zipcode,\n                                                                          state : state,\n                                                                          stateObject : stateObject,\n                                                                          country : country,\n                                                                          countryObject : countryObject\n                                                                        } \n                                                  }\n                                                })\n        if (checkScheduleInterview) {\n          await Techapi.updateTechnicianWithParams(user.technician.id, \n                                                  { registrationStatus: 'interview_result',\n                                                    profile:{confirmId : {\n                                                                          address1 : addressLine1,\n                                                                          address2 : addressLine2,\n                                                                          city : city,\n                                                                          zip : zipcode,\n                                                                          state : state,\n                                                                          country : country\n                                                                          }\n                                                    }\n                                                  })\n          window.location.href = '/'\n        }\n        onNext()\n      }else{\n        openNotificationWithIcon('error','Error','Please upload a profile image to proceed further.')\n      }\n    }\n\n      const openNotificationWithIcon = (nType, header, nMessage) => {\n        notification[nType]({\n          message: header,\n          description: nMessage,\n          });\n      };\n  \n      const fileTypes = '.png, .jpg, .jpeg, .pdf, .doc';  \n      const { Dragger } = Upload;\n      const  fileTypesImage = '.png, .jpg, .jpeg';\n     \n      let  fileNameImage = `${user.id}_userProfile-${r}`;\n\n      const propsForImage = {\n        name: 'file',\n        accept:fileTypesImage,\n        multiple: false,\n        fileList: fileListImage,\n        action: `${SERVER_URL}/api/uploads`,\n        data:{\"user\":`${fileNameImage}` },\n        maxCount :1,\n        beforeUpload: file => {\n          console.log(\"file :::::\",file)\n          if(fileListImage.length > 0){\n            openNotificationWithIcon('error', 'Warning', 'Only one file is allowed. Please delete remove the previous one first');\n            return false;\n          }\n          if (\n            !(\n                file.type === 'image/jpeg'\n                || file.type === 'image/png'\n                || file.type === 'image/jpg'\n            )\n          ) {\n            openNotificationWithIcon('error', 'Warning', 'File Type Not Supported');\n            return false\n          }\n          if (file.size / 1048576 > 10) {\n            openNotificationWithIcon('error', 'Warning', 'File should be smaller than 5mb');\n            return false;\n          }\n        },\n        async onChange(info) {\n          const { status } = info.file;\n          if (status !== 'uploading') {\n            console.log(info.file, info.fileList);\n          }\n          if (status === 'uploading') {\n            setFileListImage([info.file]);\n          }\n          if (status === 'done') {     \n            setImageUploaded(true)\n              message.success(`${info.file.name} file uploaded successfully.`);\n              let finalImage = `${fileNameImage}-.${info.file.type.split('/').pop()}`;\n              let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{\"profile.image\":`${SERVER_URL}/images/${finalImage}`})\n                setFileListImage([info.file]);\n                setGeekImage(`${SERVER_URL}/images/${finalImage}`);\n                if(user){\n                // mixpanel code//\n                mixpanel.identify(user.email);\n                mixpanel.track('Technician - uploaded profile image');\n                // mixpanel code//\n                }\n          } else if (status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n          }\n        },\n        async onRemove (){\n          setGeekImage(\"\")\n          setImageUploaded(false)\n          let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{\"profile.image\":\"\"})\n          refetch()\n          setFileListImage([])\n          r = (Math.random() + 1).toString(36).substring(7);\n             \n        }\n      };\n\n      let fileName = `${user.id}_resume`\n      const props = {\n        name: 'file',\n        accept:fileTypes,\n        multiple: false,\n        fileList,\n        action: `${SERVER_URL}/api/uploads`,\n        data:{\"user\":`${fileName}` },\n        maxCount :0,\n        beforeUpload: file => {\n          console.log(\"file :::::\",fileList)\n          if(fileList.length > 0){\n            openNotificationWithIcon('error', 'Warning', 'Only one file is allowed. Please delete remove the previous one first');\n            return false;\n          }\n          if (\n            !(\n              file.type === 'image/jpeg'\n              || file.type === 'application/pdf'\n              || file.type === 'image/png'\n              || file.type === 'image/jpg'\n              || file.type === 'application/msword'\n            )\n          ) {\n            openNotificationWithIcon('error', 'Warning', 'File Type Not Supported');\n            return false\n          }\n          if (file.size / 1048576 > 10) {\n            openNotificationWithIcon('error', 'Warning', 'File should be smaller than 10mb');\n            return false;\n          }\n        },\n        async onChange(info) {\n          const { status } = info.file;\n          if (status !== 'uploading') {\n            console.log(info.file, info.fileList);\n          }\n          if (status === 'uploading') {\n            setFileList([info.file]);\n          }\n          if (status === 'done') {\n            // if(user){\n            //   mixpanel.identify(user.email);\n            //   mixpanel.track('Technician- Resume Uploaded',{ 'Email': user.email });\n            // }\n            \n              message.success(`${info.file.name} file uploaded successfully.`);\n              let techUpdateForpdf = await Techapi.updateTechnicianWithParams( user.technician.id ,{resume:`${fileName}-.${info.file.name.split('.').pop()}`})\n              setFileList([info.file]);\n              // mixpanel code//\n              if(user){\n              mixpanel.identify(user.email);\n              mixpanel.track('Technician - uploaded resume');\n              }\n              // mixpanel code//\n          } else if (status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n          }\n        },\n        async onRemove (){\n          let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{\"resume\":\"\"})\n          setFileList([])\n        }\n      };\n\n    // let selectedSoftware = []\n\n    const handleSkills = () =>{\n      setCurrentStep(2)\n    }\n\n    const handleInfo = () =>{\n       setCurrentStep(1)\n    }\n\n    const handlePreviousBtn= ()=>{\n      setCurrentStep(5)\n      // onPrev()\n    }\n\n    const handleAddressLine1OnBlur = () => {\n      if(addressLine1 === \"\"){\n        setShowRedBorderforAddressLine1(true)\n      }else{\n        setShowRedBorderforAddressLine1(false)\n      }\n    }\n\n    const handleZipOnBlur = () => {\n      if(zipcode === \"\"){\n        setShowRedBorderforZip(true)\n      }else{\n        setShowRedBorderforZip(false)\n      }\n    }\n\n    return<div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <HeadingAndSubHeading heading={\"Finalize your profile\"} subHeading={\"Please finish completing your profile. This is optional, but wouldn\u2019t it be cool to have your own picture or avatar now?\"} />\n        \n        <div className=\"w-90p\">\n            <div className=\"finalise-upload-div d-flex justify-content-center\" >\n                <div className=\"upload-div d-flex justify-content-center align-items-start flex-column\"  >\n                    <div className=\"d-flex justify-content-start align-items-center check-in-circle-div\">\n                        <CheckInCircle bgColor={\"grey\"}/>\n                        <span className=\"finalise-upload-text\">Upload Profile Image</span>\n                    </div>\n                    <div className={`${user.technician.profile.image ? \"disable-image\" : \"\"}`}>\n                      <Dragger {...propsForImage} >\n                      <div className=\"uploadProfileImage\">  \n                        { geekImage ? \n                          <img src={geekImage}  className=\"geekImage\"></img>\n                          :\n                          <FaUserCircle className=\"uploadProfileImage\" />\n                        }\n                      </div>\n                      </Dragger>\n                    </div>\n                    <div className=\"delete-Image-Button\">\n                    { \n                      user.technician.profile.image && \n                        <Space wrap>\n                          <Button \n                          type=\"text\" \n                          onClick={deleteImage} \n                          size = \"small\"\n                          >\n                            Delete image\n                          </Button>\n                        </Space>\n                    }\n                    </div>\n                </div>\n                <div className=\" upload-div d-flex justify-content-center align-items-center flex-column\">\n                    <div className=\"d-flex justify-content-start align-items-start w-100p check-in-circle-div\">\n                        <CheckInCircle bgColor={\"grey\"}/>\n                        <span className=\"finalise-upload-text\">Upload Resume</span>\n                    </div>\n                    <div  className={`${user.technician.resume ? \"disable-image\" : \"\"}`}>\n                    <Dragger {...props} >\n                    {\n                      fileList.length > 0 && fileList[0].name || user.technician.resume ? \n                      (<div className=\"uploadResume d-flex justify-content-center align-items-center flex-column  \"> \n                        <span>Resume uploaded successfully</span>\n                      </div>) \n                    :\n                    <div className=\"uploadResume d-flex justify-content-center align-items-center flex-column  \">  \n                      <div className=\"cloud-upload\">\n                          <FaCloudUploadAlt className=\"cloud-icon\" />\n                      </div>\n                      {/* <div className=\"drag-drop\"> */}\n                          <span className=\" drag-drop drag-drop-text\">\n                            Drag & Drop or \t&nbsp;\n                            <span className=\"drag-drop-upload\">Upload</span>\n                            </span> \n                      {/* </div> */}\n                    </div>\n                    }\n                    </Dragger>\n                    </div>\n                    <div className=\"delete-resume-Button\">\n                    { \n                      user.technician.resume && \n                        <Space wrap>\n                          <Button \n                          type=\"text\" \n                          onClick={deleteResume} \n                          size = \"small\"\n                          >\n                            Delete resume\n                          </Button>\n                        </Space>\n                    }\n                    </div>\n                </div>\n            </div>\n            <div className=\"finalise-summary-div d-flex justify-content-around align-items-start  w-100p\">\n                <div className=\"d-flex justify-content-start align-items-start flex-column\" style={{width:\"260px\"}}>\n                    <div className=\"d-flex justify-content-start align-items-center\">\n                        <CheckInCircle bgColor={\"turcose\"}/>\n                        <span className=\"finalise-upload-text\">Profile Details</span>\n                    </div>\n                    <div className=\"finalise-profile-details\">\n                        <p className=\"finalise-profile-p\">{user.firstName+\" \"+user.lastName}</p>\n                        <p className=\"finalise-profile-p\">{user.email}</p>\n                        <p className=\"finalise-profile-p\">{user.technician.profile.confirmId.phoneNumber}</p>\n                    </div>\n                    {/* <div className=\"w-100p edit-icon-div\">\n                        <div className=\"edit-icon-inner-div\">\n                          <button \n                          style={{border:\"none\"}}\n                          onClick={handleInfo}\n                          >\n\n                            <EditIcon />\n                          </button>\n                        </div>\n                    </div> */}\n                </div>\n                <div className=\"d-flex justify-content-center align-items-center flex-column\" style={{width:\"260px\"}}>\n                    <div className=\"d-flex justify-content-start align-items-center w-100p\">\n                        <CheckInCircle bgColor={\"turcose\"}/>\n                        <span className=\"finalise-upload-text mb-10\">Skills</span>\n                    </div>\n                    {selectedsoftwareList.map((software, index)=>{\n                        return (<div key={index} className=\"finalise-profile-skills\">\n                          <img src={software.blob_image} className=\"sw-img\" />\n                          <span className=\"finalise-profile-skills-span\">{software.name}</span>\n                        </div>)\n                    })}\n                    {/* <div className=\"w-100p edit-icon-div\">\n                        <div className=\"edit-icon-inner-div\">\n                        <button\n                         style={{border:\"none\"}}\n                         onClick={handleSkills}\n                         >\n                            <EditIcon />\n                          </button>\n                        </div>\n                    </div> */}\n                </div>\n            </div>\n            <div className=\"finalise-summary-div d-flex justify-content-around align-items-start w-100p\">\n                <div className=\"d-flex justify-content-start align-items-start flex-column w-100p\">\n                    <div className=\"d-flex justify-content-center align-items-center w-100p address-heading-div\">\n                        <span className=\"finalise-upload-text\">Address Details</span>\n                    </div>\n                    <div className=\"d-flex justify-content-around align-items-start w-100p flex-wrap\">\n                      <div className=\"d-flex flex-column mt-3\">\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-768-justify-content-center\">\n                          <label htmlFor=\"addressLine1\" className=\"address-label\">Address Line 1 *</label>&nbsp;\n                          <input \n                            type=\"text\" \n                            className={\"address-input \" + (showRedBorderforAddressLine1 ? \" red-border\" : \"\")} \n                            id=\"addressLine1\" \n                            onChange={(e)=>setAddressLine1(e.target.value.trim())} \n                            onBlur={handleAddressLine1OnBlur} \n                            defaultValue={user.technician.profile.confirmId.address1}\n                          />\n                        </div>\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-768-justify-content-center\">\n                          <label htmlFor=\"addressLine2\" className=\"address-label\">Address Line 2</label>&nbsp;\n                          <input \n                            type=\"text\" \n                            className=\"address-input\" \n                            id=\"addressLine2\" \n                            onChange={(e)=>setAddressLine2(e.target.value.trim())} \n                            defaultValue={user.technician.profile.confirmId.address2}\n                          />\n                        </div>\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-768-justify-content-center\">\n                          <label htmlFor=\"zipcode\" className=\"address-label\">Zip Code *</label>&nbsp;\n                          <input \n                            type=\"text\" \n                            className={\"address-input \" + (showRedBorderforZip ? \" red-border\" : \"\")} \n                            id=\"zipcode\" \n                            onChange={(e)=>setZipcode(e.target.value.trim())} \n                            onBlur={handleZipOnBlur} \n                            defaultValue={user.technician.profile.confirmId.zip ? user.technician.profile.confirmId.zip : \"\" }\n                          />\n                        </div>\n                      </div>\n                      <div className=\"d-flex flex-column mt-3\">\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-280-justify-content-center\">\n                          <label htmlFor=\"country\" className=\"address-label\">Country *</label>&nbsp;\n                          <CountrySelect\n                              containerClassName=\"country-select\"\n                              inputClassName=\"country-select-input\"\n                              onChange={(e) => {\n                                setCountryid(e.id);\n                                setCountry(e.name)\n                                setCountryObject(e)\n                                console.log(\"Country selected\", e)\n                              }}\n                              placeHolder=\"Select Country\"\n                              defaultValue={user.technician.profile.confirmId.countryObject ? user.technician.profile.confirmId.countryObject : \"\"}\n                            />\n                        </div>\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-280-justify-content-center\">\n                          <label htmlFor=\"state\" className=\"address-label\">State *</label>&nbsp;\n                          <StateSelect\n                            containerClassName=\"country-select\"\n                            inputClassName=\"country-select-input\"\n                            countryid={countryid}\n                            onChange={(e) => {\n                              setstateid(e.id);\n                              setState(e.name)\n                              setStateObject(e)\n                              console.log(\"State selected\", e)\n                            }}\n                            placeHolder=\"Select State\"\n                            defaultValue={user.technician.profile.confirmId.stateObject ? user.technician.profile.confirmId.stateObject : \"\"}\n                          />\n                        </div>\n                        <div className=\"d-flex justify-content-end align-items-center mb-2 flex-wrap max-width-280-justify-content-center\">\n                          <label htmlFor=\"city\" className=\"address-label\">City *</label>&nbsp;\n                          <CitySelect\n                            containerClassName=\"country-select\"\n                            inputClassName=\"country-select-input\"\n                            countryid={countryid}\n                            stateid={stateid}\n                            onChange={(e) => {\n                              setCity(e.name)\n                              setCityObject(e)\n                              console.log(\"City selected\", e)\n                            }}\n                            placeHolder=\"Select City\"\n                            defaultValue={user.technician.profile.confirmId.cityObject ? user.technician.profile.confirmId.cityObject : \"\"}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <FooterBtns disable={true} onPrev={handlePreviousBtn} onNext={handleNext} hideSaveForLater={true} showSpinner={showSpinner} />\n    </div>\n}\n\nexport default FinaliseYourProfile",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\FinaliseYourProfile.js"
                                                                },
                                                                {
                                                                    "type": "folder",
                                                                    "name": "instructionimages",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "instructions.js",
                                                                    "fileData": "import React from \"react\";\nimport { useState, useRef } from \"react\";\n// import {Button,Col} from 'react-bootstrap';\n//@ author Utkarsh Dixit\nconst Instructions = ({ setScrollBottom, setModal1Visible, user, currentStep,setIsChecked,isChecked}) => {\n\t// const listInnerRef = useRef();\n\n\t// const [boxChanged, setBoxChanged] = useState(false);\n\t\n\tconst handleScroll = () => {\n\t\t// setScrollBottom(true);\n\t\t// setModal1Visible(false);\n\t\tsetIsChecked(!isChecked);\n\n\t};\n     \n\treturn (\n\t\t<div\n\t\t\tstyle={{ overflowY: \"auto\" , height:currentStep ==111 ?'600px':\"500px\", textAlign:\"left\",paddingRight:\"10px\"} } className={currentStep ==111 && 'pl-2'}\n\t\t>\n\t\t\t<header>\n\t\t\t\t<p style={{ fontSize: currentStep ==111 && '25px'}} className={currentStep == 111 && 'text-center mt-2'}>\n\t\t\t\t\t<b>Welcome to the Geeker team! </b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tHere at Geeker, we help clients quickly solve their software and IT\n\t\t\t\t\tproblems. We\u2019re excited to have you on board. As a Geek, you\u2019ll earn\n\t\t\t\t\tcompetitive pay while helping people navigate all sorts of IT problems\n\t\t\t\t\tand popular systems such as Microsoft Office, Google Suite, Quickbooks\n\t\t\t\t\tOnline, and more.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tCreate your own schedule and work when you want. Whether you\u2019re\n\t\t\t\t\tlooking to earn a little extra income on the side or using the\n\t\t\t\t\tplatform as your primary source of income, you\u2019ll get paid for all of\n\t\t\t\t\tthe cases you resolve.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tBefore we begin, make sure to head on over to our YouTube Channel and\n\t\t\t\t\tsubscribe to access our videos with useful tips & tricks.{\" \"}\n\t\t\t\t</p>\n\t\t\t</header>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<div style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n\t\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>Common Questions/Issues</p>\n\t\t\t\t</div>\n\t\t\t\t<ul style={{listStylePosition:currentStep ==111 && 'inside'}}>\n\t\t\t\t\t<li>Transfers</li>\n\t\t\t\t\t<li>Time Limit</li>\n\t\t\t\t\t<li>Screen Share</li>\n\t\t\t\t\t<li>Remote Access/Control of Customer\u2019s Computer</li>\n\t\t\t\t\t<li>Summarize the issue on the dashboard</li>\n\t\t\t\t\t<li>Converting to Long Call</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<div style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n\t\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>Steps for each call</p>\n\t\t\t\t</div>\n\t\t\t\t<ul style={{listStylePosition:currentStep ==111 && 'inside'}}>\n\t\t\t\t\t<li>Login to the system</li>\n\t\t\t\t\t<li> Accept Job</li>\n\t\t\t\t\t<li>Wait for the Customer to Connect</li>\n\t\t\t\t\t<li>Introduce yourself</li>\n\t\t\t\t\t<li>Summarize the issue on the dashboard</li>\n\t\t\t\t\t<li>Resolve the issue</li>\n\t\t\t\t\t<li>Ending the Call</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 1: Login to the system</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tHead over to the Geeker login system (https://app.geeker.co/login)\n\t\t\t\t\t\tand make yourself active on the dashboard so that you can begin to\n\t\t\t\t\t\treceive jobs.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (1).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction1\"/>\n\t\t\t\t\t\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 2: Accept Job</b>{\" \"}\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tWhen a client logs on with an issue, our system will work to connect\n\t\t\t\t\t\tthem with a Geek experienced in that area. If that\u2019s you, you will\n\t\t\t\t\t\treceive an email and a notification on your Geeker dashboard. This\n\t\t\t\t\t\twill give you a description of the issue the customer needs\n\t\t\t\t\t\tassistance with.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tClick Accept Job so that you can be connected. The system will wait\n\t\t\t\t\t\tfor the customer to start the call, so hang tight :-){\" \"}\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed.png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction2\" />\n\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 3: Wait for the Customer to Connect</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tGive the customer 1-2 minutes to connect to the call. If they do not\n\t\t\t\t\t\tconnect, click the Start Call button and it will call the customer\u2019s\n\t\t\t\t\t\tcell phone.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (2).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction3\"/>\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tInstruct the Customer to click JOIN on their screen in order to join\n\t\t\t\t\t\tthe meeting.{\" \"}\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (3).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction4\" />\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThey can choose to stay on the phone with you OR switch to Computer\n\t\t\t\t\t\tAudio. If they want to switch, they will just click the Computer\n\t\t\t\t\t\tAudio button on their screen.\n\t\t\t\t\t</li>\n\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (4).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction5\" />\n\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 4: Introduce yourself</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Once connected, introduce yourself and confirm the issue.</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<b>Example :</b>{\" \"}\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tHi (Customer Name), Thanks for connecting with Geeker, my name is\n\t\t\t\t\t\t\t(Name) and before we begin, I just want to confirm that you need\n\t\t\t\t\t\t\thelp with (explain the issue they listed). Is that correct?. Ok,\n\t\t\t\t\t\t\tlet\u2019s get started.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li></li>\n\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (5).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction6\" />\n\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 5: Summarize the issue on the dashboard</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tSummarize the issue with the client on the dashboard and click Add.\n\t\t\t\t\t\tPlease note that the clock will not start until after these details\n\t\t\t\t\t\tare added\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t**It should not take longer than 3 minutes to confirm and verify\n\t\t\t\t\t\t\tthat you can assist a customer with an issue. If you realize that\n\t\t\t\t\t\t\tthis is outside of your scope, please put the customer back in the\n\t\t\t\t\t\t\tcue (click the Transfer button) so another technician can assist\n\t\t\t\t\t\t\tthem**\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>After you add all of the details, click Submit.</li>\n\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (6).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction7\"/>\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tOnce you submit the details, the customer will be prompted to select\n\t\t\t\t\t\tthe issue and click Confirm.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (7).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction8\"/>\n\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 6: Resolve the issue</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tWhen working with your customer, make sure to address the specific\n\t\t\t\t\t\tissue they are having. Also make sure to ask if they would prefer\n\t\t\t\t\t\tfor you to take over their screen or if they would like you to walk\n\t\t\t\t\t\tthem through the process.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tIf the customer would like you to take over their screen, they need\n\t\t\t\t\t\tto click Enable Remote on their screen. This has to be started on\n\t\t\t\t\t\tthe Customers side. Once they click this, you are good to go.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThe first time you connect Remote with a Customer, you will have to\n\t\t\t\t\t\tknow this. Click HERE.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (8).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction9\" />\n\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIn order to PAUSE a Remote Session, you will need to look at the\n\t\t\t\t\t\tbottom right of the screen to see the bar.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIMPORTANT: If you are in the middle a Remote Session and the free 6\n\t\t\t\t\t\tminutes is up for a new customer, you MUST pause the Screen Share\n\t\t\t\t\t\tuntil they enter their Credit Card info to continue with the\n\t\t\t\t\t\tsession.\n\t\t\t\t\t</p>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (9).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction10\"/>\n\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIf at any point you realize you need to Convert to a Long Call,\n\t\t\t\t\t\tCLICK HERE for instructions on this portion.\n\t\t\t\t\t</p>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Step 7: Ending the Call</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tBefore ending the call, make sure to ask the customer the following\n\t\t\t\t\t\tquestions:\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>Have I resolved your issue?</li>\n\t\t\t\t\t\t\t<li>Are you satisfied with the results of this call? </li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\tIf so, would you be willing to take 30 seconds to give feedback\n\t\t\t\t\t\t\t\tin the system once the call ends?\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\tThe customer will automatically be prompted to give you a\n\t\t\t\t\t\t\t\trating, so encourage them to do so.\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (10).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction11\"/>\n\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<div style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n\t\t\t\t\t<p style={{fontSize: currentStep ==111 && '25px'}}>Common Questions/Issues</p>\n\t\t\t\t</div>\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>1. Transfers</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIf you realize that the issue they are having is not something you can\n\t\t\t\t\tassist with, click the Transfer button on the bottom right to transfer\n\t\t\t\t\tit to the appropriate technician.\n\t\t\t\t</p>\n\t\t\t\t<img src={require(\"./instructionimages/unnamed (11).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction12\"/>\n\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>2. Time Limit</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tHere at Geeker, we put our customers first. We want to ensure that we\n\t\t\t\t\tfind a resolution quickly and easily. If a customer call is taking\n\t\t\t\t\tlonger than usual (more than 30 minutes), then make sure to let them\n\t\t\t\t\tknow that it is out of scope. We want to ensure that we address each\n\t\t\t\t\tcustomer\u2019s questions. If they would like additional help, they are\n\t\t\t\t\twelcome to call back.\n\t\t\t\t</p>\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>3. Screen Share</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn order to screen share with a customer, they must initiate that on\n\t\t\t\t\ttheir side. Have them click the Share button on their screen to do\n\t\t\t\t\tthis.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe customer will be prompted to download Zoho. Make sure to let them\n\t\t\t\t\tknow and tell them it\u2019s a quick download.\n\t\t\t\t</p>\n\t\t\t\t<img src={require(\"./instructionimages/unnamed (12).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction13\" />\n\n\t\t\t\t<p>\n\t\t\t\t\tLet the Customer know that they must click Join in order to start the\n\t\t\t\t\tRemote Session.\n\t\t\t\t</p>\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>4. Remote Access/Control of Customer\u2019s Computer</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe first time a Technician enables Remote access, they will see this\n\t\t\t\t\tpop up. You must click Always allow pop-ups and redirects\n\t\t\t\t</p>\n\t\t\t\t<img src={require(\"./instructionimages/unnamed (13).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction14\"/>\n\n\t\t\t\t<p>\n\t\t\t\t\tIn order to take control of a customer\u2019s screen, click Enable Remote.{\" \"}\n\t\t\t\t</p>\n\t\t\t\t<img src={require(\"./instructionimages/unnamed (14).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction15\" />\n\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>5. Converting to Long Calls</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tIf a job requires more time, you can suggest to the customer to\n\t\t\t\t\t\textend the call.{\" \"}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<p style={{fontSize: currentStep ==111 && '20px'}}>\n\t\t\t\t\t<b>They have 2 options:</b>\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tFixed Hours: This is for a job that will take a long amount of time.{\" \"}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tCalculate per 6 minutes: This is for someone who needs to run but\n\t\t\t\t\t\tonly needs a few more minutes to get their job done. They can leave\n\t\t\t\t\t\tthe call as you complete their job.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (15).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction16\" />\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThe Customer will receive a notification on their side to approve\n\t\t\t\t\t\tthe request. They must click APPROVE.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (16).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction17\" />\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tOnce the customer hits approve, the End Meeting button for the\n\t\t\t\t\t\ttechnician will change to Back to Dashboard\n\t\t\t\t\t</li>\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThe technician will find their extended job on their Dashboard under\n\t\t\t\t\t\tAvailable Jobs\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (19).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction18\" />\n\n\t\t\t\t\t\n\t\t\t\t\t<li>On the job, click Details</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tUnder the Conversations tab, you can chat with the Customer. This is\n\t\t\t\t\t\tthe ONLY place where you will keep contact with the customer. Do NOT\n\t\t\t\t\t\tsend emails to them.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (17).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction19\"/>\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThis is where the customer can send excel sheets or any other\n\t\t\t\t\t\tdocuments they need help with.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tImportant: Do NOT open any files until you go to\n\t\t\t\t\t\thttps://www.virustotal.com/gui/home/upload to ensure it does not\n\t\t\t\t\t\thave any viruses. Once you upload the file, it will quickly let you\n\t\t\t\t\t\tknow if the file is infected or not.\n\t\t\t\t\t</li>\n\t\t\t\t\t<img src={require(\"./instructionimages/unnamed (18).png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction20\" />\n\n\t\t\t\t\t<li>\n\t\t\t\t\t\tWhen you are done, go to the top of the dashboard and click Submit\n\t\t\t\t\t\tfor Approval. If you need to speak with the customer regarding their\n\t\t\t\t\t\tproject, click Join.{\" \"}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tThe Customer must Approve this on their end. They will receive an\n\t\t\t\t\t\temail notification to finalize the last step.\n\t\t\t\t\t</li>\n\t\t\t\t\t\n\t\t\t\t\t\t<img src={require(\"./instructionimages/unnamed21.png\")} width=\"700px\" className=\"img-fluid\" alt=\"instruction21\"/>\n\t\t\t\t\t\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tUnlike other support teams, who mainly use chat sessions, we help with\n\t\t\t\t\tlive calls and screen sharing. This way, our customers feel fully\n\t\t\t\t\tsupported with direct communication and hands-on, step-by-step\n\t\t\t\t\tguidance from you.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tAs a Geek, you\u2019ll earn money around your schedule and at the pace you\n\t\t\t\t\tset. Simply log in and work whenever - and wherever! - works best for\n\t\t\t\t\tyou.Our payment structure is based on the amount of cases you\n\t\t\t\t\tsuccessfully resolve. The more cases you complete, the more you earn.{\" \"}\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tReady to help people resolve their program issues? We\u2019re ready to have\n\t\t\t\t\tyou on board.\n\t\t\t\t</p>\n\t\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\t\t<p>Welcome to Geeker\u2026</p>\n\t\t\t\t</div>\n\t\t\t\t{currentStep ==111 ? '' :\n\t\t\t\t\t// <div className=\"text-center d-flex  justify-content-center flex-wrap\">\n\t\t\t\t\t// \t<div>\n\t\t\t\t\t// \t\t\t<input\n\t\t\t\t\t// \t\t\ttype=\"checkbox\"\n\t\t\t\t\t// \t\t\t// value=\"\"\n\t\t\t\t\t// \t\t\tchecked={isChecked}\n\t\t\t\t\t// \t\t\tonChange={handleScroll}\n\t\t\t\t\t// \t\t\tstyle={{width:\"20px\",height:\"20px\"}}\n\t\t\t\t\t// \t\t\t/>\n\t\t\t\t\t// \t\t</div>\n\t\t\t\t\t// \t\t&nbsp; &nbsp; \n\t\t\t\t\t// \t <div>\n\t\t\t\t\t// \t\t<span className=\"instruction-label\">\n\t\t\t\t\t// \t\t\tI have read and understood the instructions\n\t\t\t\t\t// \t\t</span>\n\t\t\t\t\t// \t </div>\n\n\t\t\t\t\t// </div>\n\t\t\t\t\t<div  className=\"text-center d-flex  justify-content-center flex-wrap\">\n\t\t\t\t\t<label\n                    className=\"ml-2 tech-signup-check-container\"\n                    htmlFor=\"privacy&cookies\"\n                    style={{ fontSize: \"15px\", fontWeight: \"400\", margin: 0 }}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      id=\"privacy&cookies\"\n                      onChange={handleScroll}\n                      className=\"tech-signup-checkbox\"\n                      style={{\n                        width: \"24px\",\n                        height: \"24px\",\n                        border: \"2px solid #2F3F4C\",\n                      }}\n                    />\n                    <span className=\"tech-signup-checkmark\"></span>I have read and \n\t\t\t\t\tunderstood the instructions\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                    >\n                      {\" \"}\n                     \n                    </a>{\" \"}\n                    {\" \"}\n                  </label>\n               </div>\n\t\t\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Instructions;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\instructions.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "previousExpertise.js",
                                                                    "fileData": "import React ,{useState} from 'react';\nimport styled from 'styled-components';\nimport {\n  Row, Typography, Switch, Col, Select,\n} from 'antd';\nimport ReactTags from 'react-tag-autocomplete'\nimport { languages } from '../../../../constants';\nimport {\n  RateTabContainer,\n  RateStepsTab,\n  RateStep,\n  TechSelect,\n  StepActionContainer,\n  StepTitle,\n} from './style';\nimport CreatableSelect from 'react-select/creatable';\nimport {Button} from  'react-bootstrap';\nimport StepButton from '../../../../components/StepButton';\nimport ItemLabel from '../../../../components/ItemLabel';\nimport AuthInput from '../../../../components/AuthLayout/Input';\nimport CheckBox from '../../../../components/common/CheckBox';\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nconst englishLevels = [\n  'Beginner',\n  'Intermediate',\n  'Advanced',\n  'Fluent',\n  'Native',\n];\n\nfunction PreviousExpertise({\n  onPrev,\n  onNext,\n  generalInfo,\n  setGeneralInfo,\n  otherLangCheck,\n  setOtherLangCheck,\n  showFreelancer,\n  setShowFreelancer,\n  showEmployee,\n  setShowEmployee,\n}) {\n const [options,setOptions] = useState([])\n\n  console.log(\"generalInfo\",generalInfo)\n  const {\n    freelancerProfiles,\n    employmentProfiles,\n    certifications,\n    englishLevel,\n    otherLangList,\n  } = generalInfo;\n\n  const mutateFields = (name, value) => {\n    setGeneralInfo({\n      ...generalInfo,\n      [name]: value,\n    });\n  };\n\n  const languagesOptions = languages.map(d => (\n    <Option key={`others-${d[0]}`} style={{ textAlign: 'left' }} value={d[0]}>\n      {d[0]}\n    </Option>\n  ));\n\n  return (\n    <Container>\n      <StepTitle width=\"49%\" margin=\"Auto\"  font_size=\"30px\">\n        <p>Tell us little more about your expertise with the software you selected</p>\n      </StepTitle>\n      <BodyContainer className=\"select-job-body\">\n        <SectionTitle>\n          In what capacity did you gain your experience?\n        </SectionTitle>\n        <CapacityContainer>\n          <CheckBox\n            id=\"employment\"\n            checked={showEmployee}\n            onChange={(e) => {\n              setShowEmployee(e.target.checked);\n              if (e.target.checked) {\n                mutateFields('employmentProfiles', [...employmentProfiles, '']);\n              } else {\n                mutateFields('employmentProfiles', []);\n              }\n            }}\n          >\n            Employment\n          </CheckBox>\n          {\n            showEmployee && (\n              <CapacityBody span={24}>\n                <ItemLabel style={{ margin: 0,padding:0}}>COMPANY NAME</ItemLabel>\n                {\n                  employmentProfiles.map((employmentProfile, index) => (\n                    <AuthInput\n                      name=\"company_name\"\n                      size=\"large\"\n                      key={`employmentProfile-${index}`}\n                      style={{ marginTop: 15 }}\n                      placeholder=\"Company Name\"\n                      value={employmentProfile}\n                      border=\"none\"\n                      borderbottom = \"1px inset black\"\n                      border_radius=\"0px\"\n                      onChange={e => mutateFields('employmentProfiles', employmentProfiles.map(\n                        (val, ind) => ind === index ? e.target.value : val,\n                      ))}\n                    />\n                  ))\n                }\n                <AddProfile onClick={() => mutateFields('employmentProfiles', [...employmentProfiles, ''])}>\n                  +Add Another\n                </AddProfile>\n              </CapacityBody>\n            )\n          }\n        </CapacityContainer>\n        <CapacityContainer>\n          <CheckBox\n            id=\"freelancer\"\n            checked={showFreelancer}\n            onChange={(e) => {\n              setShowFreelancer(e.target.checked);\n              if (e.target.checked) {\n                mutateFields('freelancerProfiles', [...freelancerProfiles, '']);\n              } else {\n                mutateFields('freelancerProfiles', []);\n              }\n            }}\n          >\n            Freelancer\n          </CheckBox>\n          {\n            showFreelancer && (\n              <CapacityBody span={24}>\n                <ItemLabel className=\"Tech-label\" style={{ margin: 0 }}>\n                  Enter freelancer profiles\n                </ItemLabel>\n               {freelancerProfiles.map((freelancer, index) => (\n                  <AuthInput\n                    key={index}\n                    name={`profile-${index}`}\n                    size=\"large\"\n                    placeholder=\"Profile\"\n                    value={freelancer}\n                    style={{ marginTop: 15 }}\n                    border=\"none\"\n                    borderbottom = \"1px inset black\"\n                    border_radius=\"0px\"\n                    onChange={e => mutateFields('freelancerProfiles', freelancerProfiles.map(\n                      (val, ind) => ind === index ? e.target.value : val,\n                    ))}\n                  />\n                ))}\n\n                <AddProfile onClick={() => mutateFields('freelancerProfiles', [...freelancerProfiles, ''])}>\n                  +Add Another\n                </AddProfile>\n              </CapacityBody>\n            )\n          }\n        </CapacityContainer>\n        <SectionTitle style={{ marginTop: 50 }}>\n          Enter any certifications or credentials\n        </SectionTitle>\n        {\n          certifications.map((certification, index) => (\n            <AuthInput\n              key={index}\n              name={`certification-${index}`}\n              size=\"large\"\n              value={certification}\n              border=\"none\"\n              borderbottom = \"1px inset black\"\n              border_radius=\"0px\"\n              onChange={e => mutateFields('certifications', certifications.map(\n                (val, ind) => ind === index ? e.target.value : val,\n              ))}\n              style={{ marginTop: 15 }}\n            />\n          ))\n        }\n        <AddProfile onClick={() => mutateFields('certifications', [...certifications, ''])}>+Add Another</AddProfile>\n        <SectionTitle style={{ marginTop: 50 }}>\n          English speaking level\n        </SectionTitle>\n        <EnLabel>Please rate your level of experience</EnLabel>\n        <RateTabContainer>\n          <RateStepsTab\n            current={englishLevel}\n            onChange={(value) => mutateFields('englishLevel', value)}\n            progressDot\n          >\n\n            {\n              englishLevels.map((item) => (\n                <RateStep key={`${item}`} description={item} className={(englishLevel == item ? 'ant-steps-item-process ant-steps-item-active' : '')} />\n              ))\n            }\n          </RateStepsTab>\n        </RateTabContainer>\n        <SectionTitle style={{ marginTop: 50, marginBottom: 30 }}>\n          Any other languages?\n        </SectionTitle>\n        <OtherLangCheckContainer>\n          <Text>No</Text>\n          <LangSwitch\n            checked={otherLangCheck}\n            onChange={(checked) => {\n              setOtherLangCheck(checked);\n              if (checked) {\n                mutateFields('otherLangList', [{\n                  name: '',\n                  level: 0,\n                }]);\n              } else {\n                mutateFields('otherLangList', []);\n              }\n            }}\n          />\n          <Text>Yes</Text>\n        </OtherLangCheckContainer>\n        {\n          otherLangCheck && otherLangList.map((otherLang, index) => (\n            <OtherLangSection key={`${otherLang.name}-${index}`}>\n              <Col span={24}>\n                <ItemLabel className=\"Tech-label\" >Language</ItemLabel>\n                <LangSelectContainer>\n                  <TechSelect\n                    showSearch\n                    value={otherLang.name}\n                    placeholder=\"Search for language\"\n                    showArrow\n                    style={{ width: '50%' }}\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.children\n                      .toLowerCase()\n                      .indexOf(input.toLowerCase()) >= 0}\n                    onChange={e => {\n                      mutateFields('otherLangList', otherLangList.map(\n                        (val, ind) => ind === index ? ({ ...val, name: e }) : val,\n                      ));\n                    }}\n                  >\n                    {languagesOptions}\n                  </TechSelect>\n                  {otherLang.name && (\n                    <AddProfile\n                      style={{ padding: 0, paddingLeft: 20 }}\n                      onClick={() => {\n                        mutateFields('otherLangList', otherLangList.map(\n                          (val, ind) => ind === index ? ({ ...val, name: '' }) : val,\n                        ));\n                      }}\n                    >\n                      Remove\n                    </AddProfile>\n                  )}\n                </LangSelectContainer>\n              </Col>\n              <EnLabel>Please rate your level of experience</EnLabel>\n              <RateTabContainer>\n                <RateStepsTab\n                  current={otherLang.level}\n                  onChange={current => {\n                    mutateFields('otherLangList', otherLangList.map(\n                      (val, ind) => ind === index ? ({ ...val, level: current }) : val,\n                    ));\n                  }}\n                  progressDot\n                >\n                  {englishLevels.map((item, levelIndex) => levelIndex === englishLevel ? (\n                    <RateStep key={`${item.title}`} description={item} />\n                  ) : (\n                    <RateStep\n                      key={`${item.title}`}\n                      description={item}\n                    />\n                  ))}\n                </RateStepsTab>\n              </RateTabContainer>\n            </OtherLangSection>\n          ))\n        }\n        {\n          otherLangCheck && (\n            <AddProfile\n              onClick={() => mutateFields('otherLangList', [...otherLangList, { name: '', level: 0 }])}\n            >\n              +Add Another\n            </AddProfile>\n          )\n        }\n      </BodyContainer>\n      <StepActionContainer className=\"steps-action\">\n        <Button className=\"app-btn mr-15\"  onClick={onPrev}>Previous<span></span></Button>\n        <Button className=\"app-btn mr-15\"  onClick={onNext}>Next<span></span></Button>\n      </StepActionContainer>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n`;\n\nconst BodyContainer = styled.div`\n  background: #f4f4f4;\n  margin-top : 60px;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 40px;\n`;\n\nconst CapacityBody = styled(Row)`\n  padding-top: 30px !important;\n  & .css-2b097c-container{\n    width:100% !important;\n  }\n  & .css-2b097c-container .css-yk16xz-control{\n    margin-top:20px;\n    padding:5px;\n    border :0px none;\n    border-bottom:1px solid black;\n    border-radius:0;\n    width:100% !important;\n  }\n`;\nconst CapacityContainer = styled(Row)`\n  background: white;\n  border-radius: 10px;\n  padding: 20px;\n  margin-top: 25px;\n  width: 100%;\n  display: flex;\n  flex-direction: column !important;\n  align-items: flex-start;\n`;\n\nconst SectionTitle = styled(Text)`\n  font-size: 24px;\n  font-weight: bold;\n`;\n\nconst AddProfile = styled(Text)`\n  font-size: 15px;\n  font-weight: bold;\n  color: #8c8989;\n  text-decoration: underline;\n  padding-top: 20px;\n  cursor: pointer;\n`;\n\nconst EnLabel = styled(ItemLabel)`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nconst OtherLangCheckContainer = styled(Col)`\n  display: flex;\n  align-items: center;\n`;\n\nconst OtherLangSection = styled(Row)`\n  width: 100%;\n  padding-top: 20px;\n  text-align: left;\n`;\nconst LangSwitch = styled(Switch)`\n  margin: 0 15px !important;\n`;\n\nconst LangSelectContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport default PreviousExpertise;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\previousExpertise.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "rateExpertise.js",
                                                                    "fileData": "import React, { useEffect, useState, memo } from 'react';\nimport styled from 'styled-components';\nimport {\n  Typography, Row, Select, Col,\n} from 'antd';\n// import StepButton from '../../../../components/StepButton';\nimport { Button } from 'react-bootstrap';\nimport ItemLabel from '../../../../components/ItemLabel';\nimport CheckBox from '../../../../components/common/CheckBox';\nimport 'react-phone-number-input/style.css';\n\nimport {\n  TechSelect,\n  RateTabContainer,\n  RateStepsTab,\n  RateStep,\n  StepActionContainer,\n  StepTitle,\n} from './style';\nimport TechImages from '../../../../components/TechImages';\n// import { openNotificationWithIcon } from '../../../../utils';\n\nconst { Text } = Typography;\nconst { Option } = Select;\nconst experienceYearsList = ['5 - 10', '10 - 15', '15 - 20', '20 - 25'];\nconst ratingScale = [\n  'Beginner',\n  'Basic knowledge but never used professionally',\n  'Pretty fluent & limited use professionally',\n  'Very fluent and a lot of use professionally',\n  'Complete mastery with extensive professional use',\n];\n\nconst SoftwareDetailSection = ({\n  software,\n  title,\n  experience,\n  setExperience,\n}) => {\n  const [experienceYearArea, setExperienceYearArea] = useState('');\n  const [expertises, setExpertises] = useState([]);\n\n  const experiencesYearAreas = experienceYearsList.map(d => (\n    <Option key={`others-${d}`} style={{ textAlign: 'left' }} value={d}>\n      {d}\n    </Option>\n  ));\n  console.log(software, title, experience, 'resss');\n  useEffect(() => {\n    if (experience) {\n      setExperienceYearArea(experience.experienceYearArea);\n      setExpertises(experience.expertises);\n    }\n  }, [experience]);\n\n  const isExist = (expertise) => {\n    if (expertises) {\n      return !!expertises.find(item => item.expertise === expertise.id);\n    }\n\n    return false;\n  };\n\n  const findExpertise = (expertise) => expertises.find(item => item.expertise === expertise.id);\n\n  const handleChangeLevel = (expertise, rate) => {\n    const newExpertises = isExist(expertise)\n      ? expertises.map(item => item.expertise === expertise.id ? { ...item, rate } : item)\n      : [...expertises, { expertise: expertise.id, rate }];\n\n    setExpertises(newExpertises);\n    setExperience({\n      software: software.id,\n      experienceYearArea,\n      expertises: newExpertises,\n    });\n  };\n\n  const handleCheckBoxStatus = (expertise, e) => {\n    const newExpertises = isExist(expertise) && expertises\n      ? expertises.filter(item => item.expertise !== expertise.id)\n      : expertises === undefined ? [{ expertise: expertise.id, rate: 0 }] : [...expertises, { expertise: expertise.id, rate: 0 }];\n\n    setExperience({\n      software: software.id,\n      experienceYearArea,\n      expertises: newExpertises,\n    });\n  };\n\n  return (\n    <SoftwareContainer>\n      <SectionImage src={TechImages[software.name]} />\n      <SectionTitle>{`How many years of experience you have with ${(software.parent === undefined ? title : `${software.name} (${title})`)}?`}</SectionTitle>\n      <SelectYearContainer span={12}>\n        <ItemLabel className=\"Tech-label\">Select the years</ItemLabel>\n        <TechSelect\n          id=\"select_year\"\n          showSearch\n          className=\"select-boxes-tech\"\n          placeholder=\"Select the years\"\n          showArrow\n          style={{ width: '100%' }}\n          optionFilterProp=\"children\"\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          value={experienceYearArea}\n          onChange={value => {\n            setExperienceYearArea(value);\n            setExperience({\n              software: software.id,\n              experienceYearArea: value,\n              expertises,\n            });\n          }}\n        >\n          {experiencesYearAreas}\n        </TechSelect>\n      </SelectYearContainer>\n      {software.expertise.map(item => (\n        <AreaContainer key={`areaCheck-${item.id}`}>\n          <CheckBox\n            id={item.id}\n            checked={expertises ? !!expertises.find(e => e.expertise === item.id) : null}\n            onChange={(e) => handleCheckBoxStatus(item, e)}\n          >\n            {item.name}\n          </CheckBox>\n          {\n            isExist(item) && (\n              <RateSelectBody span={24}>\n                <ItemLabel>Please rate your level of experience</ItemLabel>\n                <RateTabContainer>\n                  <RateStepsTab\n                    progressDot\n                    current={findExpertise(item).rate}\n                    onChange={current => handleChangeLevel(item, current)}\n                  >\n                    {\n                      ratingScale.map((rItem) => (\n                        <RateStep\n                          key={`${software.name}-${rItem.title}`}\n                          description={rItem}\n                        />\n                      ))\n                    }\n                  </RateStepsTab>\n                </RateTabContainer>\n              </RateSelectBody>\n            )\n          }\n        </AreaContainer>\n      ))}\n    </SoftwareContainer>\n  );\n};\n\nfunction RateExpertise({\n  onNext,\n  onPrev,\n  softwares,\n  experiences,\n  setExperiences,\n}) {\n  const onChangeExperience = (data) => {\n    const isExist = !!experiences.find(item => item.software === data.software);\n    const newExperiences = isExist ? experiences.map(item => item.software === data.software ? data : item) : [...experiences, data];\n    setExperiences(newExperiences);\n  };\n\n  const handleNext = () => {\n    // for(var k in softwares){\n    //   console.log(\"pushing main\")\n    //     setExperiences(prevState=>[...prevState,{\"software\":softwares[k].id}]);\n    //     }\n    // if (softwares.some(item => !experiences.find(i => i.software === item.id || item.subSoftware.map(j => j.id).indexOf(i.software) !== -1))\n    //   || experiences.some(item => !item.experienceYearArea)\n    // ) {\n    //   openNotificationWithIcon('error', 'Warning', 'Please select the experience correctly');\n    //   return;\n    // }\n    onNext();\n  };\n\n  return (\n    <Container>\n      <StepTitle width=\"49%\" margin=\"Auto\" font_size=\"30px\">\n        <p>Tell us little more about your expertise with the software you selected</p>\n      </StepTitle>\n      {\n        softwares.map(software => {\n          if (software.subSoftware && software.subSoftware.length) {\n            return software.subSoftware.map(item => (\n              <SoftwareDetailSection\n                key={`software-${item.name}`}\n                software={item}\n                title={software.name}\n                experience={experiences.find(exp => exp.software === item.id)}\n                setExperience={onChangeExperience}\n              />\n            ));\n          }\n          return (\n            <SoftwareDetailSection\n              key={`software-${software.name}`}\n              software={software}\n              title={software.name}\n              experience={experiences.find(item => item.software === software.id)}\n              setExperience={onChangeExperience}\n            />\n          );\n        })\n      }\n      <StepActionContainer className=\"steps-action\">\n        <Button className=\"app-btn mr-15\" type=\"primary\" onClick={onPrev}>\n          Previous\n          <span />\n        </Button>\n        <Button className=\"app-btn mr-15\" type=\"primary\" onClick={handleNext}>\n          Next\n          <span />\n        </Button>\n      </StepActionContainer>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n\n`;\n\nconst SoftwareContainer = styled.div`\n  background: #F6FBFF;\n  margin-bottom: 50px;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 40px;\n`;\n\nconst SelectYearContainer = styled(Row)`\n  padding-top: 25px;\n`;\nconst SectionTitle = styled(Text)`\n  font-size: 24px;\n  font-weight: bold;\n`;\nconst SectionImage = styled.img`\n  width: 60px;\n  margin-bottom: 25px;\n`;\nconst AreaContainer = styled(Col)`\n  background: white;\n  padding: 20px;\n  width: 100%;\n  justify-content: flex-start;\n  display: flex;\n  border-radius: 10px;\n  margin-top: 20px;\n  flex-direction: column;\n  align-items: flex-start;\n  font-family :initial;\n  \n`;\n\nconst RateSelectBody = styled(Row)`\n  padding: 30px;\n`;\n\nexport default memo(RateExpertise);\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\rateExpertise.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "ScheduleInterview.js",
                                                                    "fileData": "import React, { useState, useEffect } from \"react\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport NewSquareBtn from \"components/NewSquareBtn\"\nimport {CALENDLY_EVENT_URL_TEST,CALENDLY_EVENT_URL_LIVE } from '../../../../constants/index';\nimport { useCalendlyEventListener,InlineWidget } from \"react-calendly\";\nimport mixpanel from 'mixpanel-browser';\nimport { useUser } from '../../../../context/useContext';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { Spin } from 'antd';\nimport { useSocket } from '../../../../context/socketContext';\n\nconst ScheduleInterview = ({onPrev, onNext, setShowProgress, setProgressBarPercentage,register,checkScheduleInterview,\n    setCheckScheduleInterview}) => {\n    const {user} = useUser()\n    const [calendly,setCalendly] = useState('');\n    const[disableCompleteBtn, setDisableCompleteBtn] =useState(true)\n    const[showSpinner, setShowspinner] =useState(false)\n    const { socket } = useSocket();\n    useEffect(()=>{\n        setShowProgress(true)\n        setProgressBarPercentage(100)\n        if (user.userType == 'technician' && user?.technician?.technicianType == 'live') {\n            setCalendly(CALENDLY_EVENT_URL_LIVE)\n        }\n        else {\n            setCalendly(CALENDLY_EVENT_URL_TEST)\n        }\n    },[])\n    \n    useCalendlyEventListener({\n        onEventScheduled: (e) =>{\n            setDisableCompleteBtn(false)\n            setCheckScheduleInterview(true)\n        },\n      });\n    const handleComplete = async()=>{\n        setShowspinner(true)\n        if(user){\n            let dataToSend = {\n                tagName: \"techRegistered\",\n                technicianObject: user\n            }\n            socket.emit(\"send-GTM-tag-tech-onboard\", dataToSend)\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician- Click Next button from Schedule interview page',{ 'Email': user.email });\n        }\n        await TechnicianApi.updateTechnicianWithParams(register.technician.id,{registrationStatus:'interview_result'})\n        // mixpanel code//\n        mixpanel.identify(user.email);\n        mixpanel.track('Technician - scheduled interview');\n        // mixpanel code//\n        window.location.href = \"/\"\n        // onNext()\n    }\n    return<div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <HeadingAndSubHeading heading={\"Schedule Interview\"} subHeading={\"Set up your meeting with HR at Geeker! We\u2019ll discuss you, your goals, and how you\u2019re going to succeed at Geeker! We\u2019re very excited to meet you and greet you.\"} />\n\n        {/* <div className=\"details-div justify-content-center instructions-text d-flex align-items-center\">\n            <div className=\"instructions-heading-div d-flex justify-content-center\"> */}\n           { calendly !== '' && <InlineWidget\n                url= {calendly} \n                rootElement={document.getElementById(\"root\")}\n                text=\"Schedule\"\n                prefill={{\n                    email:user.email,\n                    name:user.firstName+ '' + user.lastName,\n                    customAnswers: {\n                        a2: user.technician.profile.confirmId.phoneNumber, \n                      }\n                  }}\n\n                // style={{paddingLeft:'5px',height:\"1000px\"}}\n            />}\n            {/* </div>\n        </div> */}\n\n        <div className=\"btn-footer d-flex justify-content-between align-items-center\">\n            <NewSquareBtn type={\"previous\"} onPrev={onPrev} />\n\n            \n            <button \n                className={\"green-btn\"}\n                style={{opacity: disableCompleteBtn ? \"0.3\" : \"1\"}}\n                disabled={disableCompleteBtn}\n                onClick={handleComplete}\n            >\n                <span></span>\n                {(showSpinner \n                    ?\n                    <Spin className=\"spinner\"/>\n                    :\n                    <span className=\"green-btn-span\">Complete</span>\n                )}\n            </button>\n        </div>\n    </div>\n}\n\nexport default ScheduleInterview",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\ScheduleInterview.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "selectExpertise.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport {\n  Card, Typography,Spin,Modal\n} from 'antd';\nimport styled from 'styled-components';\nimport {Container, Row, Col, Button} from  'react-bootstrap';\nimport { StepActionContainer, StepTitle } from './style';\n// import TechImages from '../../../../components/TechImages';\n// import RightImage from '../../../../assets/images/select_expertise.png';\nimport CheckboxImage from '../../../../assets/images/checkbox.png';\n// import StepButton from '../../../../components/StepButton';\nimport * as SoftwareApi from '../../../../api/software.api';\nimport { WarningText } from '../../../Customer/ProfileSetup/steps/style';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport \"@pathofdev/react-tag-input/build/index.css\";\nimport {useTools} from '../../../../context/toolContext';\nimport mixpanel from 'mixpanel-browser';\nconst { Text } = Typography;\nlet allSoftwares = [];\nvar temp = []\n\n\n\n/*const SoftwareCard = ({ software, isActive, onClick}) => {\n\n  const gridStyle = active => ({\n    width: '9vw',\n    height: '9vw',\n    textAlign: 'center',\n    marginBottom: '20px',\n    fontSize: '15px',\n    minHeight: '100px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    border: '1px #000 solid',\n    justifyContent: 'space-between',\n    padding: '20px 10px',\n    borderRadius: '10px',\n    color: active ? '#fff' : '#000',\n    cursor: 'pointer',\n    opacity: active ? 1 : 0.4,\n  });\n  return (\n    <Col span={6} onClick={onClick}>\n      <CardContainer>\n        <Card.Grid style={gridStyle(isActive)}>\n          <TechImage src={TechImages[software.name]} />\n          <CardText>{software.name}</CardText>\n        </Card.Grid>\n        {isActive && <CheckboxIcon src={CheckboxImage} />}\n      </CardContainer>\n    </Col>\n  );\n};*/\n\n\nfunction SelectExpertise({\n  onPrev,\n  onNext,\n  softwares,\n  setSoftwares,\n  setExperiences,\n  setmainSoftware,\n  setexpertise,\n  expertiseArrselected,\n  setExpertiseArrselected,\n  timezone,\n  register,\n  certifiedIn,\n  setCertifiedIn\n}) {\n  const [softwareList, setSoftwareList] = useState([]);\n  const [showError, setShowError] = useState(false);\n  const {setOpenModal} = useTools()\n  const [isActive, setIsActive] = useState(false);\n  const [nextBtnDisabled, setNextBtnDisabled] = React.useState(false);\n  \n  \n\n  useEffect(() => {\n    (async () => {\n      const res = await SoftwareApi.getSoftwareList();\n      if (res && res.data) {\n        setSoftwareList(res.data);\n      }\n    })();\n  }, []);\n\n\n  const handleCardClick = (value) => {\n    // console.log(value,\">>this is the mainSoftware\")\n\n    setmainSoftware(value)\n    let isExist = !!allSoftwares.find(item => item.id === value.id);\n    // console.log('isExist',isExist)\n    if(isExist){\n      let idx = allSoftwares.map(item => item.id).indexOf(value.id);\n      allSoftwares.splice(idx,1)\n      let certifiedSoftwares = [...certifiedIn]\n      certifiedSoftwares = certifiedSoftwares.filter(item => item.id != value.id)\n      setCertifiedIn(certifiedSoftwares)\n\n    }else{\n      let needConfirmation = false\n      if(value.askForCertificate){\n        needConfirmation = true\n        Modal.confirm({\n          content : `Are your certifited in ${value.name} .?`,\n          okText:\"Yes\",\n          cancelText:\"No\",\n          className:\"app-confirm-modal\",\n          onOk : () =>{\n              let certifiedSoftwares = [...certifiedIn]\n              certifiedSoftwares.push(value)\n              setCertifiedIn(certifiedSoftwares)\n          }\n        })\n      }\n      allSoftwares.push(value)\n    }\n\n    \n    setExperiences(allSoftwares)\n    setIsActive(!isActive)\n\n    /*setTimeout(function(){\n      console.log('All softwares :::',allSoftwares)\n    },500)*/\n  };\n\n  \n  const handleNext = async(value) => {\n    let expertiseArr = []\n    for(var k in allSoftwares){\n      var main = {}\n\n      main['software'] = allSoftwares[k].id\n      temp.push(main)\n    }\n    let main_ids = []\n    let softwareMap = temp.map(item => item.software)\n\n    for(var h in softwareMap ) \n    {\n      for(var l in softwareList)\n        {\n          let tempDict = {}         \n          if(softwareList[l]['parent'] === softwareMap[h])\n          {\n            if(!main_ids.includes(softwareList[l].i)){\n               main_ids.push(softwareList[l].id)\n              tempDict['software_id'] = softwareList[l].id\n              tempDict['parent'] = softwareMap[h]\n              expertiseArr.push(tempDict)\n            }\n           \n          } \n          else{\n            if(!main_ids.includes(softwareMap[h]) ){\n               main_ids.push(softwareMap[h])\n                tempDict['software_id'] = softwareMap[h] \n                expertiseArr.push(tempDict)\n            }\n           \n          }\n           \n        }\n       \n      }\n      setExpertiseArrselected(expertiseArr)\n      console.log(\"sedfsdfsdf\", expertiseArrselected);\n      \n      // console.log(\"sedfsdfsdf\", setExpertiseArrselected);\n      // return false;\n      // console.log(\"expertiseArr ::: \",expertiseArr)\n      //setSubmitUser(true)\n\n    setSoftwares(allSoftwares);\n    if (!allSoftwares.length) {\n      setShowError(true);\n      // console.log(\"i am inside if function  in selectexpertise ::\")\n      return;\n    }\n\n    let timezoneValue = (timezone ? timezone : Intl.DateTimeFormat().resolvedOptions().timeZone)\n    let certifiedSoftwares = certifiedIn.map(item => item.id)\n    if(register){\n      await TechnicianApi.updateTechnician(register.technician.id,{\n        expertise:expertiseArr,\n        registrationStatus : \"otherSoftwares\",\n        certifiedIn:certifiedSoftwares\n      });\n      // mixpanel code//\n\t\t\tmixpanel.identify(value.email);\n\t\t\tmixpanel.track('Technician - Selects softwares');\n\t\t\t// mixpanel code//\n      openNotificationWithIcon(\n        'success',\n        'Success',\n        'You have added expertise successfully',\n      );\n      setOpenModal(true)\n      onNext()\n    } \n}\n\n  const gridStyle = active => ({\n    position:'relative',\n    width: '250px',\n    height: '250px',\n    textAlign: 'center',\n    marginBottom: '20px',\n    fontSize: '15px',\n    minHeight: '100px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    border: '2px #97abb6 solid',\n    justifyContent: 'space-between',\n    padding: '55px 10px',\n    borderRadius: '10px',\n    color: active ? '#fff' : '#000',\n    cursor: 'pointer',\n    \n  });\n\n  return (\n    <div>\n      <Row>\n        <Container fluid className=\"select-job-container\">\n          <StepTitle > <p>Please select all software you are proficient in.</p>\n         </StepTitle>\n          {/* <p><h4>Select all that apply</h4></p> */}\n          <Row className=\"justify-content-center\">\n            {\n              softwareList.map((item) => {\n                if(item.parent === \"0\"){\n                  return(\n                    <Col key={item.id} xs={12} sm={6}  md={2} onClick={() => handleCardClick(item)} className={'mt-4 '+(isActive !== -1 ? 'active text-align-center' : 'inactive text-align-center')}>\n                      <CardContainer>\n                        <Card.Grid style={gridStyle(!!allSoftwares.find(i => i.id === item.id))}>\n                          <SoftwareImage\n                                src={item.blob_image}\n                            />\n                          <CardText>{item.name}</CardText>\n                        {!!allSoftwares.find(i => i.id === item.id) && <CheckboxIcon src={CheckboxImage} />}\n                        </Card.Grid>\n                      </CardContainer>\n                    </Col>\n                  )\n                }else{\n                  return null; \n                }\n              })\n            }\n          </Row>\n\n          {\n            showError && <WarningText>Please select your software</WarningText>\n          }\n\n          <StepActionContainer className=\"steps-action\">\n \n            <Button type=\"primary\" className=\"app-btn mt-5\" onClick={handleNext} disabled={nextBtnDisabled}>\n            {(nextBtnDisabled \n                ?\n                  <Spin/>\n                :\n                  <>Next</>\n              )}\n            </Button>\n          </StepActionContainer>\n        </Container>\n      </Row>\n    </div>\n  );\n}\n\nconst CardText = styled(Text)`\n  font-size: 20px;\n  margin: 0;\n  margin-top:30px;\n  font-weight:bold;\n  letter-spacing: 0px;\n  line-height: 16px;\n  color: #8398A6 !important;\n`;\n\nconst CheckboxIcon = styled.img`\n  width: 15px;\n  position: absolute;\n  left: 10px;\n  top: 10px;\n`;\nconst CardContainer = styled.div`\n  position: relative;\n  width:40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n`;\nconst SoftwareImage = styled.img`\n  width: 45%;\n  min-height:100px;\n  height: auto;\n`;\nexport default SelectExpertise;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\selectExpertise.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "selectOtherExpertise.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport {\n  Card, Typography,Select,Spin\n} from 'antd';\nimport styled from 'styled-components';\nimport {Container, Row, Col, Button} from  'react-bootstrap';\nimport { StepActionContainer, StepTitle } from './style';\n// import TechImages from '../../../../components/TechImages';\n// import RightImage from '../../../../assets/images/select_expertise.png';\nimport CheckboxImage from '../../../../assets/images/checkbox.png';\n// import StepButton from '../../../../components/StepButton';\nimport * as SoftwareApi from '../../../../api/software.api';\nimport { WarningText } from '../../../Customer/ProfileSetup/steps/style';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport * as AuthApi from '../../../../api/auth.api';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\nimport \"@pathofdev/react-tag-input/build/index.css\";\nimport {useTools} from '../../../../context/toolContext';\nimport mixpanel from 'mixpanel-browser';\nconst { Text } = Typography;\nlet allSoftwares = [];\nlet allOtherSoftwares = [];\nvar temp = []\n\n\nfunction SelectOtherExpertise({\n  onPrev,\n  onNext,\n  otherSoftwareSelected,\n  setOtherSoftwareSelected,\n  timezone,\n  register\n}) {\n  const [otherSoftwareList, setOtherSoftwareList] = useState([]);\n  const [showError, setShowError] = useState(false);\n  const {setOpenModal} = useTools()\n  const [isActive, setIsActive] = useState(false);\n  const [isOtherActive, setOtherActive] = useState(false);\n  const [otherSoftwares, setOtherSoftwares] = React.useState([])\n  const { Option } = Select;\n  //const [otherSoftwareSelected, setOtherSoftwareSelected] = React.useState([])\n  //const [ExpertiseArrselected, setExpertiseArrselected]= React.useState([])\n  const [nextBtnDisabled, setNextBtnDisabled] = React.useState(false);\n  \n  \n\n  useEffect(() => {\n    (async () => {\n      const other_res = await SoftwareApi.getOtherSoftwareList();\n      console.log('other_res>>>>>>>>>>',other_res)\n      if (other_res && other_res.data) {\n        setOtherSoftwareList(other_res.data)      \n      }\n    })();\n  }, []);\n\n\n\n \n\n\n   const handleOtherSoftwareCardClick = (value) => {\n    console.log('handleOtherSoftwareCardClick>>>>>>',value)\n\n    // setmainSoftware(value)\n    let isExist = !!allOtherSoftwares.find(item => item === value.id);\n    // console.log('isExist',isExist)\n    if(isExist){\n      let idx = allOtherSoftwares.indexOf(value.id);\n      allOtherSoftwares.splice(idx,1)\n\n    }else{\n      allOtherSoftwares.push(value.id)\n    }\n\n    console.log('allOtherSoftwares>>>>>',allOtherSoftwares)\n    setOtherSoftwareSelected(allOtherSoftwares)\n\n    setOtherActive(!isOtherActive)\n\n  \n  };\n\n\n\n  const handleNext = async(value) => {\n    console.log('handleOtherSoftwareCardClick>>>>>>',otherSoftwareSelected)\n    let timezoneValue = (timezone ? timezone : Intl.DateTimeFormat().resolvedOptions().timeZone)\n    await TechnicianApi.updateTechnician(register.technician.id,{\n      otherSoftwares : otherSoftwareSelected,\n      registrationStatus : \"confirm_schedule\",\n    });\n\n    // mixpanel code//\n    mixpanel.identify(value.email);\n    mixpanel.track('Technician - Selects Other Softwares');\n    // mixpanel code//\n    onNext()\n  }\n\n  const otherSoftChange =(value)=>{\n    setOtherSoftwareSelected(value)\n  }\n\n\n  const gridStyle = active => ({\n    position:'relative',\n    width: '250px',\n    height: '250px',\n    textAlign: 'center',\n    marginBottom: '20px',\n    fontSize: '15px',\n    minHeight: '100px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    border: '2px #97abb6 solid',\n    justifyContent: 'space-between',\n    padding: '55px 10px',\n    borderRadius: '10px',\n    color: active ? '#fff' : '#000',\n    cursor: 'pointer',\n    \n  });\n\n  return (\n    <div>\n      <Row>\n        <Container fluid className=\"select-job-container\">\n          \n          <p><h4>Other Softwares you may know!</h4></p>\n          <Row className=\"justify-content-center\">\n            {\n              otherSoftwareList.map((item) => {                \n                  return(\n\n                    <Col key={item.id} xs={12} sm={6}  md={2}  onClick={() => handleOtherSoftwareCardClick(item)} className={'mt-4 '+(isOtherActive !== -1 ? 'active text-align-center' : 'inactive text-align-center')}>\n                      <CardContainer>\n                        <Card.Grid style={gridStyle(!!allSoftwares.find(i => i.id === item.id))}>\n                          <SoftwareImage\n                                src={item.blob_image}\n                            />\n                          <CardText>{item.name}</CardText>\n                        {!!allOtherSoftwares.find(i => i === item.id) && <CheckboxIcon src={CheckboxImage} />}\n                        </Card.Grid>\n                      </CardContainer>\n                    </Col>\n                  )               \n              })\n            }\n          </Row>\n\n         {/* <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: '100%' }}\n              placeholder=\"Please select other categories you are interested in\"\n              onChange={otherSoftChange}\n              className=\"form-control bottom-border-only filter-element job-report-selection\"\n            >\n              {\n                  otherSoftwareList.map(item => {                    \n                        return (<Option key={item.id} value={item.id}>{item.name}</Option>);                     \n                    })\n              }\n            </Select>*/}\n         {/* <Row className=\"justify-content-left\">\n            <Col md=\"12\" className=\"mt-5\">\n              <label className=\"label-name float-left\">Any other software?</label>\n              <ReactTagInput \n                tags={otherSoftwares} \n                onChange={(newSoftwares) => setOtherSoftwares(newSoftwares)}\n                editable={true}\n                readOnly={false}\n                removeOnBackspace={true}\n                placeholder=\"Type software name and press enter\"\n              />\n            </Col>\n          </Row>*/}\n          {\n            showError && <WarningText>Please select your software</WarningText>\n          }\n\n          <StepActionContainer className=\"steps-action\">\n \n            <Button type=\"primary\" className=\"app-btn mt-5\" onClick={handleNext} disabled={nextBtnDisabled}>\n            {(nextBtnDisabled \n                ?\n                  <Spin/>\n                :\n                  <>Next</>\n              )}\n            </Button>\n          </StepActionContainer>\n        </Container>\n      </Row>\n    </div>\n  );\n}\n\nconst CardText = styled(Text)`\n  font-size: 20px;\n  margin: 0;\n  margin-top:30px;\n  font-weight:bold;\n  letter-spacing: 0px;\n  line-height: 16px;\n  color: #8398A6 !important;\n`;\n\nconst CheckboxIcon = styled.img`\n  width: 15px;\n  position: absolute;\n  left: 10px;\n  top: 10px;\n`;\nconst CardContainer = styled.div`\n  position: relative;\n  width:40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n`;\nconst SoftwareImage = styled.img`\n  width: 45%;\n  min-height:100px;\n  height: auto;\n`;\nexport default SelectOtherExpertise;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\selectOtherExpertise.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "style.js",
                                                                    "fileData": "import {\n  Button, Typography, Select, Checkbox, Steps,\n} from 'antd';\nimport styled from 'styled-components';\n// import H2 from '../../../../components/common/H2';\n\nconst { Text, Title } = Typography;\nconst { Step } = Steps;\n\nconst ActionNextButton = styled(Button)`\n  background: #464646;\n  font-size: 15px;\n  align-items: center;\n  display: flex;\n  font-weight: bold;\n  border-radius: 10px;\n  padding: 30px 75px;\n  &:hover {\n    background: #908d8d;\n  }\n`;\n\n\nconst BodyContainer = styled.div`\n  background: ${props => props.background};\n  margin-bottom: 50px !important;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content:space-around;\n  align-items: center;\n  padding: 30px 40px;\n  min-height:315px;\n  box-shadow :${props => props.boxshadow ? props.boxshadow :''}\n`;\n\n\nconst ActionPrevButton = styled(Button)`\n  padding: 0 40px;\n  margin: 0 8px;\n`;\nconst StepActionContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-bottom:10px;\n  &.steps-action {\n    marginRight :90px;\n  }\n`;\n\nconst LabelText = styled(Text)`\n  margin-bottom: 10px;\n  display: block;\n  font-size: 15px;\n`;\n\nconst TechSelect = styled(Select)`\n  .ant-select-selector {\n    min-width: 300px !important;\n    height: 45px !important;\n    border: 0px none !important;\n    background-color: transparent !important;\n\n    align-items: center;\n    border-bottom : 1px solid #7A8994 !important;\n\n  }\n  .ant-select-selection-item {\n    display: flex;\n    cursor:pointer !important;\n  }\n  .ant-select-selection-search {\n    display: flex;\n    align-items: center;\n    cursor:pointer !important;\n  }\n  .ant-select-selection-placeholder {\n    text-align: left;\n    color:#7A8994 !important;\n    cursor:pointer !important;\n  }\n`;\n\nconst ExpertiseTitle = styled(Title)`\n  padding-bottom: 50px;\n  text-align: left;\n`;\n\nconst AreaCheckbox = styled(Checkbox)`\n  font-size: 18px;\n  .ant-checkbox {\n    margin-right: 10px;\n  }\n`;\n\nconst StepTitle = styled.div`\n  height: 60px;\n  text-align:center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  & p{\n    font-family: 'Proxima Nova';\n    font-style: normal;\n    font-weight: 700;\n    line-height: 39px;\n    \n    color: #2F3F4C;\n    width : ${props => props.width ?props.width :\"276px\"}\n    margin : ${props => props.margin ?props.margin :\"0\"}\n    margin-bottom : 0px !important;\n    font-size: ${props => props.font_size? props.font_size :\"32px\"};\n    @media screen and (max-width: 763px) {\n      font-size:30px !important;\n    }\n  }\n\n  & span {\n    font-family: 'Proxima Nova';\n    font-style: normal;\n    font-weight: 400;\n    line-height: 25px;\n\n    color: #708390;\n    width : ${props => props.width ?props.width :\"294px\"}\n    margin : ${props => props.margin ?props.margin :\"0\"}\n    margin-bottom : 0px !important;\n    font-size: ${props => props.font_size? props.font_size :\"15px\"};\n  }\n`;\n\nconst RateTabContainer = styled.div`\n  width: 100%;\n  margin-top: 30px;\n`;\nconst RateStepsTab = styled(Steps)``;\nconst RateStep = styled(Step)`\n  .ant-steps-item-content {\n    display: flex;\n    justify-content: center;\n    line-height: 17px;\n  }\n  .ant-steps-item-description {\n    font-size: 14px;\n  }\n`;\nexport {\n  ActionNextButton,\n  ActionPrevButton,\n  StepActionContainer,\n  LabelText,\n  TechSelect,\n  ExpertiseTitle,\n  AreaCheckbox,\n  RateTabContainer,\n  RateStepsTab,\n  RateStep,\n  StepTitle,\n  BodyContainer\n};\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\style.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "techRegister.js",
                                                                    "fileData": "import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Form, Modal } from \"antd\";\nimport styled from \"styled-components\";\nimport FormItem from \"../../../../components/FormItem\";\nimport { Button } from \"react-bootstrap\";\nimport Link from \"components/AuthLayout/Link\";\nimport { privacyPolicy } from \"../../../../policy-pages/privacy-policy\";\nimport { cookiePolicy } from \"../../../../policy-pages/cookie-policy\";\nimport { TermsCondition } from \"../../../../policy-pages/conditions\";\nimport { useAuth } from \"../../../../context/authContext\";\nimport PhoneInput from 'react-phone-input-2'\nimport TextInput from \"components/AuthComponents/TextInput\";\nimport PasswordInput from \"components/AuthComponents/PasswordInput\";\nimport PasswordValidator from \"components/AuthComponents/PasswordValidator\";\nimport ValidatorModel from \"components/AuthComponents/ValidatorModel\";\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\";\nimport * as AuthApi from '../../../../api/auth.api';\nimport {openNotificationWithIcon} from '../../../../utils';\nimport { Spin } from 'antd';\nimport ValidatorModelForEmail from \"../../../../components/AuthComponents/ValidateModelForEMail\";\nimport mixpanel from 'mixpanel-browser';\nimport { useGTMDispatch } from '@elgorditosalsero/react-gtm-hook'\nimport { useSocket } from '../../../../context/socketContext';\n\nfunction TechRegister({ onNext, setShowProgress, setUserInfo, userInfo, setProgressBarPercentage, setRegister }) {\n  const registerRes = null;\n  const { setUserToken } = useAuth();\n  const [alertMessageEmail, setAlertMessageEmail] = useState(\"\");\n  const [alertRefMessageEmail, setAlertRefMessageEmail] = useState(\"\");\n\n  const [alertMessageFName, setAlertMessageFName] = useState(\"\");\n  const [alertMessageLName, setAlertMessageLName] = useState(\"\");\n  const [alertMessagePassword, setAlertMessagePassword] = useState(\"\");\n  const [alertMessagePhoneNumber, setAlertMessagePhoneNumber] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [boxChanged, setBoxChanged] = useState(false);\n  const [isPrivacyPolicyModalAvailable, setIsPrivacyPolicyModalAvaliable] =\n    useState(false);\n  const [privacyBoxChanged, setPrivacyBoxChanged] = useState(false);\n  const [isCookiesPolicyModalAvailable, setIsCookiesPolicyModalAvailable] =\n    useState(false);\n  const [pwModelVisible, setPwModelVisible] = useState(false);\n  const [emModelVisible, setEmModelVisible] = useState(false);\n  const [refModelVisible, setRefModelVisible] = useState(false);\n\n  const [alertMessagePhone, setAlertMessagePhone] = useState('');\n  const [dialCode,setDialCode] = useState(\"\")\n  const [isLoading,setIsLoading] = useState(false);\n  const sendDataToGTM = useGTMDispatch()\n  const { socket } = useSocket();\n  \n  useEffect(()=>{\n    setShowProgress(false)\n    setProgressBarPercentage(0)\n  },[])\n\n  useEffect(() => {\n    if (registerRes != null) {\n      setUserToken(registerRes);\n      window.location.reload();\n    }\n  }, [registerRes]);\n\n  const layout = {\n    labelCol: { span: 24 },\n    wrapperCol: { span: 24 },\n  };\n\n  // Functions for modal condition code\n  const handleCheck = () => {\n    console.log(\"boxChanged:::::\", boxChanged);\n    setBoxChanged(!boxChanged);\n  };\n\n  const handlePrivacyCheck = () => {\n    setPrivacyBoxChanged(!privacyBoxChanged);\n  };\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const showPrivacyModal = () => {\n    setIsPrivacyPolicyModalAvaliable(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleOkPrivacyModal = () => {\n    setIsPrivacyPolicyModalAvaliable(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const showCookiesModal = () => {\n    setIsCookiesPolicyModalAvailable(true);\n  };\n\n  const handleCancelPrivacyModal = () => {\n    setIsPrivacyPolicyModalAvaliable(false);\n  };\n  const handleCancelCookiesModal = () => {\n    setIsCookiesPolicyModalAvailable(false);\n  };\n\n  const handleOkCookiesModal = () => {\n    setIsCookiesPolicyModalAvailable(false);\n  };\n\n  const handleFirstName = async (e) => {\n    const re = /^[a-zA-Z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff-' ]*$/;\n    if (!re.test(String(e.target.value)))\n      setAlertMessageFName(\"No numbers or special characters are allowed.\");\n    else if (e.target.value && e.target.value.length > 30)\n      setAlertMessageFName(\"Maximum length is 30 characters.\");\n    else setAlertMessageFName(\"\");\n\n    // setFirstName(e.target.value);\n    setUserInfo({...userInfo, firstName: e.target.value})\n  };\n\n  const handleLastName = async (e) => {\n    const re = /^[a-zA-Z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff-' ]*$/;\n    if (!re.test(String(e.target.value)))\n      setAlertMessageLName(\"No numbers or special characters are allowed.\");\n    else if (e.target.value && e.target.value.length > 30)\n      setAlertMessageLName(\"Maximum length is 30 characters.\");\n    else setAlertMessageLName(\"\");\n\n    // setLastName(e.target.value);\n    setUserInfo({...userInfo,lastName:e.target.value})\n  };\n\n  const handleEmail = async (e) => {\n    let re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!re.test(e.target.value)) {\n      setAlertMessageEmail(\"Invalid Email type\")\n      setEmModelVisible(true);\n    }\n    else if (re.test(e.target.value)) {setEmModelVisible(false); setAlertMessageEmail(\"\")}\n    else if (e.target.value && e.target.value.length > 70) setAlertMessageEmail(\"Maximum length is 70 characters.\");\n    else setAlertMessageEmail(\"\");\n    // setEmail(e.target.value);\n    setUserInfo({...userInfo,email:e.target.value})\n  };\n  const handleEmailRefer = async (e) => {\n    let re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!re.test(e.target.value)) {\n      // setAlertRefMessageEmail(\"Invalid Email type\")\n      setRefModelVisible(true);\n    }\n    else if (re.test(e.target.value)) {setRefModelVisible(false); setAlertRefMessageEmail(\"\")}\n    else if (e.target.value && e.target.value.length > 70) setAlertRefMessageEmail(\"Maximum length is 70 characters.\");\n    else setAlertRefMessageEmail(\"\");\n    // setEmail(e.target.value);\n    setUserInfo({...userInfo,referred_code:e.target.value})\n  };\n  /**\n\t * Following function is to handle change of phone number field in the form.\n\t * @author : Vinit\n\t */\n   const handlePhoneNumber = (value, data) => {\n    setDialCode(data.dialCode)\n    setUserInfo({...userInfo,phoneNumber:value.includes(\"+\") ? value : \"+\"+value})\n  };\n\n  const onSignUp = async (value) => {\n     let trimmedFname = userInfo.firstName.trim()\n    // if(boxChanged && privacyBoxChanged){\n      let trimmedLname= userInfo.lastName.trim();\n      if(trimmedFname===\"\"){\n          return setAlertMessageFName(\"First name is mandatory.\");\n      }\n\t\t\tif(trimmedFname.split(\" \").length > 1){\n\t\t\t\treturn setAlertMessageFName(\"No empty space allowed in First Name.\")\n\t\t\t}\n\n\t\t\tif(trimmedLname.split(\" \").length > 1){\n\t\t\t\treturn setAlertMessageLName(\"No empty space allowed in Last Name.\")\n\t\t\t}\t\n      \n      if(trimmedLname===\"\"){\n          return setAlertMessageLName(\"Last name is mandatory.\");\n      }\n\n      if(alertMessageEmail.length > 0  || alertMessagePassword.length > 0) return;\n      \n      \n      if(userInfo.email===\"\"){\n          return setAlertMessageEmail(\"Email is mandatory.\");\n      }\n    //   if(userInfo.referred_code===\"\"){\n    //     return setAlertRefMessageEmail(\"Email is mandatory.\");\n    // }\n    \n      if(userInfo.password===\"\"){\n          return setAlertMessagePassword(\"Password is mandatory.\");\n      }\n\n      if(userInfo.phoneNumber ===  \"\" || userInfo.phoneNumber.length === (dialCode.length+1)){\n        return setAlertMessagePhoneNumber(\"Phone number is mandatory\")\n      }else if((userInfo.phoneNumber.length) < (10 + dialCode.length)){ \n        return setAlertMessagePhoneNumber(\"Invalid phone number!\")\n      }else setAlertMessagePhoneNumber(\"\")\n      const emailChecked = await AuthApi.checkEmail({ email:userInfo.email });\n      \n      if(emailChecked.success){\n        \n        setIsLoading(true)\n\n        let techRegisterRes  = await AuthApi.register({\n              firstName: userInfo.firstName.replace(/\\s/g, ''), \n              lastName: userInfo.lastName.replace(/\\s/g, ''), \n              email:userInfo.email, \n              password:userInfo.password, \n              confirm_password:userInfo.password, \n              phoneNumber: userInfo.phoneNumber ,\n              userType:'technician' ,\n              referred_code:userInfo.referred_code\n            })\n        \n        localStorage.setItem(\"tetch_token\",techRegisterRes.token.accessToken)\n        // setRegister(techRegisterRes.user)\n        console.log(\"My console for techRegisterRes\", techRegisterRes)\n        if(techRegisterRes.user){\n          let dataToSend = {\n            tagName: \"techOnboard\",\n            technicianObject: techRegisterRes.user\n          }\n          socket.emit(\"send-GTM-tag-tech-onboard\", dataToSend)\n          // mixpanel code//\n          mixpanel.identify(techRegisterRes.user.email);\n          mixpanel.track('Technician - signup successfull');\n          // mixpanel code//\n          \n          // Sending GA4 tag\n          sendDataToGTM({ \n                          event: 'tech_registration',\n                          tech_id: techRegisterRes.user.technician.id, \n                          environment: process.env.REACT_APP_URL.split(\"/\")[2] \n                        })\n\n          setRegister(techRegisterRes.user)\n          openNotificationWithIcon('success', 'Success', 'Technician registered successfully.') ;  \n          setIsLoading(false)\n          onNext()\n        }\n        \n      }else{\n        openNotificationWithIcon('error', 'Error', 'Email already registered.') ;  \n      }\n    // }else{\n    //   openNotificationWithIcon('error', 'Error', 'Please accept both policies and terms & conditions to create an ccount.') ;\n    // }\n      \n  }\n\n\n  return (\n    <Container className=\"tech-signup-page\">\n      <Modal\n        title=\"Terms & Conditions\"\n        className=\"app-confirm-modal\"\n        closable={false}\n        footer={[\n          <button\n            className=\"btn app-btn\"\n            key=\"submit\"\n            type=\"primary\"\n            onClick={handleCancel}\n          >\n            Close\n          </button>,\n        ]}\n        visible={isModalVisible}\n        onOk={handleOk}\n      >\n        {TermsCondition()}\n      </Modal>\n\n      <Modal\n        title=\"Privacy Policy\"\n        className=\"app-confirm-modal\"\n        closable={false}\n        footer={[\n          <button\n            className=\"btn app-btn\"\n            key=\"submit\"\n            type=\"primary\"\n            onClick={handleCancelPrivacyModal}\n          >\n            Close\n          </button>,\n        ]}\n        visible={isPrivacyPolicyModalAvailable}\n        onOk={handleOkPrivacyModal}\n      >\n        {privacyPolicy()}\n      </Modal>\n\n      <Modal\n        title=\"Cookies Policy\"\n        className=\"app-confirm-modal\"\n        closable={false}\n        footer={[\n          <button\n            className=\"btn app-btn\"\n            key=\"submit\"\n            type=\"primary\"\n            onClick={handleCancelCookiesModal}\n          >\n            Close\n          </button>,\n        ]}\n        visible={isCookiesPolicyModalAvailable}\n        onOk={handleOkCookiesModal}\n      >\n        {cookiePolicy()}\n      </Modal>\n\n      <div>\n        <HeadingAndSubHeading\n          heading={\"Apply to be a Geek!\"}\n          subHeading={\"Imagine using your tech smarts to make a great salary, on your own terms. You\u2019ll be your own boss, and work from wherever you are, whenever you want. At Geeker, we\u2019re looking for talented technicians like you, to help you make this into your reality (while helping others too!)\"}\n        />\n        {/* <Form className=\"tech-signup-form\" onFinish={onNext} {...layout}> */}\n        <Form className=\"tech-signup-form\" onFinish={onSignUp} {...layout}>\n          <FormSectionContainer className=\"tech-signup-form-section-contaier tech-signup-name-container\">\n            <Col className=\"tech-signup-name-container-inside tech-signup-column\">\n              <FormItem\n                name=\"firstName\"\n                label=\"First Name\"\n                className=\"mt-3 mb-1\"\n              >\n                <TextInput\n                  name=\"firstName\"\n                  placeholder=\"First Name\"\n                  value={userInfo.firstName}\n                  type=\"text\"\n                  className=\"tech-signup-input-field\"\n                  onChange={handleFirstName}\n                />\n              </FormItem>\n              {(alertMessageFName !== \"\" || alertMessageLName !== \"\") && (\n                <div className=\"tech-signup-error-message\">\n                  {alertMessageFName !== \"\" && (\n                    <div className=\"input-error-msg\">{alertMessageFName}</div>\n                  )}\n                </div>\n              )}\n            </Col>\n            <Col className=\"tech-signup-name-container-inside tech-signup-column\">\n              <FormItem\n                name=\"lastName\"\n                label=\"Last Name\"\n                className=\"mt-3 mb-1\"\n                // className={\n                //   \"mt-3 mb-1\" +\n                //   (alertMessageLName !== \"\" ? \" red-border-bottom-input\" : \"\")\n                // }\n              >\n                <TextInput\n                  name=\"lastName\"\n                  placeholder=\"Last Name\"\n                  type=\"text\"\n                  value={userInfo.lastName}\n                  className=\"tech-signup-input-field\"\n                  onChange={handleLastName}\n                />\n              </FormItem>\n              {(alertMessageFName !== \"\" || alertMessageLName !== \"\") && (\n                <div className=\"tech-signup-error-message\">\n                  {alertMessageLName !== \"\" && (\n                    <div className=\"input-error-msg\">{alertMessageLName}</div>\n                  )}\n                </div>\n              )}\n            </Col>\n          </FormSectionContainer>\n\n          <FormSectionContainer className=\"tech-signup-form-section-contaier\">\n            <Col className=\"tech-signup-column tech-signup-other-container\">\n              <FormItem\n                name=\"email\"\n                label=\"Email\"\n                className=\"mt-3 mb-1\" \n                // className={\n                //   \"mt-3 mb-1\" +\n                //   (alertMessageEmail !== \"\" ? \" red-border-bottom-input\" : \"\")\n                // }\n              >\n                <TextInput\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  type=\"email\"\n                  // width=\"428px\"\n                  value={userInfo.email}\n                  className=\"tech-signup-input-field\"\n                  onChange={handleEmail}\n                  onBlur={() => setEmModelVisible(false)}\n                />\n\n                <ValidatorModelForEmail visible={emModelVisible} height=\"90px\"  >\n                  <p style={{ fontSize: \"15px\", margin: 0 }}>\n                    Please enter a Valid email!\n                  </p>\n                </ValidatorModelForEmail>\n              </FormItem>\n              {alertMessageEmail !== \"\" && (\n                <div className=\"input-error-msg\">{alertMessageEmail}</div>\n              )}\n\n               <FormItem name=\"password\" label=\"Password\" className=\"mt-3 mb-1\">\n                <PasswordInput\n                  name=\"Password\"\n                  placeholder=\"Password\"\n                  type=\"password\"\n                  // width='428px'\n                  className=\"tech-signup-input-field\"\n                  onFocus={() => setPwModelVisible(true)}\n                  onBlur={() => setPwModelVisible(false)}\n                  value={userInfo.password}\n                  onChange={(e) => {setUserInfo({...userInfo, password: e.target.value})\n                  }}\n                  // value={userInfo.password}\n                  // onChange={(e) => setPassword(e.target.value)}\n                />\n                <ValidatorModel  visible={pwModelVisible}>\n                  <PasswordValidator inputText={userInfo.password} setAlertMessagePassword={setAlertMessagePassword} />\n                </ValidatorModel>\n              </FormItem>\n              {alertMessagePassword !== \"\" && (\n                <div className=\"input-error-msg\">{alertMessagePassword}</div>\n              )}\n              <Col className=\"mt-3\">\n                            <FormItem\n                                name=\"phonenumber\"\n                                label=\"Phone Number\"\n                                className=\"phn-num-font mb-1\"\n                                >\n                                    <PhoneInput \n                                        value={userInfo.phoneNumber} \n                                        countryCodeEditable={false} \n                                        onChange={handlePhoneNumber} \n                                        country=\"us\" \n                                        onlyCountries={['in', 'gr', 'us', 'ca', 'gb', 'ph', 'il']}\n                                        className=\"phn-input-tech-sign-up\"\n                                        />\n\n                                    {alertMessagePhone !== '' &&\n                                        <div className=\"input-error-msg\">{alertMessagePhone}</div>\n                                      }\n                            </FormItem>\n                            {alertMessagePhoneNumber !== \"\" && (\n                              <div className=\"input-error-msg\">{alertMessagePhoneNumber}</div>\n                            )}\n                            <FormItem\n                              name=\"refrred\"\n                              label=\"Referred By\"\n                              className=\"mt-3 mb-1\"\n                            // className={\n                            //   \"mt-3 mb-1\" +\n                            //   (alertMessageEmail !== \"\" ? \" red-border-bottom-input\" : \"\")\n                            // }\n                            >\n                              <TextInput\n                                name=\"refrred\"\n                                placeholder=\"Referral's Email (optional)\"\n                                type=\"email\"\n                                value={userInfo.referred_code}\n                                className=\"tech-signup-input-field\"\n                                onChange={handleEmailRefer}\n                                onBlur={() => setRefModelVisible(false)}\n                              />\n\n                              <ValidatorModelForEmail visible={refModelVisible} height=\"90px\"  >\n                                <p style={{ fontSize: \"15px\", margin: 0 }}>\n                                  Please enter a Valid email!\n                                </p>\n                              </ValidatorModelForEmail>\n                            </FormItem>\n                            {alertRefMessageEmail !== \"\" && (\n                <div className=\"input-error-msg\">{alertRefMessageEmail}</div>\n              )}\n              </Col>\n          </Col>\n          </FormSectionContainer>\n\n          <FormSectionContainer className=\"tech-signup-form-section-contaier\">\n            <Col className=\"text-center mt-4\">\n              <TerminaryRow>\n                <Col className=\"d-flex align-items-center mb-3\">\n                  <label\n                    className=\"ml-2 tech-signup-check-container\"\n                    htmlFor=\"terms&condtion\"\n                    style={{ fontSize: \"15px\", fonrWeight: \"400\", margin: 0 }}\n                  >\n                    {/* <input\n                      type=\"checkbox\"\n                      id=\"terms&condtion\"\n                      onChange={handleCheck}\n                      defaultChecked={boxChanged}\n                      className=\"tech-signup-checkbox\"\n                      style={{\n                        width: \"24px\",\n                        height: \"24px\",\n                        border: \"2px solid #2F3F4C\",\n                      }}\n                    /> */}\n                    <span className=\"tech-signup-checkmark\"></span>By Signing up I agree to\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                      onClick={(e) => { e.preventDefault(); showModal(); }}\n                    >\n                      {\" \"}\n                      Terms & Condtions\n                    </a>\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                      onClick={(e) => { e.preventDefault(); showPrivacyModal(); }}\n                    >\n                      {\" \"}\n                      Privacy Policy\n                    </a>{\" \"}\n                    &{\" \"}\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                      onClick={(e) => { e.preventDefault(); showCookiesModal(); }}\n                    >\n                      Cookies Policy\n                    </a>\n                  </label>\n                </Col>\n                {/* <Col className=\"d-flex align-items-center\">\n                  <label\n                    className=\"ml-2 tech-signup-check-container\"\n                    htmlFor=\"privacy&cookies\"\n                    style={{ fontSize: \"15px\", fontWeight: \"400\", margin: 0 }}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      id=\"privacy&cookies\"\n                      onChange={handlePrivacyCheck}\n                      defaultChecked={privacyBoxChanged}\n                      className=\"tech-signup-checkbox\"\n                      style={{\n                        width: \"24px\",\n                        height: \"24px\",\n                        border: \"2px solid #2F3F4C\",\n                      }}\n                    />\n                    <span className=\"tech-signup-checkmark\"></span>I agree to\n                    the\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                      href=\"javascript:void(0)\"\n                      onClick={showPrivacyModal}\n                    >\n                      {\" \"}\n                      Privacy Policy\n                    </a>{\" \"}\n                    &{\" \"}\n                    <a\n                      style={{ color: \"#01D4D5\" }}\n                      href=\"javascript:void(0)\"\n                      onClick={showCookiesModal}\n                    >\n                      Cookies Policy\n                    </a>\n                  </label>\n                </Col> */}\n              </TerminaryRow>\n            </Col>\n          </FormSectionContainer>\n\n          <FormSectionContainer className=\"tech-signup-form-section-contaier\">\n            <Col className=\"text-center mt-5 \"></Col>\n          </FormSectionContainer>\n\n          <FormSectionContainer className=\"tech-signup-form-section-contaier tech-signup-btn-container\">\n            <Col>\n              <label\n                style={{ color: \"#708390\", fontSize: \"15px\", margin: 0 }}\n                htmlFor=\"Signin\"\n              >\n                {\" \"}\n                Already have an account{\" \"}\n                <Link to=\"/login\" style={{ color: \"#01D4D5\" }}>\n                  Sign In\n                </Link>\n              </label>\n            </Col>\n            <Col className=\"create-account-btn\">\n              <Button htmltype=\"submit\" className=\"app-btn\" type=\"primary\" disabled={isLoading} >\n                <span></span>\n                {(isLoading \n                    ?\n                    <Spin className=\"spinner\"/>\n                    :\n                    <>Create Account</>\n                )}\n              </Button>\n            </Col>\n          </FormSectionContainer>\n        </Form>\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled(Col)`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst FormSectionContainer = styled(Row)`\n  width: 100%;\n  margin-bottom: none;\n\n  @media screen and (max-width: 763px) {\n    //   display:block !important;\n    .ant-col-12 {\n      width: 100% !important;\n      max-width: none !important;\n    }\n  }\n`;\n\nconst TerminaryRow = styled(Row)`\n  display: flex !important;\n  flex-direction: column !important;\n  align-items: baseline !important;\n  align-content: center !important;\n  @media screen and (max-width: 763px) {\n    display: block !important;\n    .ant-col-12 {\n      width: 100% !important;\n      max-width: none !important;\n    }\n  }\n`;\n\nexport default TechRegister;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\techRegister.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "techSignup.js",
                                                                    "fileData": "import React, { useEffect, useState } from 'react';\nimport {\n  Row, Col, Form,Modal\n} from 'antd';\nimport styled from 'styled-components';\nimport { FormattedMessage } from 'react-intl';\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'react-phone-number-input';\nimport PhoneInput from 'react-phone-input-2';\nimport { StepTitle } from './style';\nimport messages from '../messages';\n// import RightImage from '../../../../assets/images/tech_signup.png';\nimport FormItem from '../../../../components/FormItem';\n// import StepButton from '../../../../components/StepButton';\nimport {Button} from 'react-bootstrap';\nimport AuthInput from '../../../../components/AuthLayout/Input';\nimport AuthInputPassword from '../../../../components/AuthLayout/InputPassword';\nimport * as AuthApi from '../../../../api/auth.api';\n// import { openNotificationWithIcon } from '../../../../utils';\nimport Link from 'components/AuthLayout/Link';\n// import 'react-phone-input-2/lib/style.css';\nimport { Select } from 'antd';\nimport {languages} from   '../../../../constants';\nimport mixpanel from 'mixpanel-browser';\nimport $ from 'jquery';\nimport {privacyPolicy} from '../../../../policy-pages/privacy-policy';\nimport {cookiePolicy} from '../../../../policy-pages/cookie-policy';\nimport {TermsCondition} from '../../../../policy-pages/conditions';\nimport {useAuth} from  '../../../../context/authContext';\nimport TimezoneSelect, { allTimezones } from \"react-timezone-select\";\nimport {openNotificationWithIcon} from '../../../../utils'\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport Cookies from 'js-cookie';\nimport {useTools} from '../../../../context/toolContext';\nconst { Option } = Select;\n\nfunction TechSignup({\n  onNext, \n  userInfo, \n  setUserInfo, \n  setTechnicianRate,\n  setLanguage,\n  language,\n  technicianRate,\n  setAdditionalLanguage,\n  additionalLanguage,\n  timezone,\n  setTimezoneValue,\n  verificationEmailHandler,\n  setRegisterRes,\n  register,\n  setRegister,\n  certifiedIn,\n  setCertifiedIn\n}) {\n\n    // const [showError,setshowError] = useState(false)\n    // const [registerRes, setRegisterRes] = useState(null);\n    const registerRes = null;\n    const { setUserToken } = useAuth();\n    const [alertMessagePhone, setAlertMessagePhone] = useState('');\n    const [alertMessageEmail,setAlertMessageEmail] = useState('');\n    const [alertMessageLanguage,setAlertMessageLanguage] = useState('');\n    const [alertMessageTimezone,setAlertMessageTimezone] = useState('');\n    const [alertMessageAdditionalLanguage, setAlertMessageAdditionalLanguage] = useState('')\n    // const [boxChanged,setBoxChanged] = useState(false);\n    // const [openTermsCondition,setOpenTermsCondition] = useState(true);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const {getCountryCategory} = useTools();\n    const [boxChanged,setBoxChanged] = useState(false);\n    // const [openTermsCondition,setOpenTermsCondition] = useState(true);\n    const [isPrivacyPolicyModalAvailable,setIsPrivacyPolicyModalAvaliable] = useState(false)\n    // const [createButtonDisabled, setCreateButtonDisabled] = useState(false);\n    const [privacyBoxChanged,setPrivacyBoxChanged] = useState(false)\n    const [isCookiesPolicyModalAvailable,setIsCookiesPolicyModalAvailable] = useState(false)\n    \n    \n  \n    useEffect(()=>{\n        if(registerRes != null){\n            setUserToken(registerRes)\n            window.location.reload()\n            // history.push(\"/\")\n        }\n    },[registerRes])\n\n\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const layout = {\n        labelCol: { span: 24 },\n        wrapperCol: { span: 24 },\n    };\n\n\n    // Functions for modal condition code\n    const handleCheck = ()=>{\n        console.log(\"i am in\")\n        console.log(\"boxChanged:::::\",boxChanged) \n        setBoxChanged(!boxChanged)\n    }\n\n    const handlePrivacyCheck = ()=>{\n        setPrivacyBoxChanged(!privacyBoxChanged)\n    }\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const showPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(true);\n    };\n\n    const handleOk = () => {\n        setIsModalVisible(false);\n    };\n\n    const handleOkPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(false);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const showCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(true);\n    }\n\n    const handleCancelPrivacyModal = () => {\n        setIsPrivacyPolicyModalAvaliable(false);\n    }\n    const handleCancelCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(false)\n    }\n\n    const handleOkCookiesModal = ()=>{\n        setIsCookiesPolicyModalAvailable(false)\n    }  \n\n\n    //code for modals ended here\n\n    /*const handleCheck = ()=>{\n        setBoxChanged(!boxChanged)\n    }*/\n\n    /*const handleOpenTermsCondition = async()=>{\n        setOpenTermsCondition(!openTermsCondition)\n    }*/\n    const [form] = Form.useForm();\n    // const useDefaultPhoneInputProps = () => {\n    //   const [value, setValue] = useState('')\n    //   return {\n    //     placeholder: 'Enter phone number',\n    //     value: value,\n    //     onChange: HandlePhoneNumber,\n    //     // Test with this commented out as well:\n    //     country: \"US\",\n    //   }\n    // }\n    useEffect(() => {\n        form.setFieldsValue({\n            ...userInfo,\n        });\n    }, [form, userInfo]);\n    \n    const HandlePhoneNumber = (e) => {\n        setPhoneNumber(`+${e}`);\n        setAlertMessagePhone(\"\");\n        setAlertMessageEmail(\"\");\n        setAlertMessageLanguage(\"\");\n        setAlertMessageAdditionalLanguage(\"\");\n        setAlertMessageTimezone(\"\")\n    };\n\n    // const handleNext = ()=>{\n    //   onNext()\n    // }\n\n    const onSignUp = async (value) => {\n        // console.log(\"Tech profile\", value);\n        const res = await AuthApi.checkEmail({ email: value.email });\n\n        if (isPossiblePhoneNumber(phoneNumber) === false && isValidPhoneNumber(phoneNumber) === false) {\n            // return (openNotificationWithIcon('error', 'Error', 'Phone Number Not Valid'));\n            setAlertMessagePhone(\"Phone Number Not Valid\")\n            return false;\n        }\n         // console.log(\"language\",language)\n        if(!language || language === ''){\n            // return openNotificationWithIcon('error', 'Error', 'Language field required');\n            setAlertMessageLanguage(\"Language field required\")\n            return false;\n        }\n        // console.log(\"language\",language)\n         // console.log(\"additionalLanguage\",additionalLanguage)\n        // console.log(\"language == additionalLanguage\",language == additionalLanguage)\n        if(language && additionalLanguage && language === additionalLanguage){\n            setAlertMessageAdditionalLanguage(\"Language and Additional Language should not be same.\")\n            openNotificationWithIcon('error', 'Error', 'Language and Additional Language should not be same.') ;\n            return false;\n        }\n\n        if(!timezone || timezone === ''){\n            // return openNotificationWithIcon('error', 'Error', 'Language field required');\n            setAlertMessageTimezone(\"Timezone field required\")\n            return false;\n        }\n        /*if(!boxChanged){\n             openNotificationWithIcon('error', 'Error', 'Please accept terms & Conditions') ;\n             return;\n        }*/\n        // boxChanged\n        if (res.success) {\n            \n            value.phonenumber = phoneNumber;\n            setTechnicianRate(value.technicianRate);\n            delete value.technicianRate;\n            console.log(\"value ::::::::\",value);\n            setUserInfo(value);\n            if(!boxChanged){\n            openNotificationWithIcon('error', 'Error', 'Please accept terms & Conditions');\n            return ;      \n            }\n            if(!privacyBoxChanged){\n                openNotificationWithIcon('error', 'Error', 'Please accept Cookie Policy');\n                return ;      \n            }\n\n            const result =  AuthApi.register({ ...value, confirm_password: value.password, userType: 'technician',timezone:timezone});\n            \n            result.then(async (res)=>{\n                console.log(\"res regi is \",res)\n                if(res && res.user){\n                    register = res.user;\n                    \n                    if(register){\n                        Cookies.set('user_id',res?.user?.id ,{\"path\":'/',\"domain\":process.env.REACT_APP_COOKIE_DOMAIN})\n                        verificationEmailHandler({email:register.email})\n                        let category = getCountryCategory(timezone)\n                        await TechnicianApi.createTechnician({\n                            user: res.user.id,\n                            profile: { confirmId: { phoneNumber: value.phonenumber } },\n                            language : language,\n                            additionalLanguage : additionalLanguage,\n                            registrationStatus : \"softwares\",\n                            commissionCategory:category,\n                            promo_code : (`${res.user.firstName}${res.user.lastName}`).replace(/ /g,'').toLocaleUpperCase(),\n                            tag:'signedUp'\n                        });\n                        console.log(\"techDetails :::::::::: \",register);\n                        openNotificationWithIcon(\n                            'success',\n                            'Success',\n                            'You have signed up successfully',\n                        );\n                        setRegister(register);\n                        console.log(\"tech:::::::::::: \", register.id);\n                        //setOpenModal(true)\n                        \n                        // if(value){\n                        //     // mixpanel code//\n                        // mixpanel.identify(value.email);\n                        // mixpanel.track('Technician - signup successfull');\n                        // }\n                        setRegisterRes(res);\n                    }  \n\n                }else{\n\n                    if(res.success !== undefined){                        \n                        let errorMsg = (res.message ? res.message : '')\n                        openNotificationWithIcon(\n                            'error',\n                            'Error',\n                            errorMsg,\n                        );\n                        mixpanel.identify(value.email);\n                        mixpanel.track('Technician - signup failed.'+errorMsg);\n                    }\n\n                    \n                }\n            });\n            // mixpanel code//\n      \n        } else {\n            // openNotificationWithIcon('error', 'Error', 'Email address already exists');\n            setAlertMessageEmail(\"Email address already exists\")\n            return false;\n        }\n    };\n\n    useEffect(() => {\n        setTimeout(function(){\n            var inputWidth = $(\".first-name-input\").width();\n            if(inputWidth){\n                $(\".language-select\").css({\"width\":(inputWidth+12)+'px'})\n            }\n        },100)\n    }, []);\n\nconsole.log(\" :::::::option ::::::::::\", Option);\n    return (\n       \n        <Container className=\"tech-register-page\">\n\n         <Modal title=\"Terms & Conditions\"  className=\"app-confirm-modal\" closable={false}  footer={[\n                <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancel}>\n                    Close\n                </button>\n            ]} visible={isModalVisible} onOk={handleOk} >\n            {TermsCondition()}\n            \n        </Modal>\n\n        <Modal title=\"Privacy Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n                <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelPrivacyModal}>\n                    Close\n                </button>\n            ]} visible={isPrivacyPolicyModalAvailable} onOk={handleOkPrivacyModal} >\n            {privacyPolicy()}\n        </Modal>\n\n        <Modal title=\"Cookies Policy\"  className=\"app-confirm-modal\" closable={false}  footer={[\n                <button className=\"btn app-btn\" key=\"submit\" type=\"primary\" onClick={handleCancelCookiesModal}>\n                    Close\n                </button>\n            ]} visible={isCookiesPolicyModalAvailable} onOk={handleOkCookiesModal} >\n            {cookiePolicy()}\n        </Modal>\n\n            <StepTitle><p>Apply to be a Geek</p></StepTitle>\n            <div className=\"center\">       \n                <Form className=\"items-center \" form={form} onFinish={onSignUp} {...layout}>\n                    <FormSectionContainer span={24} gutter={16}>\n                        <Col span={12}>\n                            <FormItem\n                                name=\"firstName\"\n                                label=\"First Name *\"\n                                className = \"mt-3 mb-1\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: <FormattedMessage {...messages.firstName} />,\n                                    },\n                                    () => ({\n                                        validator(_, value) {\n                                            const re = /^[a-zA-Z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff-' ]*$/;\n                                            if (!re.test(String(value))) {\n                                                return Promise.reject(\n                                                    new Error(\n                                                        'No numbers or special characters are allowed.',\n                                                    ),\n                                                );\n                                            }\n                                            if (value && value.length > 30) {\n                                                return Promise.reject(\n                                                    new Error('Maximum length is 30 characters.'),\n                                                );\n                                            }\n                                            return Promise.resolve();\n                                        },\n                                    }),\n                                ]}\n                            >\n                                <AuthInput\n                                    name=\"firstName\"\n                                    size=\"large\"\n                                    placeholder=\"First Name\"\n                                    border=\"none\"\n                                    borderbottom = \"2px solid #B2B7BC\"\n                                    border_radius=\"0px\"\n                                    className=\"first-name-input pl-0\"\n                                />\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem\n                                name=\"lastName\"\n                                label=\"Last Name *\"\n                                className = \"mt-3 mb-1\"                            \n                                rules={[\n                                    {\n                                        required: true,\n                                        message: <FormattedMessage {...messages.lastName} />,\n                                    },\n                                    () => ({\n                                        validator(_, value) {\n                                            const re = /^[a-zA-Z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff-' ]*$/;\n                                            if (!re.test(String(value))) {\n                                                return Promise.reject(\n                                                    new Error(\n                                                        'No numbers or special characters are allowed.',\n                                                    ),\n                                                );\n                                            }\n                                            if (value && value.length > 30) {\n                                                return Promise.reject(\n                                                    new Error('Maximum length is 30 characters.'),\n                                                );\n                                            }\n                                            return Promise.resolve();\n                                        },\n                                    }),\n                                ]}\n                            >\n                                <AuthInput\n                                    name=\"lastName\"\n                                    size=\"large\"\n                                    placeholder=\"Last Name\"\n                                    border=\"none\"\n                                    borderbottom = \"2px solid #B2B7BC\"\n                                    border_radius=\"0px\"\n                                    className=\"pl-0\"\n                                />\n                            </FormItem>\n                        </Col>\n                    </FormSectionContainer>\n              \n                    <FormSectionContainer span={24} gutter={16}>\n                        <Col span={12}>\n                            <FormItem\n                                name=\"email\"\n                                label=\"Email *\"\n                                className = {\"mt-3 mb-1\" + (alertMessageEmail !== '' ? ' red-border-bottom-input' : '')}\n                                rules={[\n                                    {\n                                        type: 'email',\n                                        message: <FormattedMessage {...messages.emailVail} />,\n                                    },\n                                    {\n                                        required: true,\n                                        message: <FormattedMessage {...messages.email} />,\n                                    },\n                                    () => ({\n                                        validator(_, value) {\n                                            if (value && value.length > 70) {\n                                                return Promise.reject(\n                                                    new Error('Maximum length is 70 characters.'),\n                                                );\n                                            }\n                                            return Promise.resolve();\n                                        },\n                                    }),\n                                ]}\n                            >\n                                <AuthInput name=\"email\" size=\"large\" placeholder=\"Email\"  border=\"none\"\n                                    borderbottom = \"2px solid #B2B7BC\"\n                                    autoComplete=\"off\"\n                                    border_radius=\"0px\" \n                                    className=\"pl-0\"\n                                />\n\n                            </FormItem>\n                            {alertMessageEmail !== '' &&\n                                <div className=\"input-error-msg\">{alertMessageEmail}</div>\n                            }\n                            \n                            \n                            <FormItem\n                                name=\"password\"\n                                label=\"Password *\"\n                                className = \"mt-3 mb-1\"\n                                rules={[\n                                    () => ({\n                                        validator(_, value) {\n                                            const re = /^(?=.*[a-z])(?=.*[0-9])(?=.*[\\^$*.[\\]{}()?\\-\u201c!@#%&/,><\u2019:;|_~`])\\S{6,99}$/;\n                                            if (!re.test(String(value))) {\n                                                return Promise.reject(\n                                                    new Error(\n                                                        'Passwords must include at least six numbers, letters, and special characters (like ! and &).',\n                                                    )\n                                                );\n                                            }\n                                            return Promise.resolve();\n                                        },\n                                    }),\n                                ]}\n                            >\n                                <AuthInputPassword\n                                    name=\"password\"\n                                    size=\"large\"\n                                    placeholder=\"Password\"\n                                    border=\"none\"\n                                    borderbottom = \"2px solid #B2B7BC\"\n                                    border_radius=\"0px\"\n                                    autocomplete=\"off\"\n                                />\n                            </FormItem>\n                        </Col>\n                        \n                        <Col span={12}>\n                            \n                            <FormItem\n                                name=\"language\"\n                                label=\"Language *\" \n                                className = \"mt-4 mb-1\"\n                                initialValues= \"English\"\n                            >\n                                <LanguageSelect\n                                    showSearch\n                                    style={{ width: 200 }}\n                                    defaultValue='English'\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                    onChange = {(value,option)=>{\n                                        \n                                        setAlertMessageLanguage(\"\")\n                                        if(option.children && option.children === additionalLanguage){\n                                            setAlertMessageLanguage(\"Language and Additional Language should not be same.\")\n                                        }\n                                        setLanguage(option.children)\n                                        \n                                    }}\n                                    filterSort={(optionA, optionB) =>\n                                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                    }\n                                    className = {\"language-select\"+ (alertMessageLanguage !== '' ? ' red-border-bottom-input' : '')}\n               \n                                >\n                                    {languages.map((item,index)=>{\n                                        return <Option value={index}>{item[0]}</Option>\n                                    })}\n                                </LanguageSelect>  \n\n                            </FormItem>\n                            {alertMessageLanguage !== '' &&\n                                <div className=\"input-error-msg\">{alertMessageLanguage}</div>\n                            }\n                            { /*showError ?<p className=\"error-msg\">Language Required</p> :\"\"*/}\n\n                            <FormItem\n                                name=\"additionalLanguage\"\n                                label=\"Additional Language\" \n                                className = \"mt-4 mb-1\"\n                                initialValues= \"English\"\n                            >\n                                <AdditionalLanguageSelect\n                                    showSearch\n                                    style={{ width: 200 }}\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                    onChange = {(value,option)=>{\n                                        let allAdditionalLanguage = [];\n                                        setAlertMessageAdditionalLanguage(\"\")\n                                        if(option.children && option.children === additionalLanguage){\n                                            setAlertMessageAdditionalLanguage(\"Language and Additional Language should not be same.\")\n                                        }\n                                        option.forEach(element => {\n                                            allAdditionalLanguage.push(element.children)\n                                        });\n                                        setAdditionalLanguage(allAdditionalLanguage)\n                                        \n                                    }}\n                                    filterSort={(optionA, optionB) =>\n                                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                    }\n                                    className = {\"language-select\"+ (alertMessageAdditionalLanguage !== '' ? ' red-border-bottom-input' : '')}\n                                    mode=\"multiple\"\n                                >\n                                    {languages.map((item,index)=>{\n                                        return <Option value={index}>{item[0]}</Option>\n                                    })}\n                                </AdditionalLanguageSelect>  \n\n                            </FormItem>\n                            {alertMessageAdditionalLanguage !== '' &&\n                                <div className=\"input-error-msg\">{alertMessageAdditionalLanguage}</div>\n                            } \n                            \n                            \n                        </Col>\n\n                    </FormSectionContainer>\n                    <FormSectionContainer span={24} gutter={16}>\n                        <Col span={12} className=\"timezone-input mt-3\">\n                            <FormItem\n                                name=\"phonenumber\"\n                                label=\"Phone Number *\"\n                                className = {\"mt-3 mb-1 suffix\"+ (alertMessagePhone !== '' ? ' red-border-bottom-input' : '')}\n                                \n                            >\n                                <InputWithLabel background={\"#EDF4FA\"}>\n                                    <PhoneInput \n                                        value={phoneNumber} \n                                        countryCodeEditable={false} \n                                        onChange={HandlePhoneNumber} \n                                        country=\"us\" \n                                        onlyCountries={['in', 'gr', 'us', 'ca']}\n                                    />\n\n                                    {alertMessagePhone !== '' &&\n                                        <div className=\"input-error-msg\">{alertMessagePhone}</div>\n                                    }\n                                </InputWithLabel>\n                            </FormItem>\n                        </Col>\n                        <Col span={12} className=\"timezone-input mt-3\">\n                            <div className=\"ant-col ant-col-24 ant-form-item-label\">\n                                <label for=\"tech-timezone\" className=\"\" title=\"Timezone *\">Timezone *</label>\n                            </div>\n                            <TimezoneSelect\n                                value={timezone}\n                                onChange={setTimezoneValue}\n                                timezones={{\n                                    ...allTimezones\n                                }}\n                                className = \"mb-1 pl-0\"\n                                id=\"tech-timezone\"\n                            />\n                            {alertMessageTimezone !== '' &&\n                                <div className=\"input-error-msg\">{alertMessageTimezone}</div>\n                            }\n                        </Col>\n                        \n                    </FormSectionContainer>\n\n                    <FormSectionContainer span={24} gutter={16}>\n                            <Col span={21} className=\"text-center mt-5 \">\n                                <TerminaryRow>\n                                    <Col span={12}>\n                                        <input type=\"checkbox\" id=\"terms&condtion\" onChange={handleCheck}  defaultChecked={boxChanged}/> \n                                        <label className=\"ml-2\" htmlFor=\"terms&condtion\"> I agree to the <a href=\"javascript:void(0)\" onClick={ showModal}>Terms & Condtions</a> </label>\n                                    </Col>\n                                      <Col span={12} >\n                                        <input type=\"checkbox\" id=\"privacy&cookies\" onChange={handlePrivacyCheck}  defaultChecked={privacyBoxChanged}/> \n                                        <label className=\"ml-2\" htmlFor=\"privacy&cookies\"> I agree to the <a href=\"javascript:void(0)\" onClick={ showPrivacyModal}>Privacy Policy</a>  & <a href=\"javascript:void(0)\" onClick={ showCookiesModal}>Cookies Policy</a> </label>\n                                      </Col>\n\n                                </TerminaryRow>\n                               \n                            </Col>\n\n                    </FormSectionContainer>\n\n                    <FormSectionContainer span={24} gutter={16}>\n                            <Col span={21}  className=\"text-center mt-2 \">\n                                    \n                            </Col>\n\n                    </FormSectionContainer>\n\n                    <FormSectionContainer span={24} gutter={16}>\n\n                        {/*<Col span={21} className=\"mt-5\">\n                            <div className=\"text-center\">\n                              <input type=\"checkbox\" id=\"terms&condtion\" onChange={handleCheck}  defaultChecked={boxChanged}/> \n                              <label className=\"ml-2\" htmlFor=\"terms&condtion\"> I agree to the <a href=\"javascript:void(0)\" onClick={ showModal}>Terms & Condtions</a> </label>\n                            </div>\n                        </Col>*/}\n\n                            <Col span={21} className=\"mt-3\">\n                                <Button htmlType = \"submit\" className=\"app-btn\" type=\"primary\">\n                                    Next<span></span>\n                                </Button>\n                            </Col>\n                              \n                           <Col className=\"text-center mt-3\" span={21}>         \n                              <Link className=\"linkColor app-link font-weight-normal\" to='/login'>   \n                                  Already have an account? Sign In.\n                              </Link>\n                             </Col>\n\n\n                    </FormSectionContainer>\n                </Form>\n            </div>\n            \n        </Container>\n\n    )\n}\n\nconst Container = styled(Col)`\n  display: flex;\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 20px;\n  justify-content:center;\n  flex-direction: column;\n  background-color:transparent;\n\n\n`;\n\n/*const Image = styled.img`\n  margin-left: 30px;\n`;*/\n\nconst FormSectionContainer = styled(Row)`\n  width: 100%;\n  margin-bottom:none;\n\n  @media screen and (max-width: 763px) {\n      display:block !important;\n      .ant-col-12{\n          width:100% !important;\n          max-width:none !important;\n      }\n}\n`;\n\nconst TerminaryRow = styled(Row)`\n      display: flex !important;\n    flex-direction: column  !important;\n    align-items: baseline  !important;\n    align-content: center  !important;\n  @media screen and (max-width: 763px) {\n      display:block !important;\n      .ant-col-12{\n          width:100% !important;\n          max-width:none !important;\n      }\n}\n`;\n\n\nconst LanguageSelect = styled(Select)`\n\n  border:0px none;\n  \n\n  & .ant-select-selection-search {\n    width:360px;\n    @media screen and (max-width: 763px) {\n        width:260px;\n    }\n  }\n\n`\nconst AdditionalLanguageSelect = styled(Select)`\n\n  border:0px none;\n  \n\n  & .ant-select-selection-search {\n    width:360px;\n    @media screen and (max-width: 763px) {\n        width:260px;\n    }\n  }\n\n`\n\nconst InputWithLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  marginRight: 30px;\n  position: relative;\n  &:last-child {\n    marginRight: 0;\n  }\n\n\n\n  & input{\n    height:50px;\n    padding:10px;\n   \n    margin-top: 15px;\n    \n    margin-top:15px;\n    margin-left:50px;\n  }\n  & .react-tel-input .form-control {\n    height:50px; \n    border:0px none;\n    width:70% !important;\n    background:transparent;\n    border-radius: 0px;\n    border-bottom : 2px solid #B2B7BC; \n  }\n\n  & .react-tel-input .selected-flag {\n    background:${props => props.background}\n    border: 1px solid #B2B7BC;\n    border-left: none;\n    border-right: none;\n    border-top: none;\n  }\n  }\n  & .react-tel-input .flag-dropdown {\n    background:transparent;\n    border: 0px none;\n    bottom :1px;\n  }\n\n`;\n\nexport default TechSignup;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\techSignup.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "UploadResume.js",
                                                                    "fileData": "import { Upload, message , notification,} from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport React, { useState } from 'react';\n\nimport { useUser } from '../../../../context/useContext';\nimport { SERVER_URL } from '../../../../constants';\nimport * as TechnicianService from '../../../../api/technician.api';\nimport { useAuth } from '../../../../context/authContext';\nimport { Button } from 'react-bootstrap';\nimport mixpanel from 'mixpanel-browser';\nconst UploadResume = ()=>{\n  const {user} = useUser()\n  const {refetch} = useAuth();\n  const [fileList, setFileList] = useState([]);\n  const handleNext = async()=>{\n    if(user){\n      mixpanel.identify(user.email);\n      mixpanel.track('Technician- Click Next button from Upload Resume Page',{ 'Email': user.email });\n    }\n    await TechnicianService.updateTechnician(user.technician.id,{registrationStatus:'interview_result'})\n    window.location.href = \"/\"\n  }\n\n  const openNotificationWithIcon = (nType, header, nMessage) => {\n    notification[nType]({\n      message: header,\n      description: nMessage,\n    });\n  };\n  const fileTypes = '.png, .jpg, .jpeg, .pdf, .doc';\n  const { Dragger } = Upload;\n  let fileName = `${user.id}_resume`\n  const props = {\n    name: 'file',\n    accept:fileTypes,\n    multiple: false,\n    fileList,\n    action: `${SERVER_URL}/api/uploads`,\n    data:{\"user\":`${fileName}` },\n    maxCount :1,\n    beforeUpload: file => {\n      console.log(\"file :::::\",file)\n      if(fileList.length >= 1){\n        openNotificationWithIcon('error', 'Warning', 'Only one file is allowed. Please delete remove the previous one first');\n        return false;\n      }\n      if (\n        !(\n          file.type === 'image/jpeg'\n          || file.type === 'application/pdf'\n          || file.type === 'image/png'\n          || file.type === 'image/jpg'\n          || file.type === 'application/msword'\n        )\n      ) {\n        openNotificationWithIcon('error', 'Warning', 'File Type Not Supported');\n        return false\n      }\n      if (file.size / 1048576 > 10) {\n        openNotificationWithIcon('error', 'Warning', 'File should be smaller than 10mb');\n        return false;\n      }\n    },\n    async onChange(info) {\n      const { status } = info.file;\n      if (status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (status === 'uploading') {\n        setFileList([info.file]);\n      }\n      if (status === 'done') {\n        if(user){\n          mixpanel.identify(user.email);\n          mixpanel.track('Technician- Resume Uploaded',{ 'Email': user.email });\n        }\n          message.success(`${info.file.name} file uploaded successfully.`);\n          await TechnicianService.updateTechnician(user.technician.id,{resume:`${fileName}-.${info.file.name.split('.').pop()}`,registrationStatus:'interview_result'})\n          refetch()\n          window.location.href = \"/\"\n      } else if (status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n    onRemove (){\n      setFileList([])\n    }\n  };\n\n  return (\n      <>\n        <div className=\"col-8 mx-auto\">\n            <h1>You're almost done!</h1>\n            <h5>Please upload your work resume or CV below. </h5>\n             <Dragger {...props}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">Click  this area to upload your resume</p>\n            </Dragger>\n        </div>\n        <Button className=\"btn app-btn mt-3\" onClick={handleNext}>\n          <span />\n            Next\n        </Button>\n      </>\n    )\n\n}\nexport default UploadResume;",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\UploadResume.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "videoPopup.js",
                                                                    "fileData": "import React from 'react';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ReactPlayer from 'react-player/lazy';\n\nconst VideoPopup = ({ selectedVideo, setSelectedVideo }) => {\n  const handleCloseVideo = () => {\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n    });\n  };\n\n  const handleEnd = () => {\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n      isComplete: true,\n    });\n  };\n  const handleCancel = () => {\n    console.log(\"aseasf\", selectedVideo);\n    setSelectedVideo({\n      ...selectedVideo,\n      play: false,\n      isComplete: false,\n    });\n  };\n\n  return (\n    <Modal\n      className = \"video-modal\"\n      visible={selectedVideo.play}\n      title={selectedVideo.title}\n      onOk={handleCloseVideo}\n      onCancel={handleCancel}\n      cancelButtonProps={{ style: { display: 'none' } }}\n    >\n      <VideoPlayer\n        url={selectedVideo.url}\n        playing={selectedVideo.play}\n        controls=\"true\"\n        onEnded={handleEnd}\n      />\n    </Modal>\n  );\n};\n\nVideoPopup.propTypes = {\n  selectedVideo: PropTypes.object,\n  setSelectedVideo: PropTypes.func,\n};\n\nVideoPopup.defaultProps = {\n  selectedVideo: {},\n  setSelectedVideo: () => {},\n};\n\nconst VideoPlayer = styled(ReactPlayer)`\n  width: 100% !important;\n  height: 100% !important;\n  position: relative;\n  padding-bottom: 56%;\n  padding-top: 10px;\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nexport default VideoPopup;\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\videoPopup.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WelcomeToGeekerTwo.js",
                                                                    "fileData": "import React, {useEffect, useState} from 'react';\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport FooterBtns from \"components/FooterBtns\"\nimport Dropdown from \"components/Dropdown\"\nimport {FaFacebookF,FaTwitter,FaLinkedinIn} from \"react-icons/fa\";\nimport TimezoneSelect, { allTimezones } from \"react-timezone-select\";\nimport 'react-phone-input-2/lib/high-res.css'\nimport { languages } from '../../../../constants';\nimport * as Techapi from '../../../../api/technician.api';\nimport * as UserApi from '../../../../api/users.api';\nimport { openNotificationWithIcon } from '../../../../utils';\nimport mixpanel from 'mixpanel-browser';\nimport {useTools} from '../../../../context/toolContext';\n\nconst WelcomeToGeekerTwo = (\n    {\n    onNext, \n    onPrev, \n    setShowProgress,\n    timezone,\n    setTimezoneValue,\n    language,\n    setLanguage,\n    additionalLanguage,\n    setAdditionalLanguage,\n    setProgressBarPercentage,\n    setReff_by,\n    reff_by,\n    setLanguageDropdownValue,\n    languageDropdownValue,\n    user,\n    refetch,\n    setTimezone\n    })=>{\n\n    // const [socialDiv,setSocialDiv] = useState(true);\n    const [showSpinner, setShowSpinner] = useState(false)\n    const {getCountryCategory} = useTools();\n\n    useEffect(()=>{\n        setProgressBarPercentage(20)\n        setShowProgress(true)\n        refetch()\n    },[])\n    \n    useEffect(()=>{\n        if(user && user.technician.language){\n            let temp = user.technician.additionalLanguage\n            temp.unshift(user.technician.language)\n            setLanguageDropdownValue(temp)\n        }\n        if(user && user.timezone){\n            setTimezone(user.timezone)\n        }\n        if(user && user.referred_by){\n            setReff_by(user.referred_by)\n        }\n    },[user])\n\n    const saveForLater = async ()=>{\n        let category = getCountryCategory(timezone)\n        let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{language:language,additionalLanguage:additionalLanguage, commissionCategory:category,})\n        const data = {\n            userId: user.id,\n            timezone: user.timezone,\n            referred_by: reff_by,\n        }\n        let timeZoneUpdate = await UserApi.updateUser(data)\n        if(techUpdate && timeZoneUpdate){\n            openNotificationWithIcon('success', 'Success', 'Technician data updated successfully for later.') ;  \n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician - saved data (language, timezone and reffered by) for later');\n            // mixpanel code//\n        }\n        \n    }\n\n    /**\n    * Function that handles the next button after  the registration and update the tech with timeZone language and reffered by \n    * @author : Kartar\n    **/\n\n    const onHandelSubmit = async (value) =>{\n\n        if(!language ) {openNotificationWithIcon('error', 'Error', 'Please select language.') ;\n            return\n        }\n        setShowSpinner(true)\n        let category = getCountryCategory(timezone)\n        let techUpdate = await Techapi.updateTechnicianWithParams( user.technician.id ,{language:language,additionalLanguage:additionalLanguage, registrationStatus: \"select_softwares\", commissionCategory:category})\n        const data = {\n            userId: user.id,\n            timezone: user.timezone,\n            referred_by: reff_by,\n        }\n        let timeZoneUpdate = await UserApi.updateUser(data)\n        if(techUpdate && timeZoneUpdate){\n            openNotificationWithIcon('success', 'Success', 'Technician data updated successfully.') ;  \n            // mixpanel code//\n            mixpanel.identify(user.email);\n            mixpanel.track('Technician - submitted language, timezone and reffered by and proceeded to next form');\n            // mixpanel code//\n        }\n        onNext()\n    }\n\n\n    // const handleSocialDiv = () => { \n    //     setSocialDiv(false)\n    // };\n\n    useEffect(()=>{\n        if(languageDropdownValue.length > 0){\n            setLanguage(languageDropdownValue[0])\n        }\n        if(languageDropdownValue.length > 1){\n          let additionalLangArr = []\n          for (const key in languageDropdownValue) {\n            additionalLangArr.push(languageDropdownValue[key]);  \n          }\n          additionalLangArr.shift()\n          setAdditionalLanguage(additionalLangArr)\n        }\n    },[languageDropdownValue])\n\n    return (\n        \n      <div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <HeadingAndSubHeading heading={\"Welcome to Geeker\"} subHeading={\"We\u2019re excited to have you here! We\u2019re always looking for talented techs like you.\"} />\n       <form style={{width: \"100%\", maxWidth: \"428px\"}} onSubmit={ onHandelSubmit }>\n        <div className='lang'>\n           <div className='label-div '>\n               <label className='language-label'>Language</label>\n           </div>\n           <div className=\"d-sm-flex justify-content-sm-center lang-resp lang-div\">\n                <Dropdown \n                    placeholder={\"English\"} \n                    value={languageDropdownValue}\n                    className=\"lang-style\" \n                    name={'languages'} \n                    opts={languages} \n                    style={{width: \"100%\",maxWidth:\"428px\"}} \n                    setLanguageDropdownValue={setLanguageDropdownValue}\n                />\n           </div>\n        </div>\n\n\n        <div className='time'  >\n            <div className='label-div '>\n                <label className='language-label'>Time Zone</label>\n           </div>\n            <div className=\"d-sm-flex justify-content-sm-center timeContainer \" >\n                <TimezoneSelect\n                    value={timezone}\n                    onChange={setTimezoneValue}\n                    timezones={{\n                        ...allTimezones\n                    }}\n                    className = \"mb-1 pl-0\"\n                    id=\"tech-timezone\"\n                    />\n            </div>\n        </div>\n\n        {/* {  socialDiv  ? (  */}\n            <div className='social-div'>\n                <div className='label-div'>\n                    <label className='language-label'>How did you hear about us</label>\n                </div>\n                <div className=\"d-flex  justify-content-between flex-wrap\">\n                    \n                    <div onClick={()=>{setReff_by(\"facebook\")}} className={`d-flex align-items-center  icon-social justify-content-center round-btn-selector-social cursor-pointer ${reff_by === \"facebook\" ? \"active-refff-by\" : \"\"}`}>\n                        <FaFacebookF  className='social-Icon'/>\n                    </div>\n\n                    <div onClick={()=>{setReff_by(\"twitter\")}}  className={`d-flex align-items-center  icon-social justify-content-center round-btn-selector-social cursor-pointer ${reff_by === \"twitter\" ? \"active-refff-by\" : \"\"}`}>\n                        <FaTwitter className='social-Icon '/>\n                    </div>\n\n                    <div onClick={()=>{setReff_by(\"linkedin\")}} className={`d-flex align-items-center  icon-social justify-content-center round-btn-selector-social cursor-pointer ${reff_by === \"linkedin\" ? \"active-refff-by\" : \"\"}`}>\n                        <FaLinkedinIn className='social-Icon'/>\n                    </div>\n\n                    <div  onClick={()=>{setReff_by(\"friend\")}} className={`d-flex align-items-center  social-btn justify-content-center round-btn-selector-social cursor-pointer ${reff_by === \"friend\" ? \"active-refff-by\" : \"\"}`} >\n                        <span className=\"friend-btn\">\n                        Friend\n                        </span>\n                    </div>\n\n                    <div  onClick={()=>{setReff_by(\"other\")}} className={` d-flex align-items-center justify-content-center round-btn-selector-social  social-btn cursor-pointer ${reff_by === \"other\" ? \"active-refff-by\" : \"\"} `} >\n                    <span className=\"friend-btn\">\n                        Other\n                        {/* <button onClick={handleSocialDiv} /> */}\n\n                        </span>\n                    </div>\n\n                </div>\n            </div>\n            {/* ) :\n            <div className='numberInput' style={{width:\"100%\",maxWidth:\"428px\"}}>\n                <div className='label-div '>\n                    <label className='language-label'>How did you hear about us</label>\n                </div>\n                <div className=\"d-sm-flex justify-content-sm-center \">\n                <input type=\"text\" style={{boxShadow: \"inset 0px 6px 8px #EEF5FA\" ,width:\"100%\"} } className=\"input-field\" placeholder='Active Text' />\n\n                </div>  \n            </div>\n\n         } */\n        }\n        </form>\n       \n        <FooterBtns onPrev={onPrev} saveForLater={saveForLater} onNext={onHandelSubmit} showSpinner={showSpinner} hidePrevBtn={'yes'} />\n     </div>\n    )\n}\n\nexport default WelcomeToGeekerTwo",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\WelcomeToGeekerTwo.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WhatIsYourSpeciality.js",
                                                                    "fileData": "import Dropdown from \"components/Dropdown\"\nimport FooterBtns from \"components/FooterBtns\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport React, { useState, useEffect } from \"react\"\nimport SoftwareCardTechOnboarding from \"../../../../components/SoftwareCardTechOnboarding\"\nimport * as SoftwareApi from '../../../../api/software.api';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { openNotificationWithIcon } from \"utils\"\nimport Loader from \"../../../../components/Loader\";\nimport mixpanel from 'mixpanel-browser';\nimport {EmailOutlook, ITSupport} from \"../../../../constants\"\n\nconst WhatIsYourSpeciality = ({onNext, onPrev, setShowProgress, setProgressBarPercentage, setExpertiseArrselected, setOtherSoftwareSelected, absentSoftwareSelected, setAbsentSoftwareSelected, otherSoftwareSelected, register, expertiseArrselected, user, refetch,setCurrentStep}) =>{\n\n    const [softwareList, setSoftwareList] = useState([]);\n    const [additionalSoftwareList, setAdditionalSoftwareList] = useState([]);\n    const [showSpinner, setShowSpinner] = useState(false)\n    const [showLoader, setShowLoader] = useState(true);\n    const [otherInOtherSelected, setOtherInOtherSelected] = useState(false);\n    let otherSoftwareOption = {\n        \"name\": \"Other\",\n        \"blob_image\": \"https://freepngimg.com/thumb/software/26785-9-software-transparent.png\",\n        \"id\": \"other_software\"\n    }\n \n    useEffect(()=>{\n        (async () => {\n            const softwareListResponse = await SoftwareApi.getSoftwareList()\n            console.log(\"Software List : \", softwareListResponse)\n            if(softwareListResponse && softwareListResponse.data){\n                setSoftwareList(softwareListResponse.data)\n            }\n            setShowLoader(false)\n        })();\n        (async () => {\n            const additionalSoftwareListResponse = await SoftwareApi.getOtherSoftwareList();\n            console.log('Addtional Software List : ',additionalSoftwareListResponse)\n            let tempOtherSoftwares = [{...otherSoftwareOption}]\n            if (additionalSoftwareListResponse && additionalSoftwareListResponse.data) {\n                tempOtherSoftwares = [\n\t\t\t\t\t...tempOtherSoftwares,\n\t\t\t\t\t...additionalSoftwareListResponse.data.filter(\n\t\t\t\t\t  (software) => software.status === 'Active'\n\t\t\t\t\t),\n\t\t\t\t  ];\n                setAdditionalSoftwareList(tempOtherSoftwares)   \n            }\n          })();\n        setProgressBarPercentage(30)\n        setShowProgress(true)\n        refetch()   \n    },[])\n\n    useEffect(() => {\n      if(otherSoftwareSelected.includes(\"other_software\")) setOtherInOtherSelected(true)\n      else setOtherInOtherSelected(false)\n    }, [otherSoftwareSelected])\n    \n\n    useEffect(()=>{\n        if(user.technician.otherSoftwares.length > 0) {\n            let otherSoftwares = user.technician.otherSoftwares\n            if(user.technician.absentSoftwares && user.technician.absentSoftwares.length > 0) otherSoftwares.push(otherSoftwareOption.id)\n            setOtherSoftwareSelected(otherSoftwares)\n            setAbsentSoftwareSelected(user.technician.absentSoftwares)\n        }\n        if(user.technician.expertise.length > 0){\n            let temp = user.technician.expertise\n            for (var x in temp){\n                temp[x].id = temp[x].software_id\n            }\n            setExpertiseArrselected(temp)\n        }\n    },[user])\n    const handleSwCardClick = async(software) =>{   \n        if(!expertiseArrselected.find(item => item.id === software.id)){\n            const techUpdateRes =  await TechnicianApi.retrieveTechnician(register.technician.id)\n            let examStatus;\n            \n             techUpdateRes.testHistory.filter(function (item) {\n                if(item.software_id === software.id)\n                {\n                    openNotificationWithIcon('info', 'Info', 'You are already given a exam')\n                    setTimeout(() => {\n                        setCurrentStep(7);\n\n                    }, 3000)\n                }\n               \n      })\n    \n            let temp = [...expertiseArrselected]\n      \n            software[\"software_id\"]=software.id\n            temp.push(software)\n            if(software.id === ITSupport) // checking if IT support is selected by tech.\n            {\n                let emailOutlookSoftwareData = softwareList.find((item)=> item.id === EmailOutlook) //Fetching software data for Email / Outlook\n                emailOutlookSoftwareData[\"software_id\"] = EmailOutlook\n                temp.push(emailOutlookSoftwareData)\n            }\n            setExpertiseArrselected(temp)\n        } else {\n            let temp = [...expertiseArrselected]\n            if(software.id === ITSupport)// checking if IT support is selected by tech.\n            {\n                temp = temp.filter(item => item.id !== EmailOutlook) // Removing Email / Outlook\n            }\n            temp = temp.filter(item => item.id !== software.id)\n            setExpertiseArrselected(temp)\n        }        \n    }\n    \n    const saveForLater = async ()=>{\n        if(register){\n            let refinedOtherSoftwareSelected = otherSoftwareSelected.filter(otherSof => otherSof !== \"other_software\")\n            const techUpdateRes = await TechnicianApi.updateTechnician(register.technician.id, {\n                expertise:expertiseArrselected,\n                otherSoftwares:refinedOtherSoftwareSelected,\n                absentSoftwares:otherInOtherSelected ? absentSoftwareSelected : [],\n            })\n            if(techUpdateRes){\n                openNotificationWithIcon('success', 'Success', 'Software(s) saved for later.') ;  \n                // mixpanel code//\n                mixpanel.identify(user.email);\n                mixpanel.track('Technician - saved selected softwares (if any) for later');\n                // mixpanel code//\n            }\n        }\n    }\n\n    const handleNextBtn = async () => {\n        if( expertiseArrselected.length > 0 ){\n            setShowSpinner(true)\n            if(register){\n                let refinedOtherSoftwareSelected = otherSoftwareSelected.filter(otherSof => otherSof !== \"other_software\")\n                const updateTechWithSoftwareResponse = await TechnicianApi.updateTechnician(register.technician.id, {\n                    expertise:expertiseArrselected,\n                    otherSoftwares:refinedOtherSoftwareSelected,\n                    absentSoftwares:otherInOtherSelected ? absentSoftwareSelected : [],\n                    registrationStatus : \"level_of_expertise\",\n                })\n                if(updateTechWithSoftwareResponse){\n                    openNotificationWithIcon('success', 'Success', 'Software(s) saved.') ;  \n                    // mixpanel code//\n                    mixpanel.identify(user.email);\n                    mixpanel.track('Technician - submitted selected softwares and proceeded to next form');\n                    // mixpanel code//\n                }\n            }\n            onNext()\n        }else{\n            openNotificationWithIcon('error', 'Error', \"Please select atleast one software to continue!\")\n        }\n    }\n\n    if(showLoader) return (<Loader />) \n    return(<div className=\"d-flex justify-content-center align-items-center flex-column\">\n        <HeadingAndSubHeading heading={\"What\u2019s your speciality?\"} subHeading={\"YES. We really care! Why? Because we\u2019re passionate about helping you do the jobs you love. Your customers win, and YOU win! So don\u2019t be shy :)\"} />\n\n        {softwareList.map((software, index)=>{\n            if(software.subSoftware.length===0 && software.id !== EmailOutlook){ //if software is not a parent software && Software !== Email / Outlook\n                return (<div key={index} className={\"d-flex align-items-center justify-content-center software-outer-div flex-wrap\" } >\n                <div onClick={()=>handleSwCardClick(software)} className=\"inside-div-input-container\">\n                    <SoftwareCardTechOnboarding softwareName={software.name} imgSrc={software.blob_image} active={expertiseArrselected.find(item => item.id === software.id)} />\n                </div>\n                {/* <div className=\"inside-div-input-container\">\n                    {selectedSoftware.includes(software.id) && <Dropdown name={'sub_option'} opts={software.sub_option} placeholder={\"Please select further skills\"} />}\n                </div> */}\n            </div>)\n            }\n        })}\n\n        {/* For additional softwares */}\n        <div className=\"software-outer-div d-flex align-items-center justify-content-center\">\n            <Dropdown\n              placeholder={\"Additional Softwares\"}\n              opts={additionalSoftwareList}\n              name={'additional_softwares'}\n              style={{width: \"100%\", maxWidth: \"428px\"}}\n              setOtherSoftwareSelected={setOtherSoftwareSelected}\n              value={otherSoftwareSelected}\n            />\n        </div>\n        {otherInOtherSelected && <div className=\"software-outer-div d-flex align-items-center justify-content-center\">\n            <Dropdown\n              placeholder={\"Other Softwares\"}\n              name={'absent_softwares'}\n              style={{width: \"100%\", maxWidth: \"428px\"}}\n              setAbsentSoftwareSelected={setAbsentSoftwareSelected}\n              value={absentSoftwareSelected}\n            />\n        </div>}\n\n        {/* Buttons */}\n        <FooterBtns onPrev={onPrev} onNext={handleNextBtn} saveForLater={saveForLater} showSpinner={showSpinner} />\n    </div>)\n}\n\nexport default WhatIsYourSpeciality\n\n",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\WhatIsYourSpeciality.js"
                                                                },
                                                                {
                                                                    "type": "file",
                                                                    "name": "WhatIsYourSpeciality2.js",
                                                                    "fileData": "import React , {useState, useEffect} from \"react\"\n// import NewSquareBtn from \"components/NewSquareBtn\"\nimport RoundSelectorBtn from \"components/RoundSelectorBtn\"\nimport SoftwareStrength from \"components/SoftwareStrength\"\nimport HeadingAndSubHeading from \"components/HeadingAndSubHeading\"\nimport FooterBtns from \"components/FooterBtns\"\nimport * as SoftwareApi from '../../../../api/software.api';\nimport * as TechnicianApi from '../../../../api/technician.api';\nimport { openNotificationWithIcon } from \"utils\"\nimport Loader from '../../../../components/Loader';\nimport mixpanel from 'mixpanel-browser';\nimport {EmailOutlook} from \"../../../../constants\"\n\nconst WhatIsYourSpeciality2 = ({onNext, onPrev, setShowProgress, setProgressBarPercentage, setExpertiseArrselected, expertiseArrselected, register, expertiseLevel, setExpertiseLevel, user, refetch }) => {\n\n    const [selectedsoftwareList, setSelectedSoftwareList] = useState([]);\n    const [showLoader, setShowLoader] = useState(true);\n    const [showSpinner, setShowSpinner] = useState(false)\n\n    useEffect(()=>{\n        (async () => {\n            const softwareListResponse = await SoftwareApi.getSoftwareList()\n            let selectedSoftware = []\n            if(softwareListResponse && softwareListResponse.data){\n                for (var x in expertiseArrselected){\n                    for (var y in softwareListResponse.data){\n                        let temp = {}\n                        if(softwareListResponse.data[y].id === expertiseArrselected[x].id){\n                        // if(softwareListResponse.data[y].id === expertiseArrselected[x].software_id){\n                            temp = softwareListResponse.data[y]\n                            selectedSoftware.push(temp)\n                        }\n                    }\n                }\n                setSelectedSoftwareList(selectedSoftware)\n                setShowLoader(false)\n            }\n        })();\n        setShowProgress(true)\n        setProgressBarPercentage(45)\n        refetch()\n        setExpertiseLevel(user.technician.expertise)\n        setExpertiseArrselected(user.technician.expertise)\n    },[])\n\n    useEffect(()=>{\n        (async ()=>{\n            setShowLoader(true)\n            const softwareListResponse = await SoftwareApi.getSoftwareList()\n            let selectedSoftware = []\n            if(softwareListResponse && softwareListResponse.data){\n                for (var x in user.technician.expertise){\n                    for (var y in softwareListResponse.data){\n                        let temp = {}\n                        if(softwareListResponse.data[y].id === user.technician.expertise[x].software_id){\n                            temp = softwareListResponse.data[y]\n                            selectedSoftware.push(temp)\n                        }\n                    }\n                }\n                setSelectedSoftwareList(selectedSoftware)\n                setShowLoader(false)\n            }\n        })();\n        setExpertiseLevel(user.technician.expertise)\n        setExpertiseArrselected(user.technician.expertise)\n    },[user])\n\n    /**\n\t * Following function is used to handle change for experience between \"1-5 Years\" & \"5-10 Years\".\n     * @params =  event and software\n\t * @response : expertiseLevel[]\n\t * @author : Vinit\n\t */\n    const handleYearsOfExpBtn = (event, software) =>{\n        let experience = [...expertiseLevel]\n        let temp = {software_id: software.id, experience: event.currentTarget.innerText, parent: software.parent}\n        if(experience.length > 0){\n            let elementExists = experience.find((item)=> item.software_id === software.id)\n            if(elementExists){\n                let elementIndex = experience.findIndex(item => item.software_id === software.id)\n                let currentEle = experience[elementIndex]\n                if(/[\\n]/.test(event.currentTarget.innerText)){\n                    currentEle.experience = event.currentTarget.innerText.slice(0, event.currentTarget.innerText.length-1);\n                }else{\n                    currentEle.experience = event.currentTarget.innerText\n                }\n                experience.push(currentEle)\n                experience.splice(elementIndex, 1)\n                setExpertiseLevel(experience)\n            }else{\n                experience.push(temp)\n                setExpertiseLevel(experience)    \n            }\n        }else{\n            experience.push(temp)\n            setExpertiseLevel(experience)\n        }\n    }\n\n    /**\n\t * Following function is used to handle change for level of expertise for sub options.\n     * @params =  event and software\n\t * @response : expertiseLevel[]\n\t * @author : Vinit\n\t */\n    const handleStrengthLevel = (event, software) =>{\n        let sub_option = \"\"\n        if(/[\\n]/.test(event.currentTarget.children[0].innerText)){\n            sub_option = event.currentTarget.children[0].innerText.slice(0, event.currentTarget.children[0].innerText.length-1)\n        }else{\n            sub_option = event.currentTarget.children[0].innerText\n        }\n        let experience = [...expertiseLevel]\n        let temp = []\n        let temp2 ={option: sub_option, current_num: event.target.innerText, parent: software.parent}\n        if(experience.length > 0){\n            let elementExists = experience.find(item => item.software_id === software.id)\n            if(elementExists){\n                let elementIndex = experience.findIndex(item => item.software_id === software.id)\n                let currentEle = experience[elementIndex]\n                let optionExists = currentEle.sub_options && currentEle.sub_options.find(item => item.option === sub_option)\n                if(optionExists){\n                    let optionIndex = currentEle.sub_options.findIndex(item => item.option === sub_option)\n                    let currentoption = currentEle.sub_options[optionIndex]\n                    currentoption.current_num = event.target.innerText\n                    experience.push(currentEle)\n                    experience.splice(elementIndex,1)\n                    setExpertiseLevel(experience)\n                }else{\n                    !currentEle.sub_options ? currentEle.sub_options = [] : currentEle.sub_options = currentEle.sub_options\n                    currentEle.sub_options.push(temp2)\n                    experience.push(currentEle)\n                    experience.splice(elementIndex,1)\n                    setExpertiseLevel(experience)\n                }\n            }else{\n                temp.push(temp2)\n                let temp3 = {\n                            software_id: software.id,\n                            sub_options: temp\n                            }\n                experience.push(temp3)\n                setExpertiseLevel(experience)\n            }\n        }else{\n            temp.push(temp2)\n            let temp3 = {\n                        software_id: software.id,\n                        sub_options: temp\n                        }\n            experience.push(temp3)\n            setExpertiseLevel(experience)\n        }\n    }\n\n    const saveForLater = async ()=>{\n        if(register){\n            const expertiseResponse = await TechnicianApi.updateTechnician(register.technician.id, {expertise:expertiseLevel})\n            if(expertiseResponse){\n                openNotificationWithIcon('success', 'Success', \"Softwares experience(s) saved for later.\")\n                // mixpanel code//\n                mixpanel.identify(user.email);\n                mixpanel.track('Technician - saved software expertise level (if any) for later');\n                // mixpanel code//\n            }\n        }\n    }\n\n    const handleNextBtn = async ()=>{\n        if(expertiseLevel.length !== 0 && expertiseLevel.length === expertiseArrselected.length){\n            for(let x in expertiseLevel){\n                if(expertiseLevel[x].software_id !== EmailOutlook)//Excluding Email / Outlook software\n                {\n                    if(!expertiseLevel[x].experience && expertiseLevel[x].sub_options.length === 0){\n                        openNotificationWithIcon('error', 'Error', \"Please provide your experience for all the selected softwares.\")\n                        return\n                    }\n                }\n            }\n            setShowSpinner(true)\n            if(register){\n                const expertiseResponse = await TechnicianApi.updateTechnician(register.technician.id, {expertise:expertiseLevel, registrationStatus:\"availability\"})\n                if(expertiseResponse){\n                    openNotificationWithIcon('success', 'Success', \"Softwares experience updated.\")\n                    // mixpanel code//\n                    mixpanel.identify(user.email);\n                    mixpanel.track('Technician - submitted software expertise level and proceeded to next form');\n                    // mixpanel code//\n                }\n            }\n            onNext()\n        }else{\n            openNotificationWithIcon('error', 'Error', \"Please provide your experience for all the selected softwares.\")\n        }\n    }\n\n  if(showLoader) return(<Loader />)\n    return(\n    <div className=\"d-flex justify-content-center align-items-center flex-column\">\n            <HeadingAndSubHeading heading={\"How familiar are you with this?\"} subHeading={\"\u201c1\u201d is \u201cI'm not very familiar\u201d and \u201c5\u201d is \u201cI do this in my sleep!\u201d (kidding, kidding.)\"} />\n\n        {selectedsoftwareList.map((software)=>{\n            if(software.id !== EmailOutlook){\n                return(\n                    <React.Fragment key={software.id}>\n                    <div className=\"software-name-div d-flex align-items-center specilaity-two-div\">\n                        <img src={software.blob_image} className=\"sw-img\" alt=\"speciality\"/>\n                        <span className=\"software-name-span\">{software.name}</span>\n                    </div>\n\n                    <div className=\"d-flex flex-wrap align-items-center w-60p mt-15 align-baseline specilaity-two-div\">\n                        <span className=\"tech-on-boarding-sub-heading mr-15\">Years of experience</span>\n                        <div className=\"d-flex flex-wrap\">\n                            <div className=\"mr-20\">\n                                <RoundSelectorBtn expertiseLevel={expertiseLevel} software={software} btnTitle={\"1-5 Years\"} clickHandler={(event)=>{handleYearsOfExpBtn(event,software)}} btnName={\"experience\"}/> \n                            </div>\n                            <RoundSelectorBtn expertiseLevel={expertiseLevel} software={software} btnTitle={\"5-10 Years\"}  clickHandler={(event)=>{handleYearsOfExpBtn(event,software)}} btnName={\"experience\"}/> \n                        </div>\n                    </div>\n                    \n                    <div className=\"d-flex align-items-center w-60p mt-10 specilaity-two-div\">\n                        <span className=\"tech-on-boarding-sub-heading\">What are your strength?</span>\n                    </div>\n\n                    <div className=\"strength-outer-div w-60p mt-20 d-flex flex-column specilaity-two-div\">\n                        {software.sub_option.map((sub_option, index)=>{\n                            return <SoftwareStrength title={sub_option} expertiseLevel={expertiseLevel} software={software} key={index} callBack={(event)=>{handleStrengthLevel(event, software)}} />\n                        })}\n                    </div>\n                    </React.Fragment>)\n            }\n        })}\n\n            \n            \n\n        {/* Buttons */}\n        <FooterBtns onPrev={onPrev} onNext={handleNextBtn} saveForLater={saveForLater} showSpinner={showSpinner} />\n    </div>)\n}\n\nexport default WhatIsYourSpeciality2",
                                                                    "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\Register\\steps\\WhatIsYourSpeciality2.js"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "folder",
                                                    "name": "TechnicianUniqueLink",
                                                    "children": [
                                                        {
                                                            "type": "file",
                                                            "name": "index.js",
                                                            "fileData": "import React, { useEffect, useState } from \"react\";\nimport { useLocation } from 'react-router';\nimport mixpanel from 'mixpanel-browser';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport { BiComment, BiShareAlt } from \"react-icons/bi\";\nimport { BsFillCircleFill } from \"react-icons/bs\";\nimport { FiClock } from \"react-icons/fi\";\nimport { FaGreaterThan } from \"react-icons/fa\";\nimport { Rate } from 'antd';\nimport { getOnlineTechnicianById, getTechnicianDetailesByUserId} from '../../../api/technician.api';\nimport * as SoftwareApi from '../../../api/software.api';\nimport { EmailOutlook } from '../../../constants/index'\nimport BasicButton from 'components/common/Button/BasicButton';\nimport Logo from \"components/common/Logo\";\nimport { openNotificationWithIcon } from '../../../utils/index'\nimport { useUser } from '../../../context/useContext';\nimport Loader from '../../../components/Loader';\nimport PlaceholderImage from '../../../assets/users/technicianProfileImage.png'\nimport { useJob } from '../../../context/jobContext';\n\nconst TechnicianUniqueLink = () => {\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const technicianUserId = queryParams.get(\"technicianId\");\n    const [isShown, setIsShown] = useState(false);\n    const [techRating, setTechRating] = useState(5);\n    const [softwareList, setSoftwareList] = useState([]);\n    const [techImage, setTechImage] = useState(\"\");\n    const [techName, setTechName] = useState(\"\");\n    const [isTechOnline, setIsTechOnline] = useState(false);\n    const [totalJobsCountTechnician, setTotalJobsCountTechnician] = useState(\"\");\n    const [showSpinner, setShowSpinner] = useState('');\n    const [techProfileDescription, setTechProfileDescription] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const { user } = useUser();\n    const technicianProfile = queryParams.get('medium') ? queryParams.get('medium') : false;\n    const totalCompletedJobsTechnician =  formatNumber(totalJobsCountTechnician);\n    const { getTotalJobsForTechnicianWithoutAuthenticate } = useJob();\n\n    useEffect(() => {\n        const fetchTechnicianDetails = async () => {\n            try {\n                if (technicianUserId) {\n                    const technicianDetails = await getTechnicianDetailesByUserId(technicianUserId);\n                    const TechData = technicianDetails?.data[0];\n                    // Convert HTML to plain text\n                    const htmlContent = TechData.profileDescription;\n                    setTechProfileDescription(htmlContent);\n                    let totalJobsCount = await getTotalJobsForTechnicianWithoutAuthenticate({ technician: TechData?.id});\n                    setTotalJobsCountTechnician(totalJobsCount)\n                    if (TechData?.rating > 0) {\n                        setTechRating(TechData?.rating);\n                    } else {\n                        setTechRating(5);\n                    }\n                    setTechName(TechData?.user?.firstName + \" \" + TechData?.user?.lastName);\n                    if(TechData && TechData?.profile && TechData?.profile?.image){\n                        setTechImage(TechData?.profile?.image);\n                    }\n\n                    const selectedSoftwareId = TechData?.expertise.map((softId) => softId.software_id);\n                    const allSoftwares = await SoftwareApi.getSoftwareList();\n                    const selectedSoftwareDetails = allSoftwares?.data\n                        .filter((itemX) => selectedSoftwareId.includes(itemX.id))\n                        .filter((itemX) => !EmailOutlook.includes(itemX.id));\n\n                    setSoftwareList(selectedSoftwareDetails);\n                    setIsLoading(false);\n                }\n            } catch (error) {\n                console.log(\"Error occurs while fetching technician details\", error);\n            }\n        };\n        fetchTechnicianDetails();\n    }, [technicianUserId]);\n\n\n    useEffect(() => {\n        async function fetchOnlineTechnician() {\n            if (technicianUserId) {\n                const onlineTech = await getOnlineTechnicianById(technicianUserId);\n                console.log(\"onlineTech\", onlineTech)\n                if (onlineTech.activeUserFound) setIsTechOnline(true);\n                else setIsTechOnline(false);\n            };\n        }\n        fetchOnlineTechnician();\n    }, [technicianUserId]);\n\n    function formatNumber(customerRatings) {\n        if (customerRatings >= 1000 && customerRatings <= 10000) {\n            return Math.floor(customerRatings/1000) + 'k';\n        };\n        return customerRatings;\n    }\n    \n    const handleClick = event => {\n        setIsShown(current => !current);\n    };\n    const clickForJobPost = () => {\n        if (user && user.email) {\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Click connect now btn to post job from technician profile link.');\n        }\n        setShowSpinner('Connect Now');\n        if (technicianUserId) {\n            if (user && user.id) {\n                window.location.href = `/customer/profile-setup?technicianId=${technicianUserId}&medium=${technicianProfile}`\n            } else {\n                window.location.href = `/customer/start-profile-setup?technicianId=${technicianUserId}&medium=${technicianProfile}`\n            };\n        };\n    };\n    const clickForScheduleJob = () => {\n        if (user && user.email) {\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Click Schedule later btn to schedule job from technician profile link.');\n        };\n        setShowSpinner('Schedule later');\n        if (user && user.id) {\n            window.location.href = `/customer/profile-setup?technicianId=${technicianUserId}&medium=${technicianProfile}&applyJobFor=scheduleJob`\n        } else {\n            window.location.href = `/customer/start-profile-setup?technicianId=${technicianUserId}&medium=${technicianProfile}&applyJobFor=scheduleJob`\n        };\n    };\n    const handleImageClick = (SoftId) => {\n        if (user && user.id) {\n            window.location.href = `/customer/profile-setup?technicianId=${technicianUserId}&softwareId=${SoftId}&medium=${technicianProfile}`\n        } else {\n            window.location.href = `/customer/start-profile-setup?technicianId=${technicianUserId}&softwareId=${SoftId}&medium=${technicianProfile}`\n        };\n    };\n    const clickForChatWithGeek = () => {\n        if (user && user.email) {\n            mixpanel.identify(user.email);\n            mixpanel.track('Customer - Click chat geek btn for chat  from technician profile link.')\n        };\n        window.location.href = `/login?message=${technicianUserId}`\n    };\n\n    const shareCopiedLink = async () => {\n        try {\n            await navigator.clipboard.writeText(window.location.href)\n            openNotificationWithIcon('success', 'Link copied.', 'You can share this technician profile link with anybody.');\n        } catch (err) {\n            openNotificationWithIcon('error', 'Copy Failed', 'Sorry, there was an error copying the link.');\n        };\n    };\n\n    if (isLoading) return <Loader height=\"100%\" className={`${isLoading ? 'loader-outer' : 'd-none'}`} />;\n    return (\n        <>\n            <div className=\"parentDiv\">\n                <div className='mainSection gradientBackground'>\n                    <Container>\n                        <Row className=\"mb-4\">\n                            <Col>\n                                <Logo user={user} fromJobFlow={true} />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={5}>\n                                <div className=\"leftSideSection\">\n                                    <div className=\"TechImageSection\">\n                                        {techImage && techImage !== \"false\" ?\n                                            <Image\n                                                src={techImage}\n                                                alt=\"TechnicianImg\"\n                                                roundedCircle\n                                                className=\"tech-profile-Image technicianImageCircleColor\"\n                                            />\n                                            :\n                                            <Image\n                                                src={PlaceholderImage}\n                                                alt=\"PlaceholderImage\"\n                                                className=\"tech-profile-Image\"\n                                            />\n                                        }\n                                        <span className=\"showCircle\"><BsFillCircleFill className={`${isTechOnline ? \"greenCircle\" : \"greyCircle\"}`} /></span>\n                                    </div>\n                                    {/* for mobile Responsive start */}\n                                    <div className=\"TechImageForMobile\">\n                                        {techImage && techImage !== \"false\" ?\n                                            <Image\n                                                src={techImage}\n                                                alt=\"TechnicianImg\"\n                                                roundedCircle\n                                                className=\"techImageMobile technicianImageCircleColor\"\n                                            />\n                                            :\n                                            <Image\n                                                src={PlaceholderImage}\n                                                alt=\"PlaceholderImage\"\n                                                className=\"techImageMobile\"\n                                            />\n                                        }\n                                        <span className=\"showCircleMobile\"><BsFillCircleFill className={`${isTechOnline ? \"greenCircleForMobile\" : \"greyCircleForMobile\"}`} /></span>\n                                    </div>\n                                    {/* for mobile Responsive End here */}\n                                    <div className='softwaresListSection'>\n                                        {softwareList ?\n                                            softwareList.map((experience, index) => {\n                                                return (\n                                                    <Image\n                                                        key={index}\n                                                        src={experience?.blob_image}\n                                                        alt={experience?.name}\n                                                        className={`${user && user?.userType === 'technician' ? \"softwareImage\" : \"softwareListImage\"}`}\n                                                        rounded\n                                                        title={experience?.name}\n                                                        onClick={user && user?.userType === 'technician' ? null : () => { handleImageClick(experience.id) }}\n                                                    />\n                                                );\n                                            })\n                                            : \" \"\n                                        }\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col md={7}>\n                                <div className=\"rightSideSection-heading\">\n                                    <div className=\"profileHeading\">{techName}</div>\n                                    {/* for mobile responsive start here */}\n                                    <div className=\"profileHeadingMobile\">{techName}</div>\n                                    <div className='softwaresListSectionMobile'>\n                                        {softwareList ?\n                                            softwareList.map((experience, index) => {\n                                                return (\n                                                    <Image\n                                                        key={index}\n                                                        src={experience?.blob_image}\n                                                        alt={experience?.name}\n                                                        className=\"softwareListImage\"\n                                                        rounded\n                                                        title={experience?.name}\n                                                        onClick={user && user?.userType === 'technician' ? null : () => { handleImageClick(experience.id) }}\n                                                    />\n                                                );\n                                            })\n                                            : \" \"\n                                        }\n                                    </div>\n                                    {/* for mobile responsive End here */}\n                                    <div className='iconSection'>\n                                        <span title=\"Chat with this geek.\" onClick={user && user?.userType === 'technician' ? null : clickForChatWithGeek} className={`${user && user?.userType === 'technician' ? 'opacity-point-5 pr-2' : \"icons_section pr-2\"}`}><BiComment className=\"reactIcon\" /></span>\n                                        {/* <span disabled title=\"Chat with this geek.\" onClick={user && user?.userType === 'technician' ? null : clickForChatWithGeek} className={`${user && user?.userType === 'technician' ? 'opacity-point-5' : \"icons_section\"}`}><BiComment className=\"reactIcon\" /></span> */}\n                                        <span className=\"icons_section\" title=\"Technician profile link.\" onClick={shareCopiedLink}> <BiShareAlt className=\"reactIcon\" /></span>\n                                    </div>\n                                </div>\n                                <div className={`${totalJobsCountTechnician > 0 ? \"technicianRating\" : \"technicianRatingSection\"} mb-4`}>\n                                    <span className=\"ratingSection\">\n                                        <Rate className=\"starRating\" disabled allowHalf={true} defaultValue={techRating} value={techRating} />\n                                    </span>\n                                    {totalJobsCountTechnician > 0 &&\n                                        <span className=\"customerRating\" title={totalJobsCountTechnician +\" \"+ `Jobs Completed`}>{totalCompletedJobsTechnician} Jobs Completed</span>\n                                    }\n                                </div>\n\n                                {/* for mobile responsive Start here */}\n                                <div className='technicianRatingForMobile mb-2'>\n                                    <span className=\"ratingSectionMobile mb-2\">\n                                        <Rate className=\"starRatingMobile\" disabled allowHalf={true} defaultValue={techRating} value={techRating} />\n                                    </span>\n                                    {totalJobsCountTechnician > 0 &&\n                                        <span className=\"customerRatingMobile\">{totalCompletedJobsTechnician}  Jobs Completed</span>\n                                    }\n                                </div>\n\n                                <div className='iconSectionMobile'>\n                                    <div className=\"iconContentMobile\" onClick={shareCopiedLink}>\n                                        <span> <BiShareAlt className=\"reactIcon\" /></span>\n                                        <span className=\"chatgeek\">Share</span>\n                                    </div>\n                                    <div disabled className={`${user && user?.userType === 'technician' ? 'opacity-point-5' : \"\"} iconContentMobile`} onClick={user && user?.userType === 'technician' ? null : clickForChatWithGeek}>\n                                        <span><BiComment className=\"reactIcon\" /></span>\n                                        <span className=\"chatgeek\">Message</span>\n                                    </div>\n                                    <div className={`${user && user?.userType === 'technician' ? 'opacity-point-5' : \"\"} iconContentMobile`} onClick={user && user?.userType === 'technician' ? null : clickForScheduleJob}  >\n                                        <span><FiClock className=\"reactIcon\" /></span>\n                                        <span className=\"chatgeek\">Schedule</span>\n                                    </div>\n                                </div>\n                                <div className=\"techConnetBtnMobile\">\n                                        <BasicButton disable={user && user?.userType === 'technician' ? true : showSpinner == 'Connect Now' ? true : false} onClick={clickForJobPost} btnTitle={\"Connect Now\"} height={\"50px\"} width={\"166px\"} background={\"#01D4D5\"} color={\"#FFFFFF\"} showSpinner={showSpinner == 'Connect Now' ? true : false} />\n                                </div>\n                                {/* for mobile responsive End here */}\n                                <Row className=\"mb-3\">\n                                    {techProfileDescription && techProfileDescription !== 'undefined' &&\n                                        <Col className=\"technicianReview\">\n                                            <div dangerouslySetInnerHTML={{ __html: techProfileDescription }}></div>\n                                        </Col>\n                                    }\n                                    {/* for mobile responsive Start here */}\n                                    {techProfileDescription && techProfileDescription !== 'undefined' &&\n                                        <div className=\"techReviewAtMobile\">\n                                            <div\n                                                style={{\n                                                    height: isShown ? \"100%\" : \"16%\",\n                                                    transition: '2s',\n                                                    overflow: 'hidden'\n                                                }}\n                                                dangerouslySetInnerHTML={{ __html: techProfileDescription }}\n                                            ></div>\n                                            {!isShown && <span style={{ textAlign: \"center\" }} className=\"readMore\" onClick={handleClick}>Read<FaGreaterThan className=\"greaterthenArrow\" /></span>}\n                                        </div>\n                                    }\n                                    {/* for mobile responsive End here */}\n                                </Row>\n                                <Row>\n                                    <Col className=\"techSideBtn\">\n                                            <>\n                                            <div className={`${user && user?.userType === 'technician' ? \"scheduleOpacity\" : \"\"}`}>\n                                                <BasicButton disable={user && user?.userType === 'technician' ? true : showSpinner == 'Schedule later' ? true : false} onClick={user && user?.userType === 'technician' ? null : clickForScheduleJob} btnTitle={\"Schedule later\"} height={\"60px\"} width={\"223px\"} border={'2px solid'} background={\"#FFFFFF\"} color={showSpinner == 'Schedule later' ? \"rgb(151, 171, 182)\" : \"#01D4D5\"} showSpinner={showSpinner == 'Schedule later' ? true : false} />\n                                            </div>\n\n                                                <BasicButton disable={ user && user?.userType === 'technician' ? true : showSpinner == 'Connect Now' ? true : false} onClick={clickForJobPost} btnTitle={\"Connect Now\"} height={\"60px\"} width={\"223px\"} marginLeft={\"15px\"} background={\"#01D4D5\"} color={\"#FFFFFF\"} showSpinner={showSpinner == 'Connect Now' ? true : false} />\n                                            </>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            </div>\n        </>\n    )\n};\nexport default TechnicianUniqueLink\n\n",
                                                            "filePath": "read_dir\\winkit-master\\winkit-master\\src\\pages\\Technician\\TechnicianUniqueLink\\index.js"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}